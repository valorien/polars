Search.setIndex({"docnames": ["index", "reference/api", "reference/api/polars.Array", "reference/api/polars.Binary", "reference/api/polars.Boolean", "reference/api/polars.Categorical", "reference/api/polars.Config.activate_decimals", "reference/api/polars.Config.load", "reference/api/polars.Config.load_from_file", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.save_to_file", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_auto_structify", "reference/api/polars.Config.set_decimal_separator", "reference/api/polars.Config.set_float_precision", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_fmt_table_cell_list_len", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cell_numeric_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_thousands_separator", "reference/api/polars.Config.set_trim_decimal_zeros", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_delta", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_ipc_stream", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.DataType", "reference/api/polars.Date", "reference/api/polars.Datetime", "reference/api/polars.Decimal", "reference/api/polars.Duration", "reference/api/polars.Enum", "reference/api/polars.Float32", "reference/api/polars.Float64", "reference/api/polars.Int16", "reference/api/polars.Int32", "reference/api/polars.Int64", "reference/api/polars.Int8", "reference/api/polars.LazyFrame.sink_csv", "reference/api/polars.LazyFrame.sink_ipc", "reference/api/polars.LazyFrame.sink_ndjson", "reference/api/polars.LazyFrame.sink_parquet", "reference/api/polars.List", "reference/api/polars.Null", "reference/api/polars.Object", "reference/api/polars.SQLContext.execute", "reference/api/polars.SQLContext.register", "reference/api/polars.SQLContext.register_globals", "reference/api/polars.SQLContext.register_many", "reference/api/polars.SQLContext.tables", "reference/api/polars.SQLContext.unregister", "reference/api/polars.String", "reference/api/polars.StringCache", "reference/api/polars.Struct", "reference/api/polars.Time", "reference/api/polars.UInt16", "reference/api/polars.UInt32", "reference/api/polars.UInt64", "reference/api/polars.UInt8", "reference/api/polars.Unknown", "reference/api/polars.Utf8", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.collect_all_async", "reference/api/polars.concat", "reference/api/polars.disable_string_cache", "reference/api/polars.enable_string_cache", "reference/api/polars.exceptions.ArrowError", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.PolarsError", "reference/api/polars.exceptions.PolarsPanicError", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.read_avro", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_database_uri", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_ipc_stream", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_ods", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_iceberg", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.set_random_seed", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_frame_not_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.assert_series_not_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.create_list_strategy", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.load_profile", "reference/api/polars.testing.parametric.series", "reference/api/polars.testing.parametric.set_profile", "reference/api/polars.threadpool_size", "reference/api/polars.using_string_cache", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.apply", "reference/dataframe/api/polars.DataFrame.approx_n_unique", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.cast", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.count", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.equals", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.find_idx_by_name", "reference/dataframe/api/polars.DataFrame.flags", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.frame_equal", "reference/dataframe/api/polars.DataFrame.gather_every", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_column_index", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.group_by", "reference/dataframe/api/polars.DataFrame.group_by_dynamic", "reference/dataframe/api/polars.DataFrame.group_by_rolling", "reference/dataframe/api/polars.DataFrame.groupby", "reference/dataframe/api/polars.DataFrame.groupby_dynamic", "reference/dataframe/api/polars.DataFrame.groupby_rolling", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_at_idx", "reference/dataframe/api/polars.DataFrame.insert_column", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_columns", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.map_rows", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.max_horizontal", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.mean_horizontal", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.min_horizontal", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace", "reference/dataframe/api/polars.DataFrame.replace_at_idx", "reference/dataframe/api/polars.DataFrame.replace_column", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.rolling", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.rows_by_key", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.select_seq", "reference/dataframe/api/polars.DataFrame.set_sorted", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shift_and_fill", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.sum_horizontal", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.take_every", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_columns_seq", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.DataFrame.with_row_index", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.apply", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/group_by", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/dataframe/plot", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.apply", "reference/expressions/api/polars.Expr.approx_n_unique", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.all", "reference/expressions/api/polars.Expr.arr.any", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.contains", "reference/expressions/api/polars.Expr.arr.count_matches", "reference/expressions/api/polars.Expr.arr.explode", "reference/expressions/api/polars.Expr.arr.first", "reference/expressions/api/polars.Expr.arr.get", "reference/expressions/api/polars.Expr.arr.join", "reference/expressions/api/polars.Expr.arr.last", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.to_list", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.get_categories", "reference/expressions/api/polars.Expr.cat.set_ordering", "reference/expressions/api/polars.Expr.cbrt", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.clip_max", "reference/expressions/api/polars.Expr.clip_min", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.cot", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cum_count", "reference/expressions/api/polars.Expr.cum_max", "reference/expressions/api/polars.Expr.cum_min", "reference/expressions/api/polars.Expr.cum_prod", "reference/expressions/api/polars.Expr.cum_sum", "reference/expressions/api/polars.Expr.cumcount", "reference/expressions/api/polars.Expr.cummax", "reference/expressions/api/polars.Expr.cummin", "reference/expressions/api/polars.Expr.cumprod", "reference/expressions/api/polars.Expr.cumsum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.cut", "reference/expressions/api/polars.Expr.degrees", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.base_utc_offset", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.century", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.days", "reference/expressions/api/polars.Expr.dt.dst_offset", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.hours", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.microseconds", "reference/expressions/api/polars.Expr.dt.millennium", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.milliseconds", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.minutes", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.month_end", "reference/expressions/api/polars.Expr.dt.month_start", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.nanoseconds", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.seconds", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.to_string", "reference/expressions/api/polars.Expr.dt.total_days", "reference/expressions/api/polars.Expr.dt.total_hours", "reference/expressions/api/polars.Expr.dt.total_microseconds", "reference/expressions/api/polars.Expr.dt.total_milliseconds", "reference/expressions/api/polars.Expr.dt.total_minutes", "reference/expressions/api/polars.Expr.dt.total_nanoseconds", "reference/expressions/api/polars.Expr.dt.total_seconds", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.eq_missing", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.from_json", "reference/expressions/api/polars.Expr.gather", "reference/expressions/api/polars.Expr.gather_every", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.get", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.hist", "reference/expressions/api/polars.Expr.implode", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first", "reference/expressions/api/polars.Expr.is_first_distinct", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_last", "reference/expressions/api/polars.Expr.is_last_distinct", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.keep_name", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list.all", "reference/expressions/api/polars.Expr.list.any", "reference/expressions/api/polars.Expr.list.arg_max", "reference/expressions/api/polars.Expr.list.arg_min", "reference/expressions/api/polars.Expr.list.concat", "reference/expressions/api/polars.Expr.list.contains", "reference/expressions/api/polars.Expr.list.count_match", "reference/expressions/api/polars.Expr.list.count_matches", "reference/expressions/api/polars.Expr.list.diff", "reference/expressions/api/polars.Expr.list.drop_nulls", "reference/expressions/api/polars.Expr.list.eval", "reference/expressions/api/polars.Expr.list.explode", "reference/expressions/api/polars.Expr.list.first", "reference/expressions/api/polars.Expr.list.gather", "reference/expressions/api/polars.Expr.list.get", "reference/expressions/api/polars.Expr.list.head", "reference/expressions/api/polars.Expr.list.join", "reference/expressions/api/polars.Expr.list.last", "reference/expressions/api/polars.Expr.list.len", "reference/expressions/api/polars.Expr.list.lengths", "reference/expressions/api/polars.Expr.list.max", "reference/expressions/api/polars.Expr.list.mean", "reference/expressions/api/polars.Expr.list.min", "reference/expressions/api/polars.Expr.list.reverse", "reference/expressions/api/polars.Expr.list.sample", "reference/expressions/api/polars.Expr.list.set_difference", "reference/expressions/api/polars.Expr.list.set_intersection", "reference/expressions/api/polars.Expr.list.set_symmetric_difference", "reference/expressions/api/polars.Expr.list.set_union", "reference/expressions/api/polars.Expr.list.shift", "reference/expressions/api/polars.Expr.list.slice", "reference/expressions/api/polars.Expr.list.sort", "reference/expressions/api/polars.Expr.list.sum", "reference/expressions/api/polars.Expr.list.tail", "reference/expressions/api/polars.Expr.list.take", "reference/expressions/api/polars.Expr.list.to_array", "reference/expressions/api/polars.Expr.list.to_struct", "reference/expressions/api/polars.Expr.list.unique", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map", "reference/expressions/api/polars.Expr.map_alias", "reference/expressions/api/polars.Expr.map_batches", "reference/expressions/api/polars.Expr.map_dict", "reference/expressions/api/polars.Expr.map_elements", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.eq", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.ne", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.tree_format", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.meta.write_json", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.name.keep", "reference/expressions/api/polars.Expr.name.map", "reference/expressions/api/polars.Expr.name.prefix", "reference/expressions/api/polars.Expr.name.suffix", "reference/expressions/api/polars.Expr.name.to_lowercase", "reference/expressions/api/polars.Expr.name.to_uppercase", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.ne_missing", "reference/expressions/api/polars.Expr.neg", "reference/expressions/api/polars.Expr.not_", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.peak_max", "reference/expressions/api/polars.Expr.peak_min", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.prefix", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.qcut", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.radians", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.replace", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rle", "reference/expressions/api/polars.Expr.rle_id", "reference/expressions/api/polars.Expr.rolling", "reference/expressions/api/polars.Expr.rolling_apply", "reference/expressions/api/polars.Expr.rolling_map", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.round_sig_figs", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shift_and_fill", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.contains_any", "reference/expressions/api/polars.Expr.str.count_match", "reference/expressions/api/polars.Expr.str.count_matches", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.extract_groups", "reference/expressions/api/polars.Expr.str.find", "reference/expressions/api/polars.Expr.str.json_decode", "reference/expressions/api/polars.Expr.str.json_extract", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.len_bytes", "reference/expressions/api/polars.Expr.str.len_chars", "reference/expressions/api/polars.Expr.str.lengths", "reference/expressions/api/polars.Expr.str.ljust", "reference/expressions/api/polars.Expr.str.lstrip", "reference/expressions/api/polars.Expr.str.n_chars", "reference/expressions/api/polars.Expr.str.pad_end", "reference/expressions/api/polars.Expr.str.pad_start", "reference/expressions/api/polars.Expr.str.parse_int", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.replace_many", "reference/expressions/api/polars.Expr.str.reverse", "reference/expressions/api/polars.Expr.str.rjust", "reference/expressions/api/polars.Expr.str.rstrip", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip", "reference/expressions/api/polars.Expr.str.strip_chars", "reference/expressions/api/polars.Expr.str.strip_chars_end", "reference/expressions/api/polars.Expr.str.strip_chars_start", "reference/expressions/api/polars.Expr.str.strip_prefix", "reference/expressions/api/polars.Expr.str.strip_suffix", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.to_date", "reference/expressions/api/polars.Expr.str.to_datetime", "reference/expressions/api/polars.Expr.str.to_decimal", "reference/expressions/api/polars.Expr.str.to_integer", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_time", "reference/expressions/api/polars.Expr.str.to_titlecase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.json_encode", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.suffix", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.take", "reference/expressions/api/polars.Expr.take_every", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.all_horizontal", "reference/expressions/api/polars.any", "reference/expressions/api/polars.any_horizontal", "reference/expressions/api/polars.apply", "reference/expressions/api/polars.approx_n_unique", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arctan2", "reference/expressions/api/polars.arctan2d", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.arg_where", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cum_count", "reference/expressions/api/polars.cum_fold", "reference/expressions/api/polars.cum_reduce", "reference/expressions/api/polars.cum_sum", "reference/expressions/api/polars.cum_sum_horizontal", "reference/expressions/api/polars.cumfold", "reference/expressions/api/polars.cumreduce", "reference/expressions/api/polars.cumsum", "reference/expressions/api/polars.cumsum_horizontal", "reference/expressions/api/polars.date", "reference/expressions/api/polars.date_range", "reference/expressions/api/polars.date_ranges", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.datetime_range", "reference/expressions/api/polars.datetime_ranges", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.implode", "reference/expressions/api/polars.int_range", "reference/expressions/api/polars.int_ranges", "reference/expressions/api/polars.last", "reference/expressions/api/polars.len", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map", "reference/expressions/api/polars.map_batches", "reference/expressions/api/polars.map_groups", "reference/expressions/api/polars.max", "reference/expressions/api/polars.max_horizontal", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.min_horizontal", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.ones", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.rolling_corr", "reference/expressions/api/polars.rolling_cov", "reference/expressions/api/polars.select", "reference/expressions/api/polars.sql_expr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.sum_horizontal", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.time", "reference/expressions/api/polars.time_range", "reference/expressions/api/polars.time_ranges", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/api/polars.zeros", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/col", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/name", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.cast", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.collect_async", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.count", "reference/lazyframe/api/polars.LazyFrame.describe", "reference/lazyframe/api/polars.LazyFrame.deserialize", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fetch", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.gather_every", "reference/lazyframe/api/polars.LazyFrame.group_by", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic", "reference/lazyframe/api/polars.LazyFrame.group_by_rolling", "reference/lazyframe/api/polars.LazyFrame.groupby", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map", "reference/lazyframe/api/polars.LazyFrame.map_batches", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.null_count", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.rolling", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.select_seq", "reference/lazyframe/api/polars.LazyFrame.serialize", "reference/lazyframe/api/polars.LazyFrame.set_sorted", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.take_every", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.with_row_index", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.apply", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/group_by", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/selectors", "reference/series/aggregation", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.apply", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr.all", "reference/series/api/polars.Series.arr.any", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.contains", "reference/series/api/polars.Series.arr.count_matches", "reference/series/api/polars.Series.arr.explode", "reference/series/api/polars.Series.arr.first", "reference/series/api/polars.Series.arr.get", "reference/series/api/polars.Series.arr.join", "reference/series/api/polars.Series.arr.last", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.to_list", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat.get_categories", "reference/series/api/polars.Series.cat.is_local", "reference/series/api/polars.Series.cat.set_ordering", "reference/series/api/polars.Series.cat.to_local", "reference/series/api/polars.Series.cat.uses_lexical_ordering", "reference/series/api/polars.Series.cbrt", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clip_max", "reference/series/api/polars.Series.clip_min", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cot", "reference/series/api/polars.Series.cum_max", "reference/series/api/polars.Series.cum_min", "reference/series/api/polars.Series.cum_prod", "reference/series/api/polars.Series.cum_sum", "reference/series/api/polars.Series.cummax", "reference/series/api/polars.Series.cummin", "reference/series/api/polars.Series.cumprod", "reference/series/api/polars.Series.cumsum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt.base_utc_offset", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.century", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.days", "reference/series/api/polars.Series.dt.dst_offset", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.hours", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.microseconds", "reference/series/api/polars.Series.dt.millennium", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.milliseconds", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.minutes", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.month_end", "reference/series/api/polars.Series.dt.month_start", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.nanoseconds", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.seconds", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.to_string", "reference/series/api/polars.Series.dt.total_days", "reference/series/api/polars.Series.dt.total_hours", "reference/series/api/polars.Series.dt.total_microseconds", "reference/series/api/polars.Series.dt.total_milliseconds", "reference/series/api/polars.Series.dt.total_minutes", "reference/series/api/polars.Series.dt.total_nanoseconds", "reference/series/api/polars.Series.dt.total_seconds", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.equals", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.gather", "reference/series/api/polars.Series.gather_every", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.implode", "reference/series/api/polars.Series.inner_dtype", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_boolean", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first", "reference/series/api/polars.Series.is_first_distinct", "reference/series/api/polars.Series.is_float", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_integer", "reference/series/api/polars.Series.is_last", "reference/series/api/polars.Series.is_last_distinct", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_numeric", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_temporal", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.is_utf8", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.list.all", "reference/series/api/polars.Series.list.any", "reference/series/api/polars.Series.list.arg_max", "reference/series/api/polars.Series.list.arg_min", "reference/series/api/polars.Series.list.concat", "reference/series/api/polars.Series.list.contains", "reference/series/api/polars.Series.list.count_match", "reference/series/api/polars.Series.list.count_matches", "reference/series/api/polars.Series.list.diff", "reference/series/api/polars.Series.list.drop_nulls", "reference/series/api/polars.Series.list.eval", "reference/series/api/polars.Series.list.explode", "reference/series/api/polars.Series.list.first", "reference/series/api/polars.Series.list.gather", "reference/series/api/polars.Series.list.get", "reference/series/api/polars.Series.list.head", "reference/series/api/polars.Series.list.join", "reference/series/api/polars.Series.list.last", "reference/series/api/polars.Series.list.len", "reference/series/api/polars.Series.list.lengths", "reference/series/api/polars.Series.list.max", "reference/series/api/polars.Series.list.mean", "reference/series/api/polars.Series.list.min", "reference/series/api/polars.Series.list.reverse", "reference/series/api/polars.Series.list.sample", "reference/series/api/polars.Series.list.set_difference", "reference/series/api/polars.Series.list.set_intersection", "reference/series/api/polars.Series.list.set_symmetric_difference", "reference/series/api/polars.Series.list.set_union", "reference/series/api/polars.Series.list.shift", "reference/series/api/polars.Series.list.slice", "reference/series/api/polars.Series.list.sort", "reference/series/api/polars.Series.list.sum", "reference/series/api/polars.Series.list.tail", "reference/series/api/polars.Series.list.take", "reference/series/api/polars.Series.list.to_array", "reference/series/api/polars.Series.list.to_struct", "reference/series/api/polars.Series.list.unique", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.map_dict", "reference/series/api/polars.Series.map_elements", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.not_", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.replace", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rle", "reference/series/api/polars.Series.rle_id", "reference/series/api/polars.Series.rolling_apply", "reference/series/api/polars.Series.rolling_map", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.round_sig_figs", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.scatter", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.series_equal", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_at_idx", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shift_and_fill", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.contains_any", "reference/series/api/polars.Series.str.count_match", "reference/series/api/polars.Series.str.count_matches", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.extract_groups", "reference/series/api/polars.Series.str.find", "reference/series/api/polars.Series.str.json_decode", "reference/series/api/polars.Series.str.json_extract", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.len_bytes", "reference/series/api/polars.Series.str.len_chars", "reference/series/api/polars.Series.str.lengths", "reference/series/api/polars.Series.str.ljust", "reference/series/api/polars.Series.str.lstrip", "reference/series/api/polars.Series.str.n_chars", "reference/series/api/polars.Series.str.pad_end", "reference/series/api/polars.Series.str.pad_start", "reference/series/api/polars.Series.str.parse_int", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.replace_many", "reference/series/api/polars.Series.str.reverse", "reference/series/api/polars.Series.str.rjust", "reference/series/api/polars.Series.str.rstrip", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip", "reference/series/api/polars.Series.str.strip_chars", "reference/series/api/polars.Series.str.strip_chars_end", "reference/series/api/polars.Series.str.strip_chars_start", "reference/series/api/polars.Series.str.strip_prefix", "reference/series/api/polars.Series.str.strip_suffix", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.to_date", "reference/series/api/polars.Series.str.to_datetime", "reference/series/api/polars.Series.str.to_decimal", "reference/series/api/polars.Series.str.to_integer", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_time", "reference/series/api/polars.Series.str.to_titlecase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.json_encode", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.schema", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.take", "reference/series/api/polars.Series.take_every", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.view", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/plot", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql", "reference/testing", "reference/utils"], "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Array.rst", "reference/api/polars.Binary.rst", "reference/api/polars.Boolean.rst", "reference/api/polars.Categorical.rst", "reference/api/polars.Config.activate_decimals.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.load_from_file.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.save_to_file.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_auto_structify.rst", "reference/api/polars.Config.set_decimal_separator.rst", "reference/api/polars.Config.set_float_precision.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_fmt_table_cell_list_len.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cell_numeric_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_thousands_separator.rst", "reference/api/polars.Config.set_trim_decimal_zeros.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_delta.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_ipc_stream.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.DataType.rst", "reference/api/polars.Date.rst", "reference/api/polars.Datetime.rst", "reference/api/polars.Decimal.rst", "reference/api/polars.Duration.rst", "reference/api/polars.Enum.rst", "reference/api/polars.Float32.rst", "reference/api/polars.Float64.rst", "reference/api/polars.Int16.rst", "reference/api/polars.Int32.rst", "reference/api/polars.Int64.rst", "reference/api/polars.Int8.rst", "reference/api/polars.LazyFrame.sink_csv.rst", "reference/api/polars.LazyFrame.sink_ipc.rst", "reference/api/polars.LazyFrame.sink_ndjson.rst", "reference/api/polars.LazyFrame.sink_parquet.rst", "reference/api/polars.List.rst", "reference/api/polars.Null.rst", "reference/api/polars.Object.rst", "reference/api/polars.SQLContext.execute.rst", "reference/api/polars.SQLContext.register.rst", "reference/api/polars.SQLContext.register_globals.rst", "reference/api/polars.SQLContext.register_many.rst", "reference/api/polars.SQLContext.tables.rst", "reference/api/polars.SQLContext.unregister.rst", "reference/api/polars.String.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.Struct.rst", "reference/api/polars.Time.rst", "reference/api/polars.UInt16.rst", "reference/api/polars.UInt32.rst", "reference/api/polars.UInt64.rst", "reference/api/polars.UInt8.rst", "reference/api/polars.Unknown.rst", "reference/api/polars.Utf8.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.collect_all_async.rst", "reference/api/polars.concat.rst", "reference/api/polars.disable_string_cache.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.exceptions.ArrowError.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.PolarsError.rst", "reference/api/polars.exceptions.PolarsPanicError.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_database_uri.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_ipc_stream.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_ods.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_iceberg.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.set_random_seed.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_frame_not_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.assert_series_not_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.create_list_strategy.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.load_profile.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.testing.parametric.set_profile.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.using_string_cache.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.apply.rst", "reference/dataframe/api/polars.DataFrame.approx_n_unique.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.cast.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.count.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.equals.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.find_idx_by_name.rst", "reference/dataframe/api/polars.DataFrame.flags.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.frame_equal.rst", "reference/dataframe/api/polars.DataFrame.gather_every.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_column_index.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.group_by.rst", "reference/dataframe/api/polars.DataFrame.group_by_dynamic.rst", "reference/dataframe/api/polars.DataFrame.group_by_rolling.rst", "reference/dataframe/api/polars.DataFrame.groupby.rst", "reference/dataframe/api/polars.DataFrame.groupby_dynamic.rst", "reference/dataframe/api/polars.DataFrame.groupby_rolling.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_at_idx.rst", "reference/dataframe/api/polars.DataFrame.insert_column.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_columns.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.map_rows.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.max_horizontal.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.mean_horizontal.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.min_horizontal.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace.rst", "reference/dataframe/api/polars.DataFrame.replace_at_idx.rst", "reference/dataframe/api/polars.DataFrame.replace_column.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.rolling.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.rows_by_key.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.select_seq.rst", "reference/dataframe/api/polars.DataFrame.set_sorted.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shift_and_fill.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.sum_horizontal.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.take_every.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_columns_seq.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.DataFrame.with_row_index.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.apply.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/group_by.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/dataframe/plot.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.apply.rst", "reference/expressions/api/polars.Expr.approx_n_unique.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.all.rst", "reference/expressions/api/polars.Expr.arr.any.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.contains.rst", "reference/expressions/api/polars.Expr.arr.count_matches.rst", "reference/expressions/api/polars.Expr.arr.explode.rst", "reference/expressions/api/polars.Expr.arr.first.rst", "reference/expressions/api/polars.Expr.arr.get.rst", "reference/expressions/api/polars.Expr.arr.join.rst", "reference/expressions/api/polars.Expr.arr.last.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.to_list.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.get_categories.rst", "reference/expressions/api/polars.Expr.cat.set_ordering.rst", "reference/expressions/api/polars.Expr.cbrt.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.clip_max.rst", "reference/expressions/api/polars.Expr.clip_min.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.cot.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cum_count.rst", "reference/expressions/api/polars.Expr.cum_max.rst", "reference/expressions/api/polars.Expr.cum_min.rst", "reference/expressions/api/polars.Expr.cum_prod.rst", "reference/expressions/api/polars.Expr.cum_sum.rst", "reference/expressions/api/polars.Expr.cumcount.rst", "reference/expressions/api/polars.Expr.cummax.rst", "reference/expressions/api/polars.Expr.cummin.rst", "reference/expressions/api/polars.Expr.cumprod.rst", "reference/expressions/api/polars.Expr.cumsum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.cut.rst", "reference/expressions/api/polars.Expr.degrees.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.base_utc_offset.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.century.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.days.rst", "reference/expressions/api/polars.Expr.dt.dst_offset.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.hours.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.microseconds.rst", "reference/expressions/api/polars.Expr.dt.millennium.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.milliseconds.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.minutes.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.month_end.rst", "reference/expressions/api/polars.Expr.dt.month_start.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.seconds.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.to_string.rst", "reference/expressions/api/polars.Expr.dt.total_days.rst", "reference/expressions/api/polars.Expr.dt.total_hours.rst", "reference/expressions/api/polars.Expr.dt.total_microseconds.rst", "reference/expressions/api/polars.Expr.dt.total_milliseconds.rst", "reference/expressions/api/polars.Expr.dt.total_minutes.rst", "reference/expressions/api/polars.Expr.dt.total_nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.total_seconds.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.eq_missing.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.from_json.rst", "reference/expressions/api/polars.Expr.gather.rst", "reference/expressions/api/polars.Expr.gather_every.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.get.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.hist.rst", "reference/expressions/api/polars.Expr.implode.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first.rst", "reference/expressions/api/polars.Expr.is_first_distinct.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_last.rst", "reference/expressions/api/polars.Expr.is_last_distinct.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.keep_name.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.all.rst", "reference/expressions/api/polars.Expr.list.any.rst", "reference/expressions/api/polars.Expr.list.arg_max.rst", "reference/expressions/api/polars.Expr.list.arg_min.rst", "reference/expressions/api/polars.Expr.list.concat.rst", "reference/expressions/api/polars.Expr.list.contains.rst", "reference/expressions/api/polars.Expr.list.count_match.rst", "reference/expressions/api/polars.Expr.list.count_matches.rst", "reference/expressions/api/polars.Expr.list.diff.rst", "reference/expressions/api/polars.Expr.list.drop_nulls.rst", "reference/expressions/api/polars.Expr.list.eval.rst", "reference/expressions/api/polars.Expr.list.explode.rst", "reference/expressions/api/polars.Expr.list.first.rst", "reference/expressions/api/polars.Expr.list.gather.rst", "reference/expressions/api/polars.Expr.list.get.rst", "reference/expressions/api/polars.Expr.list.head.rst", "reference/expressions/api/polars.Expr.list.join.rst", "reference/expressions/api/polars.Expr.list.last.rst", "reference/expressions/api/polars.Expr.list.len.rst", "reference/expressions/api/polars.Expr.list.lengths.rst", "reference/expressions/api/polars.Expr.list.max.rst", "reference/expressions/api/polars.Expr.list.mean.rst", "reference/expressions/api/polars.Expr.list.min.rst", "reference/expressions/api/polars.Expr.list.reverse.rst", "reference/expressions/api/polars.Expr.list.sample.rst", "reference/expressions/api/polars.Expr.list.set_difference.rst", "reference/expressions/api/polars.Expr.list.set_intersection.rst", "reference/expressions/api/polars.Expr.list.set_symmetric_difference.rst", "reference/expressions/api/polars.Expr.list.set_union.rst", "reference/expressions/api/polars.Expr.list.shift.rst", "reference/expressions/api/polars.Expr.list.slice.rst", "reference/expressions/api/polars.Expr.list.sort.rst", "reference/expressions/api/polars.Expr.list.sum.rst", "reference/expressions/api/polars.Expr.list.tail.rst", "reference/expressions/api/polars.Expr.list.take.rst", "reference/expressions/api/polars.Expr.list.to_array.rst", "reference/expressions/api/polars.Expr.list.to_struct.rst", "reference/expressions/api/polars.Expr.list.unique.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map.rst", "reference/expressions/api/polars.Expr.map_alias.rst", "reference/expressions/api/polars.Expr.map_batches.rst", "reference/expressions/api/polars.Expr.map_dict.rst", "reference/expressions/api/polars.Expr.map_elements.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.eq.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.ne.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.tree_format.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.meta.write_json.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.name.keep.rst", "reference/expressions/api/polars.Expr.name.map.rst", "reference/expressions/api/polars.Expr.name.prefix.rst", "reference/expressions/api/polars.Expr.name.suffix.rst", "reference/expressions/api/polars.Expr.name.to_lowercase.rst", "reference/expressions/api/polars.Expr.name.to_uppercase.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.ne_missing.rst", "reference/expressions/api/polars.Expr.neg.rst", "reference/expressions/api/polars.Expr.not_.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.peak_max.rst", "reference/expressions/api/polars.Expr.peak_min.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.prefix.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.qcut.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.radians.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.replace.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rle.rst", "reference/expressions/api/polars.Expr.rle_id.rst", "reference/expressions/api/polars.Expr.rolling.rst", "reference/expressions/api/polars.Expr.rolling_apply.rst", "reference/expressions/api/polars.Expr.rolling_map.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.round_sig_figs.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shift_and_fill.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.contains_any.rst", "reference/expressions/api/polars.Expr.str.count_match.rst", "reference/expressions/api/polars.Expr.str.count_matches.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.extract_groups.rst", "reference/expressions/api/polars.Expr.str.find.rst", "reference/expressions/api/polars.Expr.str.json_decode.rst", "reference/expressions/api/polars.Expr.str.json_extract.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.len_bytes.rst", "reference/expressions/api/polars.Expr.str.len_chars.rst", "reference/expressions/api/polars.Expr.str.lengths.rst", "reference/expressions/api/polars.Expr.str.ljust.rst", "reference/expressions/api/polars.Expr.str.lstrip.rst", "reference/expressions/api/polars.Expr.str.n_chars.rst", "reference/expressions/api/polars.Expr.str.pad_end.rst", "reference/expressions/api/polars.Expr.str.pad_start.rst", "reference/expressions/api/polars.Expr.str.parse_int.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.replace_many.rst", "reference/expressions/api/polars.Expr.str.reverse.rst", "reference/expressions/api/polars.Expr.str.rjust.rst", "reference/expressions/api/polars.Expr.str.rstrip.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip.rst", "reference/expressions/api/polars.Expr.str.strip_chars.rst", "reference/expressions/api/polars.Expr.str.strip_chars_end.rst", "reference/expressions/api/polars.Expr.str.strip_chars_start.rst", "reference/expressions/api/polars.Expr.str.strip_prefix.rst", "reference/expressions/api/polars.Expr.str.strip_suffix.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.to_date.rst", "reference/expressions/api/polars.Expr.str.to_datetime.rst", "reference/expressions/api/polars.Expr.str.to_decimal.rst", "reference/expressions/api/polars.Expr.str.to_integer.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_time.rst", "reference/expressions/api/polars.Expr.str.to_titlecase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.json_encode.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.suffix.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.take.rst", "reference/expressions/api/polars.Expr.take_every.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.all_horizontal.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.any_horizontal.rst", "reference/expressions/api/polars.apply.rst", "reference/expressions/api/polars.approx_n_unique.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arctan2.rst", "reference/expressions/api/polars.arctan2d.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.arg_where.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cum_count.rst", "reference/expressions/api/polars.cum_fold.rst", "reference/expressions/api/polars.cum_reduce.rst", "reference/expressions/api/polars.cum_sum.rst", "reference/expressions/api/polars.cum_sum_horizontal.rst", "reference/expressions/api/polars.cumfold.rst", "reference/expressions/api/polars.cumreduce.rst", "reference/expressions/api/polars.cumsum.rst", "reference/expressions/api/polars.cumsum_horizontal.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.date_range.rst", "reference/expressions/api/polars.date_ranges.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.datetime_range.rst", "reference/expressions/api/polars.datetime_ranges.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.implode.rst", "reference/expressions/api/polars.int_range.rst", "reference/expressions/api/polars.int_ranges.rst", "reference/expressions/api/polars.last.rst", "reference/expressions/api/polars.len.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map.rst", "reference/expressions/api/polars.map_batches.rst", "reference/expressions/api/polars.map_groups.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.max_horizontal.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.min_horizontal.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.ones.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.rolling_corr.rst", "reference/expressions/api/polars.rolling_cov.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.sql_expr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.sum_horizontal.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.time.rst", "reference/expressions/api/polars.time_range.rst", "reference/expressions/api/polars.time_ranges.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/api/polars.zeros.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/col.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/name.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.cast.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.collect_async.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.count.rst", "reference/lazyframe/api/polars.LazyFrame.describe.rst", "reference/lazyframe/api/polars.LazyFrame.deserialize.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fetch.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.gather_every.rst", "reference/lazyframe/api/polars.LazyFrame.group_by.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.groupby.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map.rst", "reference/lazyframe/api/polars.LazyFrame.map_batches.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.null_count.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.rolling.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.select_seq.rst", "reference/lazyframe/api/polars.LazyFrame.serialize.rst", "reference/lazyframe/api/polars.LazyFrame.set_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.take_every.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_index.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.apply.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/group_by.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/selectors.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.apply.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.all.rst", "reference/series/api/polars.Series.arr.any.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.contains.rst", "reference/series/api/polars.Series.arr.count_matches.rst", "reference/series/api/polars.Series.arr.explode.rst", "reference/series/api/polars.Series.arr.first.rst", "reference/series/api/polars.Series.arr.get.rst", "reference/series/api/polars.Series.arr.join.rst", "reference/series/api/polars.Series.arr.last.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.to_list.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.get_categories.rst", "reference/series/api/polars.Series.cat.is_local.rst", "reference/series/api/polars.Series.cat.set_ordering.rst", "reference/series/api/polars.Series.cat.to_local.rst", "reference/series/api/polars.Series.cat.uses_lexical_ordering.rst", "reference/series/api/polars.Series.cbrt.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clip_max.rst", "reference/series/api/polars.Series.clip_min.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cot.rst", "reference/series/api/polars.Series.cum_max.rst", "reference/series/api/polars.Series.cum_min.rst", "reference/series/api/polars.Series.cum_prod.rst", "reference/series/api/polars.Series.cum_sum.rst", "reference/series/api/polars.Series.cummax.rst", "reference/series/api/polars.Series.cummin.rst", "reference/series/api/polars.Series.cumprod.rst", "reference/series/api/polars.Series.cumsum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.base_utc_offset.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.century.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.days.rst", "reference/series/api/polars.Series.dt.dst_offset.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.hours.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.microseconds.rst", "reference/series/api/polars.Series.dt.millennium.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.milliseconds.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.minutes.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.month_end.rst", "reference/series/api/polars.Series.dt.month_start.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.nanoseconds.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.seconds.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.to_string.rst", "reference/series/api/polars.Series.dt.total_days.rst", "reference/series/api/polars.Series.dt.total_hours.rst", "reference/series/api/polars.Series.dt.total_microseconds.rst", "reference/series/api/polars.Series.dt.total_milliseconds.rst", "reference/series/api/polars.Series.dt.total_minutes.rst", "reference/series/api/polars.Series.dt.total_nanoseconds.rst", "reference/series/api/polars.Series.dt.total_seconds.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.equals.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.gather.rst", "reference/series/api/polars.Series.gather_every.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.implode.rst", "reference/series/api/polars.Series.inner_dtype.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_boolean.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first.rst", "reference/series/api/polars.Series.is_first_distinct.rst", "reference/series/api/polars.Series.is_float.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_integer.rst", "reference/series/api/polars.Series.is_last.rst", "reference/series/api/polars.Series.is_last_distinct.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_numeric.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_temporal.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.is_utf8.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.list.all.rst", "reference/series/api/polars.Series.list.any.rst", "reference/series/api/polars.Series.list.arg_max.rst", "reference/series/api/polars.Series.list.arg_min.rst", "reference/series/api/polars.Series.list.concat.rst", "reference/series/api/polars.Series.list.contains.rst", "reference/series/api/polars.Series.list.count_match.rst", "reference/series/api/polars.Series.list.count_matches.rst", "reference/series/api/polars.Series.list.diff.rst", "reference/series/api/polars.Series.list.drop_nulls.rst", "reference/series/api/polars.Series.list.eval.rst", "reference/series/api/polars.Series.list.explode.rst", "reference/series/api/polars.Series.list.first.rst", "reference/series/api/polars.Series.list.gather.rst", "reference/series/api/polars.Series.list.get.rst", "reference/series/api/polars.Series.list.head.rst", "reference/series/api/polars.Series.list.join.rst", "reference/series/api/polars.Series.list.last.rst", "reference/series/api/polars.Series.list.len.rst", "reference/series/api/polars.Series.list.lengths.rst", "reference/series/api/polars.Series.list.max.rst", "reference/series/api/polars.Series.list.mean.rst", "reference/series/api/polars.Series.list.min.rst", "reference/series/api/polars.Series.list.reverse.rst", "reference/series/api/polars.Series.list.sample.rst", "reference/series/api/polars.Series.list.set_difference.rst", "reference/series/api/polars.Series.list.set_intersection.rst", "reference/series/api/polars.Series.list.set_symmetric_difference.rst", "reference/series/api/polars.Series.list.set_union.rst", "reference/series/api/polars.Series.list.shift.rst", "reference/series/api/polars.Series.list.slice.rst", "reference/series/api/polars.Series.list.sort.rst", "reference/series/api/polars.Series.list.sum.rst", "reference/series/api/polars.Series.list.tail.rst", "reference/series/api/polars.Series.list.take.rst", "reference/series/api/polars.Series.list.to_array.rst", "reference/series/api/polars.Series.list.to_struct.rst", "reference/series/api/polars.Series.list.unique.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.map_dict.rst", "reference/series/api/polars.Series.map_elements.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.not_.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.replace.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rle.rst", "reference/series/api/polars.Series.rle_id.rst", "reference/series/api/polars.Series.rolling_apply.rst", "reference/series/api/polars.Series.rolling_map.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.round_sig_figs.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.scatter.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.series_equal.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_at_idx.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shift_and_fill.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.contains_any.rst", "reference/series/api/polars.Series.str.count_match.rst", "reference/series/api/polars.Series.str.count_matches.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.extract_groups.rst", "reference/series/api/polars.Series.str.find.rst", "reference/series/api/polars.Series.str.json_decode.rst", "reference/series/api/polars.Series.str.json_extract.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.len_bytes.rst", "reference/series/api/polars.Series.str.len_chars.rst", "reference/series/api/polars.Series.str.lengths.rst", "reference/series/api/polars.Series.str.ljust.rst", "reference/series/api/polars.Series.str.lstrip.rst", "reference/series/api/polars.Series.str.n_chars.rst", "reference/series/api/polars.Series.str.pad_end.rst", "reference/series/api/polars.Series.str.pad_start.rst", "reference/series/api/polars.Series.str.parse_int.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.replace_many.rst", "reference/series/api/polars.Series.str.reverse.rst", "reference/series/api/polars.Series.str.rjust.rst", "reference/series/api/polars.Series.str.rstrip.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip.rst", "reference/series/api/polars.Series.str.strip_chars.rst", "reference/series/api/polars.Series.str.strip_chars_end.rst", "reference/series/api/polars.Series.str.strip_chars_start.rst", "reference/series/api/polars.Series.str.strip_prefix.rst", "reference/series/api/polars.Series.str.strip_suffix.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.to_date.rst", "reference/series/api/polars.Series.str.to_datetime.rst", "reference/series/api/polars.Series.str.to_decimal.rst", "reference/series/api/polars.Series.str.to_integer.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_time.rst", "reference/series/api/polars.Series.str.to_titlecase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.json_encode.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.schema.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.take.rst", "reference/series/api/polars.Series.take_every.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.view.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/plot.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql.rst", "reference/testing.rst", "reference/utils.rst"], "titles": ["Index", "Extending the API", "polars.Array", "polars.Binary", "polars.Boolean", "polars.Categorical", "polars.Config.activate_decimals", "polars.Config.load", "polars.Config.load_from_file", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.save_to_file", "polars.Config.set_ascii_tables", "polars.Config.set_auto_structify", "polars.Config.set_decimal_separator", "polars.Config.set_float_precision", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_fmt_table_cell_list_len", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cell_numeric_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_thousands_separator", "polars.Config.set_trim_decimal_zeros", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame.write_avro", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_delta", "polars.DataFrame.write_excel", "polars.DataFrame.write_ipc", "polars.DataFrame.write_ipc_stream", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.DataType", "polars.Date", "polars.Datetime", "polars.Decimal", "polars.Duration", "polars.Enum", "polars.Float32", "polars.Float64", "polars.Int16", "polars.Int32", "polars.Int64", "polars.Int8", "polars.LazyFrame.sink_csv", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_ndjson", "polars.LazyFrame.sink_parquet", "polars.List", "polars.Null", "polars.Object", "polars.SQLContext.execute", "polars.SQLContext.register", "polars.SQLContext.register_globals", "polars.SQLContext.register_many", "polars.SQLContext.tables", "polars.SQLContext.unregister", "polars.String", "polars.StringCache", "polars.Struct", "polars.Time", "polars.UInt16", "polars.UInt32", "polars.UInt64", "polars.UInt8", "polars.Unknown", "polars.Utf8", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.build_info", "polars.collect_all", "polars.collect_all_async", "polars.concat", "polars.disable_string_cache", "polars.enable_string_cache", "polars.exceptions.ArrowError", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.PolarsError", "polars.exceptions.PolarsPanicError", "polars.exceptions.RowsError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.read_avro", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_database_uri", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_ipc_stream", "polars.read_json", "polars.read_ndjson", "polars.read_ods", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_iceberg", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.set_random_seed", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_frame_not_equal", "polars.testing.assert_series_equal", "polars.testing.assert_series_not_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.create_list_strategy", "polars.testing.parametric.dataframes", "polars.testing.parametric.load_profile", "polars.testing.parametric.series", "polars.testing.parametric.set_profile", "polars.threadpool_size", "polars.using_string_cache", "Config", "Aggregation", "polars.DataFrame.__dataframe__", "polars.DataFrame.apply", "polars.DataFrame.approx_n_unique", "polars.DataFrame.bottom_k", "polars.DataFrame.cast", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.count", "polars.DataFrame.describe", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.equals", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.find_idx_by_name", "polars.DataFrame.flags", "polars.DataFrame.fold", "polars.DataFrame.frame_equal", "polars.DataFrame.gather_every", "polars.DataFrame.get_column", "polars.DataFrame.get_column_index", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.group_by", "polars.DataFrame.group_by_dynamic", "polars.DataFrame.group_by_rolling", "polars.DataFrame.groupby", "polars.DataFrame.groupby_dynamic", "polars.DataFrame.groupby_rolling", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_at_idx", "polars.DataFrame.insert_column", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_columns", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.map_rows", "polars.DataFrame.max", "polars.DataFrame.max_horizontal", "polars.DataFrame.mean", "polars.DataFrame.mean_horizontal", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.min_horizontal", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace", "polars.DataFrame.replace_at_idx", "polars.DataFrame.replace_column", "polars.DataFrame.reverse", "polars.DataFrame.rolling", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.rows_by_key", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.select_seq", "polars.DataFrame.set_sorted", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shift_and_fill", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.sum_horizontal", "polars.DataFrame.tail", "polars.DataFrame.take_every", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_columns_seq", "polars.DataFrame.with_row_count", "polars.DataFrame.with_row_index", "polars.dataframe.group_by.GroupBy.__iter__", "polars.dataframe.group_by.GroupBy.agg", "polars.dataframe.group_by.GroupBy.all", "polars.dataframe.group_by.GroupBy.apply", "polars.dataframe.group_by.GroupBy.count", "polars.dataframe.group_by.GroupBy.first", "polars.dataframe.group_by.GroupBy.head", "polars.dataframe.group_by.GroupBy.last", "polars.dataframe.group_by.GroupBy.len", "polars.dataframe.group_by.GroupBy.map_groups", "polars.dataframe.group_by.GroupBy.max", "polars.dataframe.group_by.GroupBy.mean", "polars.dataframe.group_by.GroupBy.median", "polars.dataframe.group_by.GroupBy.min", "polars.dataframe.group_by.GroupBy.n_unique", "polars.dataframe.group_by.GroupBy.quantile", "polars.dataframe.group_by.GroupBy.sum", "polars.dataframe.group_by.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Plot", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.apply", "polars.Expr.approx_n_unique", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.all", "polars.Expr.arr.any", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.contains", "polars.Expr.arr.count_matches", "polars.Expr.arr.explode", "polars.Expr.arr.first", "polars.Expr.arr.get", "polars.Expr.arr.join", "polars.Expr.arr.last", "polars.Expr.arr.max", "polars.Expr.arr.min", "polars.Expr.arr.reverse", "polars.Expr.arr.sort", "polars.Expr.arr.sum", "polars.Expr.arr.to_list", "polars.Expr.arr.unique", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.starts_with", "polars.Expr.bottom_k", "polars.Expr.cast", "polars.Expr.cat.get_categories", "polars.Expr.cat.set_ordering", "polars.Expr.cbrt", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.clip_max", "polars.Expr.clip_min", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.cot", "polars.Expr.count", "polars.Expr.cum_count", "polars.Expr.cum_max", "polars.Expr.cum_min", "polars.Expr.cum_prod", "polars.Expr.cum_sum", "polars.Expr.cumcount", "polars.Expr.cummax", "polars.Expr.cummin", "polars.Expr.cumprod", "polars.Expr.cumsum", "polars.Expr.cumulative_eval", "polars.Expr.cut", "polars.Expr.degrees", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.base_utc_offset", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.century", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.days", "polars.Expr.dt.dst_offset", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.hours", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.microseconds", "polars.Expr.dt.millennium", "polars.Expr.dt.millisecond", "polars.Expr.dt.milliseconds", "polars.Expr.dt.minute", "polars.Expr.dt.minutes", "polars.Expr.dt.month", "polars.Expr.dt.month_end", "polars.Expr.dt.month_start", "polars.Expr.dt.nanosecond", "polars.Expr.dt.nanoseconds", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.seconds", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.to_string", "polars.Expr.dt.total_days", "polars.Expr.dt.total_hours", "polars.Expr.dt.total_microseconds", "polars.Expr.dt.total_milliseconds", "polars.Expr.dt.total_minutes", "polars.Expr.dt.total_nanoseconds", "polars.Expr.dt.total_seconds", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.eq_missing", "polars.Expr.ewm_mean", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.from_json", "polars.Expr.gather", "polars.Expr.gather_every", "polars.Expr.ge", "polars.Expr.get", "polars.Expr.gt", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.hist", "polars.Expr.implode", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first", "polars.Expr.is_first_distinct", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_last", "polars.Expr.is_last_distinct", "polars.Expr.is_nan", "polars.Expr.is_not", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.keep_name", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list.all", "polars.Expr.list.any", "polars.Expr.list.arg_max", "polars.Expr.list.arg_min", "polars.Expr.list.concat", "polars.Expr.list.contains", "polars.Expr.list.count_match", "polars.Expr.list.count_matches", "polars.Expr.list.diff", "polars.Expr.list.drop_nulls", "polars.Expr.list.eval", "polars.Expr.list.explode", "polars.Expr.list.first", "polars.Expr.list.gather", "polars.Expr.list.get", "polars.Expr.list.head", "polars.Expr.list.join", "polars.Expr.list.last", "polars.Expr.list.len", "polars.Expr.list.lengths", "polars.Expr.list.max", "polars.Expr.list.mean", "polars.Expr.list.min", "polars.Expr.list.reverse", "polars.Expr.list.sample", "polars.Expr.list.set_difference", "polars.Expr.list.set_intersection", "polars.Expr.list.set_symmetric_difference", "polars.Expr.list.set_union", "polars.Expr.list.shift", "polars.Expr.list.slice", "polars.Expr.list.sort", "polars.Expr.list.sum", "polars.Expr.list.tail", "polars.Expr.list.take", "polars.Expr.list.to_array", "polars.Expr.list.to_struct", "polars.Expr.list.unique", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map", "polars.Expr.map_alias", "polars.Expr.map_batches", "polars.Expr.map_dict", "polars.Expr.map_elements", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.eq", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.ne", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.tree_format", "polars.Expr.meta.undo_aliases", "polars.Expr.meta.write_json", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.name.keep", "polars.Expr.name.map", "polars.Expr.name.prefix", "polars.Expr.name.suffix", "polars.Expr.name.to_lowercase", "polars.Expr.name.to_uppercase", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.ne_missing", "polars.Expr.neg", "polars.Expr.not_", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.peak_max", "polars.Expr.peak_min", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.prefix", "polars.Expr.product", "polars.Expr.qcut", "polars.Expr.quantile", "polars.Expr.radians", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.replace", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rle", "polars.Expr.rle_id", "polars.Expr.rolling", "polars.Expr.rolling_apply", "polars.Expr.rolling_map", "polars.Expr.rolling_max", "polars.Expr.rolling_mean", "polars.Expr.rolling_median", "polars.Expr.rolling_min", "polars.Expr.rolling_quantile", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_sum", "polars.Expr.rolling_var", "polars.Expr.round", "polars.Expr.round_sig_figs", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shift_and_fill", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.contains_any", "polars.Expr.str.count_match", "polars.Expr.str.count_matches", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.extract_groups", "polars.Expr.str.find", "polars.Expr.str.json_decode", "polars.Expr.str.json_extract", "polars.Expr.str.json_path_match", "polars.Expr.str.len_bytes", "polars.Expr.str.len_chars", "polars.Expr.str.lengths", "polars.Expr.str.ljust", "polars.Expr.str.lstrip", "polars.Expr.str.n_chars", "polars.Expr.str.pad_end", "polars.Expr.str.pad_start", "polars.Expr.str.parse_int", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.replace_many", "polars.Expr.str.reverse", "polars.Expr.str.rjust", "polars.Expr.str.rstrip", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip", "polars.Expr.str.strip_chars", "polars.Expr.str.strip_chars_end", "polars.Expr.str.strip_chars_start", "polars.Expr.str.strip_prefix", "polars.Expr.str.strip_suffix", "polars.Expr.str.strptime", "polars.Expr.str.to_date", "polars.Expr.str.to_datetime", "polars.Expr.str.to_decimal", "polars.Expr.str.to_integer", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_time", "polars.Expr.str.to_titlecase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.json_encode", "polars.Expr.struct.rename_fields", "polars.Expr.sub", "polars.Expr.suffix", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.take", "polars.Expr.take_every", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.all_horizontal", "polars.any", "polars.any_horizontal", "polars.apply", "polars.approx_n_unique", "polars.arange", "polars.arctan2", "polars.arctan2d", "polars.arg_sort_by", "polars.arg_where", "polars.coalesce", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cum_count", "polars.cum_fold", "polars.cum_reduce", "polars.cum_sum", "polars.cum_sum_horizontal", "polars.cumfold", "polars.cumreduce", "polars.cumsum", "polars.cumsum_horizontal", "polars.date", "polars.date_range", "polars.date_ranges", "polars.datetime", "polars.datetime_range", "polars.datetime_ranges", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.implode", "polars.int_range", "polars.int_ranges", "polars.last", "polars.len", "polars.lit", "polars.map", "polars.map_batches", "polars.map_groups", "polars.max", "polars.max_horizontal", "polars.mean", "polars.median", "polars.min", "polars.min_horizontal", "polars.n_unique", "polars.ones", "polars.quantile", "polars.reduce", "polars.repeat", "polars.rolling_corr", "polars.rolling_cov", "polars.select", "polars.sql_expr", "polars.std", "polars.struct", "polars.sum", "polars.sum_horizontal", "polars.tail", "polars.time", "polars.time_range", "polars.time_ranges", "polars.var", "polars.when", "polars.zeros", "Array", "Binary", "Boolean", "Categories", "polars.col", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Name", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "API reference", "Input/output", "Aggregation", "polars.LazyFrame.approx_n_unique", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.cast", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.collect_async", "polars.LazyFrame.columns", "polars.LazyFrame.count", "polars.LazyFrame.describe", "polars.LazyFrame.deserialize", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.gather_every", "polars.LazyFrame.group_by", "polars.LazyFrame.group_by_dynamic", "polars.LazyFrame.group_by_rolling", "polars.LazyFrame.groupby", "polars.LazyFrame.groupby_dynamic", "polars.LazyFrame.groupby_rolling", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map", "polars.LazyFrame.map_batches", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.null_count", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.rolling", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.select_seq", "polars.LazyFrame.serialize", "polars.LazyFrame.set_sorted", "polars.LazyFrame.shift", "polars.LazyFrame.shift_and_fill", "polars.LazyFrame.show_graph", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.take_every", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_columns_seq", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.with_row_index", "polars.lazyframe.group_by.LazyGroupBy.agg", "polars.lazyframe.group_by.LazyGroupBy.all", "polars.lazyframe.group_by.LazyGroupBy.apply", "polars.lazyframe.group_by.LazyGroupBy.count", "polars.lazyframe.group_by.LazyGroupBy.first", "polars.lazyframe.group_by.LazyGroupBy.head", "polars.lazyframe.group_by.LazyGroupBy.last", "polars.lazyframe.group_by.LazyGroupBy.len", "polars.lazyframe.group_by.LazyGroupBy.map_groups", "polars.lazyframe.group_by.LazyGroupBy.max", "polars.lazyframe.group_by.LazyGroupBy.mean", "polars.lazyframe.group_by.LazyGroupBy.median", "polars.lazyframe.group_by.LazyGroupBy.min", "polars.lazyframe.group_by.LazyGroupBy.n_unique", "polars.lazyframe.group_by.LazyGroupBy.quantile", "polars.lazyframe.group_by.LazyGroupBy.sum", "polars.lazyframe.group_by.LazyGroupBy.tail", "Attributes", "Descriptive", "GroupBy", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Selectors", "Aggregation", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.apply", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr.all", "polars.Series.arr.any", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.contains", "polars.Series.arr.count_matches", "polars.Series.arr.explode", "polars.Series.arr.first", "polars.Series.arr.get", "polars.Series.arr.join", "polars.Series.arr.last", "polars.Series.arr.max", "polars.Series.arr.min", "polars.Series.arr.reverse", "polars.Series.arr.sort", "polars.Series.arr.sum", "polars.Series.arr.to_list", "polars.Series.arr.unique", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.starts_with", "polars.Series.bottom_k", "polars.Series.cast", "polars.Series.cat.get_categories", "polars.Series.cat.is_local", "polars.Series.cat.set_ordering", "polars.Series.cat.to_local", "polars.Series.cat.uses_lexical_ordering", "polars.Series.cbrt", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clip_max", "polars.Series.clip_min", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cot", "polars.Series.cum_max", "polars.Series.cum_min", "polars.Series.cum_prod", "polars.Series.cum_sum", "polars.Series.cummax", "polars.Series.cummin", "polars.Series.cumprod", "polars.Series.cumsum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt.base_utc_offset", "polars.Series.dt.cast_time_unit", "polars.Series.dt.century", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.days", "polars.Series.dt.dst_offset", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.hours", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.microseconds", "polars.Series.dt.millennium", "polars.Series.dt.millisecond", "polars.Series.dt.milliseconds", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.minutes", "polars.Series.dt.month", "polars.Series.dt.month_end", "polars.Series.dt.month_start", "polars.Series.dt.nanosecond", "polars.Series.dt.nanoseconds", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.seconds", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.to_string", "polars.Series.dt.total_days", "polars.Series.dt.total_hours", "polars.Series.dt.total_microseconds", "polars.Series.dt.total_milliseconds", "polars.Series.dt.total_minutes", "polars.Series.dt.total_nanoseconds", "polars.Series.dt.total_seconds", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.equals", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.gather", "polars.Series.gather_every", "polars.Series.get_chunks", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.implode", "polars.Series.inner_dtype", "polars.Series.interpolate", "polars.Series.is_between", "polars.Series.is_boolean", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first", "polars.Series.is_first_distinct", "polars.Series.is_float", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_integer", "polars.Series.is_last", "polars.Series.is_last_distinct", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_numeric", "polars.Series.is_sorted", "polars.Series.is_temporal", "polars.Series.is_unique", "polars.Series.is_utf8", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.list.all", "polars.Series.list.any", "polars.Series.list.arg_max", "polars.Series.list.arg_min", "polars.Series.list.concat", "polars.Series.list.contains", "polars.Series.list.count_match", "polars.Series.list.count_matches", "polars.Series.list.diff", "polars.Series.list.drop_nulls", "polars.Series.list.eval", "polars.Series.list.explode", "polars.Series.list.first", "polars.Series.list.gather", "polars.Series.list.get", "polars.Series.list.head", "polars.Series.list.join", "polars.Series.list.last", "polars.Series.list.len", "polars.Series.list.lengths", "polars.Series.list.max", "polars.Series.list.mean", "polars.Series.list.min", "polars.Series.list.reverse", "polars.Series.list.sample", "polars.Series.list.set_difference", "polars.Series.list.set_intersection", "polars.Series.list.set_symmetric_difference", "polars.Series.list.set_union", "polars.Series.list.shift", "polars.Series.list.slice", "polars.Series.list.sort", "polars.Series.list.sum", "polars.Series.list.tail", "polars.Series.list.take", "polars.Series.list.to_array", "polars.Series.list.to_struct", "polars.Series.list.unique", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.map_dict", "polars.Series.map_elements", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.new_from_index", "polars.Series.not_", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.replace", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rle", "polars.Series.rle_id", "polars.Series.rolling_apply", "polars.Series.rolling_map", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.round_sig_figs", "polars.Series.sample", "polars.Series.scatter", "polars.Series.search_sorted", "polars.Series.series_equal", "polars.Series.set", "polars.Series.set_at_idx", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shift_and_fill", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.contains_any", "polars.Series.str.count_match", "polars.Series.str.count_matches", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.extract_groups", "polars.Series.str.find", "polars.Series.str.json_decode", "polars.Series.str.json_extract", "polars.Series.str.json_path_match", "polars.Series.str.len_bytes", "polars.Series.str.len_chars", "polars.Series.str.lengths", "polars.Series.str.ljust", "polars.Series.str.lstrip", "polars.Series.str.n_chars", "polars.Series.str.pad_end", "polars.Series.str.pad_start", "polars.Series.str.parse_int", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.replace_many", "polars.Series.str.reverse", "polars.Series.str.rjust", "polars.Series.str.rstrip", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip", "polars.Series.str.strip_chars", "polars.Series.str.strip_chars_end", "polars.Series.str.strip_chars_start", "polars.Series.str.strip_prefix", "polars.Series.str.strip_suffix", "polars.Series.str.strptime", "polars.Series.str.to_date", "polars.Series.str.to_datetime", "polars.Series.str.to_decimal", "polars.Series.str.to_integer", "polars.Series.str.to_lowercase", "polars.Series.str.to_time", "polars.Series.str.to_titlecase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.json_encode", "polars.Series.struct.rename_fields", "polars.Series.struct.schema", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.take", "polars.Series.take_every", "polars.Series.tan", "polars.Series.tanh", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.view", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "Plot", "String", "Struct", "Temporal", "SQL", "Testing", "Utils"], "terms": {"api": [0, 108, 138, 156, 211, 287, 301, 531, 736, 771, 871, 934, 1110, 1261], "refer": [0, 40, 117, 118, 119, 123, 124, 125, 126, 127, 128, 129, 130, 131, 164, 301, 304, 417, 420, 529, 575, 623, 656, 657, 658, 662, 771, 797, 883, 999, 1002, 1130, 1215, 1216, 1217, 1221, 1261, 1265], "input": [0, 81, 87, 110, 118, 119, 159, 167, 187, 190, 211, 215, 224, 230, 241, 242, 245, 249, 252, 264, 274, 275, 279, 301, 309, 359, 439, 463, 523, 529, 530, 531, 540, 564, 579, 611, 652, 653, 654, 655, 686, 688, 690, 691, 693, 696, 698, 699, 700, 708, 712, 721, 722, 729, 730, 731, 734, 735, 736, 738, 742, 750, 753, 755, 761, 771, 783, 787, 798, 809, 812, 835, 839, 840, 841, 843, 847, 852, 858, 859, 863, 883, 939, 1041, 1106, 1107, 1110, 1134, 1160, 1261], "output": [0, 13, 35, 37, 40, 41, 42, 43, 44, 58, 123, 157, 166, 188, 189, 191, 192, 205, 211, 215, 218, 224, 226, 235, 237, 241, 252, 270, 274, 301, 312, 314, 316, 338, 377, 500, 520, 527, 528, 529, 531, 539, 551, 572, 584, 589, 591, 593, 595, 614, 631, 683, 687, 689, 691, 700, 701, 714, 715, 734, 735, 736, 771, 783, 796, 810, 811, 813, 814, 823, 824, 828, 829, 837, 839, 841, 858, 865, 871, 883, 890, 891, 893, 914, 955, 1083, 1110, 1128, 1173, 1190, 1249, 1261], "seri": [0, 1, 2, 16, 30, 51, 72, 73, 82, 83, 84, 85, 89, 90, 91, 107, 109, 112, 114, 141, 143, 144, 148, 168, 177, 180, 183, 185, 188, 193, 196, 197, 198, 200, 202, 204, 212, 213, 214, 215, 219, 220, 231, 232, 233, 235, 239, 251, 252, 256, 259, 262, 263, 280, 301, 315, 316, 327, 348, 355, 356, 358, 413, 442, 445, 448, 452, 453, 461, 465, 468, 469, 472, 474, 475, 476, 488, 495, 497, 518, 520, 525, 527, 529, 531, 575, 576, 577, 578, 579, 580, 582, 584, 585, 586, 592, 600, 603, 645, 656, 657, 658, 662, 666, 673, 674, 682, 691, 693, 697, 705, 706, 709, 710, 714, 715, 717, 718, 723, 725, 729, 730, 733, 734, 735, 736, 744, 746, 747, 750, 753, 758, 759, 762, 771, 783, 806, 810, 837, 864, 883, 1253, 1255, 1257, 1260, 1262, 1265, 1266, 1267, 1268, 1270], "datafram": [0, 1, 12, 13, 14, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 58, 59, 60, 61, 62, 65, 66, 67, 68, 69, 70, 81, 82, 83, 84, 85, 87, 88, 89, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 132, 135, 136, 137, 141, 142, 145, 146, 154, 299, 300, 304, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 357, 358, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 394, 396, 397, 398, 400, 401, 403, 405, 406, 407, 408, 410, 411, 412, 413, 415, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 531, 532, 533, 534, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 636, 637, 639, 640, 641, 642, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 715, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 735, 736, 737, 738, 739, 740, 741, 742, 743, 746, 750, 751, 752, 753, 754, 755, 756, 759, 760, 761, 767, 771, 783, 792, 793, 796, 798, 802, 803, 807, 810, 818, 819, 820, 821, 823, 824, 828, 829, 833, 836, 846, 853, 854, 855, 860, 863, 864, 865, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 883, 886, 920, 922, 955, 956, 995, 1037, 1110, 1128, 1188, 1206, 1207, 1230, 1238, 1239, 1249, 1261, 1269, 1270], "lazyfram": [0, 1, 65, 66, 68, 70, 81, 82, 83, 84, 85, 87, 88, 89, 132, 133, 134, 135, 136, 137, 138, 141, 142, 148, 209, 225, 226, 301, 445, 520, 771, 783, 882, 886, 1269, 1270], "express": [0, 13, 58, 59, 60, 61, 87, 88, 145, 148, 150, 159, 173, 175, 177, 187, 190, 211, 222, 226, 236, 241, 242, 245, 249, 264, 274, 275, 277, 279, 287, 301, 309, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 326, 327, 331, 332, 333, 334, 335, 338, 345, 348, 350, 351, 352, 359, 362, 363, 364, 365, 376, 377, 378, 380, 383, 384, 385, 386, 387, 388, 389, 390, 392, 394, 396, 397, 398, 400, 401, 403, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 417, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 439, 441, 442, 444, 445, 449, 451, 452, 454, 455, 456, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 478, 481, 482, 486, 487, 489, 490, 491, 494, 495, 500, 502, 519, 520, 525, 526, 528, 529, 530, 531, 535, 536, 537, 538, 539, 540, 542, 544, 546, 548, 550, 551, 552, 553, 554, 555, 558, 559, 561, 563, 564, 568, 569, 570, 571, 572, 574, 578, 579, 580, 582, 598, 599, 600, 602, 604, 606, 607, 609, 611, 614, 615, 617, 618, 620, 622, 623, 624, 625, 626, 627, 629, 630, 631, 639, 640, 645, 646, 647, 648, 660, 669, 670, 673, 675, 676, 679, 680, 682, 683, 685, 686, 687, 688, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 708, 709, 710, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 729, 730, 731, 732, 733, 734, 735, 736, 738, 742, 744, 746, 747, 748, 749, 750, 751, 753, 755, 757, 758, 759, 761, 762, 767, 770, 783, 787, 792, 793, 801, 802, 803, 806, 809, 812, 833, 839, 840, 843, 844, 845, 847, 852, 858, 859, 860, 862, 863, 871, 883, 886, 910, 939, 954, 963, 964, 981, 1025, 1041, 1073, 1074, 1077, 1110, 1134, 1154, 1160, 1161, 1174, 1176, 1177, 1182, 1183, 1184, 1185, 1186, 1188, 1198, 1199, 1261], "selector": [0, 40, 160, 167, 169, 173, 217, 224, 226, 258, 266, 268, 301, 439, 445, 771, 783, 789, 798, 799, 802, 828, 853, 883], "extend": [0, 110, 272, 301, 442, 771, 783, 892, 1025, 1261], "function": [0, 40, 72, 81, 82, 83, 84, 85, 88, 90, 91, 108, 114, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 137, 141, 142, 143, 144, 146, 156, 157, 164, 172, 180, 211, 217, 225, 226, 230, 260, 261, 265, 268, 269, 281, 287, 301, 312, 316, 376, 414, 436, 437, 438, 459, 520, 527, 528, 529, 531, 551, 564, 568, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 608, 677, 687, 691, 692, 702, 704, 705, 706, 709, 710, 711, 712, 722, 723, 725, 727, 728, 731, 734, 735, 736, 739, 740, 743, 744, 746, 752, 756, 760, 762, 767, 771, 783, 792, 793, 797, 803, 823, 824, 828, 832, 835, 855, 862, 865, 871, 883, 893, 954, 996, 1018, 1019, 1020, 1021, 1037, 1103, 1110, 1128, 1139, 1140, 1153, 1156, 1163, 1168, 1243, 1261, 1270], "data": [0, 1, 6, 15, 23, 24, 26, 33, 36, 37, 38, 39, 40, 41, 42, 45, 46, 58, 59, 60, 61, 65, 72, 73, 81, 82, 84, 89, 91, 96, 97, 104, 107, 108, 109, 110, 111, 112, 113, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 136, 141, 142, 143, 144, 146, 147, 148, 150, 156, 162, 174, 186, 187, 188, 189, 190, 191, 192, 205, 206, 207, 209, 211, 224, 225, 229, 235, 236, 237, 238, 247, 255, 260, 261, 265, 274, 278, 299, 301, 312, 313, 314, 318, 319, 320, 321, 322, 323, 326, 329, 330, 331, 332, 333, 335, 338, 340, 341, 344, 345, 346, 348, 350, 351, 352, 354, 355, 359, 362, 363, 364, 365, 377, 378, 383, 384, 385, 388, 389, 390, 392, 394, 396, 397, 398, 400, 401, 403, 405, 406, 407, 408, 410, 411, 412, 414, 415, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 441, 452, 454, 455, 456, 459, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 481, 482, 486, 487, 489, 495, 500, 502, 508, 519, 521, 526, 531, 558, 559, 563, 564, 572, 574, 575, 578, 579, 580, 582, 584, 587, 588, 589, 590, 591, 593, 594, 595, 596, 598, 606, 607, 608, 614, 617, 618, 620, 622, 623, 624, 625, 629, 630, 631, 645, 646, 647, 648, 656, 657, 658, 660, 662, 665, 675, 676, 677, 679, 680, 683, 686, 691, 693, 702, 713, 714, 715, 716, 717, 718, 719, 729, 730, 732, 733, 734, 735, 736, 744, 747, 757, 758, 759, 762, 767, 771, 783, 790, 791, 792, 803, 809, 810, 811, 812, 813, 814, 832, 837, 858, 883, 890, 891, 903, 905, 906, 907, 908, 909, 911, 913, 914, 920, 921, 922, 923, 925, 929, 930, 938, 939, 942, 955, 956, 961, 962, 963, 966, 967, 968, 970, 972, 974, 975, 979, 981, 982, 985, 987, 988, 989, 990, 992, 993, 994, 996, 997, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1023, 1024, 1037, 1043, 1045, 1046, 1047, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1061, 1067, 1068, 1069, 1070, 1072, 1078, 1083, 1085, 1091, 1102, 1104, 1110, 1122, 1128, 1130, 1134, 1135, 1137, 1150, 1152, 1163, 1168, 1173, 1174, 1176, 1177, 1179, 1181, 1182, 1183, 1184, 1188, 1189, 1190, 1204, 1205, 1206, 1207, 1215, 1216, 1217, 1219, 1221, 1224, 1241, 1242, 1243, 1244, 1246, 1251, 1260, 1261, 1269], "type": [0, 1, 2, 3, 4, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 39, 40, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 71, 73, 74, 75, 76, 77, 78, 79, 82, 83, 84, 85, 87, 88, 107, 109, 110, 111, 112, 113, 118, 119, 120, 122, 123, 127, 128, 129, 132, 133, 134, 136, 140, 141, 142, 143, 144, 147, 148, 157, 180, 186, 188, 189, 191, 192, 193, 206, 207, 211, 235, 255, 263, 266, 277, 301, 312, 314, 318, 319, 320, 321, 322, 323, 326, 331, 332, 333, 335, 338, 345, 348, 350, 351, 352, 354, 355, 356, 359, 362, 363, 364, 365, 377, 378, 383, 385, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 439, 441, 452, 455, 457, 463, 464, 465, 466, 467, 468, 469, 470, 471, 482, 486, 487, 489, 495, 500, 502, 519, 520, 529, 531, 572, 574, 578, 579, 580, 582, 584, 606, 607, 614, 617, 618, 620, 622, 623, 624, 625, 629, 630, 631, 645, 646, 647, 648, 656, 660, 675, 676, 677, 683, 691, 693, 702, 713, 714, 715, 716, 717, 718, 719, 721, 722, 729, 730, 731, 732, 733, 734, 735, 736, 744, 747, 757, 758, 759, 762, 767, 771, 783, 792, 793, 801, 803, 810, 811, 813, 814, 818, 833, 837, 845, 853, 862, 883, 890, 891, 903, 905, 906, 907, 908, 909, 911, 913, 914, 921, 923, 925, 929, 930, 932, 939, 955, 956, 961, 963, 965, 966, 967, 968, 969, 970, 972, 973, 974, 975, 979, 980, 981, 982, 983, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1023, 1035, 1043, 1045, 1046, 1047, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1061, 1067, 1068, 1069, 1070, 1072, 1078, 1083, 1085, 1102, 1103, 1122, 1128, 1134, 1135, 1137, 1163, 1173, 1174, 1176, 1177, 1179, 1181, 1182, 1183, 1184, 1188, 1189, 1190, 1204, 1205, 1206, 1207, 1215, 1219, 1241, 1242, 1244, 1252, 1261, 1269], "config": [0, 81, 241, 274, 301, 616, 641, 715, 718, 719, 783, 792, 839, 858, 883, 1175, 1200], "except": [0, 141, 194, 208, 210, 253, 301, 721, 783, 819, 883, 886, 1036, 1066, 1232, 1242, 1251, 1261], "test": [0, 6, 120, 121, 123, 129, 783, 815, 822, 883], "util": [0, 114, 725, 783, 803, 883], "sql": [0, 38, 65, 69, 120, 121, 207, 245, 301, 513, 601, 732, 751, 771, 783, 843, 883, 1096, 1160, 1261], "These": [1, 40, 120, 154, 265, 301, 428, 770, 771, 996, 1010], "allow": [1, 13, 39, 40, 58, 59, 60, 61, 72, 91, 96, 108, 120, 132, 135, 136, 137, 138, 148, 150, 156, 205, 208, 209, 236, 237, 239, 260, 261, 266, 278, 301, 410, 417, 420, 508, 529, 531, 577, 598, 656, 657, 658, 771, 818, 819, 823, 824, 828, 853, 860, 883, 886, 992, 999, 1002, 1017, 1091, 1110, 1132, 1152, 1155, 1215, 1216, 1217, 1243, 1261, 1270], "you": [1, 15, 19, 40, 45, 61, 70, 81, 88, 89, 107, 109, 110, 111, 113, 118, 119, 120, 121, 123, 124, 127, 128, 130, 132, 136, 138, 154, 174, 188, 189, 191, 192, 204, 205, 211, 222, 226, 235, 236, 237, 238, 257, 260, 265, 287, 301, 304, 406, 407, 410, 413, 417, 420, 428, 439, 445, 463, 494, 520, 529, 531, 577, 583, 584, 587, 588, 589, 590, 591, 593, 594, 595, 616, 630, 641, 705, 714, 719, 723, 736, 744, 747, 762, 771, 793, 799, 810, 811, 813, 814, 815, 822, 837, 845, 871, 883, 886, 988, 989, 995, 996, 999, 1002, 1010, 1024, 1041, 1077, 1110, 1132, 1138, 1175, 1189, 1200, 1217, 1251, 1261, 1265, 1270], "regist": [1, 65, 67, 68, 69, 70, 82, 83, 84, 85, 149, 151, 771, 1269], "custom": [1, 32, 39, 40, 82, 83, 84, 85, 149, 150, 151, 157, 166, 211, 281, 287, 301, 316, 417, 420, 520, 527, 529, 531, 585, 586, 691, 734, 735, 736, 771, 796, 823, 824, 865, 871, 883, 893, 999, 1002, 1103, 1110, 1139, 1140, 1261, 1270], "dedic": [1, 108, 205, 237, 301], "namespac": [1, 300, 301, 770, 783, 882, 1261, 1270], "underli": [1, 72, 91, 94, 100, 107, 109, 110, 111, 113, 120, 121, 127, 128, 130, 136, 145, 148, 150, 173, 174, 205, 206, 237, 255, 301, 349, 384, 385, 386, 390, 394, 396, 397, 398, 400, 401, 403, 405, 408, 411, 412, 413, 415, 429, 430, 431, 432, 577, 596, 615, 619, 626, 771, 802, 883, 886, 924, 933, 962, 963, 964, 968, 972, 974, 975, 979, 981, 982, 985, 987, 990, 993, 994, 995, 997, 1011, 1012, 1013, 1014, 1024, 1132, 1150, 1163, 1174, 1178, 1185, 1237, 1242, 1261], "polar": [1, 301, 304, 770, 771, 777, 783, 883, 886, 1261, 1265, 1269], "class": [1, 2, 3, 4, 5, 22, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 62, 63, 64, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 83, 84, 85, 99, 145, 146, 238, 301, 758, 767, 771, 777, 783, 883, 1241, 1242, 1261, 1269], "without": [1, 41, 88, 114, 122, 125, 131, 133, 134, 138, 268, 269, 301, 316, 376, 414, 459, 587, 588, 589, 590, 591, 593, 594, 595, 616, 641, 702, 750, 771, 793, 855, 883, 931, 934, 954, 996, 1037, 1128, 1175, 1200, 1242, 1261], "requir": [1, 39, 40, 45, 61, 81, 112, 120, 121, 141, 142, 143, 144, 159, 164, 236, 261, 264, 301, 346, 436, 437, 438, 521, 531, 603, 656, 657, 658, 680, 747, 771, 787, 847, 852, 883, 922, 1019, 1020, 1021, 1104, 1162, 1215, 1216, 1217, 1242, 1243, 1246, 1261, 1265], "subclass": [1, 301], "mixin": 1, "expr": [1, 81, 82, 83, 84, 85, 173, 175, 207, 208, 222, 226, 236, 241, 242, 274, 275, 301, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 762, 763, 764, 766, 767, 771, 772, 773, 776, 777, 778, 779, 780, 802, 804, 818, 819, 834, 839, 840, 841, 844, 858, 859, 883, 954, 963, 964, 981, 992, 1010, 1026, 1031, 1073, 1077, 1082, 1097, 1100, 1161, 1174, 1180, 1185, 1208, 1233, 1261], "ar": [1, 15, 16, 22, 25, 35, 37, 39, 40, 58, 59, 60, 61, 70, 72, 81, 88, 89, 90, 91, 98, 106, 107, 108, 109, 110, 111, 112, 113, 114, 118, 119, 120, 121, 122, 123, 124, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 141, 142, 143, 144, 146, 148, 154, 156, 159, 164, 166, 169, 172, 175, 179, 180, 186, 187, 188, 189, 190, 191, 192, 205, 207, 208, 209, 211, 217, 218, 224, 226, 235, 236, 237, 238, 241, 242, 243, 245, 249, 256, 261, 264, 269, 270, 274, 275, 278, 279, 301, 312, 314, 329, 359, 367, 369, 370, 414, 428, 433, 435, 436, 437, 438, 463, 465, 468, 469, 472, 474, 475, 476, 479, 484, 513, 520, 529, 530, 559, 564, 572, 575, 578, 579, 580, 584, 587, 588, 589, 590, 591, 592, 593, 594, 595, 601, 605, 608, 610, 611, 625, 627, 628, 629, 636, 637, 638, 660, 665, 671, 687, 688, 690, 696, 698, 699, 700, 701, 704, 708, 712, 714, 715, 717, 718, 738, 742, 750, 753, 755, 758, 759, 761, 763, 764, 766, 770, 771, 772, 773, 776, 777, 778, 779, 780, 783, 787, 792, 793, 796, 799, 803, 804, 809, 810, 811, 812, 813, 814, 815, 818, 819, 822, 824, 828, 829, 833, 835, 837, 839, 840, 842, 843, 847, 852, 855, 858, 859, 860, 863, 883, 886, 890, 891, 905, 931, 939, 948, 949, 996, 1010, 1016, 1018, 1019, 1020, 1021, 1029, 1034, 1041, 1045, 1049, 1050, 1054, 1055, 1056, 1057, 1064, 1067, 1096, 1103, 1128, 1130, 1134, 1135, 1146, 1160, 1165, 1168, 1184, 1186, 1187, 1195, 1196, 1197, 1217, 1219, 1224, 1231, 1243, 1251, 1253, 1255, 1257, 1261, 1262, 1266, 1267, 1268, 1270], "all": [1, 9, 13, 18, 22, 25, 30, 35, 37, 39, 40, 46, 58, 67, 81, 87, 99, 107, 110, 112, 113, 118, 119, 122, 123, 124, 126, 129, 130, 132, 135, 136, 145, 146, 150, 154, 160, 166, 169, 176, 194, 200, 202, 204, 205, 206, 207, 209, 210, 215, 217, 221, 222, 229, 236, 237, 238, 242, 248, 252, 253, 258, 260, 266, 268, 269, 270, 275, 277, 301, 313, 315, 338, 347, 365, 376, 381, 382, 383, 439, 444, 450, 457, 460, 462, 465, 469, 475, 476, 478, 482, 493, 494, 500, 516, 520, 528, 529, 547, 550, 551, 552, 553, 554, 555, 562, 570, 575, 579, 581, 586, 603, 609, 611, 617, 618, 624, 625, 627, 628, 629, 634, 639, 640, 644, 650, 651, 652, 653, 670, 688, 705, 706, 707, 708, 711, 712, 714, 721, 723, 728, 729, 732, 746, 753, 754, 755, 761, 771, 777, 783, 789, 792, 793, 796, 799, 801, 803, 805, 818, 823, 824, 828, 833, 840, 845, 846, 853, 855, 859, 860, 862, 883, 886, 914, 954, 956, 959, 960, 961, 1036, 1043, 1061, 1066, 1076, 1077, 1083, 1099, 1103, 1130, 1134, 1140, 1169, 1176, 1177, 1183, 1184, 1186, 1187, 1188, 1193, 1198, 1199, 1203, 1209, 1210, 1211, 1212, 1232, 1261, 1269, 1270], "support": [1, 39, 40, 45, 89, 107, 108, 109, 110, 111, 112, 113, 114, 120, 121, 122, 123, 127, 128, 129, 130, 133, 134, 137, 145, 150, 154, 205, 206, 207, 208, 212, 214, 219, 237, 238, 248, 249, 251, 257, 261, 301, 514, 564, 579, 609, 611, 641, 645, 767, 771, 777, 818, 819, 846, 847, 883, 886, 1097, 1134, 1169, 1200, 1204, 1243, 1261, 1269], "target": [1, 38, 39, 40, 86, 123, 301, 623, 656, 657, 658, 886, 1182, 1215, 1216, 1217], "thi": [1, 6, 9, 15, 17, 19, 35, 37, 38, 39, 40, 41, 43, 45, 49, 51, 58, 59, 60, 61, 65, 66, 70, 72, 81, 87, 88, 89, 91, 107, 109, 110, 111, 112, 113, 114, 116, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 150, 152, 154, 156, 157, 158, 159, 162, 164, 166, 169, 170, 172, 174, 178, 179, 180, 181, 186, 187, 188, 189, 190, 191, 192, 193, 197, 198, 200, 202, 203, 204, 205, 207, 208, 209, 211, 212, 214, 216, 217, 218, 219, 221, 222, 224, 227, 228, 229, 232, 233, 235, 236, 237, 238, 239, 241, 242, 245, 246, 248, 250, 251, 254, 255, 257, 260, 261, 264, 265, 266, 268, 269, 270, 271, 272, 274, 275, 276, 277, 281, 287, 300, 301, 312, 315, 316, 317, 326, 338, 342, 343, 346, 353, 355, 356, 359, 371, 372, 373, 374, 375, 376, 377, 383, 384, 397, 406, 407, 410, 413, 414, 417, 420, 428, 431, 435, 441, 457, 459, 461, 462, 463, 466, 468, 470, 473, 478, 490, 494, 495, 500, 503, 508, 509, 510, 511, 512, 513, 515, 518, 520, 521, 524, 525, 527, 528, 529, 530, 531, 535, 536, 537, 538, 539, 540, 549, 550, 552, 553, 554, 555, 556, 557, 559, 564, 570, 572, 575, 576, 577, 578, 579, 580, 583, 584, 585, 587, 588, 589, 590, 591, 593, 594, 595, 598, 600, 601, 602, 603, 604, 609, 610, 611, 614, 616, 617, 623, 628, 632, 633, 634, 635, 636, 637, 638, 641, 643, 644, 650, 651, 652, 653, 654, 655, 659, 665, 667, 670, 673, 674, 678, 680, 681, 682, 683, 687, 691, 692, 699, 702, 704, 705, 709, 711, 712, 722, 723, 725, 727, 728, 731, 732, 734, 736, 739, 740, 743, 744, 750, 752, 756, 760, 761, 762, 767, 771, 783, 784, 786, 787, 788, 791, 792, 793, 796, 799, 801, 803, 809, 810, 811, 812, 813, 814, 816, 818, 819, 823, 824, 828, 829, 833, 835, 837, 839, 840, 841, 843, 844, 845, 846, 847, 851, 852, 853, 855, 858, 859, 860, 861, 862, 865, 871, 882, 883, 886, 892, 893, 902, 914, 918, 919, 922, 928, 930, 932, 933, 934, 939, 942, 950, 951, 952, 953, 954, 955, 961, 962, 964, 975, 988, 989, 992, 995, 996, 999, 1002, 1010, 1013, 1015, 1018, 1023, 1024, 1032, 1033, 1035, 1037, 1042, 1046, 1048, 1049, 1051, 1052, 1058, 1060, 1062, 1063, 1073, 1077, 1078, 1083, 1086, 1091, 1092, 1093, 1094, 1095, 1096, 1098, 1101, 1104, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1116, 1117, 1118, 1119, 1120, 1123, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1138, 1139, 1141, 1142, 1144, 1147, 1148, 1149, 1152, 1153, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1169, 1170, 1172, 1173, 1175, 1176, 1182, 1187, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1200, 1202, 1203, 1209, 1210, 1211, 1212, 1217, 1218, 1224, 1225, 1227, 1230, 1231, 1233, 1234, 1237, 1239, 1241, 1242, 1243, 1245, 1246, 1248, 1249, 1250, 1251, 1261, 1265, 1269, 1270], "featur": [1, 45, 49, 51, 86, 301], "i": [1, 6, 17, 19, 22, 37, 39, 40, 41, 42, 43, 44, 49, 51, 58, 59, 60, 61, 65, 70, 72, 81, 86, 87, 88, 89, 91, 93, 95, 96, 98, 103, 105, 107, 108, 109, 110, 111, 112, 113, 116, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 150, 152, 153, 154, 158, 159, 162, 166, 169, 171, 172, 174, 177, 181, 187, 188, 189, 190, 191, 192, 193, 194, 197, 198, 199, 201, 203, 205, 206, 207, 208, 209, 210, 211, 214, 217, 218, 222, 224, 225, 226, 233, 235, 236, 237, 238, 239, 242, 245, 248, 249, 250, 251, 253, 255, 260, 261, 264, 265, 266, 268, 269, 270, 271, 275, 277, 278, 287, 300, 301, 309, 312, 314, 315, 316, 317, 327, 330, 337, 338, 376, 377, 381, 382, 383, 386, 396, 410, 414, 417, 428, 436, 437, 438, 441, 445, 457, 459, 461, 463, 479, 485, 493, 494, 497, 498, 500, 508, 513, 514, 518, 520, 524, 529, 531, 535, 538, 539, 540, 549, 564, 572, 575, 577, 578, 579, 580, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 598, 599, 600, 601, 604, 605, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 623, 624, 625, 626, 629, 630, 634, 636, 637, 638, 639, 641, 644, 645, 648, 650, 651, 652, 653, 656, 657, 658, 660, 662, 665, 683, 684, 687, 689, 692, 697, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 714, 715, 717, 718, 723, 727, 728, 729, 730, 732, 733, 736, 739, 740, 743, 744, 747, 748, 749, 750, 752, 756, 758, 759, 760, 761, 762, 767, 771, 786, 787, 791, 792, 793, 796, 799, 801, 803, 806, 809, 810, 811, 812, 813, 814, 817, 818, 819, 821, 823, 824, 828, 829, 833, 837, 840, 841, 843, 845, 846, 847, 848, 852, 853, 855, 856, 859, 862, 865, 871, 883, 886, 890, 891, 892, 893, 906, 913, 914, 931, 934, 939, 942, 954, 955, 956, 959, 960, 961, 964, 974, 992, 996, 999, 1010, 1017, 1018, 1019, 1020, 1021, 1023, 1024, 1028, 1034, 1035, 1036, 1037, 1042, 1044, 1051, 1058, 1059, 1060, 1062, 1063, 1064, 1066, 1068, 1076, 1077, 1080, 1081, 1083, 1091, 1096, 1097, 1101, 1103, 1110, 1128, 1130, 1132, 1134, 1135, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1147, 1148, 1149, 1152, 1153, 1154, 1155, 1156, 1158, 1160, 1164, 1165, 1168, 1169, 1172, 1173, 1174, 1175, 1176, 1177, 1182, 1183, 1184, 1185, 1188, 1189, 1193, 1195, 1196, 1197, 1198, 1200, 1203, 1204, 1207, 1209, 1210, 1211, 1212, 1215, 1216, 1217, 1219, 1221, 1224, 1232, 1237, 1242, 1243, 1249, 1250, 1251, 1261, 1269, 1270], "primarili": 1, "intend": [1, 141, 142, 143, 144, 665, 1224], "us": [1, 12, 14, 16, 17, 19, 25, 30, 32, 37, 38, 40, 45, 48, 58, 61, 65, 66, 67, 68, 70, 72, 73, 81, 88, 89, 90, 91, 108, 110, 111, 113, 115, 118, 119, 120, 121, 122, 123, 124, 126, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 157, 158, 160, 166, 167, 169, 175, 176, 177, 180, 187, 188, 189, 190, 191, 192, 200, 202, 204, 205, 206, 208, 211, 212, 214, 217, 219, 221, 222, 224, 225, 226, 235, 236, 237, 238, 239, 241, 242, 246, 249, 250, 251, 257, 258, 259, 260, 261, 265, 266, 268, 269, 270, 271, 274, 275, 276, 277, 279, 287, 301, 304, 310, 312, 314, 316, 317, 327, 349, 350, 356, 360, 361, 376, 381, 382, 389, 391, 395, 399, 402, 404, 409, 413, 414, 416, 417, 420, 428, 431, 433, 436, 437, 438, 439, 444, 445, 459, 462, 463, 479, 494, 508, 520, 529, 530, 531, 534, 564, 572, 575, 577, 580, 583, 584, 586, 587, 588, 589, 590, 591, 593, 594, 595, 598, 600, 602, 603, 608, 610, 611, 613, 615, 616, 619, 620, 621, 623, 624, 626, 627, 628, 630, 631, 639, 641, 645, 647, 649, 652, 653, 654, 655, 656, 657, 658, 662, 665, 684, 685, 687, 688, 689, 690, 692, 700, 701, 702, 703, 704, 705, 707, 708, 711, 712, 714, 715, 716, 717, 718, 719, 723, 725, 729, 730, 732, 733, 736, 737, 738, 741, 742, 744, 747, 748, 749, 750, 752, 753, 754, 755, 758, 759, 760, 761, 762, 767, 770, 771, 782, 783, 786, 789, 792, 793, 796, 798, 799, 803, 804, 805, 806, 809, 810, 811, 813, 814, 815, 819, 821, 822, 828, 837, 839, 840, 844, 847, 848, 853, 855, 856, 858, 859, 861, 862, 863, 871, 883, 886, 890, 891, 893, 924, 925, 932, 934, 940, 941, 954, 955, 956, 959, 960, 967, 969, 973, 980, 983, 986, 991, 995, 996, 998, 999, 1002, 1010, 1013, 1016, 1019, 1020, 1021, 1026, 1027, 1031, 1034, 1037, 1040, 1041, 1042, 1048, 1051, 1058, 1060, 1062, 1064, 1077, 1091, 1103, 1109, 1110, 1128, 1130, 1132, 1135, 1138, 1140, 1152, 1153, 1156, 1158, 1161, 1162, 1168, 1172, 1174, 1175, 1178, 1179, 1182, 1183, 1185, 1186, 1187, 1189, 1190, 1198, 1200, 1204, 1206, 1215, 1216, 1217, 1221, 1224, 1233, 1238, 1240, 1241, 1242, 1243, 1250, 1251, 1261, 1265, 1269, 1270], "librari": [1, 100, 120, 123, 529, 771, 1270], "author": 1, "domain": [1, 624, 1183], "specif": [1, 35, 39, 40, 107, 109, 111, 113, 118, 121, 122, 123, 127, 128, 129, 133, 147, 148, 160, 205, 301, 417, 420, 656, 657, 658, 662, 789, 883, 886, 999, 1002, 1215, 1216, 1217, 1221, 1261, 1270], "capabl": [1, 40, 301], "which": [1, 11, 15, 25, 36, 37, 39, 40, 41, 42, 43, 44, 45, 58, 59, 60, 61, 72, 81, 82, 83, 84, 85, 110, 118, 119, 120, 121, 122, 123, 132, 133, 134, 141, 142, 149, 151, 159, 160, 166, 169, 174, 175, 187, 188, 189, 190, 191, 192, 198, 208, 235, 260, 264, 266, 270, 301, 312, 410, 414, 417, 428, 442, 463, 465, 469, 472, 474, 475, 476, 520, 529, 531, 540, 583, 584, 587, 588, 589, 590, 591, 593, 594, 595, 638, 660, 714, 715, 717, 718, 719, 758, 759, 761, 771, 787, 789, 796, 799, 801, 810, 811, 813, 814, 819, 837, 841, 852, 853, 883, 992, 996, 999, 1010, 1024, 1025, 1041, 1045, 1050, 1054, 1055, 1056, 1057, 1103, 1138, 1156, 1197, 1219, 1242, 1261, 1270], "mai": [1, 39, 49, 51, 61, 88, 89, 107, 109, 110, 111, 113, 118, 120, 122, 124, 127, 128, 133, 134, 135, 136, 138, 141, 143, 166, 172, 174, 188, 208, 211, 235, 246, 261, 268, 269, 270, 301, 316, 376, 383, 384, 397, 410, 414, 417, 420, 428, 439, 459, 497, 518, 520, 529, 531, 539, 584, 587, 588, 589, 590, 591, 593, 594, 595, 602, 630, 705, 706, 709, 710, 714, 715, 717, 718, 723, 746, 758, 759, 771, 792, 793, 796, 803, 810, 819, 823, 824, 837, 844, 855, 861, 862, 865, 871, 883, 933, 934, 954, 956, 961, 962, 975, 992, 996, 999, 1002, 1010, 1018, 1024, 1037, 1080, 1110, 1128, 1161, 1189, 1217, 1242, 1243, 1261, 1270], "exist": [1, 38, 39, 40, 81, 122, 133, 148, 265, 269, 274, 275, 301, 311, 348, 351, 352, 386, 530, 771, 835, 855, 858, 859, 883, 886, 964, 1109, 1261], "belong": [1, 188, 301, 810, 883], "core": [1, 1270], "cannot": [1, 97, 118, 119, 123, 124, 126, 129, 130, 152, 211, 238, 239, 277, 287, 301, 349, 439, 508, 531, 598, 619, 647, 668, 736, 771, 845, 862, 871, 883, 924, 1091, 1110, 1152, 1178, 1206, 1261], "overrid": [1, 40, 107, 109, 110, 111, 112, 113, 118, 120, 121, 123, 127, 128, 129, 145, 146, 150, 152, 301, 530, 771, 883, 1109, 1261], "str": [1, 7, 8, 10, 11, 14, 15, 17, 20, 21, 22, 25, 26, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 51, 58, 59, 60, 61, 65, 66, 67, 68, 69, 70, 81, 82, 83, 84, 85, 86, 107, 108, 109, 110, 111, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 145, 146, 148, 149, 150, 151, 154, 159, 160, 163, 166, 167, 168, 169, 170, 172, 173, 177, 178, 179, 180, 183, 184, 186, 187, 188, 189, 191, 192, 194, 196, 200, 202, 203, 205, 207, 208, 212, 214, 216, 217, 218, 219, 221, 222, 224, 226, 228, 230, 231, 233, 234, 235, 236, 237, 239, 240, 243, 246, 248, 249, 250, 251, 253, 256, 257, 258, 259, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 301, 309, 310, 311, 333, 338, 348, 350, 351, 352, 355, 366, 377, 380, 387, 410, 413, 414, 417, 420, 428, 439, 441, 445, 447, 451, 452, 455, 461, 463, 488, 489, 498, 499, 500, 514, 517, 520, 528, 531, 539, 541, 542, 544, 551, 552, 553, 554, 555, 561, 564, 568, 570, 572, 578, 579, 581, 583, 584, 587, 588, 589, 590, 591, 593, 594, 595, 603, 610, 611, 666, 667, 668, 670, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 700, 702, 704, 705, 706, 707, 708, 709, 710, 711, 713, 714, 715, 716, 717, 718, 719, 721, 722, 723, 724, 725, 726, 727, 728, 731, 732, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 745, 746, 747, 748, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 767, 771, 778, 787, 789, 792, 793, 794, 796, 797, 798, 799, 801, 802, 803, 806, 809, 810, 811, 813, 814, 816, 818, 819, 828, 829, 833, 835, 836, 837, 838, 841, 842, 844, 845, 846, 847, 852, 853, 854, 855, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 883, 886, 889, 909, 914, 929, 930, 955, 956, 965, 992, 995, 996, 999, 1002, 1010, 1023, 1027, 1071, 1072, 1073, 1083, 1103, 1119, 1120, 1128, 1133, 1134, 1156, 1157, 1225, 1227, 1228, 1238, 1239, 1240, 1249, 1261, 1266, 1269, 1270], "dt": [1, 81, 123, 129, 235, 301, 584, 719, 771, 780, 837, 883, 886, 1268], "attempt": [1, 260, 301], "do": [1, 40, 58, 59, 60, 61, 81, 87, 88, 118, 132, 141, 142, 143, 144, 166, 174, 188, 189, 191, 192, 204, 208, 226, 235, 255, 265, 268, 301, 376, 494, 529, 564, 584, 651, 652, 653, 744, 747, 762, 771, 792, 793, 796, 801, 810, 811, 813, 814, 819, 823, 824, 833, 837, 845, 883, 886, 954, 1024, 1077, 1210, 1211, 1212, 1251, 1261], "so": [1, 120, 121, 132, 152, 186, 188, 189, 191, 192, 226, 235, 301, 327, 337, 463, 498, 520, 531, 584, 641, 651, 652, 653, 771, 810, 811, 813, 814, 837, 883, 913, 1081, 1200, 1210, 1211, 1212], "rais": [1, 20, 21, 25, 39, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 118, 119, 123, 129, 132, 141, 143, 156, 226, 236, 301, 349, 413, 414, 428, 497, 518, 539, 572, 615, 619, 626, 638, 656, 657, 658, 660, 662, 716, 733, 771, 924, 995, 996, 1010, 1080, 1101, 1128, 1174, 1178, 1185, 1197, 1215, 1216, 1217, 1219, 1221, 1242, 1251, 1261], "an": [1, 35, 37, 38, 39, 40, 49, 51, 58, 59, 60, 82, 84, 85, 87, 88, 91, 94, 96, 97, 100, 102, 107, 118, 119, 120, 121, 122, 123, 125, 129, 130, 132, 134, 135, 146, 148, 150, 160, 161, 162, 172, 175, 180, 188, 189, 191, 192, 204, 205, 206, 208, 211, 222, 226, 232, 233, 235, 236, 255, 260, 265, 268, 269, 274, 277, 287, 301, 311, 334, 337, 345, 349, 354, 360, 361, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 386, 387, 410, 413, 417, 431, 442, 444, 445, 451, 452, 455, 478, 490, 491, 494, 497, 498, 518, 519, 520, 528, 529, 531, 540, 550, 551, 571, 572, 580, 584, 585, 587, 588, 589, 590, 591, 593, 594, 595, 615, 619, 624, 626, 627, 656, 657, 658, 660, 662, 673, 679, 687, 693, 697, 714, 715, 717, 718, 720, 722, 725, 729, 730, 731, 732, 733, 744, 746, 747, 750, 753, 758, 759, 761, 762, 767, 771, 783, 789, 790, 791, 792, 793, 796, 801, 803, 806, 810, 811, 813, 814, 819, 824, 833, 837, 845, 855, 858, 860, 862, 871, 883, 886, 910, 913, 921, 924, 929, 938, 940, 941, 942, 946, 947, 948, 949, 950, 951, 952, 953, 954, 964, 999, 1013, 1018, 1025, 1051, 1063, 1073, 1074, 1077, 1080, 1081, 1101, 1102, 1110, 1139, 1141, 1142, 1143, 1144, 1145, 1147, 1148, 1149, 1153, 1156, 1174, 1178, 1183, 1185, 1186, 1215, 1216, 1217, 1219, 1221, 1242, 1251, 1261, 1269], "attributeerror": 1, "howev": [1, 110, 120, 172, 211, 260, 301, 1018, 1261], "can": [1, 19, 32, 40, 45, 48, 70, 72, 73, 81, 90, 91, 110, 118, 119, 120, 123, 124, 129, 130, 132, 135, 137, 138, 146, 147, 148, 150, 152, 154, 159, 161, 169, 170, 180, 187, 188, 189, 190, 191, 192, 200, 202, 204, 211, 222, 226, 235, 238, 241, 249, 260, 264, 265, 268, 274, 277, 287, 301, 304, 312, 316, 367, 370, 376, 406, 407, 410, 413, 417, 420, 428, 442, 445, 463, 478, 494, 520, 529, 531, 539, 547, 550, 552, 553, 554, 555, 564, 570, 572, 577, 583, 584, 587, 588, 589, 590, 591, 593, 594, 595, 600, 603, 605, 608, 611, 616, 629, 641, 651, 652, 653, 656, 670, 696, 723, 725, 729, 730, 736, 761, 767, 770, 771, 782, 787, 792, 799, 801, 803, 810, 811, 813, 814, 837, 839, 841, 847, 852, 858, 861, 862, 883, 886, 893, 934, 954, 955, 988, 989, 992, 995, 996, 999, 1002, 1010, 1025, 1041, 1077, 1103, 1110, 1115, 1128, 1132, 1134, 1138, 1153, 1156, 1158, 1162, 1165, 1168, 1175, 1176, 1177, 1184, 1188, 1200, 1210, 1211, 1212, 1215, 1217, 1242, 1261, 1265, 1269], "other": [1, 25, 40, 41, 45, 70, 88, 118, 119, 120, 132, 141, 142, 143, 144, 169, 171, 174, 177, 181, 207, 208, 217, 218, 236, 238, 241, 242, 269, 272, 274, 275, 299, 301, 309, 313, 315, 327, 359, 380, 434, 435, 445, 449, 454, 456, 463, 468, 481, 488, 509, 510, 511, 512, 526, 535, 538, 546, 548, 558, 559, 563, 579, 611, 669, 677, 679, 686, 688, 690, 698, 699, 700, 708, 712, 714, 738, 742, 750, 753, 755, 771, 783, 793, 799, 806, 818, 819, 828, 829, 839, 840, 855, 858, 859, 860, 883, 886, 892, 939, 958, 1017, 1024, 1049, 1071, 1092, 1093, 1094, 1095, 1134, 1155, 1244, 1252, 1260, 1261], "onli": [1, 15, 18, 25, 35, 37, 40, 58, 65, 67, 72, 81, 86, 89, 91, 118, 119, 122, 124, 126, 130, 132, 133, 135, 136, 137, 138, 141, 142, 143, 144, 148, 150, 154, 157, 169, 174, 188, 191, 193, 205, 207, 208, 211, 212, 214, 219, 226, 235, 237, 238, 251, 257, 259, 260, 269, 270, 287, 301, 310, 312, 314, 316, 327, 358, 359, 410, 418, 439, 448, 457, 478, 529, 531, 550, 552, 553, 554, 555, 564, 570, 577, 587, 588, 589, 590, 591, 593, 594, 595, 616, 641, 670, 681, 714, 715, 736, 771, 792, 799, 810, 811, 813, 814, 815, 818, 819, 822, 837, 855, 871, 883, 890, 891, 892, 936, 939, 955, 992, 1024, 1030, 1035, 1051, 1110, 1128, 1132, 1175, 1200, 1237, 1240, 1261, 1269, 1270], "gener": [1, 120, 121, 139, 145, 146, 147, 148, 150, 156, 164, 226, 239, 258, 260, 265, 301, 508, 598, 604, 693, 714, 717, 729, 730, 732, 747, 758, 759, 771, 883, 1091, 1152, 1164, 1238, 1261, 1270], "userwarn": 1, "pl": [1, 2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 58, 59, 60, 61, 62, 65, 66, 67, 68, 69, 70, 72, 73, 81, 82, 83, 84, 85, 89, 90, 91, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 129, 132, 133, 134, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 152, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 180, 182, 183, 184, 185, 186, 187, 188, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 301, 304, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 357, 358, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 396, 397, 398, 400, 401, 403, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 636, 637, 639, 640, 641, 642, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 714, 715, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 750, 751, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 767, 771, 784, 786, 787, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 815, 816, 817, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 841, 843, 845, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 883, 886, 888, 889, 890, 891, 892, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 928, 929, 930, 931, 933, 934, 935, 936, 937, 938, 939, 942, 943, 944, 945, 946, 947, 948, 949, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 970, 971, 972, 974, 975, 976, 977, 978, 979, 981, 982, 984, 985, 987, 988, 989, 990, 992, 993, 994, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1030, 1031, 1032, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1065, 1067, 1068, 1069, 1070, 1071, 1072, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1155, 1156, 1158, 1159, 1160, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1177, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1188, 1189, 1190, 1195, 1196, 1198, 1199, 1200, 1201, 1204, 1206, 1207, 1208, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1227, 1230, 1231, 1232, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1252, 1261, 1265, 1269, 1270], "register_expr_namespac": [1, 82, 84, 85], "greet": 1, "def": [1, 72, 82, 83, 84, 85, 146, 147, 148, 150, 154, 225, 265, 301, 309, 568, 624, 653, 686, 735, 771, 793, 832, 883, 886, 1183, 1270], "__init__": [1, 2, 3, 4, 5, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 62, 63, 64, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 83, 84, 85, 145, 1269], "self": [1, 66, 67, 68, 70, 82, 83, 84, 85, 87, 88, 161, 162, 174, 194, 196, 197, 198, 210, 212, 214, 216, 217, 219, 223, 224, 226, 228, 229, 231, 232, 233, 239, 247, 248, 250, 251, 253, 258, 265, 267, 270, 271, 272, 276, 277, 278, 301, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 347, 353, 354, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 545, 546, 547, 548, 549, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 767, 771, 786, 787, 788, 789, 791, 792, 793, 795, 797, 798, 799, 801, 802, 803, 804, 805, 806, 807, 808, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 859, 860, 861, 862, 883, 892, 893, 929, 942, 1024, 1028, 1038, 1108, 1109, 1110, 1121, 1125, 1126, 1131, 1134, 1153, 1156, 1158, 1170, 1248, 1252, 1261], "_expr": [1, 83], "hello": [1, 25, 66, 69, 651, 652, 653, 1083, 1210, 1211, 1212], "return": [1, 10, 11, 35, 37, 38, 39, 40, 41, 42, 43, 44, 58, 59, 60, 61, 65, 69, 72, 81, 82, 83, 84, 85, 86, 87, 88, 98, 101, 106, 107, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 136, 147, 157, 159, 161, 164, 165, 168, 170, 172, 173, 174, 175, 176, 179, 180, 182, 183, 186, 187, 188, 190, 191, 194, 196, 203, 204, 205, 206, 207, 209, 210, 211, 213, 215, 220, 221, 222, 224, 225, 226, 230, 235, 236, 237, 238, 239, 252, 253, 254, 260, 261, 264, 265, 266, 270, 274, 275, 282, 284, 286, 287, 290, 295, 301, 312, 314, 318, 319, 320, 321, 322, 323, 326, 327, 331, 332, 333, 335, 337, 338, 345, 348, 350, 351, 352, 353, 362, 363, 364, 365, 366, 377, 378, 383, 385, 388, 389, 390, 392, 394, 396, 397, 398, 400, 401, 403, 405, 406, 407, 408, 410, 411, 412, 414, 415, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 441, 452, 453, 455, 458, 459, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 482, 483, 486, 487, 489, 495, 497, 498, 499, 500, 502, 503, 508, 517, 518, 519, 525, 530, 540, 542, 547, 568, 572, 574, 578, 579, 580, 582, 598, 599, 605, 606, 607, 614, 615, 617, 618, 620, 622, 623, 624, 625, 626, 629, 630, 631, 632, 633, 635, 636, 637, 642, 643, 645, 646, 647, 648, 660, 665, 672, 674, 675, 676, 678, 679, 681, 682, 683, 686, 687, 691, 693, 694, 695, 696, 697, 702, 704, 713, 714, 715, 716, 717, 718, 719, 722, 725, 727, 729, 730, 731, 732, 733, 734, 735, 736, 744, 747, 750, 753, 756, 757, 758, 759, 761, 762, 771, 787, 790, 792, 793, 795, 796, 800, 801, 803, 808, 810, 811, 813, 814, 815, 818, 821, 822, 824, 832, 833, 835, 837, 841, 845, 850, 851, 852, 853, 858, 859, 866, 868, 870, 874, 879, 883, 890, 891, 892, 900, 901, 903, 904, 905, 906, 907, 908, 909, 911, 913, 914, 921, 923, 925, 928, 931, 934, 938, 955, 956, 961, 963, 966, 967, 968, 970, 972, 974, 975, 976, 977, 978, 979, 981, 982, 984, 985, 987, 988, 989, 990, 992, 993, 994, 996, 997, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1017, 1018, 1023, 1024, 1029, 1032, 1034, 1036, 1037, 1043, 1045, 1046, 1047, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1061, 1063, 1065, 1066, 1067, 1068, 1069, 1070, 1072, 1078, 1080, 1081, 1082, 1083, 1085, 1086, 1091, 1100, 1101, 1102, 1108, 1109, 1110, 1115, 1122, 1128, 1134, 1135, 1136, 1137, 1138, 1152, 1154, 1155, 1165, 1173, 1174, 1176, 1177, 1179, 1181, 1182, 1183, 1184, 1185, 1188, 1189, 1190, 1191, 1192, 1194, 1195, 1196, 1201, 1202, 1204, 1205, 1206, 1207, 1219, 1224, 1232, 1234, 1243, 1245, 1247, 1248, 1249, 1252, 1261, 1269, 1270], "lit": [1, 311, 348, 463, 478, 550, 626, 705, 709, 723, 744, 747, 762, 771, 1027, 1261], "alia": [1, 17, 80, 81, 83, 85, 188, 210, 226, 235, 267, 274, 277, 301, 309, 313, 348, 350, 351, 352, 353, 366, 367, 368, 369, 370, 377, 379, 383, 384, 386, 387, 388, 389, 390, 392, 393, 394, 397, 398, 401, 403, 405, 408, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 425, 427, 428, 429, 430, 431, 434, 435, 447, 449, 454, 456, 461, 463, 467, 471, 478, 481, 483, 526, 531, 535, 536, 537, 538, 540, 543, 546, 548, 550, 558, 559, 563, 565, 569, 572, 575, 577, 597, 599, 615, 616, 618, 621, 623, 624, 626, 630, 631, 641, 642, 645, 646, 647, 648, 649, 654, 655, 666, 667, 668, 669, 677, 678, 679, 685, 686, 693, 694, 695, 698, 699, 700, 714, 717, 719, 720, 723, 724, 729, 732, 735, 736, 746, 753, 758, 761, 771, 810, 816, 822, 837, 854, 858, 862, 883, 955, 961, 962, 965, 968, 970, 971, 972, 978, 979, 982, 985, 987, 988, 989, 990, 992, 993, 994, 995, 996, 999, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1066, 1128, 1133, 1182, 1183, 1206, 1207, 1261], "hi": 1, "goodby": 1, "say\u014dnara": 1, "bye": 1, "world": [1, 25, 66, 69, 616, 641, 651, 652, 653, 663, 1083, 1175, 1200, 1210, 1211, 1212, 1222], "select": [1, 13, 38, 65, 66, 67, 81, 82, 83, 84, 117, 118, 119, 120, 121, 122, 124, 126, 130, 132, 138, 147, 203, 204, 208, 211, 222, 225, 236, 242, 248, 262, 267, 270, 277, 301, 308, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 335, 340, 341, 344, 345, 346, 347, 348, 351, 352, 353, 355, 357, 358, 362, 363, 364, 365, 376, 378, 379, 380, 381, 382, 384, 386, 387, 397, 406, 407, 410, 413, 421, 422, 423, 424, 425, 426, 427, 428, 431, 433, 436, 437, 438, 439, 440, 441, 442, 446, 448, 450, 453, 457, 459, 460, 461, 462, 464, 465, 469, 477, 478, 479, 480, 482, 494, 495, 520, 522, 523, 524, 525, 529, 531, 532, 533, 534, 545, 547, 549, 550, 556, 557, 561, 562, 563, 566, 567, 571, 573, 574, 575, 576, 577, 578, 580, 581, 582, 586, 592, 596, 598, 599, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 622, 623, 624, 625, 626, 656, 666, 668, 671, 675, 676, 678, 680, 681, 682, 683, 684, 687, 689, 692, 694, 695, 696, 697, 699, 701, 702, 703, 704, 707, 718, 719, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 737, 739, 740, 741, 743, 746, 747, 751, 752, 753, 754, 756, 760, 767, 771, 794, 819, 832, 840, 841, 846, 854, 860, 862, 883, 886, 920, 922, 995, 1031, 1077, 1153, 1156, 1169, 1188, 1215, 1233, 1261, 1269], "shape": [1, 2, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 32, 33, 62, 65, 66, 67, 69, 72, 73, 81, 82, 83, 84, 85, 89, 90, 91, 104, 107, 108, 109, 110, 111, 112, 113, 114, 118, 132, 138, 148, 150, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 173, 174, 175, 176, 177, 180, 182, 183, 185, 187, 188, 193, 194, 196, 198, 199, 200, 202, 203, 204, 207, 208, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 226, 227, 228, 230, 231, 233, 234, 235, 239, 241, 245, 248, 249, 250, 251, 252, 253, 256, 258, 259, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 301, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 357, 358, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 396, 397, 398, 400, 401, 403, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 531, 532, 533, 534, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 636, 637, 639, 640, 641, 642, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 714, 715, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 746, 747, 750, 751, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 767, 771, 786, 787, 789, 790, 792, 793, 795, 796, 797, 798, 799, 802, 803, 804, 805, 806, 807, 808, 809, 810, 815, 817, 818, 819, 820, 822, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 841, 843, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 858, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 883, 886, 888, 889, 892, 894, 895, 896, 897, 898, 899, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 928, 929, 930, 933, 935, 936, 938, 939, 942, 943, 944, 945, 946, 947, 948, 949, 954, 955, 956, 957, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 970, 971, 972, 974, 975, 978, 979, 981, 982, 985, 987, 988, 989, 990, 992, 993, 994, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1019, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1030, 1031, 1032, 1035, 1036, 1037, 1038, 1040, 1041, 1043, 1045, 1047, 1049, 1050, 1053, 1054, 1055, 1056, 1057, 1061, 1063, 1067, 1068, 1069, 1070, 1071, 1072, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1110, 1115, 1122, 1124, 1125, 1126, 1128, 1130, 1133, 1134, 1135, 1136, 1137, 1138, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1156, 1160, 1164, 1165, 1166, 1167, 1169, 1170, 1171, 1173, 1174, 1175, 1177, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1188, 1189, 1190, 1195, 1196, 1198, 1199, 1200, 1201, 1204, 1206, 1207, 1208, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1227, 1230, 1232, 1235, 1236, 1238, 1239, 1240, 1244, 1245, 1246, 1247, 1248, 1249, 1252, 1261, 1269], "3": [1, 2, 12, 13, 14, 15, 16, 18, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 32, 36, 37, 39, 40, 41, 42, 43, 44, 45, 62, 65, 67, 68, 70, 81, 82, 83, 84, 85, 89, 91, 107, 108, 109, 110, 111, 112, 113, 114, 118, 121, 123, 129, 132, 138, 140, 141, 142, 143, 144, 147, 148, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 177, 180, 182, 183, 184, 185, 186, 187, 188, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 301, 304, 309, 310, 311, 312, 314, 326, 327, 328, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 357, 358, 365, 366, 367, 368, 369, 370, 376, 377, 379, 380, 381, 382, 384, 386, 387, 388, 389, 393, 394, 396, 397, 398, 400, 401, 403, 405, 408, 410, 412, 413, 414, 415, 417, 418, 419, 420, 421, 428, 429, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 477, 478, 479, 481, 482, 483, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 520, 522, 523, 524, 525, 526, 528, 529, 531, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 558, 561, 562, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 608, 610, 611, 612, 615, 616, 617, 620, 621, 623, 624, 625, 626, 627, 630, 631, 634, 639, 641, 642, 644, 645, 646, 647, 648, 649, 650, 657, 662, 666, 667, 668, 669, 670, 672, 678, 681, 682, 683, 685, 686, 692, 693, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 714, 715, 717, 718, 719, 720, 721, 722, 723, 724, 727, 728, 729, 730, 731, 732, 733, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 746, 747, 750, 751, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 767, 771, 786, 787, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 815, 816, 817, 818, 819, 820, 821, 822, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 841, 843, 845, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 883, 886, 888, 889, 892, 894, 896, 897, 898, 900, 901, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 920, 921, 922, 928, 929, 930, 933, 935, 936, 937, 942, 943, 944, 945, 946, 947, 948, 949, 954, 955, 956, 957, 958, 959, 960, 962, 964, 965, 968, 971, 972, 974, 976, 977, 978, 981, 984, 985, 987, 993, 995, 996, 997, 999, 1001, 1002, 1003, 1005, 1006, 1008, 1010, 1012, 1013, 1015, 1017, 1018, 1019, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1030, 1031, 1032, 1035, 1036, 1037, 1038, 1040, 1041, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1064, 1065, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1084, 1085, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1122, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1133, 1134, 1135, 1136, 1137, 1138, 1140, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1156, 1158, 1159, 1160, 1164, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1175, 1176, 1179, 1180, 1182, 1183, 1184, 1186, 1189, 1190, 1193, 1198, 1200, 1201, 1203, 1204, 1208, 1209, 1216, 1221, 1227, 1230, 1231, 1232, 1235, 1236, 1237, 1238, 1241, 1242, 1243, 1245, 1246, 1247, 1248, 1249, 1250, 1252, 1261, 1269, 1270], "1": [1, 2, 12, 13, 14, 16, 17, 18, 20, 22, 23, 24, 26, 27, 28, 29, 30, 32, 33, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 61, 62, 65, 66, 67, 68, 69, 70, 73, 81, 82, 83, 84, 85, 89, 107, 108, 109, 110, 111, 112, 113, 114, 118, 119, 122, 123, 124, 129, 132, 133, 134, 137, 138, 140, 141, 142, 143, 144, 145, 148, 150, 156, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 180, 182, 183, 184, 185, 186, 187, 188, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 301, 304, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 331, 332, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 353, 354, 355, 357, 358, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 393, 394, 396, 397, 398, 400, 401, 403, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 471, 472, 474, 475, 476, 477, 478, 479, 480, 482, 483, 486, 487, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 531, 532, 533, 534, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 639, 640, 647, 648, 649, 651, 652, 653, 665, 666, 667, 668, 669, 670, 671, 672, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 692, 693, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 733, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 748, 749, 750, 751, 752, 753, 754, 755, 756, 758, 759, 760, 761, 767, 771, 786, 787, 789, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 815, 816, 817, 818, 819, 820, 822, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 841, 843, 844, 845, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 883, 886, 888, 889, 892, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 920, 921, 922, 928, 929, 933, 935, 936, 937, 939, 942, 943, 944, 946, 947, 948, 949, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 971, 972, 974, 975, 976, 977, 978, 979, 981, 982, 984, 985, 987, 988, 989, 990, 992, 993, 994, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1030, 1031, 1032, 1035, 1036, 1037, 1038, 1040, 1041, 1043, 1045, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1063, 1065, 1069, 1070, 1072, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1084, 1085, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1152, 1153, 1154, 1156, 1158, 1159, 1160, 1161, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1182, 1184, 1185, 1186, 1188, 1189, 1190, 1198, 1206, 1207, 1224, 1227, 1230, 1231, 1232, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1252, 1261, 1265, 1269, 1270], "2": [1, 2, 12, 13, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 36, 37, 39, 40, 41, 42, 43, 44, 45, 62, 65, 67, 68, 70, 73, 81, 82, 83, 84, 85, 89, 107, 108, 109, 110, 111, 112, 113, 114, 118, 121, 132, 138, 139, 140, 141, 142, 143, 144, 147, 148, 150, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 180, 182, 183, 184, 185, 186, 187, 188, 194, 195, 196, 198, 200, 201, 202, 203, 204, 205, 207, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 301, 304, 308, 309, 310, 311, 313, 315, 317, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 353, 354, 357, 358, 359, 364, 365, 366, 367, 368, 369, 370, 376, 377, 379, 380, 383, 385, 386, 387, 388, 389, 390, 392, 396, 400, 405, 406, 407, 410, 411, 412, 413, 414, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 531, 542, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 608, 609, 610, 611, 612, 614, 616, 618, 620, 621, 623, 625, 626, 627, 629, 630, 631, 636, 637, 639, 640, 641, 642, 645, 647, 648, 649, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 672, 675, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 714, 715, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 733, 735, 736, 737, 739, 740, 741, 743, 746, 750, 751, 752, 753, 754, 756, 759, 760, 761, 767, 771, 786, 787, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 815, 816, 818, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 841, 843, 845, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 883, 886, 888, 889, 892, 895, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 928, 933, 935, 936, 937, 938, 942, 943, 945, 947, 948, 949, 954, 955, 956, 957, 958, 961, 964, 966, 967, 970, 972, 976, 977, 978, 981, 984, 985, 987, 988, 989, 994, 995, 996, 1000, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1030, 1031, 1032, 1035, 1036, 1037, 1038, 1040, 1041, 1043, 1045, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1065, 1069, 1070, 1071, 1072, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1133, 1134, 1135, 1136, 1137, 1138, 1140, 1141, 1142, 1143, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1156, 1158, 1159, 1160, 1164, 1166, 1168, 1169, 1170, 1171, 1172, 1173, 1177, 1182, 1184, 1185, 1186, 1188, 1190, 1198, 1199, 1206, 1207, 1210, 1211, 1212, 1215, 1217, 1218, 1219, 1220, 1222, 1223, 1227, 1230, 1231, 1232, 1235, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1245, 1246, 1247, 1248, 1249, 1250, 1252, 1261, 1265, 1269, 1270], "column_0": [1, 211, 265, 301], "register_dataframe_namespac": [1, 83, 84, 85], "split": [1, 40, 82, 206, 301, 647, 648, 1206, 1207], "splitfram": [1, 82], "df": [1, 12, 13, 14, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 36, 37, 39, 40, 41, 42, 43, 44, 45, 62, 65, 66, 82, 83, 107, 108, 109, 110, 111, 112, 113, 114, 119, 120, 121, 132, 146, 148, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 175, 176, 177, 180, 183, 184, 185, 186, 187, 188, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 301, 304, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 353, 354, 355, 357, 358, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 396, 397, 398, 400, 401, 403, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 531, 532, 533, 534, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 636, 637, 639, 640, 641, 642, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 659, 660, 661, 663, 664, 665, 666, 668, 669, 670, 671, 672, 675, 676, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 715, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 735, 736, 737, 738, 739, 740, 741, 742, 743, 746, 750, 751, 752, 753, 754, 755, 756, 759, 760, 761, 767, 771, 810, 837, 841, 854, 855, 868, 871, 879, 883, 886, 920, 922, 995, 1188, 1199, 1206, 1207, 1239, 1261, 1270], "_df": [1, 82], "by_alternate_row": 1, "list": [1, 2, 18, 39, 40, 48, 65, 69, 73, 81, 82, 84, 87, 88, 107, 109, 110, 111, 113, 114, 116, 117, 118, 119, 121, 122, 123, 124, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 146, 147, 148, 150, 163, 167, 170, 172, 173, 177, 185, 187, 188, 196, 205, 221, 224, 236, 237, 238, 241, 249, 256, 257, 265, 266, 267, 268, 274, 279, 280, 301, 310, 338, 345, 346, 377, 441, 447, 452, 460, 468, 527, 529, 531, 540, 541, 564, 572, 578, 580, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 610, 611, 624, 646, 666, 668, 673, 677, 696, 699, 715, 718, 720, 728, 730, 733, 736, 751, 753, 759, 771, 794, 800, 802, 806, 809, 810, 839, 847, 853, 854, 858, 860, 863, 864, 883, 886, 914, 921, 922, 937, 955, 1018, 1023, 1028, 1031, 1033, 1037, 1038, 1049, 1128, 1135, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1147, 1148, 1149, 1154, 1175, 1183, 1200, 1205, 1233, 1241, 1244, 1261, 1270], "with_row_index": [1, 276, 301, 587, 588, 590, 593, 594, 595, 771, 861, 883, 1153, 1261], "name": [1, 23, 27, 29, 36, 37, 38, 40, 43, 58, 66, 67, 68, 69, 70, 73, 82, 83, 84, 85, 89, 95, 107, 109, 110, 111, 112, 113, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 143, 144, 145, 146, 148, 149, 150, 151, 159, 160, 163, 167, 168, 169, 173, 177, 178, 179, 183, 184, 186, 187, 190, 203, 204, 205, 207, 208, 211, 213, 215, 217, 218, 220, 224, 226, 230, 236, 237, 238, 240, 241, 242, 249, 252, 256, 258, 260, 263, 264, 265, 266, 267, 268, 269, 274, 275, 276, 277, 278, 279, 301, 311, 316, 348, 350, 351, 352, 377, 417, 420, 439, 445, 463, 472, 474, 475, 476, 478, 520, 528, 531, 539, 541, 543, 564, 570, 572, 581, 611, 624, 625, 666, 668, 670, 687, 688, 689, 690, 692, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 707, 708, 711, 712, 721, 722, 727, 728, 731, 737, 738, 739, 740, 741, 742, 743, 745, 748, 749, 750, 752, 753, 754, 755, 756, 760, 761, 767, 771, 787, 789, 794, 798, 799, 802, 806, 809, 812, 818, 819, 828, 829, 835, 838, 839, 840, 841, 847, 852, 853, 854, 855, 858, 859, 860, 861, 862, 863, 883, 886, 889, 938, 955, 999, 1002, 1029, 1103, 1128, 1133, 1182, 1183, 1184, 1198, 1225, 1228, 1238, 1239, 1243, 1261, 1269, 1270], "n": [1, 17, 18, 22, 30, 37, 44, 48, 50, 58, 67, 68, 82, 83, 84, 85, 116, 118, 119, 132, 157, 161, 174, 182, 188, 194, 205, 206, 210, 211, 237, 238, 239, 245, 246, 250, 253, 254, 257, 259, 271, 284, 295, 301, 317, 353, 376, 379, 384, 386, 393, 419, 431, 442, 445, 453, 458, 483, 492, 499, 508, 509, 513, 517, 520, 565, 568, 578, 593, 595, 598, 601, 602, 608, 613, 630, 631, 639, 647, 648, 651, 652, 658, 672, 674, 678, 679, 684, 686, 701, 703, 714, 715, 716, 717, 718, 719, 725, 727, 744, 747, 748, 749, 752, 756, 760, 762, 771, 790, 792, 808, 810, 815, 822, 843, 844, 848, 850, 851, 856, 868, 879, 883, 886, 928, 938, 954, 957, 962, 964, 971, 1001, 1013, 1024, 1025, 1032, 1036, 1066, 1075, 1082, 1091, 1092, 1096, 1100, 1103, 1124, 1147, 1149, 1152, 1160, 1161, 1168, 1172, 1189, 1190, 1198, 1206, 1207, 1217, 1232, 1234, 1240, 1245, 1250, 1261, 1269, 1270], "filter": [1, 82, 122, 132, 133, 138, 169, 200, 201, 202, 207, 226, 287, 301, 539, 541, 621, 649, 685, 723, 761, 771, 799, 803, 816, 818, 871, 883, 886, 1156, 1261], "col": [1, 17, 37, 40, 58, 81, 82, 83, 84, 111, 113, 132, 146, 148, 177, 187, 188, 201, 203, 209, 211, 222, 225, 226, 235, 236, 241, 249, 267, 268, 274, 279, 301, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 350, 351, 352, 353, 354, 355, 357, 358, 359, 362, 363, 364, 366, 367, 368, 369, 370, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 396, 397, 398, 400, 401, 403, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 452, 453, 454, 455, 456, 459, 461, 462, 463, 464, 467, 468, 471, 472, 474, 477, 478, 479, 480, 481, 484, 485, 486, 487, 488, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 520, 521, 522, 523, 524, 525, 526, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 548, 549, 550, 556, 557, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 618, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 636, 637, 639, 640, 641, 642, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 671, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 692, 697, 698, 699, 700, 702, 704, 707, 719, 722, 723, 724, 725, 726, 727, 728, 731, 737, 739, 740, 741, 743, 745, 746, 752, 754, 756, 760, 761, 771, 791, 806, 809, 810, 816, 821, 832, 837, 839, 847, 854, 858, 860, 863, 883, 886, 920, 922, 992, 995, 1077, 1135, 1153, 1156, 1188, 1215, 1261, 1270], "0": [1, 12, 14, 16, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 40, 45, 49, 61, 62, 65, 70, 81, 82, 83, 85, 89, 91, 108, 118, 119, 120, 121, 123, 124, 126, 129, 130, 132, 135, 136, 137, 138, 140, 145, 146, 147, 148, 150, 156, 157, 160, 161, 162, 164, 165, 166, 167, 170, 171, 175, 176, 178, 180, 181, 182, 185, 186, 187, 188, 189, 190, 191, 192, 193, 197, 198, 199, 203, 205, 206, 207, 209, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 226, 227, 228, 232, 233, 237, 238, 239, 240, 241, 246, 248, 249, 250, 251, 252, 254, 258, 259, 260, 261, 262, 265, 268, 270, 271, 274, 276, 277, 279, 281, 283, 285, 287, 288, 289, 290, 291, 292, 293, 294, 301, 308, 310, 311, 313, 316, 318, 319, 320, 321, 322, 323, 326, 327, 328, 331, 332, 334, 337, 354, 357, 358, 360, 361, 362, 363, 364, 371, 372, 373, 374, 375, 376, 377, 378, 381, 382, 388, 389, 391, 394, 395, 398, 399, 401, 402, 403, 404, 408, 409, 413, 415, 416, 418, 423, 424, 426, 427, 428, 431, 434, 435, 436, 437, 438, 440, 442, 443, 444, 445, 448, 449, 453, 454, 456, 457, 459, 462, 465, 466, 469, 470, 472, 473, 474, 475, 476, 478, 479, 481, 486, 487, 490, 491, 494, 497, 498, 503, 505, 518, 520, 522, 523, 524, 526, 527, 528, 529, 530, 532, 533, 534, 540, 545, 546, 548, 550, 556, 557, 558, 559, 560, 562, 563, 565, 568, 569, 570, 572, 573, 574, 575, 579, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 602, 603, 605, 606, 607, 608, 612, 613, 617, 618, 623, 624, 626, 628, 632, 633, 634, 635, 638, 643, 644, 650, 656, 658, 669, 670, 671, 673, 674, 675, 676, 677, 679, 684, 685, 687, 691, 693, 694, 695, 696, 697, 698, 699, 701, 703, 705, 709, 711, 712, 714, 716, 720, 723, 729, 730, 732, 734, 736, 739, 740, 745, 746, 751, 757, 758, 759, 760, 761, 762, 767, 771, 789, 790, 791, 795, 796, 798, 800, 804, 805, 808, 809, 810, 811, 812, 813, 814, 817, 818, 821, 823, 824, 827, 831, 833, 834, 838, 839, 844, 845, 847, 848, 851, 856, 858, 860, 861, 862, 863, 865, 867, 869, 871, 872, 873, 874, 875, 876, 877, 878, 883, 886, 893, 894, 895, 896, 897, 898, 899, 900, 902, 904, 907, 913, 929, 933, 935, 936, 938, 940, 941, 943, 944, 945, 950, 951, 952, 953, 954, 955, 956, 958, 959, 960, 967, 969, 972, 973, 977, 978, 979, 980, 982, 983, 985, 986, 990, 991, 995, 996, 997, 998, 1005, 1006, 1008, 1009, 1010, 1013, 1016, 1019, 1020, 1021, 1026, 1030, 1032, 1035, 1037, 1040, 1042, 1045, 1046, 1048, 1050, 1051, 1052, 1054, 1055, 1056, 1057, 1058, 1060, 1062, 1063, 1064, 1069, 1070, 1073, 1074, 1077, 1080, 1081, 1086, 1088, 1101, 1103, 1105, 1106, 1107, 1108, 1109, 1112, 1113, 1124, 1128, 1129, 1130, 1134, 1138, 1139, 1140, 1142, 1143, 1145, 1146, 1147, 1149, 1150, 1151, 1152, 1155, 1157, 1161, 1165, 1166, 1167, 1168, 1171, 1172, 1176, 1177, 1182, 1183, 1185, 1187, 1188, 1191, 1192, 1193, 1194, 1197, 1202, 1203, 1209, 1215, 1217, 1233, 1234, 1235, 1236, 1238, 1243, 1244, 1248, 1250, 1251, 1261, 1270], "drop": [1, 110, 168, 169, 211, 266, 274, 301, 379, 381, 382, 492, 493, 572, 771, 799, 853, 858, 883, 957, 959, 960, 1075, 1076, 1128, 1261], "aaa": [1, 40, 301, 615, 626, 666, 668, 1174, 1185], "bbb": [1, 40, 301, 666, 668, 886], "ccc": [1, 40, 301, 666, 668], "ddd": [1, 40, 301, 666, 668], "eee": [1, 40, 301, 886], "fff": 1, "schema": [1, 19, 33, 36, 38, 39, 65, 82, 83, 84, 89, 102, 103, 107, 109, 110, 111, 113, 118, 119, 120, 121, 125, 127, 128, 130, 131, 132, 136, 137, 146, 148, 157, 161, 162, 170, 172, 206, 211, 218, 222, 260, 301, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 389, 519, 520, 539, 627, 628, 686, 753, 771, 790, 791, 800, 823, 824, 829, 841, 865, 871, 883, 886, 920, 942, 1186, 1187, 1261], "txt": [1, 17, 132, 615, 626, 1185], "string": [1, 5, 7, 8, 10, 11, 17, 19, 20, 21, 25, 36, 37, 38, 40, 43, 44, 48, 51, 58, 65, 72, 73, 80, 90, 91, 110, 114, 118, 119, 120, 121, 132, 141, 142, 143, 144, 145, 146, 147, 150, 153, 159, 160, 170, 172, 173, 180, 186, 187, 188, 190, 208, 224, 226, 235, 238, 240, 241, 242, 249, 259, 260, 264, 265, 268, 270, 274, 275, 278, 279, 301, 309, 333, 338, 350, 351, 356, 410, 414, 417, 420, 428, 439, 441, 447, 451, 463, 500, 542, 564, 568, 579, 584, 587, 588, 589, 590, 591, 593, 594, 595, 611, 614, 615, 616, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 665, 667, 688, 690, 696, 698, 699, 700, 708, 712, 714, 715, 717, 718, 724, 738, 742, 750, 753, 755, 758, 759, 761, 771, 787, 789, 800, 801, 802, 809, 810, 812, 819, 837, 838, 839, 840, 841, 847, 852, 858, 859, 863, 883, 886, 914, 926, 931, 932, 992, 996, 999, 1002, 1010, 1023, 1041, 1062, 1083, 1134, 1173, 1174, 1175, 1177, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1204, 1205, 1206, 1207, 1208, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1227, 1240, 1261, 1270], "register_lazyframe_namespac": [1, 82, 83, 85], "dtypeoper": [1, 84], "ldf": [1, 84, 863, 864, 867, 869, 872, 873, 874, 875, 876, 877, 878], "_ldf": [1, 84], "upcast_integer_typ": [1, 84], "with_column": [1, 17, 84, 188, 225, 235, 268, 275, 301, 309, 311, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 342, 343, 350, 354, 359, 366, 367, 368, 369, 370, 377, 379, 383, 385, 388, 389, 390, 392, 393, 394, 396, 398, 400, 401, 403, 405, 408, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 429, 430, 432, 434, 435, 443, 444, 449, 454, 456, 457, 462, 463, 467, 468, 471, 472, 474, 475, 476, 478, 481, 484, 485, 486, 487, 488, 489, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 520, 521, 526, 528, 531, 546, 548, 550, 551, 552, 553, 554, 555, 558, 559, 560, 564, 565, 568, 569, 570, 572, 575, 579, 583, 584, 587, 588, 589, 590, 591, 593, 594, 595, 597, 601, 615, 616, 618, 620, 621, 623, 624, 625, 626, 627, 629, 630, 631, 636, 637, 639, 640, 641, 642, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 659, 660, 661, 663, 664, 665, 667, 669, 670, 677, 679, 686, 688, 690, 698, 700, 705, 706, 708, 715, 720, 730, 735, 738, 742, 751, 755, 759, 761, 767, 771, 810, 816, 832, 837, 859, 883, 886, 955, 995, 1128, 1261], "tp": [1, 84], "cast": [1, 39, 83, 84, 107, 141, 142, 143, 144, 180, 188, 189, 191, 192, 225, 235, 274, 301, 315, 369, 370, 384, 417, 420, 431, 563, 568, 577, 584, 627, 628, 629, 665, 671, 677, 700, 751, 771, 810, 811, 813, 814, 832, 837, 858, 883, 886, 934, 948, 949, 962, 999, 1002, 1013, 1132, 1186, 1187, 1188, 1224, 1231, 1239, 1244, 1261], "int64": [1, 2, 39, 40, 43, 73, 83, 84, 89, 118, 170, 180, 188, 189, 191, 192, 209, 225, 235, 240, 255, 261, 301, 331, 332, 334, 335, 340, 341, 342, 343, 344, 346, 369, 370, 421, 422, 423, 424, 425, 426, 427, 431, 439, 529, 568, 577, 584, 627, 660, 671, 677, 693, 721, 729, 730, 733, 747, 753, 771, 791, 800, 810, 811, 813, 814, 816, 821, 832, 837, 838, 841, 883, 907, 908, 910, 911, 916, 917, 918, 919, 920, 922, 948, 949, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1013, 1015, 1017, 1132, 1155, 1219, 1231, 1242, 1243, 1244, 1261], "int8": [1, 73, 84, 180, 301, 345, 369, 370, 390, 394, 403, 405, 412, 415, 429, 430, 519, 671, 744, 747, 762, 771, 921, 948, 949, 957, 968, 972, 985, 987, 994, 997, 1011, 1012, 1102, 1136, 1231, 1248, 1261], "int16": [1, 84, 369, 370, 411, 671, 771, 886, 948, 949, 993, 1231, 1240, 1261], "int32": [1, 84, 89, 107, 110, 123, 147, 148, 188, 189, 191, 192, 206, 235, 301, 336, 337, 339, 354, 385, 397, 398, 400, 401, 408, 432, 584, 677, 747, 771, 810, 811, 813, 814, 837, 883, 886, 909, 912, 913, 915, 963, 975, 979, 981, 982, 990, 1014, 1108, 1244, 1261], "b": [1, 15, 36, 37, 39, 41, 42, 45, 67, 68, 70, 73, 84, 89, 107, 108, 109, 110, 111, 112, 113, 114, 118, 123, 156, 158, 159, 161, 162, 163, 165, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 180, 182, 184, 185, 186, 187, 188, 193, 194, 196, 198, 200, 202, 203, 204, 205, 206, 207, 209, 212, 214, 216, 217, 219, 221, 222, 223, 224, 225, 226, 227, 228, 230, 233, 234, 236, 237, 238, 239, 240, 241, 245, 248, 249, 250, 251, 253, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 301, 309, 311, 312, 314, 315, 328, 333, 338, 347, 348, 350, 351, 352, 354, 365, 377, 380, 417, 420, 439, 441, 443, 444, 445, 447, 450, 457, 460, 462, 463, 465, 469, 472, 474, 475, 476, 478, 482, 488, 494, 500, 509, 510, 511, 512, 528, 529, 531, 536, 547, 550, 551, 552, 553, 561, 562, 564, 568, 570, 572, 575, 579, 581, 583, 603, 609, 611, 622, 626, 627, 639, 667, 670, 681, 685, 687, 688, 689, 690, 692, 696, 698, 700, 701, 702, 703, 704, 705, 706, 707, 708, 720, 721, 722, 723, 724, 727, 728, 729, 731, 732, 735, 736, 737, 738, 739, 740, 741, 742, 743, 746, 748, 749, 752, 753, 754, 755, 756, 760, 771, 786, 787, 790, 791, 792, 793, 794, 795, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 815, 818, 820, 821, 822, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 838, 839, 843, 845, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 858, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 883, 886, 889, 892, 914, 931, 933, 934, 955, 958, 999, 1002, 1016, 1017, 1018, 1024, 1027, 1041, 1049, 1062, 1071, 1092, 1093, 1094, 1095, 1128, 1133, 1181, 1185, 1186, 1198, 1227, 1230, 1243, 1247, 1261, 1269], "4": [1, 2, 13, 18, 22, 30, 36, 37, 39, 40, 41, 42, 45, 62, 65, 67, 68, 70, 81, 82, 83, 84, 85, 89, 107, 108, 109, 110, 111, 112, 113, 114, 123, 132, 150, 156, 158, 159, 160, 161, 162, 165, 169, 173, 174, 175, 176, 180, 182, 183, 185, 186, 187, 188, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 211, 213, 214, 215, 217, 218, 220, 221, 222, 224, 225, 226, 227, 231, 235, 237, 238, 244, 245, 249, 252, 253, 255, 256, 257, 258, 263, 264, 265, 267, 268, 269, 270, 272, 273, 274, 276, 277, 279, 280, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 301, 304, 308, 309, 310, 311, 313, 315, 328, 335, 336, 337, 339, 340, 341, 344, 345, 347, 353, 354, 357, 358, 359, 365, 366, 367, 368, 369, 370, 376, 378, 380, 386, 389, 390, 400, 411, 412, 413, 414, 415, 417, 420, 422, 425, 427, 428, 430, 434, 435, 440, 441, 443, 444, 445, 447, 448, 449, 450, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 475, 476, 478, 481, 482, 483, 491, 492, 493, 494, 495, 497, 499, 508, 509, 510, 511, 512, 513, 514, 517, 519, 523, 526, 528, 529, 531, 546, 548, 550, 551, 552, 553, 554, 555, 558, 559, 560, 563, 564, 566, 567, 568, 569, 570, 573, 575, 579, 580, 581, 583, 584, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 599, 601, 605, 609, 610, 611, 612, 615, 618, 624, 626, 630, 631, 636, 637, 639, 645, 646, 647, 648, 654, 655, 656, 660, 665, 666, 668, 669, 670, 672, 677, 678, 679, 685, 686, 688, 690, 692, 694, 695, 696, 697, 698, 700, 701, 703, 705, 706, 707, 708, 714, 715, 717, 718, 720, 722, 723, 727, 729, 731, 732, 733, 735, 736, 737, 738, 739, 740, 741, 742, 743, 751, 752, 753, 754, 755, 756, 758, 759, 760, 761, 767, 771, 786, 787, 789, 790, 791, 792, 793, 795, 799, 801, 802, 803, 804, 805, 807, 808, 809, 810, 815, 817, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 837, 843, 845, 846, 847, 848, 849, 850, 852, 854, 855, 856, 857, 858, 861, 862, 863, 864, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 883, 886, 892, 895, 902, 909, 911, 912, 913, 915, 916, 917, 920, 921, 928, 936, 937, 939, 954, 956, 958, 967, 972, 979, 981, 982, 985, 987, 988, 989, 990, 994, 995, 996, 999, 1002, 1004, 1007, 1009, 1010, 1011, 1012, 1017, 1024, 1026, 1027, 1031, 1032, 1036, 1037, 1040, 1041, 1043, 1049, 1054, 1055, 1056, 1057, 1061, 1074, 1075, 1076, 1077, 1078, 1082, 1087, 1089, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1100, 1102, 1116, 1119, 1120, 1124, 1125, 1126, 1130, 1134, 1135, 1138, 1143, 1145, 1146, 1147, 1148, 1149, 1152, 1160, 1165, 1168, 1169, 1170, 1174, 1177, 1183, 1185, 1189, 1190, 1195, 1196, 1204, 1206, 1207, 1213, 1214, 1215, 1219, 1224, 1230, 1232, 1240, 1244, 1245, 1252, 1261, 1265, 1270], "c": [1, 15, 36, 37, 39, 41, 42, 45, 67, 68, 70, 82, 84, 89, 108, 110, 112, 114, 123, 132, 146, 156, 159, 160, 161, 162, 163, 165, 167, 168, 169, 170, 171, 173, 177, 180, 184, 185, 186, 187, 188, 194, 196, 198, 206, 207, 209, 212, 214, 216, 217, 219, 221, 222, 223, 224, 226, 227, 228, 230, 233, 234, 236, 239, 240, 241, 248, 249, 250, 251, 253, 255, 258, 259, 260, 261, 262, 264, 268, 269, 271, 272, 274, 279, 283, 284, 285, 288, 289, 291, 294, 295, 301, 309, 311, 312, 314, 316, 333, 347, 377, 445, 463, 478, 488, 500, 528, 531, 550, 551, 562, 564, 568, 572, 603, 647, 656, 681, 688, 690, 692, 698, 700, 701, 702, 703, 705, 706, 708, 722, 723, 724, 727, 728, 731, 732, 735, 737, 738, 739, 740, 741, 742, 743, 752, 754, 755, 756, 760, 767, 771, 787, 789, 790, 791, 792, 793, 794, 795, 798, 799, 800, 801, 802, 803, 806, 809, 810, 818, 821, 828, 831, 833, 835, 836, 838, 839, 845, 846, 847, 852, 855, 858, 860, 863, 867, 868, 869, 872, 873, 875, 878, 879, 883, 886, 933, 955, 1041, 1062, 1071, 1128, 1206, 1215, 1247, 1261], "5": [1, 12, 13, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 36, 37, 39, 41, 42, 45, 68, 70, 81, 82, 84, 85, 89, 107, 110, 111, 112, 113, 114, 116, 118, 119, 132, 140, 141, 143, 148, 160, 161, 162, 166, 173, 174, 175, 176, 180, 182, 183, 185, 186, 187, 188, 194, 195, 198, 199, 201, 203, 204, 205, 207, 208, 209, 210, 211, 213, 214, 215, 217, 220, 221, 222, 224, 226, 227, 228, 231, 235, 238, 244, 245, 249, 252, 253, 255, 256, 257, 258, 260, 263, 265, 268, 269, 270, 273, 274, 276, 277, 279, 283, 284, 285, 288, 289, 290, 291, 292, 293, 294, 295, 301, 304, 309, 310, 313, 329, 330, 335, 336, 337, 339, 353, 354, 358, 359, 376, 377, 378, 379, 380, 385, 386, 387, 388, 389, 394, 398, 400, 401, 403, 408, 413, 415, 417, 418, 420, 421, 427, 431, 435, 438, 439, 442, 444, 448, 449, 453, 454, 456, 458, 460, 462, 463, 467, 471, 472, 474, 475, 476, 478, 481, 483, 491, 494, 495, 497, 499, 502, 505, 508, 509, 510, 511, 512, 513, 516, 517, 546, 548, 550, 559, 563, 564, 565, 566, 567, 568, 572, 573, 575, 579, 580, 581, 583, 584, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 599, 605, 611, 618, 626, 629, 630, 631, 660, 669, 672, 678, 679, 692, 697, 698, 699, 701, 703, 705, 706, 707, 708, 714, 719, 720, 721, 722, 723, 727, 729, 731, 733, 735, 736, 737, 738, 739, 740, 741, 742, 743, 746, 752, 754, 755, 756, 760, 767, 771, 789, 790, 791, 792, 793, 796, 801, 802, 803, 804, 805, 807, 808, 809, 810, 815, 817, 818, 819, 820, 821, 822, 826, 827, 828, 833, 837, 843, 845, 846, 847, 848, 849, 850, 855, 857, 858, 861, 862, 863, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 883, 886, 892, 895, 899, 902, 905, 906, 909, 911, 912, 913, 915, 928, 937, 939, 946, 954, 955, 956, 957, 958, 963, 964, 965, 966, 967, 968, 981, 995, 997, 999, 1000, 1002, 1003, 1009, 1011, 1012, 1013, 1017, 1021, 1024, 1025, 1036, 1037, 1040, 1041, 1047, 1053, 1074, 1077, 1078, 1082, 1085, 1091, 1092, 1093, 1094, 1095, 1096, 1099, 1100, 1108, 1116, 1124, 1125, 1126, 1128, 1129, 1130, 1134, 1135, 1138, 1140, 1141, 1142, 1144, 1145, 1148, 1152, 1165, 1168, 1171, 1177, 1185, 1188, 1189, 1219, 1232, 1245, 1248, 1252, 1261, 1270], "6": [1, 13, 18, 36, 37, 39, 40, 41, 42, 43, 44, 45, 68, 70, 72, 82, 84, 89, 90, 91, 107, 110, 111, 112, 113, 140, 160, 163, 167, 168, 169, 170, 171, 173, 174, 177, 182, 183, 184, 185, 186, 188, 194, 196, 198, 199, 201, 203, 204, 205, 207, 211, 212, 213, 214, 215, 216, 217, 219, 220, 223, 226, 227, 228, 230, 231, 233, 235, 236, 237, 238, 239, 240, 241, 245, 248, 249, 250, 251, 252, 253, 255, 257, 258, 259, 260, 261, 262, 265, 267, 268, 270, 271, 272, 274, 276, 277, 284, 294, 295, 301, 304, 309, 313, 335, 336, 337, 339, 347, 354, 369, 370, 380, 386, 390, 405, 410, 411, 412, 423, 424, 426, 429, 430, 433, 435, 443, 444, 450, 453, 458, 460, 462, 483, 484, 485, 495, 509, 510, 511, 512, 531, 559, 563, 571, 574, 575, 576, 580, 582, 584, 587, 588, 589, 590, 591, 593, 594, 595, 599, 611, 618, 622, 630, 631, 660, 669, 672, 686, 705, 706, 707, 720, 723, 729, 735, 736, 754, 767, 771, 789, 792, 793, 794, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 810, 815, 817, 818, 820, 822, 824, 828, 831, 833, 835, 837, 838, 839, 841, 843, 845, 846, 847, 850, 854, 857, 858, 861, 862, 868, 878, 879, 883, 886, 909, 911, 912, 913, 915, 937, 943, 945, 948, 949, 958, 992, 1012, 1017, 1037, 1067, 1068, 1078, 1092, 1093, 1094, 1095, 1116, 1127, 1130, 1135, 1137, 1143, 1145, 1147, 1149, 1177, 1181, 1189, 1219, 1231, 1261, 1269, 1270], "7": [1, 21, 32, 36, 37, 39, 40, 41, 42, 43, 44, 45, 70, 82, 84, 89, 160, 163, 164, 166, 167, 168, 170, 171, 173, 177, 182, 184, 188, 194, 196, 199, 207, 212, 214, 216, 218, 219, 223, 226, 228, 230, 233, 235, 236, 238, 239, 240, 241, 245, 248, 250, 251, 252, 253, 259, 260, 261, 262, 268, 270, 271, 272, 301, 309, 313, 336, 337, 339, 344, 370, 385, 386, 390, 400, 411, 413, 414, 428, 430, 440, 453, 458, 462, 483, 509, 510, 511, 512, 563, 575, 580, 584, 594, 611, 626, 659, 672, 705, 706, 717, 723, 728, 735, 736, 754, 771, 789, 794, 796, 798, 800, 802, 806, 808, 810, 815, 817, 818, 822, 829, 831, 834, 835, 837, 838, 839, 843, 850, 883, 886, 899, 912, 913, 915, 920, 963, 964, 968, 975, 981, 995, 996, 1010, 1012, 1022, 1063, 1092, 1093, 1094, 1095, 1134, 1135, 1148, 1185, 1218, 1261, 1270], "float32": [1, 15, 37, 58, 84, 160, 180, 259, 260, 301, 733, 789, 883, 886, 1044, 1108, 1261], "lazi": [1, 65, 66, 67, 68, 70, 84, 89, 132, 148, 208, 225, 226, 301, 531, 725, 744, 747, 762, 771, 796, 818, 819, 860, 863, 864, 867, 869, 871, 872, 873, 874, 875, 876, 877, 878, 883, 886, 1269, 1270], "i16": [1, 84, 390, 411, 430, 603, 771, 886, 993, 1240, 1261, 1270], "i32": [1, 84, 107, 110, 114, 147, 148, 241, 301, 336, 337, 339, 354, 385, 394, 397, 398, 400, 401, 403, 408, 432, 582, 603, 761, 771, 839, 883, 912, 913, 915, 963, 975, 979, 981, 982, 990, 1014, 1108, 1137, 1261, 1270], "f32": [1, 84, 160, 259, 301, 603, 771, 789, 883, 886, 1108, 1261], "i64": [1, 2, 15, 18, 21, 22, 26, 32, 62, 65, 67, 82, 83, 84, 85, 89, 107, 108, 109, 110, 111, 112, 113, 114, 118, 120, 132, 159, 161, 162, 163, 167, 169, 170, 173, 174, 176, 177, 182, 183, 185, 186, 187, 188, 194, 196, 198, 200, 202, 204, 207, 208, 211, 212, 217, 218, 219, 224, 225, 226, 227, 230, 231, 233, 234, 235, 239, 241, 245, 248, 249, 251, 253, 256, 262, 264, 265, 266, 267, 268, 269, 270, 272, 274, 276, 277, 278, 279, 280, 283, 284, 285, 287, 288, 291, 294, 295, 301, 309, 311, 315, 331, 332, 334, 335, 340, 341, 342, 343, 344, 346, 347, 353, 359, 367, 368, 369, 370, 377, 379, 380, 393, 419, 421, 422, 423, 424, 425, 426, 427, 439, 441, 442, 444, 445, 446, 447, 449, 450, 452, 453, 455, 458, 460, 461, 462, 463, 467, 468, 471, 472, 474, 475, 476, 478, 480, 483, 486, 487, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 520, 521, 525, 528, 529, 531, 546, 547, 548, 550, 551, 552, 553, 554, 555, 560, 564, 565, 568, 569, 570, 571, 572, 575, 576, 577, 579, 580, 581, 582, 583, 584, 598, 600, 601, 603, 604, 605, 609, 610, 611, 639, 640, 660, 665, 666, 668, 669, 670, 671, 672, 678, 679, 680, 682, 685, 693, 698, 700, 705, 706, 707, 708, 719, 720, 721, 722, 723, 727, 728, 729, 730, 731, 732, 733, 735, 736, 737, 738, 741, 742, 746, 750, 751, 754, 755, 756, 761, 767, 771, 787, 790, 792, 793, 797, 798, 799, 802, 803, 805, 806, 807, 808, 809, 810, 815, 818, 819, 820, 822, 824, 825, 828, 829, 830, 832, 833, 835, 836, 837, 839, 841, 843, 846, 847, 849, 850, 852, 853, 854, 855, 858, 861, 862, 863, 864, 867, 868, 869, 871, 872, 875, 878, 879, 883, 886, 888, 889, 892, 911, 916, 917, 918, 919, 920, 922, 928, 939, 942, 946, 947, 948, 949, 955, 971, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1024, 1025, 1027, 1028, 1031, 1032, 1036, 1038, 1049, 1075, 1076, 1078, 1079, 1080, 1081, 1082, 1084, 1087, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1103, 1104, 1110, 1115, 1128, 1133, 1134, 1135, 1137, 1141, 1144, 1148, 1152, 1153, 1156, 1160, 1164, 1165, 1169, 1170, 1219, 1230, 1232, 1239, 1245, 1246, 1252, 1261, 1269, 1270], "register_series_namespac": [1, 82, 83, 84], "math": [1, 15, 85, 378, 694, 695, 771, 943, 945, 1166, 1235, 1261], "mathshortcut": [1, 85], "": [1, 2, 16, 37, 39, 40, 45, 58, 65, 68, 73, 85, 107, 114, 118, 119, 120, 121, 123, 129, 133, 134, 137, 138, 150, 159, 160, 169, 172, 177, 182, 187, 188, 190, 191, 198, 204, 207, 208, 217, 224, 226, 231, 233, 238, 241, 242, 249, 258, 264, 266, 267, 268, 269, 274, 275, 301, 338, 393, 417, 420, 439, 445, 479, 500, 529, 531, 540, 547, 556, 557, 564, 565, 577, 582, 583, 611, 615, 623, 624, 625, 626, 639, 645, 646, 648, 656, 657, 658, 662, 663, 666, 668, 687, 688, 689, 690, 696, 701, 704, 707, 708, 711, 712, 721, 724, 725, 735, 736, 737, 738, 741, 742, 750, 751, 753, 754, 755, 761, 767, 771, 787, 789, 799, 809, 810, 812, 813, 819, 828, 839, 840, 847, 852, 853, 854, 855, 858, 859, 865, 871, 883, 886, 888, 889, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 921, 928, 929, 930, 931, 933, 934, 935, 936, 937, 938, 939, 942, 943, 944, 945, 946, 947, 948, 949, 954, 955, 956, 957, 958, 959, 960, 961, 963, 964, 968, 970, 971, 974, 976, 977, 981, 982, 984, 988, 989, 993, 996, 997, 999, 1002, 1010, 1012, 1013, 1014, 1015, 1018, 1019, 1020, 1021, 1022, 1025, 1026, 1027, 1028, 1030, 1031, 1032, 1035, 1036, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1067, 1068, 1069, 1070, 1072, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1087, 1088, 1089, 1090, 1091, 1096, 1097, 1098, 1099, 1100, 1102, 1104, 1105, 1106, 1107, 1108, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1133, 1134, 1135, 1136, 1137, 1138, 1140, 1141, 1142, 1143, 1144, 1145, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1156, 1158, 1159, 1160, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1174, 1175, 1177, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1189, 1190, 1195, 1196, 1198, 1200, 1201, 1204, 1207, 1208, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1227, 1228, 1230, 1231, 1232, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1261, 1265], "_": [1, 81, 85, 226, 258, 261, 301, 338, 500, 616, 624, 630, 631, 641, 646, 647, 933, 1175, 1183, 1189, 1190, 1200, 1206, 1238, 1261], "squar": [1, 85, 287, 479, 612, 771, 871, 1064, 1171, 1261], "cube": [1, 85, 357, 569, 771, 935, 1261], "s2": [1, 72, 90, 91, 143, 144, 180, 301, 937, 958, 1017, 1049, 1063, 1071, 1103, 1116, 1252, 1261], "renam": [1, 110, 118, 119, 157, 178, 181, 189, 190, 191, 192, 197, 232, 241, 242, 254, 274, 275, 279, 281, 301, 311, 316, 371, 372, 373, 374, 375, 466, 470, 473, 478, 490, 503, 518, 527, 528, 530, 543, 551, 552, 553, 570, 585, 617, 628, 632, 633, 634, 635, 638, 643, 644, 650, 668, 670, 673, 674, 691, 711, 712, 734, 750, 753, 771, 811, 812, 813, 814, 823, 839, 840, 851, 858, 859, 863, 865, 883, 889, 893, 950, 951, 952, 953, 955, 1046, 1052, 1073, 1086, 1101, 1109, 1128, 1139, 1155, 1157, 1176, 1185, 1187, 1191, 1192, 1193, 1194, 1197, 1202, 1203, 1209, 1228, 1233, 1234, 1239, 1261], "n2": 1, "s3": [1, 39, 122, 133, 134, 137, 138, 301, 1103, 1261], "n3": 1, "8": [1, 16, 36, 37, 39, 41, 42, 43, 44, 45, 57, 58, 65, 70, 71, 78, 81, 82, 84, 85, 89, 140, 146, 148, 160, 163, 164, 166, 167, 168, 169, 170, 171, 173, 177, 182, 184, 186, 194, 196, 204, 207, 211, 212, 214, 216, 219, 228, 230, 233, 236, 238, 239, 240, 241, 245, 248, 250, 251, 253, 259, 260, 261, 262, 268, 271, 272, 274, 301, 313, 315, 328, 336, 337, 339, 367, 370, 376, 386, 453, 459, 462, 492, 494, 503, 509, 510, 511, 512, 548, 563, 569, 580, 581, 586, 603, 609, 611, 632, 635, 636, 637, 656, 686, 692, 701, 703, 706, 708, 720, 722, 727, 728, 731, 735, 736, 737, 738, 739, 740, 741, 742, 743, 752, 755, 756, 760, 771, 789, 794, 796, 798, 799, 800, 802, 806, 808, 815, 818, 822, 824, 833, 835, 838, 839, 843, 850, 858, 883, 886, 912, 913, 915, 945, 954, 975, 1037, 1063, 1075, 1077, 1086, 1092, 1093, 1094, 1095, 1124, 1135, 1138, 1140, 1143, 1145, 1147, 1149, 1191, 1194, 1195, 1196, 1215, 1261, 1270], "9": [1, 14, 36, 37, 39, 40, 41, 42, 45, 65, 70, 81, 89, 140, 164, 166, 180, 189, 194, 199, 211, 235, 237, 238, 241, 252, 253, 268, 272, 274, 294, 301, 309, 313, 315, 328, 336, 337, 339, 342, 343, 367, 370, 378, 386, 445, 453, 462, 468, 478, 492, 507, 515, 550, 563, 574, 580, 584, 586, 592, 594, 605, 609, 624, 659, 667, 699, 705, 706, 728, 759, 771, 796, 811, 815, 817, 822, 837, 839, 850, 858, 878, 883, 886, 907, 908, 912, 913, 915, 918, 919, 956, 968, 979, 982, 990, 996, 1010, 1011, 1049, 1063, 1075, 1090, 1098, 1135, 1140, 1146, 1148, 1150, 1165, 1183, 1218, 1227, 1261], "27": [1, 85, 294, 370, 405, 412, 429, 771, 878, 1261, 1270], "16": [1, 40, 54, 75, 83, 140, 166, 181, 188, 235, 274, 301, 367, 370, 462, 530, 548, 569, 584, 660, 705, 719, 720, 723, 771, 796, 810, 837, 845, 858, 883, 886, 996, 1010, 1109, 1124, 1155, 1166, 1219, 1235, 1261], "64": [1, 53, 56, 77, 83, 85, 139, 156, 364, 548, 569, 771, 1124, 1261], "25": [1, 32, 40, 85, 114, 148, 166, 188, 208, 235, 270, 274, 301, 379, 390, 392, 411, 414, 428, 430, 572, 584, 587, 588, 589, 590, 591, 593, 594, 595, 679, 714, 715, 717, 718, 719, 725, 736, 758, 759, 771, 796, 810, 819, 826, 837, 856, 858, 883, 886, 956, 957, 970, 996, 1010, 1016, 1037, 1124, 1128, 1261], "125": [1, 40, 85, 301, 309, 771, 1124, 1261], "inner": [2, 62, 147, 207, 269, 301, 338, 345, 380, 500, 519, 578, 677, 771, 818, 841, 855, 883, 914, 921, 958, 1083, 1102, 1244, 1261], "polarsdatatyp": [2, 62, 118, 119, 132, 145, 146, 147, 148, 150, 157, 160, 211, 301, 316, 354, 439, 527, 529, 530, 531, 579, 627, 628, 691, 721, 733, 734, 735, 736, 744, 747, 762, 767, 771, 789, 883, 886, 893, 929, 1109, 1110, 1134, 1186, 1187, 1261], "pythondatatyp": [2, 62], "width": [2, 31, 40, 118, 119, 132, 301, 304, 519, 883, 1102], "int": [2, 15, 17, 18, 19, 22, 30, 31, 37, 38, 40, 45, 49, 58, 61, 67, 70, 83, 110, 113, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 129, 130, 132, 133, 135, 136, 137, 138, 139, 146, 147, 148, 149, 150, 151, 152, 157, 159, 161, 166, 172, 175, 176, 178, 182, 184, 186, 193, 194, 195, 197, 198, 203, 205, 206, 208, 210, 211, 212, 214, 219, 221, 222, 232, 233, 236, 239, 244, 245, 246, 248, 250, 251, 253, 254, 259, 262, 264, 268, 271, 273, 276, 277, 284, 295, 301, 309, 333, 337, 347, 353, 376, 379, 436, 437, 438, 442, 443, 444, 450, 452, 453, 455, 457, 458, 459, 483, 489, 492, 497, 498, 499, 508, 513, 514, 517, 518, 519, 520, 563, 565, 568, 569, 572, 575, 578, 580, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 601, 602, 604, 609, 613, 623, 627, 628, 633, 636, 637, 638, 639, 643, 645, 647, 648, 659, 660, 665, 672, 673, 674, 678, 684, 686, 693, 701, 703, 713, 716, 719, 725, 727, 729, 730, 744, 747, 748, 749, 752, 753, 756, 757, 760, 762, 771, 787, 790, 796, 803, 804, 805, 808, 815, 819, 822, 833, 843, 844, 846, 848, 850, 851, 852, 856, 857, 861, 862, 868, 879, 883, 900, 901, 909, 913, 928, 929, 937, 938, 954, 957, 1018, 1019, 1020, 1021, 1025, 1026, 1027, 1031, 1032, 1035, 1036, 1037, 1063, 1065, 1066, 1072, 1073, 1075, 1080, 1081, 1082, 1091, 1096, 1097, 1100, 1101, 1102, 1103, 1116, 1117, 1119, 1120, 1121, 1123, 1124, 1127, 1128, 1130, 1135, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1156, 1157, 1160, 1161, 1164, 1169, 1172, 1182, 1186, 1187, 1192, 1195, 1196, 1197, 1198, 1202, 1204, 1206, 1207, 1218, 1219, 1224, 1231, 1232, 1233, 1234, 1240, 1245, 1250, 1261, 1269, 1270], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 301, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 767, 771, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 883, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1227, 1228, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1261, 1269], "fix": [2, 15, 51, 123, 146, 148, 431, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 719, 771, 1013, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1147, 1148, 1149, 1261], "length": [2, 62, 89, 118, 119, 132, 146, 186, 188, 189, 191, 192, 235, 248, 301, 304, 376, 414, 428, 514, 520, 540, 579, 582, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 609, 630, 631, 633, 635, 636, 637, 643, 645, 665, 744, 747, 748, 749, 762, 771, 810, 811, 813, 814, 833, 837, 846, 883, 937, 954, 964, 996, 1010, 1097, 1103, 1121, 1134, 1137, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1147, 1148, 1149, 1169, 1189, 1190, 1192, 1194, 1195, 1196, 1202, 1204, 1224, 1261], "paramet": [2, 5, 7, 8, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 50, 51, 58, 59, 60, 61, 62, 65, 66, 67, 68, 70, 73, 81, 82, 83, 84, 85, 87, 88, 89, 91, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 156, 157, 159, 160, 161, 164, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 203, 205, 206, 207, 208, 210, 211, 212, 214, 215, 217, 218, 219, 221, 222, 224, 225, 226, 228, 230, 231, 232, 233, 235, 236, 237, 238, 239, 241, 242, 243, 245, 246, 248, 249, 250, 251, 252, 253, 254, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 279, 281, 284, 287, 293, 295, 301, 309, 311, 312, 313, 314, 315, 316, 326, 333, 334, 337, 338, 343, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 359, 360, 361, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 384, 386, 387, 393, 410, 413, 414, 415, 417, 419, 420, 428, 431, 433, 434, 435, 436, 437, 438, 439, 442, 444, 445, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 462, 463, 468, 479, 481, 483, 488, 489, 490, 491, 492, 494, 497, 498, 499, 500, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 526, 527, 528, 529, 530, 531, 542, 546, 548, 551, 552, 553, 558, 559, 563, 564, 565, 568, 569, 570, 572, 573, 575, 577, 578, 579, 580, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 633, 634, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 665, 666, 668, 669, 670, 672, 673, 674, 678, 679, 680, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 767, 771, 787, 789, 790, 792, 793, 796, 797, 798, 799, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 822, 823, 824, 828, 829, 832, 833, 834, 835, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 851, 852, 853, 854, 855, 856, 858, 859, 860, 861, 862, 863, 865, 868, 871, 877, 879, 883, 886, 889, 890, 891, 892, 893, 902, 909, 910, 913, 914, 919, 922, 923, 924, 925, 926, 927, 928, 929, 932, 938, 939, 940, 941, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 962, 964, 965, 971, 992, 995, 996, 997, 999, 1001, 1002, 1010, 1013, 1016, 1017, 1018, 1019, 1020, 1021, 1024, 1025, 1026, 1027, 1028, 1031, 1032, 1035, 1036, 1037, 1040, 1041, 1051, 1059, 1060, 1064, 1066, 1071, 1072, 1073, 1074, 1075, 1077, 1080, 1081, 1082, 1083, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1100, 1101, 1102, 1103, 1104, 1109, 1110, 1124, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1160, 1161, 1164, 1168, 1169, 1170, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1192, 1193, 1195, 1196, 1197, 1198, 1199, 1200, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1221, 1224, 1225, 1228, 1232, 1233, 1234, 1238, 1239, 1240, 1241, 1242, 1243, 1245, 1246, 1249, 1250, 1251, 1252, 1261, 1269], "The": [2, 25, 38, 39, 40, 45, 61, 62, 65, 69, 72, 73, 81, 86, 87, 91, 107, 109, 110, 111, 113, 116, 118, 119, 120, 121, 123, 127, 128, 130, 132, 136, 137, 138, 141, 142, 143, 144, 152, 166, 168, 169, 170, 173, 174, 177, 186, 187, 188, 191, 193, 199, 205, 208, 211, 218, 224, 235, 236, 237, 238, 241, 242, 260, 267, 270, 274, 275, 277, 278, 279, 287, 301, 311, 347, 348, 349, 350, 377, 381, 382, 390, 405, 410, 411, 414, 417, 428, 429, 439, 442, 445, 450, 457, 493, 497, 518, 529, 530, 531, 564, 572, 575, 578, 579, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 605, 608, 614, 619, 620, 623, 627, 628, 634, 636, 637, 644, 650, 651, 652, 653, 654, 655, 656, 721, 725, 736, 748, 749, 750, 753, 761, 763, 764, 766, 767, 771, 772, 773, 776, 778, 779, 780, 796, 799, 802, 806, 810, 813, 815, 817, 819, 822, 824, 829, 833, 837, 839, 840, 841, 854, 858, 859, 862, 863, 871, 883, 889, 892, 923, 924, 925, 938, 955, 956, 959, 960, 968, 987, 992, 993, 996, 999, 1010, 1011, 1024, 1025, 1028, 1035, 1076, 1080, 1109, 1110, 1128, 1130, 1134, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1165, 1168, 1173, 1178, 1179, 1186, 1187, 1193, 1195, 1196, 1203, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1253, 1255, 1257, 1261, 1262, 1266, 1267, 1268, 1270], "datatyp": [2, 37, 43, 58, 62, 79, 107, 109, 110, 111, 113, 115, 123, 125, 127, 128, 131, 136, 150, 170, 173, 180, 240, 301, 354, 439, 603, 677, 721, 733, 771, 783, 800, 802, 838, 841, 883, 893, 929, 956, 1051, 1058, 1060, 1062, 1110, 1162, 1244, 1261], "valu": [2, 5, 9, 15, 16, 17, 18, 22, 33, 35, 37, 40, 43, 58, 62, 63, 65, 69, 72, 79, 81, 89, 91, 110, 112, 118, 119, 120, 121, 123, 132, 138, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 156, 158, 159, 166, 169, 171, 174, 175, 176, 177, 181, 186, 188, 191, 193, 194, 199, 203, 205, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 222, 224, 226, 227, 228, 230, 235, 236, 237, 238, 239, 245, 246, 249, 250, 251, 252, 253, 256, 257, 261, 264, 265, 268, 269, 270, 271, 278, 282, 283, 285, 288, 289, 291, 292, 301, 308, 309, 310, 312, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 334, 336, 337, 338, 339, 340, 341, 343, 344, 346, 347, 349, 350, 351, 352, 353, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 370, 376, 377, 379, 381, 382, 386, 390, 405, 411, 429, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 474, 475, 476, 477, 480, 481, 482, 484, 485, 486, 487, 490, 491, 492, 493, 496, 498, 499, 500, 501, 502, 504, 505, 506, 508, 513, 515, 516, 517, 520, 521, 523, 525, 526, 529, 530, 531, 532, 533, 534, 545, 546, 547, 548, 549, 556, 557, 558, 559, 562, 564, 565, 568, 569, 572, 573, 575, 578, 579, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 598, 599, 600, 601, 602, 605, 606, 607, 608, 610, 611, 612, 614, 615, 617, 618, 619, 620, 621, 623, 626, 627, 628, 629, 636, 637, 639, 640, 642, 645, 647, 648, 649, 665, 667, 669, 671, 673, 674, 675, 676, 678, 679, 680, 681, 682, 683, 686, 687, 689, 692, 698, 700, 702, 704, 705, 706, 707, 708, 709, 710, 711, 712, 722, 723, 728, 729, 730, 731, 733, 737, 738, 739, 740, 741, 742, 743, 746, 747, 748, 749, 754, 755, 761, 771, 786, 787, 796, 799, 804, 805, 806, 810, 813, 816, 817, 818, 819, 825, 826, 827, 828, 830, 831, 834, 835, 837, 841, 843, 844, 847, 848, 849, 852, 855, 856, 866, 867, 869, 870, 872, 873, 875, 876, 883, 886, 888, 890, 891, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 910, 912, 913, 914, 915, 916, 917, 919, 920, 922, 924, 925, 926, 927, 932, 936, 939, 940, 941, 943, 944, 945, 954, 955, 956, 957, 959, 960, 964, 968, 987, 993, 1011, 1017, 1018, 1019, 1020, 1021, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1043, 1045, 1046, 1047, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1061, 1065, 1066, 1067, 1068, 1069, 1070, 1073, 1074, 1075, 1076, 1079, 1081, 1082, 1083, 1084, 1085, 1087, 1088, 1089, 1091, 1096, 1098, 1099, 1100, 1104, 1109, 1111, 1112, 1114, 1115, 1117, 1119, 1120, 1121, 1123, 1124, 1127, 1128, 1129, 1130, 1134, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1152, 1153, 1154, 1155, 1156, 1157, 1160, 1161, 1165, 1166, 1167, 1168, 1170, 1173, 1174, 1176, 1177, 1178, 1179, 1180, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1195, 1196, 1198, 1199, 1201, 1204, 1206, 1207, 1208, 1224, 1227, 1231, 1232, 1233, 1234, 1235, 1236, 1242, 1243, 1244, 1247, 1249, 1251, 1252, 1261, 1270], "within": [2, 62, 141, 142, 143, 144, 187, 188, 189, 190, 191, 192, 193, 208, 235, 270, 301, 457, 575, 584, 611, 771, 810, 811, 813, 814, 819, 837, 883, 1035, 1261, 1269], "each": [2, 37, 40, 58, 62, 81, 119, 120, 136, 141, 142, 143, 144, 146, 165, 177, 186, 187, 188, 189, 190, 191, 192, 206, 208, 211, 224, 235, 239, 267, 269, 270, 278, 279, 282, 284, 286, 287, 295, 301, 377, 414, 428, 445, 466, 467, 470, 471, 499, 502, 503, 508, 517, 524, 531, 572, 575, 583, 589, 591, 593, 595, 598, 604, 611, 624, 630, 631, 632, 635, 647, 648, 693, 696, 700, 729, 730, 753, 761, 771, 792, 795, 806, 810, 811, 813, 814, 819, 833, 837, 854, 855, 863, 865, 866, 868, 870, 871, 879, 883, 937, 955, 996, 1010, 1046, 1047, 1052, 1053, 1082, 1085, 1086, 1091, 1100, 1128, 1130, 1138, 1152, 1164, 1183, 1189, 1190, 1191, 1194, 1206, 1207, 1230, 1261, 1270], "exampl": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 58, 59, 60, 61, 62, 65, 66, 67, 68, 69, 70, 72, 73, 81, 82, 83, 84, 85, 89, 90, 91, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 129, 132, 133, 134, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 180, 182, 183, 184, 185, 186, 187, 188, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 301, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 357, 358, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 396, 397, 398, 400, 401, 403, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 636, 637, 639, 640, 641, 642, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 714, 715, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 733, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 746, 747, 750, 751, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 767, 771, 783, 786, 787, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 815, 816, 817, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 841, 843, 845, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 883, 888, 889, 890, 891, 892, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 928, 929, 930, 931, 933, 934, 935, 936, 937, 938, 939, 942, 943, 944, 945, 946, 947, 948, 949, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 970, 971, 972, 974, 975, 976, 977, 978, 979, 981, 982, 984, 985, 987, 988, 989, 990, 992, 993, 994, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1030, 1031, 1032, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1065, 1067, 1068, 1069, 1070, 1071, 1072, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1133, 1134, 1135, 1136, 1137, 1138, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1156, 1158, 1159, 1160, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1177, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1188, 1189, 1190, 1195, 1196, 1198, 1199, 1200, 1201, 1204, 1206, 1207, 1208, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1227, 1230, 1231, 1232, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1252, 1261, 1269], "dtype": [2, 15, 40, 48, 72, 73, 84, 90, 91, 107, 109, 111, 113, 114, 118, 119, 120, 121, 127, 128, 129, 132, 145, 146, 147, 148, 150, 156, 160, 188, 189, 191, 192, 208, 235, 259, 260, 261, 268, 277, 301, 316, 354, 355, 369, 370, 431, 439, 452, 488, 497, 518, 525, 527, 529, 530, 531, 577, 578, 584, 587, 588, 589, 590, 591, 593, 594, 595, 603, 627, 628, 656, 671, 673, 677, 682, 691, 693, 721, 725, 729, 730, 732, 733, 734, 735, 736, 744, 747, 753, 762, 771, 789, 810, 811, 813, 814, 819, 837, 862, 883, 886, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 921, 929, 930, 931, 933, 938, 948, 949, 956, 957, 1013, 1017, 1018, 1042, 1044, 1048, 1051, 1058, 1060, 1062, 1067, 1068, 1071, 1080, 1102, 1108, 1109, 1136, 1155, 1162, 1186, 1187, 1215, 1231, 1240, 1242, 1243, 1244, 1248, 1261, 1270], "method": [2, 3, 4, 5, 9, 36, 39, 40, 41, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 62, 63, 64, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 88, 89, 108, 117, 118, 119, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 138, 145, 154, 157, 166, 169, 174, 178, 181, 187, 189, 190, 191, 192, 197, 199, 205, 211, 212, 214, 219, 222, 228, 232, 236, 237, 238, 245, 251, 254, 266, 274, 281, 287, 293, 301, 309, 312, 313, 316, 359, 371, 372, 373, 374, 375, 417, 420, 434, 435, 442, 449, 454, 456, 462, 466, 470, 473, 478, 481, 490, 503, 513, 518, 526, 527, 528, 530, 531, 546, 548, 550, 552, 553, 554, 555, 558, 559, 560, 563, 569, 570, 573, 575, 585, 587, 588, 589, 590, 591, 593, 594, 595, 601, 617, 628, 632, 633, 634, 635, 638, 643, 644, 650, 652, 653, 654, 655, 659, 665, 669, 670, 673, 674, 679, 681, 686, 701, 736, 745, 763, 764, 766, 767, 771, 772, 773, 776, 777, 778, 779, 780, 783, 793, 796, 797, 799, 811, 812, 813, 814, 817, 823, 834, 843, 851, 853, 858, 865, 871, 877, 883, 892, 893, 939, 950, 951, 952, 953, 956, 999, 1002, 1024, 1025, 1040, 1046, 1052, 1073, 1086, 1096, 1101, 1109, 1110, 1129, 1130, 1139, 1145, 1155, 1157, 1160, 1176, 1187, 1191, 1192, 1193, 1194, 1197, 1202, 1203, 1209, 1218, 1224, 1233, 1234, 1244, 1251, 1253, 1255, 1257, 1261, 1262, 1266, 1267, 1268], "attribut": [2, 5, 48, 49, 50, 51, 62, 73, 145, 301, 763, 764, 766, 767, 772, 773, 776, 778, 779, 780, 883, 1253, 1255, 1257, 1261, 1262, 1266, 1267, 1268], "arg": [3, 4, 46, 47, 52, 53, 54, 55, 56, 57, 63, 64, 68, 71, 72, 74, 75, 76, 77, 78, 79, 177, 225, 301, 568, 696, 724, 771, 806, 832, 883, 1110, 1242, 1261], "kwarg": [3, 4, 46, 47, 52, 53, 54, 55, 56, 57, 63, 64, 68, 71, 72, 74, 75, 76, 77, 78, 79, 120, 164, 177, 225, 261, 301, 568, 771, 806, 832, 883, 1243, 1261, 1269], "order": [5, 15, 40, 58, 59, 60, 61, 65, 67, 81, 87, 110, 120, 139, 141, 142, 159, 169, 177, 187, 188, 189, 190, 191, 192, 207, 224, 225, 226, 235, 239, 243, 249, 260, 264, 266, 270, 301, 326, 343, 346, 356, 381, 382, 445, 493, 508, 515, 521, 575, 584, 588, 589, 590, 591, 593, 595, 598, 599, 600, 610, 611, 642, 652, 653, 654, 655, 668, 680, 681, 683, 696, 761, 771, 782, 787, 799, 806, 809, 810, 811, 812, 813, 814, 818, 828, 837, 842, 847, 852, 853, 883, 902, 919, 922, 932, 934, 959, 960, 1028, 1059, 1076, 1091, 1098, 1104, 1130, 1136, 1152, 1154, 1158, 1170, 1201, 1228, 1246, 1247, 1249, 1261, 1270], "categoricalord": [5, 356, 932], "none": [5, 6, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 48, 49, 58, 59, 61, 63, 65, 66, 67, 68, 70, 81, 88, 91, 107, 109, 110, 111, 112, 113, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 157, 161, 165, 166, 169, 175, 176, 186, 188, 189, 191, 192, 193, 199, 203, 207, 208, 209, 211, 212, 214, 217, 219, 222, 223, 226, 235, 236, 239, 245, 246, 248, 249, 251, 256, 258, 261, 265, 266, 267, 268, 269, 270, 282, 286, 301, 312, 314, 315, 316, 328, 329, 330, 337, 338, 347, 359, 365, 366, 367, 370, 377, 381, 382, 389, 410, 413, 414, 428, 435, 436, 437, 438, 439, 442, 443, 444, 450, 457, 459, 462, 463, 472, 474, 475, 476, 482, 484, 485, 493, 498, 500, 502, 508, 509, 510, 511, 512, 514, 520, 527, 529, 530, 531, 539, 542, 544, 549, 559, 560, 561, 562, 565, 572, 575, 576, 579, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 598, 601, 602, 603, 604, 605, 609, 610, 614, 615, 618, 620, 621, 624, 626, 627, 628, 629, 630, 631, 634, 636, 637, 638, 644, 645, 647, 648, 649, 650, 651, 652, 653, 656, 657, 658, 660, 662, 665, 666, 667, 668, 677, 687, 688, 689, 690, 691, 693, 698, 700, 702, 704, 708, 714, 715, 716, 717, 718, 719, 721, 722, 729, 730, 731, 732, 733, 734, 735, 736, 738, 742, 747, 748, 749, 753, 755, 757, 758, 759, 761, 771, 790, 791, 793, 795, 796, 799, 804, 805, 810, 811, 813, 814, 817, 818, 819, 821, 823, 824, 828, 831, 837, 841, 843, 844, 845, 846, 847, 853, 854, 855, 860, 865, 866, 870, 871, 883, 886, 890, 891, 893, 900, 901, 905, 906, 913, 914, 938, 939, 955, 956, 958, 959, 960, 967, 976, 977, 978, 984, 995, 996, 1010, 1016, 1019, 1020, 1021, 1025, 1026, 1027, 1035, 1037, 1039, 1040, 1041, 1051, 1056, 1057, 1060, 1063, 1064, 1065, 1067, 1068, 1071, 1076, 1081, 1083, 1085, 1091, 1092, 1093, 1094, 1095, 1097, 1103, 1109, 1110, 1111, 1112, 1113, 1114, 1123, 1128, 1129, 1130, 1134, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1147, 1148, 1149, 1152, 1153, 1156, 1157, 1160, 1161, 1164, 1165, 1168, 1169, 1172, 1173, 1174, 1177, 1179, 1180, 1183, 1185, 1186, 1187, 1188, 1189, 1190, 1193, 1195, 1196, 1197, 1203, 1204, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1215, 1216, 1217, 1219, 1221, 1224, 1227, 1239, 1240, 1241, 1243, 1244, 1250, 1261, 1269], "physic": [5, 72, 91, 118, 119, 208, 301, 356, 677, 771, 788, 818, 819, 883, 932, 933, 1244, 1261], "A": [5, 18, 37, 40, 51, 58, 65, 68, 87, 88, 114, 118, 119, 120, 121, 132, 134, 139, 152, 180, 188, 207, 208, 213, 215, 220, 226, 252, 256, 268, 269, 270, 274, 275, 301, 308, 381, 382, 386, 417, 420, 434, 435, 442, 454, 456, 465, 469, 472, 474, 481, 520, 526, 529, 540, 558, 559, 581, 586, 587, 588, 589, 590, 591, 593, 594, 595, 615, 616, 617, 618, 623, 624, 625, 626, 629, 639, 640, 641, 665, 699, 719, 720, 724, 771, 810, 818, 819, 835, 855, 858, 859, 883, 886, 959, 960, 964, 999, 1002, 1025, 1140, 1141, 1142, 1144, 1147, 1148, 1149, 1174, 1175, 1176, 1177, 1182, 1183, 1184, 1185, 1188, 1198, 1199, 1200, 1224, 1261, 1269], "encod": [5, 51, 71, 118, 119, 132, 258, 301, 349, 451, 619, 667, 771, 924, 1178], "set": [5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 17, 18, 20, 21, 22, 25, 30, 31, 32, 35, 37, 39, 40, 41, 42, 43, 44, 51, 58, 59, 60, 61, 81, 82, 108, 110, 113, 118, 119, 120, 123, 124, 126, 129, 130, 132, 135, 136, 137, 138, 139, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 154, 156, 163, 169, 179, 187, 188, 189, 190, 191, 192, 193, 205, 208, 212, 214, 215, 217, 219, 235, 239, 241, 248, 251, 252, 258, 260, 265, 266, 268, 269, 274, 301, 312, 314, 316, 338, 359, 377, 431, 457, 468, 497, 500, 508, 509, 510, 511, 512, 514, 518, 520, 529, 530, 531, 568, 572, 579, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 598, 604, 608, 609, 614, 634, 644, 645, 650, 651, 652, 653, 654, 655, 656, 657, 658, 662, 683, 687, 689, 693, 697, 700, 714, 715, 717, 718, 729, 730, 731, 744, 747, 748, 749, 753, 758, 759, 761, 762, 771, 783, 792, 799, 801, 809, 810, 811, 812, 813, 814, 818, 819, 823, 824, 828, 837, 839, 841, 846, 853, 855, 858, 865, 871, 883, 890, 891, 914, 934, 939, 955, 1013, 1029, 1035, 1049, 1080, 1083, 1091, 1092, 1093, 1094, 1095, 1097, 1101, 1103, 1109, 1110, 1128, 1134, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1147, 1148, 1149, 1152, 1153, 1157, 1164, 1168, 1169, 1173, 1193, 1203, 1204, 1209, 1210, 1211, 1212, 1215, 1216, 1217, 1221, 1242, 1249, 1261, 1270], "lexic": [5, 356, 886, 932, 934], "appear": [5, 40, 110, 301, 681, 771, 1247, 1261], "default": [5, 9, 12, 14, 15, 19, 32, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 58, 61, 81, 88, 89, 107, 109, 110, 111, 112, 113, 114, 118, 119, 121, 123, 124, 126, 127, 128, 129, 130, 132, 141, 143, 145, 146, 147, 148, 149, 150, 154, 166, 169, 172, 187, 188, 189, 190, 191, 192, 193, 205, 207, 208, 215, 217, 224, 226, 235, 236, 237, 238, 239, 245, 250, 252, 258, 266, 268, 269, 271, 276, 301, 311, 312, 314, 338, 356, 377, 413, 414, 428, 433, 435, 436, 437, 438, 457, 497, 500, 508, 513, 514, 518, 520, 522, 530, 539, 556, 557, 559, 565, 572, 575, 579, 584, 587, 588, 589, 590, 591, 593, 594, 595, 598, 601, 604, 613, 614, 623, 634, 638, 644, 645, 650, 651, 652, 653, 656, 657, 658, 660, 662, 683, 684, 687, 689, 693, 697, 700, 701, 703, 714, 715, 716, 717, 718, 722, 725, 729, 730, 731, 733, 744, 747, 752, 753, 758, 759, 760, 762, 771, 792, 793, 796, 799, 801, 809, 810, 811, 812, 813, 814, 818, 819, 828, 837, 841, 843, 848, 853, 855, 856, 861, 883, 890, 891, 914, 932, 939, 955, 956, 995, 996, 1010, 1016, 1018, 1019, 1020, 1021, 1035, 1080, 1083, 1091, 1096, 1097, 1101, 1103, 1109, 1119, 1120, 1124, 1128, 1130, 1134, 1152, 1160, 1164, 1172, 1173, 1174, 1182, 1185, 1193, 1197, 1203, 1204, 1209, 1210, 1211, 1212, 1215, 1216, 1217, 1219, 1221, 1249, 1250, 1261, 1270], "classmethod": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 451, 771, 797, 883], "activ": [6, 12, 13, 23, 24, 26, 27, 28, 29, 33, 34, 494, 624, 1077, 1183], "bool": [6, 12, 13, 14, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 37, 39, 40, 41, 43, 45, 58, 59, 60, 61, 65, 81, 87, 88, 89, 90, 91, 107, 108, 112, 114, 118, 119, 120, 123, 124, 126, 128, 129, 130, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 156, 159, 160, 161, 162, 166, 171, 176, 177, 179, 180, 181, 185, 186, 187, 188, 189, 190, 191, 192, 196, 198, 200, 201, 202, 205, 207, 208, 215, 224, 226, 235, 236, 237, 238, 239, 243, 247, 249, 252, 256, 258, 260, 261, 264, 265, 266, 267, 269, 270, 272, 274, 283, 285, 288, 291, 301, 311, 312, 313, 314, 315, 316, 326, 329, 330, 333, 338, 343, 346, 348, 349, 351, 352, 354, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 396, 413, 415, 428, 433, 434, 435, 436, 437, 438, 454, 456, 459, 463, 464, 465, 467, 468, 469, 471, 472, 474, 475, 476, 477, 479, 481, 484, 485, 489, 494, 497, 500, 508, 515, 518, 521, 526, 527, 529, 531, 535, 536, 537, 538, 539, 542, 558, 559, 561, 563, 566, 567, 572, 575, 577, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 598, 600, 603, 608, 610, 611, 614, 615, 616, 618, 619, 621, 626, 638, 639, 640, 641, 646, 647, 649, 656, 657, 658, 660, 662, 668, 680, 683, 686, 687, 688, 689, 690, 691, 693, 696, 697, 700, 701, 704, 705, 709, 714, 715, 716, 717, 718, 729, 730, 733, 736, 744, 747, 753, 758, 759, 761, 762, 771, 787, 789, 790, 792, 793, 796, 801, 803, 805, 806, 809, 810, 811, 812, 813, 814, 818, 819, 823, 824, 828, 833, 837, 842, 845, 847, 852, 853, 854, 855, 858, 867, 869, 872, 875, 883, 886, 890, 891, 893, 902, 905, 906, 909, 914, 919, 922, 924, 929, 931, 934, 938, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 974, 995, 997, 1010, 1016, 1017, 1019, 1020, 1021, 1028, 1034, 1037, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1064, 1067, 1068, 1072, 1073, 1077, 1080, 1083, 1091, 1098, 1101, 1104, 1110, 1122, 1125, 1126, 1128, 1130, 1131, 1132, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1152, 1155, 1156, 1157, 1158, 1163, 1168, 1170, 1173, 1174, 1175, 1177, 1178, 1180, 1185, 1197, 1198, 1199, 1200, 1205, 1206, 1208, 1215, 1216, 1217, 1219, 1221, 1241, 1242, 1243, 1246, 1249, 1251, 1261, 1269], "true": [6, 12, 13, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 37, 39, 40, 41, 43, 45, 58, 59, 60, 61, 65, 67, 69, 87, 88, 89, 107, 108, 112, 114, 116, 118, 119, 120, 122, 123, 124, 126, 129, 130, 132, 133, 135, 137, 138, 141, 142, 143, 144, 145, 146, 148, 149, 150, 154, 156, 159, 160, 161, 162, 166, 171, 176, 180, 181, 185, 186, 187, 188, 189, 190, 191, 192, 198, 200, 201, 202, 205, 208, 209, 214, 215, 221, 222, 224, 226, 227, 235, 236, 237, 238, 239, 241, 249, 252, 256, 258, 260, 261, 264, 265, 266, 267, 268, 269, 270, 274, 280, 283, 285, 288, 289, 290, 291, 292, 293, 294, 301, 310, 311, 312, 313, 314, 315, 316, 327, 329, 330, 333, 338, 343, 348, 349, 351, 352, 354, 366, 367, 368, 369, 370, 377, 384, 387, 390, 393, 396, 406, 407, 410, 411, 413, 414, 415, 419, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 433, 434, 435, 436, 437, 438, 452, 454, 455, 456, 459, 463, 464, 465, 467, 468, 469, 471, 472, 474, 475, 476, 477, 479, 481, 484, 485, 489, 497, 500, 515, 518, 520, 526, 529, 531, 535, 536, 537, 538, 539, 540, 542, 543, 558, 559, 561, 563, 566, 567, 572, 577, 584, 587, 588, 589, 590, 591, 592, 593, 594, 595, 598, 603, 608, 610, 611, 614, 615, 616, 618, 619, 621, 626, 627, 629, 638, 646, 647, 649, 656, 657, 658, 660, 662, 666, 668, 680, 683, 686, 687, 688, 689, 690, 691, 693, 696, 697, 701, 714, 716, 717, 723, 729, 736, 744, 747, 753, 758, 761, 762, 771, 787, 789, 790, 791, 792, 793, 796, 801, 803, 805, 809, 810, 811, 812, 813, 814, 818, 819, 821, 823, 824, 828, 833, 837, 839, 841, 845, 847, 852, 853, 854, 855, 858, 864, 867, 869, 872, 873, 874, 875, 876, 877, 878, 883, 886, 890, 891, 893, 903, 905, 906, 909, 914, 919, 924, 929, 931, 934, 937, 938, 955, 961, 962, 965, 968, 970, 971, 972, 974, 978, 979, 982, 985, 987, 988, 989, 990, 992, 993, 994, 995, 996, 997, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1016, 1017, 1019, 1020, 1021, 1028, 1034, 1037, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1064, 1067, 1068, 1072, 1080, 1083, 1098, 1101, 1110, 1116, 1122, 1125, 1126, 1128, 1132, 1146, 1155, 1168, 1170, 1173, 1174, 1175, 1177, 1178, 1180, 1185, 1186, 1188, 1197, 1205, 1206, 1208, 1215, 1216, 1217, 1219, 1221, 1242, 1243, 1249, 1251, 1252, 1261, 1270], "decim": [6, 14, 15, 16, 32, 33, 37, 40, 58, 260, 301, 596, 659, 771, 883, 1150, 1218, 1261], "temporari": 6, "remov": [6, 9, 41, 92, 118, 119, 132, 156, 167, 212, 214, 219, 251, 258, 301, 316, 428, 439, 528, 531, 551, 634, 644, 650, 651, 652, 653, 654, 655, 721, 771, 798, 883, 955, 996, 1010, 1128, 1193, 1203, 1209, 1210, 1211, 1212, 1213, 1214, 1217, 1251, 1261], "onc": [6, 68, 118, 119, 123, 152, 211, 237, 239, 279, 301, 508, 529, 531, 598, 654, 655, 771, 788, 863, 883, 1091, 1110, 1152, 1213, 1214, 1261], "stabil": [6, 193, 301, 457, 771, 1035, 1261], "current": [6, 7, 8, 10, 11, 35, 67, 114, 120, 121, 130, 137, 161, 162, 207, 208, 301, 392, 414, 520, 565, 771, 783, 790, 791, 792, 818, 819, 883, 886, 938, 942, 961, 970, 996, 1124, 1261, 1269], "consid": [6, 41, 88, 90, 91, 118, 119, 132, 138, 141, 142, 143, 144, 169, 171, 181, 204, 211, 217, 237, 266, 268, 269, 301, 316, 359, 376, 414, 459, 529, 531, 549, 587, 588, 589, 590, 591, 593, 594, 595, 705, 723, 767, 771, 793, 799, 815, 822, 828, 853, 855, 871, 883, 931, 934, 939, 954, 996, 1017, 1037, 1051, 1110, 1128, 1153, 1155, 1156, 1261], "beta": 6, "cfg": [7, 9, 22, 154], "previous": [7, 8], "save": [7, 8, 11, 188, 208, 235, 270, 301, 383, 392, 410, 414, 428, 584, 587, 588, 589, 590, 591, 593, 594, 595, 714, 715, 717, 718, 719, 758, 759, 767, 771, 783, 810, 819, 837, 883, 970, 992, 996, 1010], "option": [7, 8, 9, 10, 11, 35, 39, 40, 49, 81, 118, 120, 122, 123, 124, 126, 130, 133, 134, 135, 137, 138, 140, 145, 146, 147, 148, 149, 150, 151, 188, 203, 208, 217, 256, 260, 265, 269, 301, 479, 585, 587, 588, 589, 590, 591, 593, 594, 595, 608, 616, 641, 645, 683, 733, 753, 761, 771, 783, 810, 818, 819, 828, 841, 855, 883, 886, 1060, 1064, 1139, 1141, 1142, 1143, 1144, 1145, 1147, 1148, 1149, 1168, 1175, 1200, 1204, 1239, 1249, 1261], "from": [7, 8, 9, 10, 11, 15, 21, 33, 37, 39, 40, 58, 65, 66, 67, 73, 81, 89, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 160, 166, 167, 172, 174, 179, 186, 188, 191, 205, 206, 207, 208, 209, 217, 226, 230, 235, 236, 238, 239, 241, 242, 258, 265, 266, 268, 269, 270, 276, 301, 304, 377, 378, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 435, 439, 451, 462, 479, 508, 520, 531, 556, 557, 559, 565, 568, 572, 574, 584, 586, 587, 588, 590, 593, 594, 595, 598, 611, 623, 624, 627, 628, 638, 651, 652, 653, 654, 655, 656, 657, 658, 662, 681, 694, 695, 698, 713, 714, 715, 716, 717, 718, 719, 747, 757, 758, 759, 767, 770, 771, 789, 796, 797, 798, 803, 810, 813, 818, 819, 828, 835, 837, 839, 840, 853, 855, 860, 861, 883, 886, 955, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1018, 1024, 1060, 1064, 1091, 1103, 1119, 1120, 1121, 1124, 1128, 1140, 1152, 1182, 1183, 1186, 1187, 1197, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1221, 1252, 1261, 1269, 1270], "json": [7, 8, 10, 11, 43, 44, 127, 128, 134, 136, 301, 451, 544, 627, 628, 629, 667, 771, 783, 797, 841, 883, 1186, 1187, 1188, 1227], "produc": [7, 8, 147, 148, 150, 207, 301, 334, 490, 491, 539, 735, 818, 823, 824, 883, 910, 1073, 1074], "load_from_fil": [7, 10, 11], "file": [7, 8, 10, 11, 36, 37, 41, 42, 43, 44, 45, 58, 59, 60, 61, 117, 118, 119, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 174, 301, 544, 797, 841, 883, 1024, 1261], "path": [8, 11, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 58, 59, 60, 61, 117, 118, 119, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 301, 544, 600, 629, 771, 797, 841, 845, 883, 1158, 1188, 1261, 1270], "load": [8, 10, 11, 110, 112, 120, 122, 123, 129, 133, 134, 149, 151, 301, 771, 783, 815, 822, 883, 1270], "reset": [9, 154], "state": [9, 87, 88, 100, 705, 709, 783, 792, 793, 801, 803, 833, 845, 883], "note": [9, 15, 25, 39, 40, 65, 69, 70, 72, 81, 88, 90, 91, 107, 108, 109, 111, 113, 114, 118, 120, 121, 122, 123, 127, 128, 130, 133, 134, 138, 141, 143, 146, 148, 150, 152, 154, 156, 159, 164, 166, 175, 188, 189, 191, 192, 193, 203, 204, 205, 207, 208, 211, 222, 225, 226, 235, 236, 237, 238, 245, 257, 260, 261, 264, 265, 269, 270, 274, 276, 277, 301, 359, 369, 370, 381, 382, 406, 407, 410, 414, 428, 457, 463, 472, 474, 478, 494, 497, 513, 518, 520, 531, 549, 550, 552, 553, 554, 555, 570, 579, 584, 587, 588, 589, 590, 591, 592, 593, 594, 595, 601, 608, 615, 623, 624, 625, 626, 630, 631, 639, 651, 652, 653, 656, 665, 670, 671, 679, 705, 714, 715, 717, 718, 719, 723, 733, 744, 746, 747, 758, 759, 761, 762, 767, 771, 782, 787, 793, 796, 803, 804, 810, 811, 813, 814, 815, 819, 822, 835, 837, 843, 845, 847, 852, 855, 858, 861, 862, 883, 939, 948, 949, 956, 959, 960, 988, 989, 992, 1010, 1034, 1035, 1077, 1080, 1096, 1101, 1110, 1134, 1146, 1153, 1156, 1160, 1163, 1168, 1174, 1182, 1183, 1184, 1185, 1189, 1190, 1198, 1210, 1211, 1212, 1215, 1224, 1231, 1242, 1243, 1261, 1265, 1269], "oper": [9, 39, 40, 72, 89, 91, 96, 97, 104, 107, 109, 110, 111, 112, 113, 118, 120, 130, 157, 162, 174, 177, 180, 187, 190, 197, 198, 209, 211, 218, 222, 224, 225, 229, 233, 235, 238, 239, 245, 255, 260, 261, 265, 268, 278, 279, 301, 309, 310, 313, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 434, 435, 449, 454, 456, 478, 481, 508, 509, 510, 511, 512, 513, 520, 526, 543, 546, 548, 549, 550, 552, 553, 558, 559, 560, 563, 569, 570, 577, 584, 598, 601, 669, 670, 679, 686, 687, 689, 699, 700, 704, 720, 761, 771, 783, 791, 796, 803, 809, 812, 815, 818, 822, 828, 829, 837, 843, 863, 883, 942, 946, 947, 948, 949, 950, 951, 952, 953, 954, 1024, 1091, 1092, 1093, 1094, 1095, 1096, 1132, 1152, 1160, 1237, 1241, 1242, 1243, 1251, 1261], "environ": [9, 35, 130, 137, 149, 152], "ani": [9, 37, 39, 40, 45, 48, 58, 86, 107, 108, 109, 110, 111, 112, 113, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 130, 132, 133, 134, 135, 137, 145, 147, 148, 150, 154, 157, 164, 169, 174, 176, 177, 180, 203, 205, 206, 211, 215, 224, 225, 236, 237, 238, 252, 256, 257, 260, 261, 266, 268, 269, 277, 301, 309, 312, 313, 316, 338, 354, 415, 434, 435, 444, 445, 449, 452, 454, 456, 468, 481, 488, 494, 500, 526, 527, 529, 530, 531, 543, 546, 548, 552, 553, 558, 559, 563, 564, 568, 570, 579, 580, 585, 586, 599, 614, 616, 638, 652, 653, 654, 655, 656, 657, 658, 660, 662, 669, 670, 673, 679, 686, 687, 690, 691, 700, 701, 702, 733, 736, 761, 771, 799, 805, 806, 832, 853, 855, 862, 883, 886, 890, 893, 914, 997, 1024, 1027, 1031, 1049, 1063, 1071, 1077, 1083, 1109, 1110, 1134, 1135, 1139, 1140, 1153, 1154, 1157, 1173, 1175, 1197, 1215, 1216, 1217, 1219, 1221, 1233, 1241, 1242, 1243, 1261, 1269, 1270], "local": [9, 39, 120, 122, 133, 134, 137, 150, 301, 428, 566, 567, 771, 931, 933, 966, 967, 1000, 1010, 1125, 1126, 1261], "non": [9, 37, 39, 40, 49, 58, 81, 112, 139, 165, 189, 192, 206, 217, 235, 241, 242, 245, 265, 269, 274, 275, 301, 359, 365, 366, 463, 520, 530, 565, 579, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 617, 618, 624, 630, 665, 688, 690, 698, 699, 700, 702, 704, 708, 712, 719, 738, 742, 748, 749, 750, 753, 755, 771, 795, 811, 814, 828, 837, 839, 840, 843, 855, 858, 859, 883, 939, 956, 1041, 1103, 1124, 1134, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1147, 1148, 1149, 1160, 1176, 1177, 1183, 1189, 1224, 1242, 1261], "env": [9, 151], "back": [9, 81, 174, 261, 301, 564, 663, 771, 841, 883, 1024, 1222, 1243, 1261], "contain": [10, 37, 38, 39, 40, 58, 81, 86, 109, 112, 114, 120, 121, 122, 133, 134, 141, 142, 147, 159, 169, 188, 191, 206, 222, 226, 264, 269, 282, 301, 312, 314, 316, 338, 351, 352, 468, 500, 530, 531, 614, 621, 623, 625, 626, 629, 648, 649, 665, 687, 689, 700, 704, 736, 771, 787, 799, 810, 813, 833, 852, 855, 866, 870, 883, 886, 890, 891, 914, 955, 1029, 1083, 1109, 1116, 1128, 1173, 1180, 1182, 1184, 1185, 1188, 1207, 1208, 1224, 1237, 1261], "save_to_fil": 10, "json_str": 10, "written": [11, 36, 37, 40, 41, 42, 43, 44, 45, 58, 59, 60, 61, 301, 841, 883], "leav": [11, 217, 301, 520, 828, 883], "directli": [11, 35, 67, 88, 120, 148, 150, 154, 238, 301, 436, 437, 438, 579, 747, 771, 793, 883, 1019, 1020, 1021, 1134, 1261, 1270], "json_fil": 11, "ascii": [12, 25, 616, 630, 631, 633, 641, 643, 665, 1175, 1189, 1190, 1192, 1200, 1202, 1224], "charact": [12, 14, 17, 25, 31, 32, 33, 37, 38, 58, 118, 119, 121, 132, 301, 410, 622, 624, 630, 631, 633, 634, 635, 636, 637, 643, 644, 646, 647, 650, 651, 652, 653, 654, 655, 665, 833, 883, 886, 992, 1181, 1183, 1189, 1190, 1192, 1193, 1194, 1195, 1196, 1202, 1203, 1205, 1206, 1209, 1210, 1211, 1212, 1224], "displai": [12, 15, 16, 17, 18, 22, 24, 28, 30, 40, 166, 186, 301, 796, 883], "tabl": [12, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 38, 39, 40, 66, 67, 68, 70, 107, 114, 118, 119, 122, 123, 132, 133, 134, 207, 226, 255, 261, 268, 269, 301, 818, 855, 883, 1269], "outlin": 12, "fals": [12, 13, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 33, 35, 37, 39, 40, 41, 43, 45, 58, 59, 60, 61, 81, 87, 88, 108, 112, 114, 118, 119, 120, 123, 124, 126, 128, 129, 130, 132, 135, 136, 137, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 156, 159, 160, 161, 162, 166, 171, 180, 185, 186, 187, 188, 189, 190, 191, 192, 196, 198, 200, 201, 202, 205, 207, 208, 209, 214, 215, 221, 222, 224, 226, 227, 235, 236, 237, 238, 239, 243, 247, 249, 252, 256, 258, 260, 261, 264, 265, 266, 269, 270, 272, 274, 283, 285, 288, 289, 291, 294, 301, 312, 313, 314, 316, 326, 329, 330, 333, 338, 343, 346, 348, 351, 352, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 396, 413, 415, 428, 433, 434, 435, 436, 437, 438, 456, 459, 463, 464, 465, 467, 468, 469, 471, 472, 474, 475, 476, 477, 479, 481, 484, 485, 489, 494, 497, 500, 508, 515, 518, 521, 526, 527, 529, 531, 535, 538, 540, 542, 558, 559, 561, 563, 566, 567, 572, 575, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 598, 600, 603, 608, 610, 611, 614, 615, 616, 618, 621, 626, 627, 638, 639, 640, 641, 646, 647, 649, 656, 657, 658, 660, 680, 683, 686, 687, 688, 689, 690, 693, 696, 697, 700, 701, 704, 705, 709, 714, 715, 716, 717, 718, 729, 730, 733, 744, 747, 753, 758, 759, 761, 762, 771, 787, 789, 790, 791, 792, 793, 796, 801, 803, 809, 810, 811, 812, 813, 814, 818, 819, 821, 823, 824, 833, 837, 842, 845, 847, 852, 853, 855, 858, 867, 869, 872, 873, 875, 878, 883, 886, 890, 891, 902, 905, 906, 909, 914, 919, 922, 929, 931, 934, 937, 938, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 974, 995, 997, 1010, 1016, 1017, 1019, 1020, 1021, 1028, 1034, 1041, 1042, 1043, 1045, 1047, 1049, 1050, 1051, 1053, 1054, 1055, 1056, 1057, 1059, 1060, 1061, 1064, 1067, 1068, 1072, 1077, 1080, 1083, 1091, 1098, 1101, 1104, 1116, 1122, 1125, 1126, 1128, 1130, 1131, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1152, 1155, 1158, 1163, 1168, 1170, 1173, 1174, 1175, 1177, 1180, 1185, 1186, 1197, 1198, 1199, 1200, 1205, 1206, 1208, 1215, 1216, 1217, 1219, 1242, 1243, 1246, 1249, 1251, 1252, 1261, 1269], "revert": [12, 14, 15], "utf8_full_condens": [12, 25, 114], "format": [12, 16, 20, 21, 25, 37, 40, 41, 42, 58, 117, 118, 119, 120, 132, 138, 173, 186, 205, 217, 237, 238, 257, 299, 301, 414, 417, 420, 542, 656, 657, 658, 662, 719, 802, 828, 841, 883, 999, 1002, 1215, 1216, 1217, 1221, 1260], "style": [12, 25, 40, 120, 130, 226, 301], "abc": [12, 21, 23, 24, 25, 26, 27, 28, 29, 30, 309, 624, 639, 652, 771, 886, 1183, 1198], "xyz": [12, 21, 23, 24, 25, 26, 27, 28, 29, 30, 309, 618, 624, 771, 1177, 1183, 1239, 1261], "f64": [12, 14, 15, 16, 20, 23, 24, 26, 27, 28, 29, 30, 32, 62, 65, 81, 83, 85, 89, 108, 110, 138, 148, 161, 162, 164, 166, 167, 170, 175, 176, 180, 185, 186, 187, 188, 198, 199, 207, 208, 213, 214, 215, 216, 220, 226, 227, 228, 248, 249, 250, 252, 271, 274, 279, 283, 285, 288, 289, 290, 291, 293, 294, 301, 308, 311, 318, 319, 320, 321, 322, 323, 354, 357, 358, 362, 363, 364, 376, 377, 378, 381, 382, 415, 433, 434, 435, 436, 437, 438, 439, 440, 443, 444, 448, 449, 454, 456, 462, 472, 474, 475, 476, 478, 479, 481, 494, 505, 522, 523, 524, 526, 532, 533, 534, 545, 548, 550, 556, 557, 558, 559, 565, 569, 572, 573, 574, 575, 579, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 606, 607, 608, 612, 613, 675, 676, 679, 684, 694, 695, 698, 699, 701, 703, 720, 721, 736, 739, 740, 751, 752, 760, 767, 771, 790, 796, 798, 804, 805, 809, 810, 817, 818, 819, 826, 827, 834, 847, 848, 856, 858, 860, 863, 867, 869, 872, 873, 874, 875, 877, 878, 883, 886, 894, 895, 896, 897, 898, 899, 935, 936, 943, 944, 945, 954, 955, 956, 959, 960, 997, 1019, 1020, 1021, 1022, 1026, 1030, 1037, 1040, 1077, 1088, 1105, 1106, 1107, 1124, 1128, 1130, 1134, 1140, 1142, 1143, 1145, 1146, 1147, 1149, 1150, 1151, 1166, 1167, 1171, 1235, 1236, 1248, 1261, 1270], "multi": [13, 40, 118, 119, 301, 439, 623, 771, 1182], "automat": [13, 67, 70, 107, 109, 110, 111, 113, 114, 118, 119, 120, 121, 123, 127, 128, 132, 136, 148, 150, 152, 241, 274, 301, 529, 530, 579, 651, 652, 653, 771, 839, 858, 883, 1109, 1134, 1210, 1211, 1212, 1261, 1269], "turn": [13, 58, 59, 60, 61, 87, 88, 118, 119, 132, 663, 792, 793, 801, 803, 823, 824, 833, 883, 1222], "struct": [13, 105, 114, 222, 241, 263, 267, 274, 301, 377, 459, 520, 572, 582, 583, 625, 627, 647, 648, 683, 705, 706, 708, 709, 710, 735, 771, 839, 854, 858, 871, 883, 955, 1103, 1128, 1137, 1138, 1184, 1186, 1204, 1206, 1207, 1261], "v": [13, 14, 45, 67, 68, 172, 301, 599, 771, 1154, 1261], "v2": [13, 124, 135], "out": [13, 19, 58, 59, 60, 61, 114, 140, 235, 238, 301, 337, 349, 497, 498, 518, 615, 619, 626, 761, 837, 883, 913, 924, 1080, 1081, 1101, 1174, 1178, 1185], "separ": [14, 15, 29, 32, 37, 58, 116, 118, 119, 132, 224, 226, 258, 265, 267, 301, 316, 335, 338, 495, 500, 531, 622, 700, 705, 706, 709, 710, 771, 854, 883, 911, 914, 1078, 1083, 1181, 1230, 1238, 1261], "set_thousands_separ": 14, "thousand": [14, 32], "group": [14, 32, 40, 45, 61, 65, 119, 187, 188, 189, 190, 191, 192, 206, 222, 224, 226, 235, 238, 268, 270, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 301, 310, 376, 441, 447, 452, 455, 494, 529, 531, 539, 541, 564, 575, 583, 584, 610, 611, 615, 623, 624, 625, 626, 639, 683, 736, 771, 809, 810, 811, 812, 813, 814, 837, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 883, 886, 954, 1077, 1138, 1174, 1182, 1183, 1184, 1185, 1198, 1249, 1261], "9876": 14, "54321": 14, "1010101": 14, "123456": [14, 886], "78": 14, "tbl_cell_numeric_align": [14, 15, 32], "right": [14, 15, 20, 21, 23, 32, 40, 118, 119, 141, 142, 143, 144, 188, 189, 191, 192, 207, 208, 235, 269, 301, 377, 436, 437, 438, 463, 509, 510, 511, 512, 572, 584, 587, 588, 589, 590, 591, 593, 594, 595, 599, 608, 643, 698, 714, 715, 717, 718, 758, 759, 771, 810, 811, 813, 814, 818, 819, 837, 855, 883, 955, 1019, 1020, 1021, 1041, 1092, 1093, 1094, 1095, 1128, 1154, 1168, 1202, 1261], "thousands_separ": [14, 15, 32], "decimal_separ": [14, 32], "float_precis": [14, 15, 32, 37, 40, 58, 301, 883], "print": [14, 15, 16, 17, 18, 20, 21, 22, 24, 25, 30, 32, 33, 119, 140, 141, 143, 170, 186, 187, 206, 209, 259, 278, 301, 461, 542, 771, 792, 816, 883, 1049, 1240, 1261, 1270], "876": 14, "543": 14, "010": [14, 660, 1219], "101": [14, 32, 386, 660, 1219, 1270], "000": [14, 15, 32, 40, 301, 1270], "123": [14, 618, 624, 640, 665, 761, 886, 1177, 1183, 1199, 1224, 1239, 1261], "456": [14, 15, 386, 886, 964, 1239, 1261], "780": 14, "precis": [15, 16, 37, 40, 48, 49, 58, 120, 205, 237, 238, 257, 301, 384, 659, 883, 886, 962, 1218], "control": [15, 16, 40, 70, 88, 89, 146, 301, 579, 771, 793, 801, 883, 1134, 1261], "number": [15, 16, 17, 18, 19, 22, 30, 37, 38, 40, 45, 58, 61, 72, 81, 91, 101, 107, 109, 111, 113, 116, 118, 119, 121, 123, 127, 128, 129, 130, 132, 136, 137, 139, 146, 148, 149, 151, 152, 159, 161, 165, 172, 173, 175, 176, 186, 194, 205, 206, 209, 210, 221, 222, 239, 245, 246, 250, 253, 264, 268, 271, 282, 284, 286, 295, 301, 327, 347, 353, 365, 376, 377, 379, 385, 394, 397, 400, 403, 405, 415, 429, 430, 432, 436, 437, 438, 442, 444, 450, 458, 472, 474, 482, 483, 492, 499, 502, 503, 508, 513, 517, 520, 568, 572, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 601, 602, 604, 613, 630, 631, 632, 635, 639, 647, 648, 659, 672, 678, 684, 701, 702, 703, 719, 727, 732, 748, 749, 752, 756, 760, 771, 787, 790, 795, 802, 803, 804, 805, 815, 822, 833, 843, 844, 848, 850, 852, 856, 866, 868, 870, 879, 883, 928, 938, 954, 955, 957, 963, 972, 975, 981, 985, 987, 997, 1011, 1012, 1014, 1018, 1019, 1020, 1021, 1025, 1027, 1036, 1048, 1065, 1066, 1075, 1082, 1085, 1086, 1091, 1096, 1100, 1103, 1116, 1117, 1128, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1147, 1148, 1149, 1150, 1151, 1152, 1160, 1161, 1164, 1172, 1189, 1190, 1191, 1194, 1198, 1206, 1207, 1218, 1232, 1245, 1250, 1261, 1270], "place": [15, 16, 37, 58, 159, 168, 174, 196, 197, 198, 226, 231, 233, 238, 246, 249, 264, 272, 301, 326, 338, 343, 500, 515, 602, 610, 771, 787, 844, 847, 852, 883, 892, 902, 914, 919, 1024, 1083, 1098, 1131, 1161, 1170, 1261], "float": [15, 16, 37, 40, 52, 53, 58, 123, 138, 141, 142, 143, 144, 145, 148, 150, 156, 166, 172, 175, 208, 228, 239, 246, 293, 301, 333, 358, 377, 381, 382, 415, 433, 434, 435, 436, 437, 438, 443, 448, 454, 456, 462, 465, 469, 472, 474, 475, 476, 481, 489, 508, 522, 526, 532, 545, 556, 557, 558, 559, 569, 572, 573, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 598, 679, 745, 747, 771, 796, 804, 819, 834, 844, 845, 877, 883, 886, 909, 929, 936, 955, 956, 958, 959, 960, 977, 978, 997, 1016, 1018, 1019, 1020, 1021, 1026, 1030, 1037, 1048, 1064, 1072, 1073, 1091, 1105, 1119, 1120, 1127, 1128, 1129, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1147, 1148, 1149, 1150, 1152, 1154, 1156, 1157, 1168, 1172, 1231, 1242, 1250, 1261, 1270], "point": [15, 16, 40, 52, 53, 148, 150, 175, 188, 191, 209, 301, 358, 377, 381, 415, 443, 448, 472, 474, 508, 531, 596, 598, 771, 804, 810, 813, 823, 824, 835, 883, 936, 955, 959, 997, 1026, 1030, 1048, 1091, 1128, 1150, 1152, 1242, 1261], "standard": [15, 40, 250, 260, 301, 397, 437, 593, 608, 613, 629, 752, 767, 771, 848, 883, 975, 1020, 1168, 1172, 1188, 1261, 1270], "behaviour": [15, 81, 89, 169, 301, 615, 623, 624, 626, 639, 679, 771, 799, 883, 1174, 1182, 1183, 1185, 1198], "when": [15, 19, 22, 24, 28, 37, 40, 45, 48, 58, 61, 70, 72, 73, 90, 91, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 118, 119, 120, 121, 123, 124, 126, 129, 130, 132, 133, 135, 136, 138, 141, 142, 143, 144, 148, 150, 157, 159, 166, 170, 172, 174, 176, 180, 188, 189, 191, 192, 207, 211, 225, 235, 236, 238, 241, 242, 245, 249, 258, 260, 264, 266, 269, 275, 301, 359, 436, 437, 438, 444, 513, 520, 530, 540, 568, 579, 583, 584, 601, 610, 611, 616, 630, 631, 641, 651, 652, 653, 656, 696, 705, 709, 723, 771, 787, 796, 805, 810, 811, 813, 814, 818, 823, 824, 837, 839, 840, 843, 847, 852, 853, 855, 859, 883, 939, 956, 1018, 1019, 1020, 1021, 1024, 1027, 1096, 1109, 1134, 1138, 1153, 1156, 1160, 1175, 1189, 1190, 1200, 1210, 1211, 1212, 1215, 1238, 1261], "larger": [15, 58, 59, 60, 61, 701, 792, 883], "should": [15, 38, 40, 58, 59, 60, 61, 89, 107, 109, 111, 113, 122, 127, 128, 130, 132, 136, 138, 145, 146, 150, 159, 167, 205, 208, 211, 236, 237, 238, 257, 258, 264, 267, 287, 301, 310, 356, 376, 431, 439, 472, 474, 494, 531, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 599, 608, 683, 719, 721, 733, 736, 748, 749, 761, 771, 787, 798, 803, 818, 819, 824, 841, 845, 847, 852, 854, 883, 886, 932, 954, 1013, 1077, 1110, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1147, 1148, 1149, 1154, 1168, 1249, 1261], "ensur": [15, 40, 121, 147, 148, 150, 187, 190, 224, 236, 301, 463, 529, 771, 809, 812, 823, 824, 883, 886, 1242, 1261], "awar": [15, 205, 237, 238, 257, 301, 616, 641, 803, 883, 1175, 1200, 1217], "both": [15, 30, 37, 58, 72, 90, 91, 188, 189, 191, 192, 207, 208, 218, 235, 236, 261, 269, 301, 315, 359, 377, 439, 463, 572, 584, 587, 588, 589, 590, 591, 593, 594, 595, 714, 715, 717, 718, 758, 759, 767, 771, 782, 810, 811, 813, 814, 818, 819, 829, 837, 855, 883, 939, 1041, 1051, 1243, 1261], "limit": [15, 16, 61, 120, 121, 132, 176, 301, 347, 360, 361, 444, 450, 771, 805, 815, 883, 940, 941, 1027, 1261], "represent": [15, 43, 44, 259, 301, 356, 385, 390, 394, 397, 398, 400, 401, 403, 405, 408, 411, 412, 415, 429, 430, 432, 677, 771, 801, 821, 883, 932, 933, 963, 968, 972, 974, 975, 979, 981, 982, 985, 987, 990, 993, 994, 997, 1011, 1012, 1014, 1240, 1244, 1261], "look": [15, 188, 301, 348, 520, 529, 771, 810, 883, 923], "appli": [15, 25, 37, 40, 58, 65, 89, 132, 145, 148, 150, 166, 180, 211, 225, 287, 301, 385, 388, 389, 390, 394, 396, 397, 398, 400, 401, 403, 405, 408, 411, 412, 415, 418, 429, 430, 432, 437, 438, 527, 529, 531, 568, 585, 587, 588, 590, 594, 639, 656, 657, 658, 662, 705, 706, 709, 710, 723, 734, 735, 736, 746, 761, 771, 796, 815, 822, 823, 824, 832, 871, 883, 939, 963, 966, 967, 968, 972, 974, 975, 979, 981, 982, 985, 987, 990, 993, 994, 997, 1000, 1011, 1012, 1014, 1020, 1021, 1110, 1139, 1141, 1142, 1144, 1148, 1198, 1215, 1216, 1217, 1221, 1261], "float64": [15, 37, 40, 58, 110, 118, 148, 170, 172, 180, 240, 274, 301, 318, 319, 320, 321, 322, 323, 354, 362, 363, 364, 378, 415, 439, 472, 474, 574, 606, 607, 675, 676, 721, 744, 747, 762, 771, 800, 838, 858, 883, 886, 997, 1243, 1248, 1261], "doe": [15, 37, 39, 58, 81, 89, 101, 107, 109, 110, 111, 113, 114, 118, 119, 120, 122, 123, 127, 128, 132, 133, 136, 138, 162, 174, 193, 206, 207, 236, 237, 238, 266, 274, 277, 301, 304, 431, 457, 520, 530, 652, 653, 681, 767, 771, 791, 796, 803, 818, 824, 853, 858, 862, 883, 942, 1013, 1024, 1034, 1035, 1109, 1163, 1251, 1261, 1265], "cover": 15, "nativ": [15, 118, 120, 123, 124, 126, 130, 146, 205, 211, 237, 238, 257, 287, 301, 531, 736, 771, 777, 871, 1110, 1261, 1270], "level": [15, 40, 45, 61, 132, 135, 136, 137, 148, 180, 211, 222, 301, 445, 771, 815, 822, 883], "larg": [15, 16, 19, 81, 120], "maximum": [15, 31, 37, 58, 118, 119, 132, 138, 146, 147, 148, 150, 186, 188, 212, 213, 301, 331, 486, 532, 556, 566, 575, 737, 738, 771, 810, 825, 883, 907, 976, 1069, 1111, 1119, 1125, 1130, 1261], "import": [15, 21, 33, 36, 37, 39, 40, 41, 42, 45, 48, 81, 107, 108, 111, 112, 118, 121, 132, 138, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 160, 166, 167, 169, 186, 188, 206, 208, 217, 224, 226, 258, 260, 268, 270, 301, 304, 378, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 396, 397, 398, 400, 401, 403, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 445, 586, 587, 588, 590, 593, 594, 595, 694, 695, 714, 715, 717, 718, 719, 758, 759, 767, 771, 783, 789, 793, 796, 797, 798, 799, 810, 819, 824, 828, 841, 883, 943, 945, 961, 962, 963, 964, 965, 966, 967, 968, 970, 971, 972, 974, 975, 976, 977, 978, 979, 981, 982, 984, 985, 987, 988, 989, 990, 992, 993, 994, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1045, 1050, 1054, 1055, 1060, 1140, 1166, 1235, 1261, 1265, 1270], "pi": [15, 378, 771, 943, 945, 1166, 1235, 1261], "e": [15, 36, 37, 39, 41, 42, 45, 58, 108, 117, 118, 119, 123, 124, 125, 126, 127, 128, 129, 130, 131, 135, 138, 186, 194, 204, 253, 255, 260, 268, 301, 309, 316, 433, 439, 463, 522, 531, 536, 537, 539, 540, 541, 542, 543, 603, 608, 626, 652, 653, 721, 736, 761, 771, 797, 821, 835, 883, 886, 1016, 1017, 1041, 1155, 1168, 1185, 1242, 1261, 1270], "const": 15, "15": [15, 40, 140, 147, 166, 188, 198, 211, 235, 301, 376, 379, 407, 414, 428, 568, 584, 594, 628, 706, 758, 771, 796, 810, 837, 883, 954, 957, 996, 1010, 1187, 1261], "141592653589793": 15, "718281828459045": [15, 433, 522, 771, 1016, 1105, 1261], "align": [15, 20, 21, 40, 81, 89, 301], "numer": [15, 21, 37, 40, 58, 160, 167, 208, 217, 226, 261, 268, 301, 309, 359, 449, 463, 524, 546, 548, 569, 578, 603, 625, 665, 669, 679, 771, 783, 789, 798, 819, 828, 883, 886, 939, 956, 1017, 1041, 1058, 1155, 1162, 1184, 1224, 1242, 1261, 1270], "column": [15, 21, 22, 23, 26, 27, 29, 39, 40, 43, 48, 72, 73, 81, 82, 89, 91, 93, 95, 107, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 141, 142, 143, 144, 148, 159, 160, 164, 165, 167, 168, 169, 170, 173, 177, 178, 179, 183, 184, 186, 187, 188, 189, 190, 191, 192, 196, 197, 198, 203, 204, 205, 207, 208, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 235, 236, 237, 238, 240, 241, 242, 243, 249, 250, 251, 252, 256, 258, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 274, 275, 276, 277, 279, 301, 311, 312, 314, 326, 335, 342, 343, 345, 359, 365, 366, 377, 385, 386, 388, 389, 390, 394, 396, 397, 398, 400, 401, 403, 405, 408, 411, 412, 415, 417, 418, 420, 429, 430, 432, 439, 441, 445, 447, 459, 463, 478, 482, 488, 495, 497, 515, 518, 519, 520, 530, 531, 537, 539, 541, 550, 552, 553, 554, 555, 564, 570, 572, 576, 578, 580, 583, 584, 587, 588, 589, 590, 591, 593, 594, 595, 603, 610, 611, 614, 622, 626, 647, 648, 656, 657, 658, 659, 660, 662, 667, 670, 685, 687, 688, 689, 690, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 721, 722, 723, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 767, 771, 787, 789, 795, 798, 799, 800, 802, 806, 809, 810, 811, 812, 813, 814, 818, 819, 824, 825, 826, 827, 828, 830, 831, 832, 834, 835, 837, 838, 839, 840, 841, 842, 847, 848, 849, 852, 853, 854, 855, 856, 858, 859, 860, 861, 862, 863, 871, 883, 886, 890, 891, 911, 918, 919, 921, 931, 933, 939, 955, 963, 966, 967, 968, 972, 974, 975, 979, 981, 982, 985, 987, 990, 993, 994, 997, 999, 1000, 1002, 1011, 1012, 1014, 1023, 1034, 1037, 1071, 1078, 1080, 1098, 1102, 1128, 1135, 1138, 1162, 1173, 1181, 1185, 1206, 1207, 1215, 1216, 1217, 1218, 1219, 1221, 1227, 1230, 1238, 1239, 1261, 1270], "cleanli": [15, 186, 301], "line": [15, 25, 40, 118, 119, 123, 132, 186, 200, 202, 301, 304, 623, 1182], "up": [15, 40, 73, 118, 119, 121, 132, 205, 208, 237, 238, 257, 301, 316, 358, 531, 771, 818, 819, 824, 883, 886, 936, 1261], "xx": [15, 82, 84, 147, 150, 166, 301, 796, 883, 886], "yy": [15, 82, 84, 147, 150, 166, 301, 796, 883, 886], "11111111": 15, "44444444444": 15, "100000": [15, 32], "987654321": 15, "23456789": 15, "11": [15, 21, 45, 61, 140, 148, 166, 235, 301, 311, 406, 407, 410, 414, 428, 462, 565, 575, 584, 586, 594, 609, 686, 754, 759, 771, 792, 793, 796, 815, 822, 833, 837, 850, 883, 886, 992, 996, 1010, 1110, 1140, 1261], "111": 15, "100": [15, 22, 32, 40, 110, 113, 118, 119, 127, 132, 136, 245, 301, 579, 601, 616, 627, 628, 641, 659, 718, 771, 843, 883, 1106, 1134, 1141, 1142, 1144, 1160, 1175, 1186, 1187, 1200, 1218, 1261, 1270], "988": 15, "44": [15, 218, 301, 380, 771, 829, 883], "444": 15, "23": [15, 140, 166, 188, 235, 301, 386, 390, 394, 411, 414, 430, 584, 587, 588, 590, 593, 594, 595, 716, 719, 757, 758, 759, 771, 796, 810, 837, 883, 886, 964, 972, 1270], "789": [15, 886], "fmt": [16, 461, 724, 771, 816, 883], "floatfmt": 16, "mix": [16, 956, 1217, 1261], "how": [16, 39, 40, 81, 89, 110, 113, 121, 130, 137, 169, 207, 226, 268, 269, 301, 334, 356, 379, 413, 414, 428, 462, 490, 491, 492, 564, 578, 592, 627, 628, 656, 658, 716, 761, 771, 799, 818, 855, 883, 910, 932, 957, 995, 996, 1010, 1073, 1074, 1075, 1146, 1186, 1187, 1215, 1217, 1261], "full": [16, 48, 81, 86, 89, 118, 119, 122, 132, 133, 134, 138, 188, 189, 191, 192, 235, 301, 584, 656, 657, 658, 662, 771, 810, 811, 813, 814, 823, 824, 837, 883, 886, 1215, 1216, 1217, 1221, 1270], "scientif": 16, "notat": [16, 40, 301], "small": [16, 121, 147, 209, 301, 414, 803, 883, 1270], "2304980958725870923": 16, "1e6": 16, "1e": [16, 141, 142, 143, 144], "230498": 16, "0000e": 16, "230498095872587": 16, "1000000": [16, 1008], "00000001": [16, 686, 771], "plai": [17, 700], "sam": 17, "As": [17, 72, 90, 91, 107, 109, 110, 111, 113, 123, 127, 128, 136, 301, 520, 761, 883], "time": [17, 39, 48, 50, 65, 70, 86, 87, 88, 130, 132, 166, 174, 188, 189, 191, 192, 208, 235, 270, 301, 333, 353, 383, 384, 386, 387, 388, 392, 393, 410, 413, 414, 417, 419, 420, 428, 431, 488, 489, 520, 583, 584, 587, 588, 589, 590, 591, 593, 594, 595, 604, 656, 658, 662, 677, 678, 699, 700, 714, 715, 716, 717, 718, 719, 725, 758, 759, 771, 792, 793, 796, 810, 811, 813, 814, 819, 833, 837, 883, 886, 909, 928, 961, 962, 964, 965, 970, 971, 992, 995, 996, 999, 1001, 1002, 1010, 1013, 1024, 1071, 1072, 1073, 1138, 1164, 1215, 1217, 1221, 1244, 1245, 1261, 1270], "goe": 17, "By": [17, 19, 35, 81, 118, 119, 132, 188, 207, 208, 235, 245, 250, 269, 270, 271, 301, 410, 414, 428, 513, 584, 587, 588, 589, 590, 591, 593, 594, 595, 601, 613, 684, 701, 703, 714, 715, 717, 718, 719, 733, 752, 758, 759, 760, 771, 792, 810, 818, 819, 837, 843, 848, 856, 883, 992, 996, 1010, 1096, 1160, 1172, 1242, 1250, 1261], "begin": [17, 40, 301, 436, 437, 438, 623, 771, 1019, 1020, 1021, 1182, 1261], "beauti": 17, "friendship": 17, "len_byt": [17, 631, 632, 1190, 1191], "len": [17, 40, 146, 148, 206, 226, 277, 287, 301, 365, 503, 531, 539, 541, 702, 729, 771, 862, 871, 883, 1086, 1261], "u32": [17, 65, 120, 158, 160, 165, 223, 276, 277, 282, 286, 292, 294, 301, 310, 317, 324, 325, 326, 327, 328, 331, 332, 334, 365, 366, 459, 482, 486, 487, 491, 502, 549, 562, 575, 583, 587, 588, 590, 593, 594, 595, 599, 618, 626, 630, 631, 677, 681, 687, 692, 696, 697, 702, 704, 729, 732, 743, 771, 786, 789, 795, 831, 861, 862, 866, 870, 876, 878, 883, 902, 903, 904, 907, 908, 910, 929, 933, 1037, 1069, 1070, 1074, 1085, 1130, 1138, 1177, 1185, 1189, 1190, 1244, 1247, 1249, 1261], "37": [17, 594, 771], "beaut": 17, "48": [17, 235, 301, 584, 771, 837, 883], "fmt_str_length": [17, 715, 718], "50": [17, 32, 40, 166, 174, 186, 301, 359, 414, 428, 715, 771, 796, 883, 939, 956, 1010, 1261], "element": [18, 19, 30, 147, 150, 159, 165, 203, 226, 236, 250, 264, 271, 301, 316, 318, 319, 320, 321, 322, 323, 334, 335, 353, 357, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 381, 382, 440, 441, 445, 457, 468, 482, 490, 491, 493, 494, 495, 502, 503, 509, 510, 511, 512, 523, 524, 531, 564, 565, 575, 578, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 599, 605, 606, 607, 612, 613, 647, 648, 659, 675, 676, 678, 684, 701, 703, 748, 749, 752, 760, 771, 787, 795, 847, 848, 852, 856, 883, 893, 894, 895, 896, 897, 898, 899, 910, 911, 928, 935, 938, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 959, 960, 1022, 1023, 1028, 1036, 1049, 1063, 1065, 1066, 1073, 1074, 1076, 1077, 1078, 1085, 1086, 1092, 1093, 1094, 1095, 1106, 1107, 1110, 1124, 1130, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1154, 1165, 1166, 1167, 1171, 1172, 1206, 1207, 1218, 1232, 1235, 1236, 1240, 1245, 1246, 1250, 1261], "empti": [18, 36, 37, 58, 97, 110, 118, 119, 123, 129, 132, 161, 162, 188, 201, 217, 301, 733, 750, 790, 791, 810, 828, 883, 886, 938, 942, 1044, 1261], "alwai": [18, 37, 39, 58, 65, 118, 147, 187, 190, 211, 287, 301, 539, 656, 714, 761, 824, 883, 1110, 1215, 1261, 1269, 1270], "neg": [18, 49, 118, 119, 124, 126, 130, 139, 188, 189, 191, 192, 194, 210, 235, 245, 246, 248, 253, 277, 301, 513, 514, 568, 584, 601, 602, 609, 645, 771, 810, 811, 813, 814, 837, 843, 844, 846, 861, 862, 883, 1036, 1066, 1096, 1097, 1160, 1161, 1169, 1204, 1232, 1261], "result": [18, 37, 43, 44, 45, 58, 59, 60, 61, 81, 89, 111, 113, 120, 121, 122, 123, 132, 135, 137, 138, 150, 174, 188, 191, 193, 207, 222, 226, 235, 238, 245, 246, 261, 270, 277, 279, 301, 414, 417, 420, 428, 436, 437, 438, 442, 457, 479, 519, 520, 529, 531, 564, 572, 579, 580, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 600, 601, 602, 646, 647, 658, 679, 704, 705, 706, 709, 710, 714, 715, 716, 717, 718, 719, 735, 744, 747, 748, 749, 762, 771, 788, 792, 796, 810, 811, 813, 814, 818, 823, 824, 833, 837, 841, 843, 844, 862, 863, 883, 892, 955, 996, 999, 1002, 1010, 1019, 1020, 1021, 1024, 1035, 1064, 1102, 1110, 1128, 1134, 1135, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1147, 1148, 1149, 1158, 1160, 1161, 1205, 1206, 1217, 1242, 1243, 1261, 1269, 1270], "being": [18, 41, 88, 118, 119, 120, 132, 138, 160, 173, 258, 268, 269, 301, 316, 376, 414, 459, 587, 588, 589, 590, 591, 593, 594, 595, 720, 771, 789, 793, 802, 803, 855, 883, 934, 954, 996, 1037, 1128, 1261, 1270], "content": [18, 604, 771, 1164, 1261], "final": [18, 40, 81, 137, 301, 436, 437, 438, 771, 796, 803, 883, 1019, 1020, 1021, 1261], "item": [18, 89, 119, 186, 236, 239, 301, 333, 337, 338, 379, 441, 489, 492, 498, 500, 508, 598, 648, 771, 909, 913, 914, 957, 1023, 1072, 1075, 1081, 1083, 1091, 1152, 1207, 1261], "num": [18, 40, 263, 301, 463, 771, 1041, 1261], "fmt_table_cell_list_len": 18, "10": [18, 21, 22, 32, 36, 37, 39, 40, 41, 42, 45, 61, 65, 81, 89, 114, 121, 132, 140, 148, 150, 162, 166, 174, 185, 186, 188, 194, 196, 198, 199, 204, 221, 225, 226, 227, 231, 233, 235, 241, 253, 274, 279, 283, 285, 288, 289, 290, 291, 292, 293, 294, 301, 311, 315, 324, 325, 326, 328, 359, 367, 370, 379, 383, 385, 386, 388, 389, 392, 394, 398, 400, 401, 403, 406, 407, 408, 413, 414, 415, 418, 428, 431, 457, 458, 462, 468, 478, 483, 492, 499, 514, 517, 523, 539, 541, 550, 562, 565, 568, 579, 584, 609, 660, 672, 686, 698, 705, 714, 717, 720, 723, 725, 727, 733, 735, 756, 759, 771, 792, 793, 796, 810, 815, 817, 822, 832, 833, 837, 839, 849, 850, 858, 863, 867, 869, 872, 873, 874, 875, 876, 877, 878, 883, 886, 939, 957, 961, 963, 964, 970, 981, 995, 1010, 1013, 1016, 1036, 1049, 1066, 1075, 1082, 1097, 1100, 1106, 1110, 1124, 1134, 1153, 1156, 1219, 1232, 1261, 1270], "size": [19, 45, 61, 118, 119, 120, 146, 147, 148, 150, 152, 172, 268, 301, 580, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 693, 729, 730, 748, 749, 771, 792, 883, 1018, 1135, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1261, 1270], "overwrit": [19, 38, 39, 107, 109, 110, 111, 113, 118, 119, 127, 128, 132, 136, 156, 269, 301, 311, 771, 803, 883], "chunk": [19, 61, 116, 118, 119, 130, 132, 135, 136, 137, 148, 150, 174, 206, 221, 301, 315, 576, 771, 883, 892, 937, 1024, 1033, 1116, 1131, 1237, 1261], "stream": [19, 41, 42, 58, 59, 60, 61, 87, 88, 126, 159, 187, 190, 207, 264, 266, 301, 529, 771, 787, 792, 793, 801, 803, 809, 812, 818, 823, 824, 828, 833, 845, 847, 852, 853, 883], "engin": [19, 38, 120, 121, 123, 152, 187, 190, 207, 211, 266, 287, 301, 529, 771, 809, 812, 818, 823, 824, 828, 853, 871, 883, 1110, 1261], "determin": [19, 37, 40, 58, 79, 81, 89, 110, 113, 118, 119, 120, 123, 129, 130, 132, 137, 139, 157, 180, 188, 191, 205, 206, 211, 226, 235, 265, 270, 301, 356, 396, 413, 414, 428, 459, 520, 530, 539, 572, 578, 579, 587, 588, 589, 590, 591, 593, 594, 595, 608, 616, 627, 628, 656, 658, 659, 716, 744, 747, 762, 771, 810, 813, 837, 883, 932, 974, 995, 996, 1010, 1037, 1103, 1109, 1128, 1134, 1168, 1175, 1186, 1187, 1215, 1217, 1218, 1261], "thread": [19, 37, 58, 88, 116, 118, 119, 121, 152, 301, 316, 494, 531, 771, 793, 883, 1077], "pool": [19, 88, 152, 793, 883], "For": [19, 39, 40, 118, 119, 121, 122, 123, 132, 133, 134, 169, 174, 207, 208, 235, 287, 301, 304, 436, 437, 438, 520, 531, 540, 577, 608, 615, 623, 624, 625, 626, 639, 705, 709, 719, 723, 724, 767, 771, 799, 819, 837, 871, 883, 1019, 1020, 1021, 1024, 1051, 1132, 1168, 1174, 1182, 1183, 1184, 1185, 1198, 1242, 1261, 1265], "some": [19, 35, 40, 72, 91, 110, 118, 119, 120, 123, 132, 156, 169, 301, 767, 799, 883, 1049, 1261, 1270], "dataset": [19, 45, 51, 118, 119, 130, 132, 138, 207, 301, 479, 771, 783, 818, 823, 824, 883, 1064, 1261], "esp": 19, "have": [19, 35, 39, 40, 48, 72, 81, 91, 108, 117, 118, 119, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 148, 150, 174, 205, 207, 229, 235, 237, 238, 257, 277, 301, 376, 436, 437, 438, 531, 540, 575, 579, 584, 625, 771, 797, 818, 828, 837, 845, 861, 862, 883, 886, 954, 956, 1019, 1020, 1021, 1024, 1034, 1130, 1134, 1217, 1261, 1270], "too": [19, 583, 771, 803, 883], "optimist": 19, "lead": [19, 45, 114, 138, 188, 189, 191, 192, 215, 235, 245, 252, 301, 452, 455, 513, 529, 531, 584, 600, 601, 634, 650, 651, 653, 673, 701, 771, 810, 811, 813, 814, 823, 824, 837, 843, 865, 871, 883, 1096, 1110, 1158, 1160, 1193, 1209, 1210, 1212, 1261], "memori": [19, 61, 89, 107, 108, 111, 112, 113, 118, 119, 120, 123, 124, 130, 132, 135, 136, 137, 156, 174, 211, 238, 247, 287, 301, 564, 576, 603, 771, 792, 883, 1024, 1110, 1131, 1162, 1163, 1261], "error": [19, 39, 88, 99, 102, 118, 119, 132, 160, 226, 236, 301, 311, 338, 349, 354, 478, 497, 500, 518, 550, 615, 619, 623, 625, 626, 627, 629, 656, 657, 658, 662, 771, 789, 793, 865, 871, 883, 914, 924, 929, 1080, 1083, 1101, 1174, 1178, 1182, 1184, 1185, 1186, 1188, 1215, 1216, 1217, 1221, 1261], "row": [19, 25, 30, 37, 38, 40, 43, 45, 58, 61, 81, 82, 84, 89, 98, 101, 106, 110, 111, 113, 114, 118, 119, 120, 123, 124, 126, 127, 130, 132, 135, 136, 137, 138, 141, 142, 146, 148, 157, 159, 161, 169, 174, 177, 180, 182, 186, 187, 188, 190, 193, 194, 200, 202, 203, 205, 206, 207, 208, 209, 210, 211, 217, 222, 238, 239, 248, 253, 254, 257, 259, 264, 266, 268, 269, 276, 277, 282, 284, 286, 287, 295, 301, 327, 335, 441, 453, 458, 483, 495, 520, 564, 565, 580, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 609, 611, 622, 627, 628, 672, 674, 693, 696, 700, 702, 704, 709, 710, 723, 727, 729, 730, 732, 746, 748, 749, 756, 761, 771, 787, 790, 792, 799, 803, 806, 807, 808, 810, 815, 818, 819, 820, 822, 824, 828, 846, 850, 851, 852, 853, 855, 861, 862, 866, 868, 870, 871, 879, 883, 911, 1023, 1024, 1032, 1036, 1078, 1124, 1135, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1169, 1181, 1186, 1187, 1232, 1234, 1261, 1270], "per": [19, 37, 40, 58, 146, 148, 159, 186, 222, 223, 242, 249, 264, 275, 290, 292, 293, 301, 316, 337, 494, 497, 498, 518, 529, 531, 611, 683, 696, 771, 787, 840, 847, 852, 859, 874, 876, 877, 883, 913, 1077, 1080, 1081, 1101, 1249, 1261], "everi": [19, 37, 58, 118, 119, 132, 182, 188, 191, 254, 257, 270, 301, 329, 330, 331, 332, 335, 337, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 414, 428, 441, 453, 486, 487, 492, 495, 498, 499, 509, 514, 517, 583, 622, 674, 705, 706, 709, 710, 771, 803, 808, 810, 813, 851, 883, 905, 906, 907, 908, 911, 913, 946, 947, 948, 949, 950, 951, 952, 953, 954, 996, 1010, 1023, 1032, 1034, 1069, 1070, 1075, 1078, 1081, 1082, 1092, 1097, 1100, 1138, 1181, 1234, 1261], "process": [19, 37, 58, 59, 60, 61, 118, 119, 120, 132, 152, 301, 792, 883], "liter": [20, 21, 25, 39, 120, 123, 149, 150, 151, 241, 242, 245, 269, 274, 275, 301, 311, 348, 359, 386, 434, 435, 442, 449, 454, 456, 463, 481, 526, 530, 546, 548, 558, 559, 569, 579, 615, 618, 626, 639, 640, 669, 679, 688, 690, 693, 698, 699, 700, 708, 712, 713, 716, 729, 733, 738, 742, 750, 753, 755, 757, 771, 805, 839, 840, 843, 855, 858, 859, 883, 886, 923, 939, 964, 1025, 1041, 1134, 1153, 1156, 1160, 1174, 1177, 1185, 1198, 1199, 1261], "left": [20, 21, 40, 67, 81, 141, 142, 143, 144, 188, 189, 191, 192, 207, 208, 235, 269, 301, 377, 436, 437, 438, 462, 463, 572, 584, 587, 588, 589, 590, 591, 593, 594, 595, 599, 633, 677, 698, 705, 706, 709, 710, 714, 715, 717, 718, 723, 746, 758, 759, 761, 771, 810, 811, 813, 814, 818, 819, 837, 855, 883, 955, 1019, 1020, 1021, 1041, 1128, 1154, 1192, 1244, 1261], "center": [20, 21, 40, 301, 436, 437, 438, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 771, 1019, 1020, 1021, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1147, 1148, 1149, 1261], "cell": [20, 21, 40, 301], "valueerror": [20, 25], "recognis": [20, 21, 25, 145], "column_abc": 20, "column_xyz": 20, "keyerror": 21, "datetim": [21, 37, 40, 58, 81, 114, 123, 148, 160, 166, 186, 188, 189, 191, 192, 206, 208, 235, 270, 301, 304, 333, 383, 384, 385, 386, 387, 388, 390, 392, 393, 394, 396, 397, 398, 400, 401, 403, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 489, 584, 587, 588, 589, 590, 591, 593, 594, 595, 656, 658, 677, 714, 715, 717, 718, 719, 725, 733, 758, 759, 771, 789, 796, 810, 811, 813, 814, 819, 837, 883, 886, 909, 961, 962, 963, 964, 965, 966, 968, 970, 971, 972, 974, 975, 976, 977, 978, 979, 981, 982, 984, 985, 987, 988, 989, 990, 992, 993, 994, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1060, 1072, 1073, 1119, 1120, 1157, 1215, 1217, 1244, 1261], "date": [21, 40, 48, 81, 118, 119, 121, 123, 129, 132, 138, 148, 160, 166, 186, 188, 189, 191, 192, 206, 208, 235, 301, 304, 333, 384, 385, 386, 387, 390, 393, 396, 397, 400, 405, 406, 407, 410, 411, 412, 413, 414, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 489, 584, 587, 588, 589, 590, 591, 593, 594, 595, 656, 657, 677, 714, 715, 717, 718, 725, 733, 757, 771, 789, 796, 810, 811, 813, 814, 819, 837, 883, 886, 909, 962, 963, 964, 965, 968, 971, 972, 974, 975, 976, 978, 979, 981, 984, 985, 987, 988, 989, 990, 992, 993, 994, 995, 996, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1060, 1072, 1073, 1119, 1120, 1157, 1215, 1216, 1244, 1261], "333": [21, 597, 771, 1151, 1261], "mno": [21, 25], "2023": [21, 40, 114, 140, 206, 301, 386, 719, 733, 886, 964], "29": [21, 148, 383, 406, 961, 988], "2001": [21, 384, 385, 390, 393, 396, 400, 405, 410, 411, 412, 414, 419, 428, 429, 430, 431, 587, 588, 590, 593, 594, 595, 656, 771, 886, 962, 963, 968, 971, 972, 974, 976, 977, 978, 979, 981, 982, 984, 985, 987, 990, 992, 993, 994, 996, 1001, 1010, 1011, 1012, 1013, 1014, 1215], "null": [21, 37, 39, 58, 67, 81, 89, 110, 118, 119, 128, 132, 136, 138, 156, 159, 161, 165, 166, 169, 171, 176, 180, 181, 199, 207, 214, 215, 216, 223, 226, 228, 245, 246, 249, 250, 251, 252, 256, 261, 264, 267, 269, 271, 274, 282, 301, 312, 314, 315, 316, 326, 329, 330, 337, 338, 343, 347, 349, 359, 365, 366, 367, 370, 379, 381, 382, 410, 421, 422, 423, 424, 425, 426, 427, 435, 436, 437, 438, 439, 442, 443, 444, 450, 462, 472, 474, 475, 476, 482, 484, 485, 492, 493, 496, 497, 498, 500, 501, 502, 509, 510, 511, 512, 513, 515, 518, 520, 531, 549, 559, 560, 561, 562, 565, 576, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 601, 602, 603, 605, 610, 614, 615, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 629, 630, 631, 636, 637, 638, 645, 647, 648, 649, 660, 665, 666, 667, 668, 677, 687, 688, 689, 690, 698, 699, 700, 702, 704, 708, 721, 732, 733, 738, 742, 748, 749, 753, 755, 761, 771, 787, 790, 795, 796, 799, 805, 817, 818, 831, 841, 843, 844, 847, 852, 854, 855, 858, 860, 866, 870, 883, 890, 891, 893, 902, 905, 906, 913, 914, 919, 924, 938, 939, 957, 959, 960, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1017, 1019, 1020, 1021, 1025, 1027, 1034, 1040, 1056, 1057, 1065, 1067, 1068, 1071, 1075, 1076, 1079, 1080, 1081, 1083, 1084, 1085, 1093, 1095, 1096, 1098, 1101, 1103, 1110, 1123, 1124, 1137, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1155, 1160, 1161, 1165, 1170, 1173, 1174, 1176, 1177, 1178, 1179, 1180, 1182, 1183, 1184, 1185, 1186, 1188, 1189, 1190, 1195, 1196, 1197, 1204, 1206, 1207, 1208, 1219, 1224, 1240, 1242, 1243, 1244, 1251, 1261, 1269, 1270], "07": [21, 118, 166, 301, 385, 386, 400, 413, 414, 428, 656, 714, 717, 725, 796, 883, 886, 964, 995, 1215], "05": [21, 138, 141, 142, 143, 144, 148, 160, 166, 208, 270, 301, 385, 386, 387, 388, 389, 394, 398, 400, 401, 403, 406, 407, 408, 413, 415, 417, 418, 420, 421, 714, 717, 789, 796, 819, 883, 886, 964, 965, 966, 967, 995, 996, 999, 1000, 1002, 1003, 1010], "visibl": [22, 172, 301, 1018, 1261], "eg": [22, 30, 40, 89, 121, 154, 301, 414, 656, 658, 679, 771, 1034, 1215, 1217, 1261], "low": [22, 120, 152, 572, 771, 1128, 1261], "rang": [22, 40, 120, 121, 166, 172, 188, 206, 301, 317, 378, 390, 405, 411, 412, 414, 428, 429, 462, 693, 699, 713, 714, 715, 716, 717, 718, 729, 730, 757, 758, 759, 771, 796, 810, 883, 956, 968, 987, 993, 994, 996, 1010, 1011, 1018, 1124, 1261], "98": [22, 198, 301, 353, 452, 455, 610, 659, 678, 771, 1218], "99": [22, 40, 175, 176, 198, 201, 269, 301, 310, 353, 442, 444, 452, 455, 610, 678, 761, 771, 804, 805, 855, 883, 1016, 1025, 1261], "tbl_col": 22, "95": [22, 310, 771], "96": [22, 166, 301, 310, 771, 796, 883], "97": [22, 198, 301, 310, 771], "move": [23, 238, 301, 436, 437, 438, 587, 588, 590, 594, 771, 1019, 1020, 1021, 1141, 1142, 1144, 1148, 1261], "inlin": [23, 238, 301, 615, 623, 624, 626, 639, 1174, 1182, 1183, 1185, 1198], "parenthes": 23, "inform": [24, 28, 38, 86, 122, 130, 133, 134, 137, 141, 143, 164, 166, 301, 304, 479, 608, 615, 623, 624, 626, 639, 771, 796, 833, 883, 933, 1064, 1168, 1174, 1182, 1183, 1185, 1198, 1261, 1265], "below": [24, 39, 122, 133, 134, 169, 188, 226, 301, 444, 714, 715, 717, 718, 758, 759, 761, 767, 771, 799, 810, 883], "ascii_ful": 25, "ascii_full_condens": 25, "ascii_no_bord": 25, "ascii_borders_onli": 25, "ascii_borders_only_condens": 25, "ascii_horizontal_onli": 25, "ascii_markdown": 25, "utf8_ful": [25, 81, 114], "utf8_no_bord": 25, "utf8_borders_onli": 25, "utf8_horizontal_onli": 25, "noth": [25, 623, 629, 1182, 1188], "rounded_corn": 25, "border": 25, "includ": [25, 35, 37, 39, 40, 58, 86, 120, 122, 133, 134, 148, 159, 166, 172, 224, 238, 264, 265, 268, 269, 301, 377, 415, 459, 463, 572, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 646, 647, 651, 652, 705, 709, 748, 749, 771, 787, 796, 852, 855, 883, 886, 955, 956, 997, 1018, 1037, 1041, 1128, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1205, 1206, 1210, 1251, 1261], "divid": [25, 377, 414, 428, 436, 437, 438, 479, 572, 771, 955, 996, 1010, 1019, 1020, 1021, 1064, 1128, 1261], "same": [25, 39, 40, 69, 72, 81, 87, 88, 89, 90, 91, 124, 132, 141, 142, 143, 144, 146, 154, 177, 187, 207, 211, 226, 238, 249, 266, 274, 275, 279, 287, 301, 308, 315, 345, 381, 382, 445, 452, 455, 519, 535, 538, 564, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 611, 630, 668, 771, 792, 793, 806, 809, 818, 823, 824, 847, 853, 858, 859, 863, 883, 888, 893, 921, 955, 959, 960, 964, 1102, 1110, 1128, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1147, 1148, 1149, 1189, 1252, 1261], "dens": [25, 186, 301, 575, 771, 1130, 1261], "space": [25, 188, 301, 810, 883], "horizont": [25, 89, 180, 196, 212, 213, 214, 215, 219, 220, 251, 252, 268, 301, 688, 690, 699, 700, 705, 706, 708, 709, 710, 712, 720, 723, 738, 742, 746, 755], "markdown": 25, "compat": [25, 40, 45, 61, 301, 615, 617, 618, 623, 624, 625, 626, 639, 640, 883, 886, 1174, 1176, 1177, 1182, 1183, 1184, 1185, 1198, 1199], "utf8": [25, 118, 119, 132], "No": [25, 663, 1222], "round": [25, 40, 83, 114, 120, 301, 358, 364, 448, 597, 675, 771, 936, 1030, 1151, 1261], "corner": [25, 40, 114, 301], "op": [25, 150, 301, 578, 771, 883, 1217, 1261], "one": [25, 37, 38, 40, 58, 70, 81, 98, 107, 109, 110, 111, 112, 113, 118, 119, 123, 127, 128, 129, 132, 149, 150, 151, 154, 176, 177, 186, 187, 188, 189, 191, 192, 205, 217, 226, 235, 236, 237, 243, 245, 260, 263, 280, 301, 310, 377, 444, 445, 452, 455, 513, 520, 524, 583, 584, 601, 610, 623, 624, 625, 641, 736, 751, 761, 767, 771, 805, 806, 809, 810, 811, 813, 814, 828, 837, 842, 843, 860, 864, 883, 892, 955, 1027, 1060, 1096, 1103, 1107, 1128, 1138, 1160, 1182, 1183, 1184, 1200, 1225, 1261, 1265], "more": [25, 40, 43, 45, 61, 70, 81, 89, 90, 91, 106, 107, 108, 109, 110, 111, 112, 113, 120, 121, 122, 123, 127, 128, 129, 130, 133, 134, 141, 143, 148, 150, 154, 164, 166, 177, 204, 205, 209, 211, 217, 222, 236, 237, 239, 260, 266, 287, 301, 304, 313, 316, 346, 445, 479, 508, 521, 524, 529, 531, 563, 598, 608, 624, 630, 656, 657, 658, 680, 692, 702, 722, 728, 731, 739, 740, 743, 751, 761, 771, 796, 828, 853, 883, 886, 893, 922, 933, 956, 1060, 1064, 1091, 1104, 1110, 1152, 1168, 1183, 1189, 1215, 1216, 1217, 1246, 1261, 1265, 1270], "semigraph": 25, "box": [25, 211, 301], "draw": [25, 30, 147, 1270], "found": [25, 37, 40, 58, 67, 93, 103, 105, 110, 114, 170, 301, 599, 626, 629, 654, 655, 656, 658, 771, 883, 1154, 1185, 1188, 1213, 1214, 1215, 1217, 1261, 1269], "unicod": 25, "block": [25, 88, 187, 190, 266, 301, 761, 793, 809, 812, 835, 853, 861, 862, 871, 883, 1153, 1156, 1261], "http": [25, 40, 41, 42, 108, 120, 121, 156, 164, 301, 623, 625, 1182, 1184], "en": [25, 40, 301], "wikipedia": 25, "org": [25, 41, 42, 108, 120, 121, 156, 164, 301], "wiki": 25, "drawing_charact": 25, "box_draw": 25, "tbl_format": 25, "tbl_hide_column_data_typ": 25, "tbl_hide_dataframe_shap": 25, "hide": [26, 27, 28, 29, 40, 301], "etc": [26, 39, 40, 118, 122, 124, 126, 133, 134, 135, 301, 771, 886, 1153, 1156, 1261], "between": [29, 89, 145, 146, 148, 150, 164, 228, 293, 301, 338, 354, 379, 380, 463, 492, 500, 509, 510, 511, 512, 565, 572, 573, 591, 614, 694, 695, 701, 703, 745, 748, 749, 771, 834, 877, 883, 914, 929, 933, 957, 958, 1041, 1075, 1083, 1092, 1093, 1094, 1095, 1124, 1128, 1129, 1145, 1173, 1261], "set_tbl_column_data_type_inlin": 29, "max": [30, 40, 45, 61, 65, 152, 166, 176, 187, 213, 226, 235, 301, 360, 367, 372, 444, 520, 529, 564, 575, 579, 584, 587, 600, 648, 738, 751, 771, 796, 805, 809, 837, 883, 940, 946, 950, 956, 1027, 1103, 1130, 1141, 1158, 1207, 1261], "tbl_row": 30, "also": [32, 37, 40, 58, 70, 72, 110, 120, 123, 129, 132, 146, 147, 148, 149, 150, 154, 170, 187, 188, 189, 191, 192, 218, 222, 235, 237, 241, 249, 269, 274, 277, 301, 367, 370, 410, 413, 445, 463, 531, 575, 579, 587, 588, 589, 590, 591, 593, 594, 595, 611, 651, 652, 705, 706, 709, 710, 714, 723, 725, 746, 761, 770, 771, 777, 809, 810, 811, 813, 814, 829, 837, 839, 847, 855, 858, 860, 862, 883, 886, 995, 1041, 1130, 1134, 1176, 1177, 1210, 1261, 1265], "char": [32, 624, 1183], "omit": [32, 110, 114, 146, 148, 150, 154, 222, 238, 301, 729, 730, 758, 759, 886], "set_decimal_separ": 32, "x": [32, 67, 68, 73, 81, 89, 108, 114, 118, 119, 121, 132, 146, 148, 156, 172, 196, 200, 202, 207, 217, 226, 237, 238, 265, 268, 301, 304, 309, 311, 313, 333, 338, 366, 378, 434, 435, 449, 454, 456, 457, 481, 488, 500, 524, 526, 528, 529, 531, 546, 548, 549, 551, 552, 553, 554, 555, 558, 559, 563, 569, 570, 578, 579, 583, 605, 608, 647, 669, 670, 677, 679, 686, 688, 690, 694, 695, 705, 706, 708, 723, 733, 735, 738, 742, 746, 755, 761, 771, 818, 824, 828, 846, 883, 886, 914, 933, 1027, 1062, 1110, 1134, 1165, 1168, 1206, 1244, 1261, 1269], "1234567": 32, "987654": [32, 886], "10101": 32, "y": [32, 73, 81, 89, 108, 114, 146, 148, 156, 172, 200, 202, 207, 217, 226, 237, 238, 265, 268, 301, 304, 309, 311, 313, 333, 338, 417, 420, 434, 435, 454, 456, 481, 488, 500, 526, 528, 531, 549, 551, 552, 553, 554, 555, 558, 559, 563, 570, 578, 579, 583, 656, 657, 658, 670, 679, 686, 688, 690, 694, 695, 708, 719, 733, 738, 742, 755, 771, 818, 828, 846, 883, 886, 914, 933, 999, 1002, 1134, 1215, 1216, 1217, 1261], "1234": [32, 597, 771, 1151, 1261], "7654321": 32, "234": 32, "567": 32, "987": 32, "654": 32, "00": [32, 40, 148, 188, 208, 270, 301, 383, 384, 387, 392, 406, 407, 410, 413, 414, 417, 420, 421, 422, 423, 424, 425, 426, 427, 428, 431, 587, 588, 590, 593, 594, 595, 656, 658, 662, 717, 718, 719, 758, 759, 771, 810, 819, 883, 886, 961, 962, 965, 966, 967, 970, 971, 972, 978, 979, 985, 988, 989, 990, 992, 995, 996, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1013, 1215, 1217, 1221], "321": [32, 1270], "strip": [33, 634, 644, 651, 652, 653, 654, 655, 1193, 1203, 1210, 1211, 1212], "trail": [33, 186, 301, 644, 650, 651, 652, 1203, 1209, 1210, 1211], "zero": [33, 40, 107, 108, 117, 118, 119, 124, 126, 130, 147, 156, 176, 205, 236, 255, 261, 301, 444, 520, 524, 599, 608, 665, 679, 771, 790, 805, 883, 938, 1027, 1103, 1168, 1224, 1237, 1242, 1243, 1261], "enabl": [33, 34, 72, 90, 91, 141, 142, 143, 144, 153, 241, 261, 274, 301, 312, 314, 579, 600, 616, 641, 683, 767, 771, 792, 839, 858, 883, 890, 891, 1134, 1158, 1175, 1200, 1243, 1249, 1261], "d": [33, 36, 37, 39, 40, 41, 42, 45, 110, 138, 186, 188, 193, 194, 198, 207, 253, 255, 268, 272, 283, 285, 288, 289, 290, 291, 292, 293, 294, 301, 309, 311, 366, 393, 417, 420, 463, 568, 603, 618, 624, 647, 656, 657, 658, 698, 719, 725, 771, 810, 818, 867, 869, 872, 873, 874, 875, 876, 877, 878, 883, 933, 971, 999, 1002, 1041, 1071, 1177, 1183, 1206, 1215, 1216, 1217, 1261], "01": [33, 81, 148, 160, 166, 186, 188, 235, 270, 301, 383, 384, 385, 386, 387, 388, 389, 393, 394, 396, 397, 398, 400, 401, 403, 405, 406, 407, 408, 410, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 584, 587, 588, 590, 593, 594, 595, 656, 657, 658, 662, 714, 715, 717, 718, 719, 771, 789, 796, 810, 837, 883, 886, 962, 964, 965, 966, 967, 971, 972, 978, 979, 985, 988, 989, 990, 992, 995, 996, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1013, 1215, 1216, 1217, 1221], "6789": 33, "scale": [33, 49, 172, 301, 531, 568, 659, 771, 1018, 1218, 1261], "trim_decimal_zero": 33, "01000": 33, "67890": 33, "addit": [34, 39, 40, 110, 122, 123, 133, 134, 146, 169, 173, 187, 190, 224, 241, 242, 243, 249, 261, 267, 274, 275, 279, 301, 309, 392, 439, 442, 564, 611, 615, 623, 624, 626, 639, 696, 698, 699, 700, 721, 750, 753, 771, 802, 809, 812, 839, 840, 842, 847, 854, 858, 859, 863, 883, 961, 970, 1025, 1174, 1182, 1183, 1185, 1198, 1243, 1261, 1265], "verbos": [34, 141, 143, 154, 624, 1183], "debug": [34, 792, 803, 823, 824, 883, 1270], "log": [34, 83, 353, 433, 524, 548, 569, 678, 771, 928, 1016, 1245, 1261], "do_polars_oper": 34, "if_set": 35, "env_onli": 35, "dict": [35, 39, 40, 45, 68, 82, 84, 86, 107, 109, 110, 111, 112, 113, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 148, 179, 205, 224, 230, 236, 237, 238, 240, 256, 257, 265, 301, 530, 583, 771, 835, 838, 883, 1029, 1109, 1261], "show": [35, 40, 69, 166, 169, 186, 209, 223, 301, 459, 771, 796, 799, 833, 845, 883, 1037, 1261], "variabl": [35, 62, 67, 130, 137, 149, 152, 217, 258, 301, 828, 883, 1238, 1261, 1269], "chang": [35, 41, 81, 88, 118, 119, 120, 138, 268, 269, 270, 276, 301, 316, 376, 377, 379, 414, 459, 530, 531, 565, 572, 583, 587, 588, 589, 590, 591, 593, 594, 595, 771, 793, 855, 861, 883, 933, 934, 954, 955, 996, 1037, 1109, 1124, 1128, 1138, 1163, 1261], "restrict": [35, 648, 1207], "dictionari": [35, 40, 73, 107, 109, 110, 111, 113, 118, 119, 120, 121, 125, 127, 128, 131, 132, 136, 205, 224, 236, 237, 238, 256, 257, 301, 530, 771, 883, 1029, 1109, 1261], "those": [35, 40, 118, 123, 238, 261, 269, 301, 575, 623, 736, 771, 855, 883, 886, 1130, 1182, 1243, 1261], "been": [35, 40, 156, 157, 178, 181, 189, 190, 191, 192, 197, 232, 254, 281, 301, 316, 371, 372, 373, 374, 375, 466, 470, 473, 478, 490, 503, 518, 527, 528, 530, 531, 570, 575, 585, 587, 588, 589, 590, 591, 593, 594, 595, 617, 628, 632, 633, 634, 635, 638, 643, 644, 650, 670, 673, 674, 691, 711, 712, 734, 771, 811, 812, 813, 814, 823, 851, 865, 883, 893, 950, 951, 952, 953, 1046, 1052, 1073, 1086, 1101, 1109, 1130, 1139, 1155, 1157, 1176, 1187, 1191, 1192, 1193, 1194, 1197, 1202, 1203, 1209, 1233, 1234, 1261], "set_fmt_float": 35, "via": [35, 117, 118, 119, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 205, 237, 301, 316, 531, 625, 771, 797, 883, 1184], "set_stat": 35, "all_stat": 35, "binaryio": [36, 41, 42, 117, 118, 123, 124, 126, 129, 301], "bytesio": [36, 37, 40, 41, 42, 45, 117, 118, 119, 123, 124, 125, 126, 127, 128, 129, 130, 131, 301, 797, 883], "compress": [36, 41, 42, 45, 59, 61, 301, 883], "avrocompress": [36, 301], "uncompress": [36, 41, 42, 45, 61, 124, 135, 301, 883], "write": [36, 37, 38, 39, 40, 41, 42, 43, 45, 58, 59, 60, 61, 119, 124, 154, 301, 359, 544, 771, 821, 845, 883, 939, 1261], "apach": [36, 41, 42, 45, 117, 120, 121, 134, 301, 783], "avro": [36, 117, 301, 783], "writeabl": [36, 37, 41, 42, 43, 44, 45, 301], "like": [36, 37, 39, 41, 42, 43, 44, 45, 88, 108, 117, 118, 119, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 188, 200, 202, 207, 260, 301, 383, 494, 543, 575, 623, 652, 653, 683, 767, 771, 793, 797, 810, 883, 961, 1077, 1130, 1182, 1249, 1261], "object": [36, 37, 39, 40, 41, 42, 43, 44, 45, 70, 73, 89, 96, 108, 109, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 146, 148, 150, 156, 187, 188, 190, 191, 208, 209, 235, 238, 260, 261, 301, 714, 715, 717, 718, 733, 758, 759, 783, 797, 810, 811, 813, 814, 819, 837, 883, 886, 1237, 1261], "snappi": [36, 45, 61, 301, 883], "deflat": [36, 301], "pathlib": [36, 37, 41, 42, 45, 132, 301], "foo": [36, 37, 39, 41, 42, 43, 44, 45, 69, 160, 163, 164, 167, 168, 169, 170, 171, 174, 177, 180, 183, 184, 185, 193, 194, 195, 196, 198, 199, 201, 207, 211, 212, 213, 214, 215, 216, 219, 220, 223, 226, 228, 230, 231, 233, 236, 239, 240, 241, 244, 248, 250, 251, 252, 253, 255, 257, 258, 259, 260, 261, 262, 265, 266, 267, 271, 272, 273, 278, 301, 355, 377, 410, 453, 458, 461, 483, 535, 538, 539, 540, 541, 542, 543, 572, 580, 614, 618, 620, 622, 624, 625, 642, 646, 648, 651, 652, 653, 654, 655, 661, 664, 672, 692, 701, 702, 703, 722, 726, 727, 728, 731, 732, 737, 739, 740, 741, 743, 745, 750, 752, 756, 760, 761, 767, 771, 789, 794, 798, 799, 800, 806, 816, 817, 818, 831, 835, 838, 839, 853, 854, 857, 860, 883, 886, 930, 955, 992, 1083, 1128, 1135, 1177, 1179, 1181, 1183, 1184, 1201, 1207, 1213, 1214, 1220, 1223, 1261], "bar": [36, 37, 39, 41, 42, 43, 44, 45, 69, 160, 163, 164, 167, 168, 169, 170, 171, 174, 177, 180, 183, 184, 185, 194, 196, 198, 199, 201, 207, 211, 212, 213, 214, 215, 216, 219, 220, 223, 226, 228, 230, 231, 233, 236, 239, 240, 241, 248, 250, 251, 252, 253, 255, 257, 258, 259, 260, 261, 262, 266, 267, 271, 272, 278, 301, 355, 461, 535, 536, 537, 538, 539, 540, 541, 542, 543, 608, 618, 620, 622, 624, 625, 642, 646, 648, 654, 655, 692, 701, 702, 703, 722, 727, 728, 731, 732, 737, 739, 740, 741, 743, 750, 752, 756, 760, 761, 767, 771, 789, 794, 798, 799, 800, 806, 816, 817, 818, 831, 835, 838, 839, 853, 854, 857, 883, 886, 930, 1083, 1168, 1177, 1179, 1181, 1183, 1184, 1201, 1207, 1213, 1214, 1261], "ham": [36, 37, 39, 41, 42, 45, 160, 163, 164, 167, 168, 169, 170, 171, 177, 184, 193, 194, 196, 207, 212, 214, 216, 219, 223, 228, 230, 233, 236, 239, 240, 241, 248, 250, 251, 253, 258, 259, 260, 261, 262, 266, 271, 272, 301, 355, 542, 789, 794, 798, 799, 800, 806, 818, 831, 835, 838, 839, 853, 860, 883, 930], "dirpath": [36, 37, 41, 42, 45, 132, 301], "new_fil": [36, 37, 41, 42, 45, 301], "textiowrapp": [37, 301], "include_bom": [37, 58, 301, 883], "include_head": [37, 40, 58, 119, 265, 301, 883], "line_termin": [37, 58, 301, 883], "quote_char": [37, 58, 118, 119, 132, 301, 883], "batch_siz": [37, 58, 118, 119, 120, 136, 138, 301, 883], "1024": [37, 45, 58, 61, 118, 119, 120, 136, 301, 883], "datetime_format": [37, 58, 301, 883], "date_format": [37, 58, 301, 883], "time_format": [37, 58, 301, 883], "null_valu": [37, 58, 118, 119, 132, 301, 883], "quote_styl": [37, 58, 301, 883], "csvquotestyl": [37, 58, 301, 883], "comma": [37, 301], "csv": [37, 58, 59, 60, 61, 118, 119, 123, 132, 301, 783, 883], "If": [37, 38, 39, 40, 41, 42, 43, 44, 45, 58, 61, 65, 72, 86, 88, 89, 107, 108, 109, 110, 111, 112, 113, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 132, 133, 135, 136, 137, 138, 141, 142, 143, 144, 149, 156, 157, 159, 169, 174, 186, 188, 189, 191, 192, 194, 203, 204, 205, 208, 210, 211, 215, 222, 224, 226, 235, 237, 238, 239, 245, 248, 252, 253, 257, 258, 260, 264, 265, 266, 268, 269, 278, 301, 312, 314, 316, 338, 386, 406, 407, 417, 420, 445, 459, 479, 500, 508, 513, 514, 520, 529, 531, 542, 564, 572, 575, 577, 579, 580, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 598, 599, 601, 604, 608, 609, 614, 624, 625, 626, 627, 628, 634, 644, 645, 646, 647, 648, 650, 651, 652, 653, 656, 657, 658, 662, 665, 683, 687, 689, 691, 693, 697, 700, 701, 704, 705, 714, 715, 717, 718, 719, 722, 723, 729, 730, 731, 733, 736, 744, 747, 748, 749, 753, 758, 759, 761, 762, 771, 787, 792, 793, 799, 801, 810, 811, 813, 814, 818, 819, 824, 828, 835, 837, 841, 843, 846, 852, 853, 855, 865, 871, 883, 886, 890, 891, 893, 914, 939, 955, 964, 988, 989, 999, 1002, 1024, 1034, 1036, 1037, 1063, 1064, 1066, 1083, 1091, 1096, 1097, 1103, 1110, 1128, 1130, 1132, 1134, 1135, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1152, 1154, 1158, 1160, 1164, 1168, 1169, 1173, 1183, 1184, 1185, 1186, 1187, 1193, 1203, 1204, 1205, 1206, 1207, 1209, 1210, 1211, 1212, 1215, 1216, 1217, 1221, 1224, 1232, 1237, 1242, 1249, 1251, 1261, 1269], "instead": [37, 43, 44, 65, 69, 81, 88, 89, 118, 119, 120, 123, 129, 130, 132, 138, 148, 186, 188, 204, 205, 211, 222, 224, 236, 237, 238, 241, 242, 245, 246, 261, 274, 275, 276, 278, 301, 304, 326, 360, 361, 377, 389, 391, 395, 399, 402, 404, 409, 413, 416, 428, 439, 513, 529, 572, 601, 602, 630, 631, 634, 644, 650, 651, 652, 653, 654, 655, 656, 658, 665, 685, 693, 697, 702, 714, 715, 716, 717, 718, 719, 722, 729, 730, 731, 744, 747, 753, 758, 759, 762, 771, 793, 804, 810, 839, 840, 841, 843, 844, 858, 859, 861, 883, 886, 902, 940, 941, 955, 967, 969, 973, 980, 983, 986, 991, 995, 998, 1010, 1042, 1048, 1051, 1058, 1060, 1062, 1096, 1128, 1153, 1156, 1160, 1161, 1170, 1189, 1190, 1193, 1203, 1209, 1210, 1211, 1212, 1215, 1217, 1224, 1243, 1261, 1265, 1269], "whether": [37, 58, 111, 113, 150, 153, 159, 171, 181, 204, 243, 264, 301, 312, 314, 329, 330, 396, 415, 484, 485, 600, 771, 787, 823, 824, 842, 847, 852, 883, 886, 890, 891, 905, 906, 931, 934, 974, 997, 1017, 1067, 1068, 1155, 1261, 1269], "utf": [37, 58, 71, 301, 883], "bom": [37, 58, 301, 883], "header": [37, 40, 45, 58, 61, 114, 118, 119, 123, 132, 170, 226, 265, 301, 883], "field": [37, 39, 58, 73, 103, 105, 110, 260, 267, 301, 520, 582, 624, 625, 627, 647, 648, 668, 705, 706, 709, 710, 735, 753, 771, 854, 883, 955, 1103, 1128, 1137, 1184, 1204, 1206, 1207, 1228, 1230, 1261], "symbol": [37, 58, 118, 119, 132, 301, 771, 883], "end": [37, 40, 58, 118, 119, 130, 132, 188, 301, 348, 351, 352, 383, 414, 439, 514, 615, 621, 624, 636, 645, 649, 651, 652, 655, 693, 714, 715, 717, 718, 721, 729, 730, 758, 759, 761, 771, 810, 815, 822, 833, 883, 886, 926, 961, 996, 1097, 1180, 1183, 1195, 1204, 1208, 1210, 1211], "byte": [37, 45, 58, 61, 118, 119, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 172, 301, 630, 632, 883, 1018, 1189, 1191, 1261], "quot": [37, 38, 58, 118, 119, 121, 132, 301, 883], "specifi": [37, 40, 58, 81, 93, 103, 105, 123, 129, 148, 159, 160, 172, 173, 176, 187, 188, 189, 190, 191, 192, 207, 224, 235, 236, 238, 241, 242, 243, 245, 249, 264, 267, 274, 275, 279, 301, 359, 436, 437, 438, 439, 444, 564, 578, 579, 587, 588, 589, 590, 591, 593, 594, 595, 601, 611, 696, 698, 699, 700, 714, 715, 717, 718, 721, 750, 753, 758, 759, 771, 787, 789, 802, 805, 809, 810, 811, 812, 813, 814, 818, 837, 839, 840, 842, 843, 847, 852, 854, 858, 859, 863, 883, 939, 1018, 1019, 1020, 1021, 1027, 1134, 1160, 1261], "defin": [37, 40, 48, 58, 120, 145, 146, 148, 157, 160, 169, 173, 188, 189, 191, 192, 211, 222, 225, 235, 269, 281, 287, 301, 316, 463, 497, 518, 531, 568, 572, 583, 584, 587, 588, 589, 590, 591, 593, 594, 595, 691, 714, 715, 717, 718, 733, 736, 753, 758, 759, 771, 789, 799, 802, 810, 811, 813, 814, 832, 837, 855, 865, 871, 883, 886, 893, 1041, 1080, 1110, 1128, 1138, 1261], "chrono": [37, 58, 301, 417, 420, 656, 657, 658, 662, 883, 999, 1002, 1215, 1216, 1217, 1221], "rust": [37, 45, 58, 100, 120, 124, 126, 130, 211, 287, 301, 625, 883, 1110, 1184, 1261], "crate": [37, 58, 301, 615, 617, 618, 623, 624, 625, 626, 639, 640, 656, 657, 658, 662, 883, 886, 1174, 1176, 1177, 1182, 1183, 1184, 1185, 1198, 1199, 1215, 1216, 1217, 1221], "fraction": [37, 58, 141, 142, 143, 144, 239, 301, 415, 508, 565, 598, 656, 658, 771, 883, 997, 1091, 1124, 1152, 1215, 1217, 1261], "second": [37, 58, 141, 142, 143, 144, 147, 188, 208, 235, 270, 301, 394, 398, 401, 403, 408, 410, 414, 427, 428, 584, 587, 588, 589, 590, 591, 593, 594, 595, 656, 658, 714, 715, 716, 717, 718, 719, 757, 758, 759, 761, 771, 810, 819, 837, 883, 886, 992, 996, 1009, 1010, 1215, 1217, 1270], "infer": [37, 58, 73, 107, 109, 110, 111, 112, 113, 118, 119, 120, 123, 127, 128, 130, 132, 136, 137, 157, 211, 301, 428, 580, 627, 628, 656, 657, 658, 659, 662, 747, 771, 883, 996, 1010, 1135, 1186, 1187, 1215, 1216, 1217, 1218, 1221, 1261], "timeunit": [37, 48, 50, 58, 301, 384, 386, 419, 431, 658, 714, 715, 716, 717, 718, 719, 883, 886, 962, 964, 1001, 1013, 1217], "frame": [37, 38, 40, 58, 65, 66, 67, 68, 69, 70, 81, 88, 89, 110, 119, 123, 129, 141, 142, 148, 160, 161, 166, 205, 206, 211, 218, 222, 225, 236, 237, 238, 268, 269, 301, 789, 790, 796, 829, 832, 855, 883, 886, 938, 1261, 1269, 1270], "repres": [37, 40, 58, 63, 79, 107, 109, 111, 112, 113, 120, 123, 250, 271, 278, 301, 472, 474, 529, 613, 684, 687, 701, 703, 719, 721, 733, 735, 736, 748, 749, 752, 760, 767, 771, 848, 856, 883, 1153, 1157, 1172, 1250, 1261], "necessari": [37, 58, 72, 91, 123, 260, 301, 883], "non_numer": [37, 58, 301, 883], "never": [37, 58, 120, 207, 236, 301, 818, 883], "strategi": [37, 58, 81, 89, 118, 145, 146, 147, 148, 150, 176, 188, 191, 207, 208, 221, 269, 301, 316, 444, 520, 531, 771, 805, 810, 813, 818, 819, 855, 883, 1027, 1103, 1261], "put": [37, 58, 301, 883], "around": [37, 58, 301, 883], "thei": [37, 40, 58, 72, 88, 89, 90, 91, 110, 132, 154, 209, 238, 301, 641, 652, 653, 771, 793, 883, 886], "record": [37, 42, 58, 126, 138, 208, 260, 301, 819, 883], "termin": [37, 58, 301, 883], "indistinguish": [37, 58, 301, 883], "even": [37, 58, 118, 301, 568, 572, 771, 883, 1128, 1261], "invalid": [37, 58, 118, 119, 132, 301, 627, 629, 660, 679, 771, 883, 1186, 1188, 1219], "g": [37, 58, 117, 118, 119, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 138, 156, 204, 260, 268, 301, 309, 316, 439, 531, 603, 721, 771, 797, 835, 883, 1017, 1155, 1242, 1261, 1270], "pars": [37, 58, 65, 118, 119, 121, 123, 128, 132, 135, 136, 159, 187, 190, 241, 242, 245, 249, 264, 274, 275, 279, 301, 359, 463, 530, 564, 579, 611, 627, 628, 638, 659, 660, 688, 690, 696, 698, 699, 700, 708, 712, 725, 738, 742, 750, 751, 753, 755, 761, 771, 787, 809, 812, 839, 840, 843, 847, 852, 858, 859, 863, 883, 939, 1041, 1134, 1160, 1186, 1187, 1197, 1217, 1218, 1219, 1261], "valid": [37, 40, 48, 51, 58, 65, 120, 124, 126, 130, 150, 154, 172, 207, 301, 376, 615, 617, 618, 623, 624, 625, 626, 629, 639, 640, 761, 771, 818, 883, 886, 954, 1018, 1034, 1174, 1176, 1177, 1182, 1183, 1184, 1185, 1188, 1198, 1199, 1261], "integ": [37, 40, 54, 55, 56, 57, 58, 75, 76, 77, 78, 139, 146, 148, 149, 151, 169, 188, 235, 258, 301, 313, 358, 415, 448, 449, 563, 572, 577, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 638, 660, 686, 693, 725, 729, 730, 747, 771, 799, 810, 837, 883, 886, 936, 997, 1030, 1051, 1128, 1132, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1153, 1157, 1197, 1219, 1261, 1269, 1270], "aren": [37, 58, 301, 883], "t": [37, 39, 58, 67, 68, 89, 118, 123, 129, 132, 188, 211, 225, 266, 268, 301, 316, 376, 383, 392, 413, 433, 436, 437, 438, 494, 531, 564, 568, 623, 626, 653, 656, 658, 761, 771, 810, 832, 853, 883, 886, 954, 995, 1016, 1017, 1019, 1020, 1021, 1077, 1110, 1155, 1182, 1185, 1211, 1212, 1215, 1217, 1242, 1251, 1261], "strictli": [37, 58, 72, 91, 301, 803, 883], "table_nam": [38, 40, 301], "connect": [38, 118, 120, 121, 124, 126, 130, 135, 137, 138, 301, 784], "if_table_exist": [38, 301], "dbwritemod": [38, 301], "fail": [38, 39, 108, 122, 124, 128, 130, 133, 136, 137, 141, 142, 156, 266, 301, 327, 418, 520, 656, 657, 658, 662, 771, 853, 883, 1110, 1215, 1216, 1217, 1221, 1261], "dbwriteengin": [38, 301], "sqlalchemi": [38, 120, 140, 301], "databas": [38, 120, 121, 301, 783], "qualifi": [38, 301], "creat": [38, 40, 72, 91, 107, 111, 113, 118, 119, 120, 121, 124, 126, 130, 133, 134, 146, 147, 148, 149, 150, 151, 161, 162, 188, 189, 192, 223, 226, 235, 270, 274, 277, 301, 386, 414, 428, 520, 576, 584, 587, 588, 590, 593, 594, 595, 645, 699, 713, 714, 715, 716, 717, 718, 719, 757, 758, 759, 767, 771, 790, 791, 796, 801, 810, 811, 814, 837, 858, 862, 883, 938, 942, 955, 964, 996, 1010, 1121, 1128, 1131, 1204, 1242, 1261, 1269, 1270], "append": [38, 39, 148, 174, 207, 208, 301, 576, 761, 771, 818, 819, 883, 1024, 1261], "your": [38, 40, 72, 81, 91, 118, 119, 120, 121, 123, 138, 205, 211, 237, 238, 241, 257, 274, 279, 287, 301, 316, 531, 625, 656, 657, 658, 665, 736, 771, 815, 822, 824, 839, 858, 863, 871, 883, 1110, 1184, 1215, 1216, 1217, 1224, 1261, 1270], "special": [38, 118, 119, 121, 132, 277, 301, 586, 624, 771, 862, 883, 893, 1110, 1140, 1183, 1261], "uri": [38, 39, 120, 121, 122, 133, 134, 301], "postgresql": [38, 120, 121, 301, 564, 771], "user": [38, 120, 121, 157, 211, 225, 281, 287, 301, 316, 529, 531, 568, 600, 691, 736, 771, 832, 865, 871, 883, 893, 1110, 1158, 1261], "pass": [38, 39, 40, 45, 68, 81, 109, 120, 121, 123, 130, 132, 137, 138, 141, 143, 146, 148, 150, 159, 164, 167, 187, 188, 191, 194, 210, 224, 225, 235, 241, 245, 249, 253, 261, 264, 270, 274, 278, 279, 301, 304, 316, 393, 410, 413, 442, 461, 513, 530, 531, 564, 568, 579, 584, 587, 588, 589, 590, 591, 593, 594, 595, 601, 611, 651, 652, 653, 687, 696, 704, 714, 725, 753, 761, 767, 771, 787, 798, 809, 810, 811, 813, 814, 816, 823, 824, 832, 837, 839, 843, 845, 847, 852, 858, 863, 871, 883, 893, 971, 995, 1025, 1036, 1066, 1096, 1109, 1110, 1134, 1160, 1210, 1211, 1212, 1232, 1243, 1261, 1265], "server": [38, 120, 121, 301], "port": [38, 118, 120, 121, 124, 126, 135, 301], "sqlite": [38, 120, 301], "db": [38, 121, 301], "replac": [38, 39, 118, 119, 132, 175, 176, 232, 233, 265, 274, 275, 301, 386, 413, 529, 530, 640, 641, 771, 804, 858, 859, 883, 964, 995, 1109, 1153, 1156, 1157, 1199, 1200, 1261], "insert": [38, 118, 119, 124, 126, 130, 132, 135, 136, 137, 197, 198, 231, 265, 267, 301, 599, 614, 665, 771, 854, 883, 1154, 1173, 1224, 1261], "mode": [38, 39, 58, 59, 60, 61, 65, 141, 143, 226, 301, 624, 744, 747, 762, 771, 792, 883, 1183, 1261, 1269], "new": [38, 39, 40, 123, 132, 154, 182, 196, 197, 198, 211, 222, 223, 230, 231, 254, 265, 267, 268, 269, 274, 275, 301, 311, 386, 441, 453, 462, 528, 551, 579, 583, 639, 640, 647, 648, 666, 668, 674, 767, 771, 783, 808, 835, 851, 854, 855, 858, 859, 865, 871, 883, 889, 964, 1023, 1032, 1121, 1133, 1134, 1138, 1198, 1199, 1206, 1207, 1225, 1228, 1234, 1239, 1261, 1269], "alreadi": [38, 39, 301, 376, 494, 683, 771, 954, 1077, 1249, 1261], "adbc": [38, 120, 121, 301], "affect": [38, 141, 142, 143, 144, 301], "driver": [38, 120, 121, 301], "provid": [38, 40, 68, 118, 119, 121, 122, 130, 132, 133, 134, 137, 148, 150, 177, 203, 301, 349, 350, 439, 459, 520, 529, 531, 619, 620, 623, 627, 629, 652, 653, 654, 655, 722, 725, 753, 771, 783, 806, 883, 924, 925, 1037, 1063, 1110, 1178, 1179, 1182, 1186, 1188, 1261, 1269, 1270], "otherwis": [38, 86, 120, 123, 147, 152, 211, 218, 238, 241, 287, 301, 349, 359, 377, 436, 437, 438, 520, 531, 539, 568, 572, 577, 588, 589, 590, 591, 593, 595, 615, 619, 626, 687, 736, 761, 771, 829, 839, 871, 883, 924, 939, 955, 1019, 1020, 1021, 1103, 1110, 1128, 1132, 1153, 1156, 1174, 1178, 1185, 1261], "deltalak": [39, 122, 133, 140, 301], "deltat": [39, 301], "ignor": [39, 147, 148, 150, 214, 215, 251, 252, 269, 301, 312, 314, 338, 379, 413, 436, 437, 438, 492, 500, 556, 557, 614, 687, 689, 700, 771, 890, 891, 914, 957, 995, 1019, 1020, 1021, 1075, 1083, 1119, 1120, 1173, 1261], "merg": [39, 218, 301, 829, 883], "overwrite_schema": [39, 301], "storage_opt": [39, 118, 122, 124, 126, 130, 133, 134, 135, 137, 301], "delta_write_opt": [39, 301], "delta_merge_opt": [39, 301], "tablemerg": [39, 301], "delta": [39, 50, 122, 133, 250, 271, 301, 593, 595, 613, 684, 701, 703, 748, 749, 752, 760, 771, 783, 848, 856, 883, 1147, 1149, 1172, 1250, 1261], "handl": [39, 89, 114, 118, 119, 132, 138, 301, 379, 492, 665, 771, 792, 883, 957, 1075, 1224, 1261], "throw": [39, 160, 301, 354, 627, 629, 771, 789, 883, 929, 1186, 1188, 1261], "add": [39, 40, 119, 174, 188, 191, 211, 274, 275, 276, 277, 301, 377, 552, 553, 570, 572, 670, 719, 723, 761, 771, 810, 813, 818, 858, 859, 860, 861, 862, 883, 1024, 1261], "anyth": [39, 236, 301], "updat": [39, 166, 301, 796, 883], "extra": [39, 45, 61, 118, 119, 122, 123, 124, 126, 132, 133, 134, 135, 174, 188, 301, 771, 810, 883, 1024, 1261], "storag": [39, 118, 122, 124, 126, 130, 133, 134, 135, 137, 301], "backend": [39, 120, 121, 122, 133, 134, 301], "cloud": [39, 120, 122, 130, 133, 134, 137, 138, 301], "configur": [39, 122, 133, 134, 154, 301], "authent": [39, 122, 133, 134, 301], "see": [39, 40, 41, 42, 48, 120, 121, 122, 123, 130, 133, 134, 137, 141, 142, 143, 144, 148, 150, 164, 188, 207, 225, 226, 301, 304, 359, 444, 479, 529, 608, 615, 623, 624, 626, 639, 714, 715, 717, 718, 746, 758, 759, 767, 771, 792, 810, 883, 886, 933, 939, 1064, 1168, 1174, 1182, 1183, 1185, 1198, 1261, 1265, 1270], "here": [39, 40, 45, 107, 109, 110, 111, 113, 120, 121, 122, 127, 128, 130, 133, 134, 136, 137, 146, 148, 150, 301, 531, 625, 629, 771, 883, 1188], "gc": [39, 122, 133, 134, 301], "azur": [39, 122, 130, 133, 134, 137, 301], "keyword": [39, 68, 122, 130, 133, 164, 225, 236, 241, 242, 261, 274, 275, 279, 301, 445, 568, 750, 753, 761, 771, 832, 839, 840, 858, 859, 863, 883, 1243, 1261], "argument": [39, 41, 45, 91, 118, 122, 130, 132, 133, 164, 167, 173, 187, 188, 189, 190, 191, 192, 212, 214, 219, 224, 225, 226, 235, 241, 242, 243, 249, 251, 261, 267, 270, 274, 275, 279, 301, 414, 428, 439, 445, 463, 564, 568, 584, 587, 588, 589, 590, 591, 593, 594, 595, 611, 651, 652, 653, 687, 694, 695, 696, 698, 699, 700, 702, 704, 721, 750, 753, 761, 771, 798, 802, 809, 810, 811, 812, 813, 814, 832, 837, 839, 840, 842, 847, 854, 858, 859, 863, 883, 996, 1010, 1041, 1210, 1211, 1212, 1243, 1261], "while": [39, 88, 119, 122, 123, 133, 148, 150, 154, 205, 217, 265, 269, 301, 631, 793, 828, 855, 883, 1034, 1190, 1261], "lake": [39, 122, 133, 301, 783], "typeerror": [39, 301], "unsupport": [39, 301], "arrowinvaliderror": [39, 301], "could": [39, 79, 94, 160, 301, 354, 705, 709, 719, 723, 771, 789, 796, 799, 883, 929, 1034, 1261], "primit": [39, 301, 468, 771, 1242, 1261], "tablenotfounderror": [39, 301], "doesn": [39, 118, 132, 188, 301, 433, 771, 810, 883, 1016, 1251, 1261], "action": [39, 301], "trigger": [39, 261, 301, 771, 1243, 1261], "categor": [39, 51, 72, 90, 91, 141, 142, 143, 144, 207, 258, 301, 355, 356, 377, 572, 579, 677, 771, 886, 930, 931, 932, 933, 934, 955, 1128, 1134, 1244, 1261], "protocol": [39, 108, 121, 156, 301], "nullabl": [39, 301], "To": [39, 88, 175, 212, 214, 219, 251, 301, 359, 381, 382, 444, 615, 623, 624, 626, 639, 652, 653, 654, 655, 663, 771, 804, 883, 939, 959, 960, 1034, 1174, 1182, 1183, 1185, 1198, 1222, 1242, 1261], "pyarrow": [39, 45, 107, 112, 118, 121, 122, 124, 126, 130, 133, 138, 140, 255, 260, 261, 301, 784, 1237, 1241, 1242, 1243, 1261], "ha": [39, 40, 81, 88, 120, 123, 132, 156, 157, 178, 181, 188, 189, 190, 191, 192, 197, 232, 235, 254, 270, 276, 281, 301, 316, 353, 371, 372, 373, 374, 375, 376, 466, 470, 473, 478, 490, 503, 518, 527, 528, 529, 530, 540, 570, 584, 585, 587, 588, 589, 590, 591, 593, 594, 595, 617, 628, 632, 633, 634, 635, 638, 643, 644, 650, 670, 673, 674, 678, 691, 711, 712, 722, 731, 734, 767, 771, 793, 810, 811, 812, 813, 814, 823, 837, 851, 861, 865, 871, 883, 893, 928, 938, 950, 951, 952, 953, 954, 956, 1034, 1046, 1048, 1052, 1073, 1086, 1101, 1109, 1139, 1155, 1157, 1176, 1187, 1191, 1192, 1193, 1194, 1197, 1202, 1203, 1209, 1233, 1234, 1245, 1261], "last": [39, 141, 142, 143, 144, 159, 194, 208, 210, 226, 238, 249, 253, 264, 266, 295, 301, 326, 337, 343, 376, 390, 406, 411, 429, 470, 471, 478, 498, 515, 517, 520, 550, 552, 553, 554, 555, 570, 610, 648, 670, 672, 756, 771, 787, 819, 847, 850, 852, 853, 879, 883, 886, 902, 913, 919, 954, 968, 988, 993, 1011, 1036, 1052, 1053, 1066, 1081, 1098, 1100, 1170, 1207, 1232, 1261], "filesystem": [39, 122, 133, 134, 301], "table_path": [39, 122, 133, 134, 301], "match": [39, 40, 48, 89, 101, 107, 109, 110, 111, 113, 127, 128, 136, 141, 142, 143, 144, 176, 207, 208, 236, 269, 301, 537, 579, 592, 615, 616, 617, 618, 621, 623, 624, 626, 627, 629, 639, 640, 641, 649, 656, 657, 658, 761, 771, 805, 818, 819, 855, 883, 886, 1051, 1060, 1134, 1146, 1174, 1175, 1176, 1177, 1180, 1182, 1183, 1185, 1186, 1188, 1198, 1199, 1200, 1208, 1215, 1216, 1217, 1261], "version": [39, 86, 91, 122, 123, 133, 140, 156, 157, 178, 181, 188, 189, 190, 191, 192, 193, 197, 212, 214, 219, 232, 246, 251, 254, 276, 281, 301, 316, 360, 361, 371, 372, 373, 374, 375, 389, 391, 395, 399, 402, 404, 406, 407, 409, 413, 416, 428, 431, 457, 466, 470, 473, 478, 490, 503, 518, 527, 528, 530, 570, 585, 602, 616, 617, 628, 632, 633, 634, 635, 638, 643, 644, 650, 656, 658, 670, 673, 674, 685, 691, 711, 712, 714, 716, 734, 746, 771, 810, 811, 812, 813, 814, 823, 844, 851, 861, 865, 883, 893, 940, 941, 950, 951, 952, 953, 955, 967, 969, 973, 980, 983, 986, 988, 989, 991, 995, 996, 998, 1010, 1013, 1035, 1042, 1046, 1048, 1051, 1052, 1058, 1060, 1062, 1073, 1086, 1101, 1109, 1128, 1139, 1155, 1157, 1161, 1175, 1176, 1187, 1191, 1192, 1193, 1194, 1197, 1202, 1203, 1209, 1215, 1217, 1233, 1234, 1251, 1261], "old": [39, 230, 301, 579, 771, 835, 883, 1134, 1261], "existing_table_path": [39, 301], "store": [39, 118, 130, 134, 174, 205, 237, 301, 355, 930, 1024, 1261], "bucket": [39, 122, 133, 134, 137, 301, 414, 428, 459, 771, 996, 1010, 1037, 1261], "prefix": [39, 154, 301, 311, 352, 528, 551, 553, 554, 555, 649, 653, 654, 665, 670, 771, 886, 927, 1208, 1213, 1224], "aws_region": [39, 133, 137, 301], "the_aws_region": [39, 301], "aws_access_key_id": [39, 122, 133, 137, 301], "the_aws_access_key_id": [39, 122, 133, 134, 301], "aws_secret_access_kei": [39, 122, 133, 137, 301], "the_aws_secret_access_kei": [39, 122, 133, 134, 301], "pa": [39, 107, 138, 301], "check": [39, 48, 118, 119, 132, 141, 142, 143, 144, 153, 171, 181, 188, 189, 191, 192, 201, 203, 207, 235, 301, 333, 348, 351, 352, 463, 468, 489, 584, 615, 621, 626, 649, 771, 810, 811, 813, 814, 818, 823, 824, 837, 883, 909, 923, 926, 927, 1017, 1042, 1044, 1048, 1049, 1051, 1058, 1059, 1060, 1062, 1063, 1072, 1155, 1174, 1180, 1185, 1208, 1261], "doc": [39, 41, 42, 121, 141, 143, 164, 301], "evolut": [39, 301], "yet": [39, 301], "packag": [39, 120, 123, 301], "therefor": [39, 172, 301, 531, 761, 771, 1018, 1261], "effect": [39, 40, 180, 188, 191, 260, 301, 392, 531, 714, 715, 771, 810, 813, 861, 862, 883, 961, 970], "predic": [39, 58, 59, 60, 61, 87, 88, 132, 135, 136, 137, 138, 177, 203, 236, 301, 445, 685, 723, 761, 771, 792, 793, 801, 803, 806, 823, 824, 833, 835, 845, 861, 862, 883, 1028, 1153, 1156, 1261], "source_alia": [39, 301], "target_alia": [39, 301], "when_matched_update_al": [39, 301], "when_not_matched_insert_al": [39, 301], "execut": [39, 66, 67, 69, 72, 89, 120, 209, 301, 494, 683, 771, 788, 823, 824, 833, 883, 1077, 1249, 1261, 1269], "workbook": [40, 123, 301], "worksheet": [40, 123, 129, 301], "posit": [40, 167, 173, 187, 190, 224, 241, 242, 243, 245, 249, 267, 274, 275, 279, 301, 436, 437, 438, 439, 513, 564, 572, 601, 611, 625, 626, 638, 660, 694, 695, 696, 698, 699, 700, 721, 750, 753, 771, 798, 802, 809, 812, 839, 840, 842, 843, 847, 854, 858, 859, 863, 883, 1019, 1020, 1021, 1096, 1128, 1160, 1184, 1197, 1219, 1261], "tupl": [40, 121, 123, 129, 157, 205, 211, 224, 236, 237, 238, 244, 278, 301, 580, 771, 833, 845, 883, 886, 1135, 1261], "a1": [40, 82, 84, 301], "table_styl": [40, 301], "column_format": [40, 301], "columnformatdict": [40, 301], "dtype_format": [40, 301], "oneormoredatatyp": [40, 146, 301, 1060, 1261], "conditional_format": [40, 301], "conditionalformatdict": [40, 301], "header_format": [40, 301], "column_tot": [40, 301], "columntotalsdefinit": [40, 301], "column_width": [40, 301], "columnwidthsdefinit": [40, 301], "row_tot": [40, 301], "rowtotalsdefinit": [40, 301], "row_height": [40, 301], "sparklin": [40, 301], "sequenc": [40, 73, 81, 107, 109, 110, 111, 113, 118, 119, 120, 123, 127, 128, 129, 132, 136, 146, 147, 148, 159, 166, 173, 174, 207, 208, 217, 222, 224, 225, 226, 238, 249, 258, 264, 268, 269, 270, 301, 377, 468, 520, 527, 529, 568, 572, 579, 611, 654, 655, 668, 691, 696, 705, 706, 709, 710, 723, 725, 734, 735, 736, 746, 751, 771, 787, 796, 802, 818, 819, 828, 832, 847, 852, 855, 883, 955, 956, 1024, 1103, 1128, 1134, 1157, 1228, 1261], "formula": [40, 301, 433, 771, 1016, 1261], "autofilt": [40, 301], "autofit": [40, 301], "hidden_column": [40, 301], "selectortyp": [40, 301, 886], "hide_gridlin": [40, 301], "sheet_zoom": [40, 301], "freeze_pan": [40, 301], "excel": [40, 123, 301], "open": [40, 117, 118, 119, 123, 124, 125, 126, 127, 128, 129, 130, 131, 135, 137, 301, 797, 883], "xlsxwriter": [40, 140, 301], "close": [40, 120, 188, 189, 191, 192, 235, 301, 377, 463, 524, 572, 584, 587, 588, 589, 590, 591, 593, 594, 595, 608, 714, 715, 717, 718, 758, 759, 771, 810, 811, 813, 814, 837, 883, 955, 1041, 1128, 1168, 1261], "xlsx": [40, 123, 301], "work": [40, 49, 51, 119, 138, 231, 242, 275, 301, 312, 314, 316, 346, 358, 359, 439, 448, 494, 521, 529, 531, 564, 583, 630, 631, 680, 771, 840, 859, 883, 886, 890, 891, 922, 936, 939, 1030, 1077, 1104, 1189, 1190, 1246, 1261], "directori": [40, 45, 130, 301], "sheet1": [40, 301], "medium": [40, 301], "kei": [40, 81, 86, 89, 130, 134, 137, 188, 205, 207, 208, 218, 224, 226, 230, 234, 237, 238, 269, 278, 301, 445, 531, 579, 753, 771, 803, 810, 818, 819, 829, 835, 836, 855, 883, 1134, 1261], "follow": [40, 45, 86, 118, 119, 122, 132, 133, 134, 141, 188, 208, 211, 225, 235, 270, 301, 410, 414, 428, 529, 568, 575, 584, 587, 588, 589, 590, 591, 592, 593, 594, 595, 668, 679, 714, 715, 717, 718, 736, 758, 759, 761, 763, 764, 766, 771, 772, 773, 776, 778, 779, 780, 810, 819, 832, 837, 883, 992, 996, 1010, 1130, 1153, 1156, 1253, 1255, 1257, 1261, 1262, 1266, 1267, 1268, 1270], "first_column": [40, 301], "last_column": [40, 301], "banded_column": [40, 301], "banded_row": [40, 301], "sheet": [40, 123, 129, 301], "chart": [40, 301, 833, 883], "subsequ": [40, 70, 229, 261, 301, 520, 761, 801, 883, 1243, 1261], "colnam": [40, 132, 148, 170, 301, 800, 883], "given": [40, 65, 66, 81, 96, 107, 109, 110, 111, 113, 118, 119, 120, 121, 123, 124, 126, 127, 128, 129, 130, 132, 136, 137, 143, 144, 145, 146, 148, 149, 150, 151, 157, 159, 172, 173, 175, 188, 189, 191, 192, 203, 211, 224, 225, 235, 236, 238, 245, 246, 249, 264, 269, 301, 333, 359, 383, 387, 417, 419, 420, 433, 459, 463, 489, 513, 520, 522, 531, 564, 568, 575, 578, 580, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 599, 601, 602, 624, 625, 636, 637, 656, 658, 665, 668, 691, 721, 734, 735, 736, 747, 748, 749, 771, 787, 802, 810, 811, 813, 814, 823, 824, 832, 837, 843, 844, 847, 852, 855, 865, 871, 883, 886, 893, 909, 939, 961, 965, 999, 1001, 1002, 1016, 1018, 1037, 1041, 1063, 1072, 1096, 1103, 1105, 1108, 1110, 1121, 1130, 1135, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1154, 1160, 1161, 1183, 1184, 1195, 1196, 1215, 1217, 1224, 1248, 1252, 1261, 1269, 1270], "dd": [40, 301], "mm": [40, 301], "yyyi": [40, 301], "overridden": [40, 107, 109, 111, 113, 127, 128, 152, 301, 883], "basi": [40, 148, 301], "param": [40, 107, 109, 110, 111, 113, 118, 119, 127, 128, 132, 147, 148, 150, 236, 301, 883], "It": [40, 72, 91, 166, 218, 225, 277, 287, 301, 539, 583, 767, 771, 796, 823, 824, 829, 862, 871, 883, 1153, 1156, 1261], "float_dtyp": [40, 301], "simplifi": [40, 58, 59, 60, 61, 87, 88, 301, 792, 793, 801, 803, 833, 845, 883], "uniform": [40, 301, 572, 771, 1128, 1261], "condit": [40, 169, 177, 236, 301, 445, 621, 649, 697, 723, 761, 771, 799, 806, 883], "suppli": [40, 107, 109, 110, 111, 113, 120, 127, 128, 136, 177, 236, 301, 445, 568, 771, 806, 883], "typenam": [40, 301], "3_color_scal": [40, 301], "data_bar": [40, 301], "make": [40, 73, 89, 107, 112, 118, 119, 124, 126, 130, 135, 218, 222, 229, 270, 301, 437, 438, 459, 554, 555, 564, 578, 647, 771, 829, 883, 1020, 1021, 1037, 1206, 1261, 1270], "icon": [40, 301], "multipl": [40, 68, 87, 88, 89, 118, 119, 123, 129, 132, 135, 136, 137, 146, 150, 159, 167, 172, 174, 177, 187, 188, 196, 206, 224, 226, 238, 241, 243, 249, 264, 269, 274, 279, 301, 497, 518, 536, 540, 547, 548, 564, 579, 580, 583, 587, 588, 589, 590, 591, 593, 594, 595, 611, 696, 702, 709, 710, 723, 734, 735, 737, 741, 746, 751, 754, 761, 767, 771, 787, 792, 793, 798, 806, 809, 810, 839, 842, 847, 852, 855, 858, 863, 871, 883, 892, 1018, 1024, 1080, 1101, 1115, 1134, 1135, 1261], "singl": [40, 66, 81, 88, 89, 118, 119, 120, 121, 123, 130, 132, 137, 146, 160, 167, 168, 169, 174, 183, 193, 203, 207, 211, 224, 236, 238, 249, 278, 301, 316, 334, 359, 410, 452, 455, 457, 490, 491, 497, 518, 529, 531, 576, 579, 580, 611, 614, 685, 691, 696, 699, 700, 730, 735, 736, 751, 759, 771, 789, 792, 798, 799, 818, 847, 883, 910, 939, 992, 1024, 1035, 1073, 1074, 1080, 1131, 1134, 1135, 1173, 1237, 1261], "across": [40, 81, 121, 193, 213, 215, 220, 252, 301, 457, 688, 690, 705, 706, 708, 712, 738, 742, 755, 771, 1035, 1261], "heatmap": [40, 301], "min": [40, 45, 61, 166, 176, 220, 226, 235, 301, 361, 368, 373, 444, 564, 575, 584, 590, 742, 750, 771, 796, 805, 837, 883, 941, 947, 951, 956, 1027, 1130, 1144, 1261, 1270], "entir": [40, 301, 792, 883], "made": [40, 120, 301, 1242, 1261], "abov": [40, 141, 226, 301, 761], "than": [40, 58, 59, 60, 61, 106, 111, 113, 118, 119, 120, 123, 129, 132, 138, 148, 150, 161, 187, 190, 205, 208, 211, 224, 236, 237, 239, 268, 287, 301, 454, 456, 481, 508, 526, 529, 531, 542, 572, 583, 598, 608, 630, 636, 637, 648, 665, 701, 714, 736, 771, 792, 809, 812, 819, 871, 883, 1091, 1110, 1128, 1138, 1152, 1168, 1189, 1195, 1196, 1207, 1224, 1261, 1270], "bold": [40, 301], "font_color": [40, 301], "702963": [40, 301], "total": [40, 172, 282, 301, 391, 395, 399, 402, 404, 409, 416, 421, 422, 423, 424, 425, 426, 427, 482, 502, 771, 866, 870, 969, 973, 980, 983, 986, 991, 998, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1018, 1065, 1085, 1261], "export": [40, 205, 206, 237, 238, 257, 260, 301, 767], "associ": [40, 66, 68, 81, 121, 147, 238, 301], "sum": [40, 65, 172, 180, 187, 188, 203, 226, 235, 252, 279, 301, 369, 370, 375, 433, 445, 520, 531, 539, 541, 542, 543, 579, 584, 594, 685, 687, 705, 707, 708, 709, 711, 712, 723, 736, 746, 755, 771, 792, 793, 797, 801, 803, 809, 810, 831, 833, 837, 841, 845, 863, 883, 886, 948, 949, 953, 1016, 1018, 1148, 1261], "must": [40, 108, 109, 122, 133, 134, 138, 166, 173, 188, 189, 191, 192, 208, 218, 235, 236, 301, 377, 520, 529, 572, 579, 584, 587, 588, 589, 590, 591, 593, 594, 595, 761, 771, 796, 802, 810, 811, 813, 814, 819, 823, 824, 829, 837, 883, 955, 956, 1128, 1134, 1261], "funcnam": [40, 301], "averag": [40, 301, 436, 437, 438, 575, 771, 1019, 1020, 1021, 1130, 1261], "count_num": [40, 301], "count": [40, 65, 138, 158, 166, 188, 208, 222, 223, 235, 265, 270, 276, 292, 301, 317, 334, 366, 371, 410, 459, 482, 490, 491, 502, 531, 549, 562, 584, 587, 588, 589, 590, 591, 593, 594, 595, 617, 618, 681, 683, 692, 704, 732, 743, 771, 786, 796, 810, 819, 831, 837, 861, 870, 876, 883, 910, 956, 992, 1037, 1065, 1073, 1074, 1085, 1117, 1123, 1176, 1177, 1247, 1249, 1261], "std_dev": [40, 301], "var": [40, 151, 301, 595, 771, 883, 1261], "pixel": [40, 301], "unit": [40, 48, 50, 141, 142, 143, 144, 148, 150, 172, 301, 384, 386, 393, 419, 431, 525, 540, 656, 658, 682, 714, 715, 716, 717, 718, 719, 725, 771, 833, 883, 886, 962, 964, 971, 1001, 1013, 1018, 1108, 1215, 1217, 1248, 1261, 1270], "hand": [40, 118, 119, 132, 301, 509, 510, 511, 512, 1092, 1093, 1094, 1095], "side": [40, 188, 189, 191, 192, 235, 301, 463, 509, 510, 511, 512, 584, 587, 588, 589, 590, 591, 593, 594, 595, 599, 714, 715, 717, 718, 758, 759, 771, 810, 811, 813, 814, 837, 883, 1041, 1092, 1093, 1094, 1095, 1154, 1261], "call": [40, 69, 72, 91, 119, 120, 141, 142, 143, 144, 148, 150, 154, 187, 188, 191, 209, 211, 235, 300, 301, 316, 367, 370, 478, 531, 550, 552, 553, 554, 555, 570, 604, 670, 702, 767, 771, 784, 809, 810, 811, 813, 814, 837, 882, 883, 886, 893, 1110, 1164, 1261], "ad": [40, 110, 123, 188, 191, 265, 269, 274, 275, 301, 315, 442, 705, 706, 709, 710, 771, 810, 813, 855, 858, 859, 883, 955, 1025, 1128, 1261], "wise": [40, 81, 120, 180, 301, 318, 319, 320, 321, 322, 323, 362, 363, 364, 440, 523, 605, 606, 607, 675, 676, 709, 710, 723, 746, 771, 894, 895, 896, 897, 898, 899, 943, 944, 945, 1022, 1106, 1107, 1165, 1166, 1167, 1235, 1236, 1261], "particip": [40, 301], "distinct": [40, 150, 224, 278, 301, 346, 466, 467, 470, 471, 521, 575, 583, 719, 771, 922, 1046, 1047, 1052, 1053, 1104, 1130, 1138, 1261, 1270], "referenc": [40, 301, 668], "differ": [40, 118, 138, 141, 143, 174, 188, 193, 205, 235, 237, 238, 257, 265, 301, 379, 390, 410, 411, 413, 429, 435, 457, 492, 509, 511, 520, 531, 556, 557, 559, 579, 656, 681, 722, 725, 731, 771, 801, 810, 837, 883, 886, 933, 957, 968, 992, 993, 995, 1011, 1017, 1024, 1035, 1075, 1092, 1094, 1110, 1119, 1120, 1134, 1155, 1215, 1261], "row_index": [40, 301], "height": [40, 169, 301], "intersect": [40, 301, 510, 886, 1093], "bodi": [40, 301], "start": [40, 117, 118, 119, 120, 121, 124, 126, 129, 130, 132, 135, 136, 137, 152, 182, 187, 188, 190, 191, 209, 248, 254, 270, 276, 277, 301, 348, 351, 352, 390, 405, 411, 414, 428, 429, 439, 453, 514, 587, 588, 590, 593, 594, 595, 609, 615, 621, 624, 637, 645, 649, 651, 653, 654, 665, 674, 693, 705, 709, 714, 715, 717, 718, 721, 723, 729, 730, 758, 759, 761, 771, 808, 809, 810, 812, 813, 833, 846, 851, 861, 862, 883, 886, 927, 962, 965, 968, 971, 972, 979, 982, 985, 987, 990, 993, 996, 1001, 1010, 1011, 1032, 1097, 1169, 1180, 1183, 1196, 1204, 1208, 1210, 1212, 1224, 1234, 1261, 1270], "unless": [40, 81, 109, 301, 651, 652, 747, 883, 1210, 1251, 1261], "marker": [40, 301], "compliant": [40, 301], "case": [40, 72, 81, 88, 107, 109, 110, 111, 113, 120, 127, 128, 136, 137, 152, 157, 174, 188, 189, 191, 192, 205, 211, 235, 237, 238, 257, 301, 383, 528, 529, 539, 540, 551, 584, 615, 616, 624, 626, 639, 641, 771, 793, 810, 811, 813, 814, 837, 883, 886, 961, 1024, 1174, 1175, 1183, 1185, 1198, 1200, 1261], "three": [40, 263, 301, 377, 572, 599, 771, 955, 1103, 1128, 1261], "avail": [40, 41, 116, 120, 121, 122, 133, 134, 146, 154, 226, 300, 301, 575, 763, 764, 766, 770, 771, 772, 773, 776, 777, 778, 779, 780, 783, 784, 803, 882, 883, 886, 956, 1130, 1253, 1255, 1257, 1261, 1262, 1266, 1267, 1268], "insert_befor": [40, 301], "insert_aft": [40, 301], "respect": [40, 301, 616, 641, 886, 1175, 1200], "direct": [40, 121, 130, 134, 137, 141, 245, 268, 301, 513, 601, 771, 843, 883, 1096, 1160, 1261], "far": [40, 301], "strongli": [40, 152, 211, 236, 287, 301, 531, 771, 1110, 1261], "advis": [40, 72, 91, 209, 301], "structur": [40, 41, 96, 97, 104, 174, 225, 238, 260, 301, 568, 771, 832, 883, 1024, 1261], "wherev": [40, 211, 287, 301, 531, 771, 1110, 1261], "possibl": [40, 96, 118, 159, 187, 190, 205, 211, 237, 264, 266, 287, 301, 525, 531, 539, 586, 648, 682, 771, 787, 809, 812, 847, 852, 853, 883, 1110, 1140, 1207, 1261], "simpl": [40, 150, 222, 301], "colx": [40, 70, 301, 554, 555, 886, 1270], "coli": [40, 301, 554, 555, 886, 1270], "after": [40, 70, 89, 110, 117, 118, 119, 124, 126, 130, 132, 135, 136, 137, 174, 267, 300, 301, 439, 530, 564, 575, 665, 771, 854, 883, 1024, 1109, 1130, 1224, 1261], "befor": [40, 118, 120, 123, 132, 138, 141, 142, 143, 144, 152, 154, 174, 188, 191, 208, 267, 301, 369, 370, 376, 529, 530, 564, 565, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 665, 671, 748, 749, 771, 810, 813, 816, 819, 854, 883, 948, 949, 954, 1024, 1109, 1124, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1224, 1231, 1261], "most": [40, 67, 107, 118, 119, 121, 132, 141, 142, 143, 144, 301, 540, 547, 565, 648, 771, 1115, 1124, 1207, 1261, 1269], "mandatori": [40, 301], "return_dtyp": [40, 157, 211, 301, 316, 527, 529, 530, 531, 579, 691, 734, 735, 736, 771, 893, 1109, 1110, 1134, 1261], "latter": [40, 174, 301, 1024, 1261], "appropri": [40, 138, 260, 301, 575, 771, 1130, 1261], "pure": [40, 301, 1242, 1261], "actual": [40, 110, 148, 150, 238, 301, 1163, 1261], "indic": [40, 117, 118, 119, 120, 124, 126, 130, 132, 137, 145, 146, 150, 188, 189, 191, 192, 235, 238, 243, 245, 258, 301, 327, 452, 459, 464, 465, 466, 467, 469, 470, 471, 472, 474, 475, 476, 497, 513, 518, 535, 536, 537, 538, 584, 587, 588, 589, 590, 591, 593, 594, 595, 599, 601, 605, 673, 696, 697, 771, 810, 811, 813, 814, 837, 842, 843, 883, 886, 1031, 1037, 1045, 1046, 1047, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1080, 1096, 1101, 1153, 1154, 1157, 1160, 1165, 1233, 1238, 1261, 1270], "calcul": [40, 81, 166, 188, 250, 271, 301, 379, 436, 437, 438, 479, 492, 509, 525, 592, 608, 613, 682, 684, 701, 703, 748, 749, 752, 760, 771, 796, 810, 848, 856, 883, 956, 957, 1019, 1020, 1021, 1064, 1075, 1092, 1146, 1168, 1172, 1250, 1261], "individu": [40, 61, 148, 154, 235, 260, 301, 531, 624, 771, 792, 837, 883, 937, 1183, 1261], "gridlin": [40, 301], "zoom": [40, 301], "freez": [40, 301], "pane": [40, 301], "top": [40, 264, 301, 852, 883], "index": [40, 108, 112, 115, 118, 119, 124, 126, 130, 132, 135, 136, 137, 140, 156, 178, 182, 184, 188, 189, 191, 192, 197, 198, 203, 205, 208, 226, 232, 233, 235, 236, 237, 245, 248, 254, 260, 262, 269, 270, 276, 277, 301, 310, 324, 325, 326, 328, 331, 332, 337, 410, 452, 453, 455, 486, 487, 497, 498, 513, 514, 518, 520, 584, 587, 588, 589, 590, 591, 593, 594, 595, 599, 601, 609, 615, 623, 626, 645, 673, 674, 729, 732, 771, 808, 810, 811, 813, 814, 819, 837, 843, 846, 851, 855, 861, 862, 883, 900, 901, 902, 903, 904, 907, 908, 913, 992, 1031, 1032, 1063, 1069, 1070, 1080, 1081, 1096, 1097, 1101, 1103, 1121, 1153, 1154, 1157, 1160, 1169, 1182, 1185, 1204, 1233, 1234, 1261], "thu": [40, 174, 301, 701, 1024, 1261], "altern": [40, 301, 767], "a2": [40, 82, 84, 301], "occur": [40, 87, 88, 301, 334, 490, 491, 547, 575, 771, 792, 793, 801, 803, 833, 845, 883, 910, 1073, 1074, 1115, 1130, 1261], "equival": [40, 107, 109, 110, 111, 113, 122, 127, 128, 136, 188, 203, 222, 301, 309, 313, 434, 435, 449, 454, 456, 481, 526, 546, 548, 558, 559, 560, 563, 569, 631, 669, 679, 686, 722, 731, 771, 810, 883, 1063, 1190, 1220, 1222, 1223, 1261], "top_row": [40, 301], "top_col": [40, 301], "base": [40, 46, 99, 169, 177, 188, 189, 191, 192, 235, 301, 383, 392, 433, 436, 437, 438, 445, 459, 522, 523, 572, 579, 584, 638, 660, 771, 799, 806, 810, 811, 813, 814, 837, 883, 886, 961, 970, 1016, 1019, 1020, 1021, 1037, 1105, 1106, 1128, 1134, 1197, 1219, 1252, 1261, 1270], "scroll": [40, 301], "region": [40, 134, 301], "initit": [40, 301], "5th": [40, 301], "properti": [40, 156, 163, 170, 179, 195, 240, 244, 273, 277, 301, 794, 800, 838, 857, 862, 883, 886, 1261, 1270], "readthedoc": [40, 301], "io": [40, 118, 125, 130, 131, 134, 301, 797, 841, 883], "html": [40, 41, 42, 108, 120, 156, 164, 301], "definit": [40, 146, 301, 479, 771, 1064, 1261], "take": [40, 123, 129, 148, 154, 180, 182, 188, 191, 215, 218, 225, 226, 230, 254, 260, 301, 410, 445, 452, 453, 497, 611, 674, 714, 715, 720, 722, 731, 771, 808, 810, 813, 829, 835, 851, 883, 992, 1031, 1032, 1080, 1234, 1252, 1261], "care": [40, 301, 316, 531, 600, 771, 1158, 1261], "rel": [40, 121, 122, 133, 134, 141, 142, 143, 144, 301, 410, 436, 437, 438, 589, 591, 593, 595, 771, 992, 1019, 1020, 1021, 1261], "working_with_conditional_format": [40, 301], "similarli": [40, 110, 188, 208, 235, 270, 301, 410, 414, 428, 584, 587, 588, 589, 590, 591, 593, 594, 595, 714, 715, 717, 718, 758, 759, 771, 810, 819, 837, 883, 992, 996, 1010], "well": [40, 118, 119, 120, 132, 226, 301, 463, 771, 1041, 1261], "adjac": [40, 301], "two": [40, 70, 72, 90, 91, 109, 111, 113, 121, 180, 217, 218, 226, 263, 280, 287, 301, 310, 380, 386, 452, 455, 520, 572, 610, 694, 695, 701, 703, 748, 749, 771, 828, 829, 864, 871, 883, 958, 964, 1103, 1128, 1261], "help": [40, 141, 142, 143, 144, 301, 304, 803, 883, 1261, 1265], "where": [40, 65, 81, 120, 121, 147, 169, 174, 188, 205, 217, 237, 250, 269, 271, 301, 327, 430, 433, 435, 559, 578, 599, 608, 611, 613, 641, 684, 697, 701, 703, 748, 749, 752, 760, 761, 771, 799, 810, 828, 848, 855, 856, 883, 903, 1012, 1016, 1024, 1154, 1168, 1172, 1200, 1250, 1252, 1261, 1269], "working_with_sparklin": [40, 301], "inject": [40, 81, 301], "locat": [40, 174, 232, 233, 262, 267, 301, 599, 771, 854, 883, 1024, 1031, 1153, 1154, 1157, 1233, 1261], "syntax": [40, 177, 211, 222, 301, 615, 623, 624, 626, 639, 729, 730, 767, 806, 845, 883, 1174, 1182, 1183, 1185, 1198, 1261], "correctli": [40, 123, 301, 529, 771], "microsoft": [40, 301], "com": [40, 121, 301, 436, 437, 438, 623, 624, 625, 771, 1019, 1020, 1021, 1182, 1183, 1184, 1261], "u": [40, 48, 50, 68, 137, 301, 384, 386, 393, 419, 431, 656, 658, 714, 715, 716, 717, 718, 719, 725, 886, 962, 964, 971, 1001, 1013, 1215, 1217], "offic": [40, 301], "f5ed2452": [40, 301], "2337": [40, 301], "4f71": [40, 301], "bed3": [40, 301], "c8ae6d2b276": [40, 301], "instanti": [40, 120, 241, 274, 301, 839, 858, 883], "basic": [40, 301, 1270], "random": [40, 41, 139, 146, 148, 150, 193, 239, 301, 457, 508, 575, 598, 604, 683, 771, 783, 1035, 1091, 1130, 1152, 1164, 1249, 1261], "dtm": [40, 301, 386, 886, 964], "500": [40, 269, 301, 388, 389, 394, 398, 401, 403, 408, 415, 418, 803, 855, 883, 979, 982, 990, 1141, 1142, 1144, 1261], "val": [40, 234, 301, 531, 568, 677, 761, 771, 836, 883], "10_000": [40, 301], "20_000": [40, 301], "30_000": [40, 301], "increas": [40, 81, 118, 130, 137, 301, 376, 583, 771, 954, 1138, 1261], "b4": [40, 301], "light": [40, 301], "twice": [40, 123, 301], "titl": [40, 65, 301], "explicit": [40, 120, 132, 146, 269, 301, 746, 855, 883], "integr": [40, 301, 1270], "multi_fram": [40, 301], "wb": [40, 301], "coordin": [40, 301], "advanc": [40, 123, 226, 301, 520, 1103, 1270], "min_color": [40, 301], "76933c": [40, 301], "mid_color": [40, 301], "c4d79b": [40, 301], "max_color": [40, 301], "ebf1d": [40, 301], "data_bar_2010": [40, 301], "bar_color": [40, 301], "9bbb59": [40, 301], "bar_negative_color_sam": [40, 301], "bar_negative_border_color_sam": [40, 301], "white": [40, 301], "w": [40, 67, 68, 188, 191, 238, 301, 618, 623, 625, 688, 690, 810, 813, 883, 886, 1177, 1182, 1184, 1211], "get_worksheet_by_nam": [40, 301], "fmt_titl": [40, 301], "add_format": [40, 301], "4f6228": [40, 301], "font_siz": [40, 301], "12": [40, 81, 114, 118, 147, 148, 166, 188, 204, 208, 235, 246, 270, 301, 311, 360, 361, 369, 383, 385, 386, 390, 400, 405, 406, 407, 410, 411, 412, 414, 428, 429, 430, 462, 478, 528, 565, 570, 574, 584, 594, 602, 603, 618, 633, 643, 659, 670, 706, 713, 714, 715, 716, 717, 718, 735, 758, 759, 771, 796, 810, 815, 819, 822, 837, 844, 845, 850, 883, 886, 940, 941, 961, 963, 964, 981, 987, 996, 1010, 1110, 1150, 1161, 1177, 1192, 1202, 1218, 1261, 1270], "ital": [40, 301], "customis": [40, 301], "trend": [40, 301], "win_loss": [40, 301], "subtl": [40, 301], "tone": [40, 301], "hidden": [40, 301], "id": [40, 89, 118, 134, 265, 277, 287, 301, 583, 639, 640, 681, 771, 862, 871, 883, 1138, 1247, 1261, 1270], "q1": [40, 301], "55": [40, 83, 301], "20": [40, 118, 148, 166, 174, 196, 198, 218, 225, 227, 231, 233, 301, 324, 325, 326, 379, 385, 388, 389, 394, 398, 400, 401, 403, 408, 414, 415, 418, 428, 431, 457, 462, 568, 587, 588, 590, 593, 594, 595, 685, 725, 733, 758, 771, 796, 829, 832, 883, 886, 957, 963, 967, 981, 996, 1010, 1013, 1022, 1261], "35": [40, 301, 379, 771, 957, 1261], "q2": [40, 301], "30": [40, 166, 174, 188, 196, 225, 231, 233, 256, 274, 301, 324, 325, 326, 379, 386, 388, 389, 394, 398, 401, 403, 405, 406, 408, 412, 413, 414, 415, 418, 421, 428, 429, 457, 603, 733, 758, 771, 796, 810, 832, 858, 883, 886, 957, 964, 988, 995, 996, 1003, 1010, 1261, 1270], "60": [40, 174, 301, 394, 401, 403, 415, 427, 594, 656, 771, 993, 997, 1009, 1215], "q3": [40, 301], "40": [40, 140, 166, 174, 225, 301, 414, 428, 457, 659, 771, 796, 832, 883, 975, 1010, 1218], "80": [40, 301], "q4": [40, 301], "75": [40, 166, 301, 313, 563, 572, 587, 588, 589, 590, 593, 594, 595, 736, 771, 796, 883, 956, 1037, 1128, 1261, 1270], "account": [40, 114, 121, 134, 301, 410, 436, 437, 438, 771, 992, 1019, 1020, 1021, 1261], "flavour": [40, 120, 301], "integer_dtyp": [40, 241, 301, 839, 883, 886], "0_": [40, 301], "just": [40, 132, 217, 301, 828, 883], "unifi": [40, 301, 886], "2_color_scal": [40, 301], "95b3d7": [40, 301], "ffffff": [40, 301], "standardis": [40, 301], "z": [40, 67, 73, 89, 114, 146, 148, 172, 200, 202, 207, 217, 237, 238, 265, 268, 301, 309, 311, 313, 457, 488, 528, 531, 551, 552, 553, 554, 555, 563, 570, 578, 579, 616, 624, 641, 656, 658, 670, 688, 690, 708, 738, 742, 747, 755, 771, 818, 828, 846, 883, 886, 1027, 1134, 1175, 1183, 1200, 1215, 1217, 1261, 1269], "score": [40, 301], "conjunct": [40, 90, 123, 129, 301, 729, 732], "a123": [40, 301], "b345": [40, 301], "c567": [40, 301], "d789": [40, 301], "e101": [40, 301], "45": [40, 140, 166, 235, 301, 386, 414, 428, 584, 594, 618, 624, 667, 694, 695, 733, 758, 771, 796, 837, 883, 886, 964, 996, 1010, 1177, 1183, 1227, 1270], "85": [40, 301, 1270], "font": [40, 301], "consola": [40, 301], "stdev": [40, 301], "ipccompress": [41, 42, 301], "futur": [41, 88, 156, 166, 212, 214, 219, 251, 301, 714, 793, 796, 883, 1251, 1261], "arrow": [41, 42, 59, 107, 120, 121, 124, 126, 135, 205, 237, 238, 255, 257, 301, 883, 1237, 1242, 1261], "ipc": [41, 42, 59, 124, 125, 126, 135, 138, 301, 783, 883], "binari": [41, 120, 123, 301, 348, 350, 351, 352, 886, 923, 926, 927], "feather": [41, 124, 135, 301, 783], "access": [41, 82, 83, 84, 85, 130, 134, 137, 156, 205, 236, 237, 301, 625, 860, 883, 1184, 1270], "python": [41, 42, 64, 108, 118, 119, 120, 140, 141, 143, 156, 205, 211, 237, 238, 257, 287, 301, 316, 386, 527, 529, 531, 625, 714, 715, 717, 718, 758, 759, 761, 771, 777, 871, 893, 964, 976, 977, 978, 984, 1110, 1184, 1241, 1261], "lz4": [41, 42, 45, 59, 61, 301, 883], "zstd": [41, 42, 45, 59, 61, 301, 883], "warn": [41, 301, 564, 587, 588, 589, 590, 591, 593, 594, 595, 771], "unstabl": [41, 301, 771], "break": [41, 88, 138, 268, 269, 301, 316, 376, 377, 414, 459, 587, 588, 589, 590, 591, 593, 594, 595, 771, 793, 855, 883, 934, 954, 955, 996, 1037, 1128, 1261], "intern": [41, 120, 139, 205, 301], "might": [41, 118, 119, 132, 152, 159, 260, 264, 301, 316, 531, 681, 771, 787, 847, 852, 883], "implement": [41, 45, 108, 120, 156, 193, 211, 287, 301, 304, 457, 478, 531, 550, 552, 553, 554, 555, 570, 670, 736, 771, 871, 1035, 1110, 1153, 1156, 1261, 1265], "batch": [42, 116, 119, 120, 126, 136, 138, 301, 792, 823, 824, 883], "iobas": [43, 44, 127, 128, 301, 544, 797, 841, 883], "pretti": [43, 301], "row_ori": [43, 301], "serial": [43, 44, 301, 797, 883], "orient": [43, 82, 84, 111, 113, 301, 883], "slower": [43, 111, 113, 123, 187, 190, 211, 224, 270, 287, 301, 531, 736, 771, 809, 812, 871, 883, 1110, 1261], "common": [43, 81, 87, 88, 89, 269, 301, 528, 551, 771, 777, 792, 793, 801, 803, 833, 845, 855, 883], "write_ndjson": [43, 301], "bit_set": [43, 301, 841, 883], "newlin": [44, 128, 136, 301], "delimit": [44, 58, 128, 136, 226, 258, 301, 614, 883, 1173, 1238, 1261], "parquetcompress": [45, 301], "compression_level": [45, 61, 301, 883], "statist": [45, 61, 118, 119, 130, 137, 166, 301, 437, 438, 479, 587, 588, 589, 590, 591, 592, 593, 594, 595, 608, 771, 796, 883, 956, 1020, 1021, 1064, 1146, 1168, 1261], "row_group_s": [45, 61, 301, 883], "data_page_s": [45, 301], "use_pyarrow": [45, 118, 124, 126, 130, 260, 301, 1241, 1242, 1261], "pyarrow_opt": [45, 122, 130, 133, 301], "parquet": [45, 61, 130, 131, 137, 301, 783, 883], "gzip": [45, 61, 301, 883], "lzo": [45, 61, 301, 883], "brotli": [45, 61, 301, 883], "choos": [45, 59, 61, 188, 226, 301, 810, 883], "good": [45, 59, 61, 205, 301, 883], "perform": [45, 59, 61, 81, 94, 97, 104, 108, 118, 119, 120, 124, 130, 132, 135, 136, 137, 156, 159, 187, 188, 189, 190, 191, 192, 208, 211, 212, 214, 219, 229, 235, 238, 251, 264, 287, 301, 316, 520, 529, 531, 564, 584, 616, 630, 631, 641, 656, 657, 658, 771, 787, 810, 811, 813, 814, 819, 837, 847, 852, 861, 862, 883, 1110, 1175, 1189, 1190, 1200, 1215, 1216, 1217, 1261], "fast": [45, 59, 61, 149, 151, 301, 442, 600, 771, 883, 1025, 1158, 1261, 1270], "decompress": [45, 59, 61, 301, 883], "backward": [45, 61, 176, 208, 301, 347, 407, 444, 771, 805, 819, 883, 989, 1027, 1261], "guarante": [45, 61, 118, 119, 166, 193, 266, 301, 457, 771, 796, 803, 853, 883, 1034, 1035, 1261], "deal": [45, 61, 205, 301, 312, 314, 413, 414, 428, 575, 656, 658, 687, 689, 716, 771, 883, 890, 891, 995, 996, 1010, 1130, 1215, 1217, 1261], "older": [45, 61, 301, 883], "reader": [45, 61, 116, 118, 119, 124, 126, 130, 301, 784, 883], "higher": [45, 61, 166, 228, 293, 301, 573, 591, 745, 771, 796, 834, 877, 883, 956, 1129, 1145, 1261], "mean": [45, 61, 118, 119, 124, 130, 132, 166, 176, 187, 188, 208, 215, 226, 235, 270, 279, 301, 410, 414, 428, 441, 444, 584, 587, 588, 589, 590, 591, 593, 594, 595, 608, 614, 623, 714, 715, 717, 718, 719, 758, 759, 761, 771, 796, 805, 809, 810, 819, 823, 824, 837, 863, 883, 956, 992, 996, 1010, 1023, 1027, 1034, 1142, 1168, 1173, 1182, 1261], "smaller": [45, 61, 172, 301, 803, 883, 1018, 1261], "disk": [45, 58, 59, 60, 61, 124, 301, 845, 883], "22": [45, 61, 147, 301, 390, 411, 414, 428, 430, 431, 586, 587, 588, 590, 593, 594, 595, 656, 771, 883, 886, 996, 1010, 1013, 1140, 1215, 1261, 1270], "comput": [45, 61, 87, 89, 94, 172, 187, 208, 261, 266, 279, 293, 301, 308, 318, 319, 320, 321, 322, 323, 340, 341, 344, 357, 362, 363, 364, 367, 368, 369, 370, 371, 372, 373, 374, 375, 380, 433, 440, 479, 504, 505, 506, 509, 510, 511, 512, 522, 523, 524, 547, 564, 565, 571, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 605, 606, 607, 608, 612, 675, 676, 683, 688, 690, 694, 695, 696, 701, 703, 720, 748, 749, 761, 771, 792, 809, 816, 818, 819, 853, 860, 863, 877, 883, 888, 894, 895, 896, 897, 898, 899, 916, 917, 920, 935, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 958, 1016, 1018, 1022, 1064, 1087, 1088, 1089, 1092, 1093, 1094, 1095, 1105, 1106, 1107, 1115, 1124, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1165, 1166, 1167, 1168, 1171, 1235, 1236, 1243, 1249, 1261], "512": [45, 120, 205, 301, 569, 771, 1124, 1261], "page": [45, 61, 124, 130, 135, 137, 301, 771, 783, 883, 1261], "At": [45, 301], "moment": [45, 164, 301, 479, 608, 771, 1064, 1168, 1261], "write_t": [45, 301], "partition_col": [45, 121, 301], "write_to_dataset": [45, 301], "similar": [45, 152, 180, 208, 245, 301, 417, 420, 513, 564, 601, 732, 761, 771, 803, 819, 843, 883, 999, 1002, 1096, 1160, 1261], "spark": [45, 301], "partit": [45, 121, 122, 130, 133, 137, 138, 206, 224, 301], "we": [45, 117, 118, 119, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 166, 188, 208, 235, 270, 301, 410, 414, 428, 459, 494, 520, 529, 531, 584, 587, 588, 589, 590, 591, 593, 594, 595, 625, 638, 660, 714, 715, 717, 718, 733, 758, 759, 761, 771, 796, 797, 810, 819, 823, 824, 837, 883, 893, 992, 996, 1010, 1037, 1077, 1110, 1184, 1197, 1219, 1261], "use_pyarrow_write_to_dataset": [45, 301], "first": [45, 81, 118, 119, 123, 124, 126, 127, 130, 132, 136, 141, 142, 143, 144, 147, 157, 186, 188, 191, 194, 208, 210, 211, 221, 225, 226, 253, 258, 259, 265, 266, 270, 277, 284, 301, 326, 328, 337, 376, 379, 407, 410, 414, 431, 458, 466, 467, 483, 492, 494, 498, 499, 520, 530, 540, 568, 599, 611, 615, 623, 626, 627, 629, 639, 640, 698, 705, 723, 727, 761, 771, 792, 810, 813, 815, 819, 822, 832, 853, 860, 862, 868, 883, 886, 902, 913, 954, 956, 957, 989, 992, 996, 1013, 1036, 1046, 1047, 1066, 1075, 1077, 1081, 1082, 1103, 1109, 1154, 1170, 1182, 1184, 1185, 1186, 1188, 1198, 1199, 1232, 1240, 1261, 1270], "watermark": [45, 301], "partitioned_object": [45, 301], "calendar": [47, 48, 188, 208, 235, 270, 301, 385, 397, 400, 410, 414, 428, 432, 584, 587, 588, 589, 590, 591, 593, 594, 595, 714, 715, 717, 718, 719, 758, 759, 771, 810, 819, 837, 883, 963, 975, 981, 992, 996, 1010, 1014], "time_unit": [48, 50, 384, 386, 393, 419, 431, 658, 714, 715, 716, 717, 718, 719, 725, 886, 962, 964, 971, 1001, 1013, 1217], "time_zon": [48, 387, 389, 413, 658, 714, 715, 716, 717, 718, 886, 961, 965, 970, 995, 1217], "timezon": [48, 389, 886], "m": [48, 50, 68, 207, 301, 383, 384, 386, 392, 393, 417, 419, 420, 431, 623, 656, 657, 658, 662, 714, 715, 716, 717, 718, 719, 725, 818, 883, 886, 961, 962, 964, 970, 971, 999, 1001, 1002, 1013, 1182, 1215, 1216, 1217, 1221], "zone": [48, 383, 387, 413, 658, 714, 715, 716, 717, 718, 886, 961, 965, 995, 1217], "zoneinfo": [48, 886], "run": [48, 58, 59, 60, 61, 87, 88, 149, 151, 187, 190, 209, 211, 226, 242, 266, 275, 287, 301, 316, 376, 494, 529, 531, 582, 583, 631, 750, 771, 792, 793, 801, 803, 809, 812, 823, 824, 828, 833, 840, 845, 853, 859, 883, 886, 954, 1077, 1110, 1137, 1138, 1190, 1261, 1269, 1270], "available_timezon": [48, 886], "128": [49, 83, 1124, 1261], "bit": [49, 52, 53, 54, 55, 56, 57, 75, 76, 77, 78, 577, 615, 771, 1132, 1174, 1261], "experiment": [49, 51, 88, 138, 268, 269, 301, 376, 414, 459, 531, 587, 588, 589, 590, 591, 593, 594, 595, 771, 793, 855, 883, 934, 954, 996, 1037, 1128, 1261], "progress": [49, 51], "expect": [49, 51, 98, 101, 106, 118, 120, 132, 520, 531, 733, 771, 821, 823, 824, 883], "categori": [51, 72, 91, 258, 301, 355, 356, 377, 459, 572, 771, 930, 932, 955, 1037, 1128, 1261], "iter": [51, 87, 88, 89, 107, 120, 149, 151, 159, 167, 177, 187, 188, 189, 190, 191, 192, 204, 205, 206, 235, 236, 237, 238, 241, 242, 243, 249, 264, 265, 274, 275, 278, 279, 301, 376, 445, 564, 611, 688, 690, 696, 698, 699, 700, 708, 712, 738, 742, 750, 753, 755, 761, 767, 771, 787, 798, 806, 809, 810, 811, 812, 813, 814, 837, 839, 840, 842, 847, 852, 858, 859, 863, 883, 954, 1153, 1261, 1270], "32": [52, 55, 76, 83, 203, 235, 301, 548, 584, 603, 771, 837, 883, 958, 993, 1124, 1145, 1261], "sign": [54, 55, 56, 57, 410, 577, 665, 771, 886, 992, 1051, 1132, 1224, 1261], "maintain_ord": [58, 59, 60, 61, 159, 187, 190, 224, 226, 264, 266, 270, 280, 283, 285, 288, 289, 290, 291, 292, 293, 294, 301, 310, 346, 452, 455, 521, 531, 680, 771, 787, 793, 801, 803, 809, 812, 833, 845, 847, 852, 853, 864, 867, 869, 872, 873, 874, 875, 876, 877, 878, 883, 922, 1104, 1246, 1261], "type_coercion": [58, 59, 60, 61, 87, 88, 792, 793, 801, 803, 833, 845, 883], "predicate_pushdown": [58, 59, 60, 61, 87, 88, 792, 793, 801, 803, 823, 824, 833, 845, 883], "projection_pushdown": [58, 59, 60, 61, 87, 88, 792, 793, 801, 803, 823, 824, 833, 845, 883], "simplify_express": [58, 59, 60, 61, 87, 88, 792, 793, 801, 803, 833, 845, 883], "slice_pushdown": [58, 59, 60, 61, 87, 88, 792, 793, 801, 803, 823, 824, 833, 845, 883], "no_optim": [58, 59, 60, 61, 87, 88, 792, 793, 803, 823, 824, 833, 883], "evalu": [58, 59, 60, 61, 175, 177, 208, 301, 313, 327, 329, 330, 376, 445, 461, 484, 485, 520, 563, 687, 689, 693, 697, 714, 715, 717, 718, 720, 729, 730, 744, 747, 753, 758, 759, 761, 762, 771, 792, 806, 816, 818, 819, 883, 903, 905, 906, 954, 1067, 1068, 1252, 1261], "queri": [58, 59, 60, 61, 65, 67, 87, 88, 120, 121, 124, 132, 135, 136, 137, 174, 209, 225, 301, 529, 531, 629, 771, 792, 793, 801, 803, 815, 822, 833, 845, 861, 862, 865, 871, 883, 1024, 1110, 1188, 1261, 1269], "ram": [58, 59, 60, 61, 883], "maintain": [58, 59, 60, 61, 159, 264, 301, 346, 521, 599, 680, 771, 787, 796, 847, 852, 883, 922, 1104, 1154, 1246, 1261], "slightli": [58, 59, 60, 61, 123, 883], "faster": [58, 59, 60, 61, 120, 174, 260, 268, 301, 316, 531, 681, 771, 883, 893, 1024, 1110, 1261], "coercion": [58, 59, 60, 61, 87, 88, 578, 771, 792, 793, 801, 803, 833, 845, 883], "optim": [58, 59, 60, 61, 87, 88, 130, 132, 135, 136, 137, 205, 209, 225, 229, 237, 266, 301, 792, 793, 801, 803, 823, 824, 833, 845, 853, 861, 862, 871, 883, 935, 1153, 1261], "pushdown": [58, 59, 60, 61, 87, 88, 792, 793, 801, 803, 823, 824, 833, 835, 845, 861, 862, 883, 1153, 1156, 1261], "project": [58, 59, 60, 61, 87, 88, 132, 134, 135, 136, 137, 316, 610, 611, 771, 792, 793, 801, 803, 823, 824, 833, 835, 841, 845, 883], "slice": [58, 59, 60, 61, 82, 87, 88, 172, 194, 206, 253, 301, 499, 517, 531, 539, 541, 585, 587, 588, 589, 590, 591, 593, 594, 595, 771, 792, 793, 801, 803, 823, 824, 833, 845, 883, 1018, 1036, 1082, 1100, 1139, 1141, 1142, 1143, 1144, 1145, 1147, 1148, 1149, 1232, 1261], "off": [58, 59, 60, 61, 87, 88, 118, 119, 132, 792, 793, 801, 803, 823, 824, 833, 883], "certain": [58, 59, 60, 61, 88, 122, 133, 197, 198, 270, 301, 652, 653, 792, 793, 833, 883, 1261], "lf": [58, 59, 60, 61, 786, 787, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 815, 816, 817, 818, 820, 821, 822, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 838, 839, 841, 843, 845, 846, 847, 848, 849, 850, 852, 853, 855, 856, 857, 858, 860, 861, 862, 866, 870, 883, 1269, 1270], "scan_csv": [58, 59, 60, 61, 118, 119, 883], "my_larger_than_ram_fil": [58, 59, 60, 61, 883], "ndjson": [60, 883], "data_pagesize_limit": [61, 883], "reduc": [61, 118, 119, 130, 132, 135, 136, 137, 288, 289, 291, 294, 603, 706, 723, 771, 872, 873, 875, 878, 883, 1112, 1127, 1162, 1231, 1261], "pressur": [61, 118, 119, 130, 132, 136, 137, 603, 771, 883, 1162, 1261], "improv": [61, 124, 135, 529, 771, 883], "speed": [61, 316, 531, 771, 883, 1270], "integer_list": 62, "float_list": 62, "wrap": [64, 114, 463, 771], "arbitrari": [64, 148, 886], "eager": [65, 66, 67, 68, 69, 70, 188, 226, 268, 301, 384, 387, 390, 393, 406, 407, 410, 411, 413, 414, 419, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 587, 588, 590, 593, 594, 595, 693, 697, 714, 715, 717, 718, 725, 729, 730, 744, 747, 753, 758, 759, 762, 770, 771, 810, 824, 883, 961, 962, 965, 968, 970, 971, 972, 978, 979, 982, 985, 987, 988, 989, 990, 992, 993, 994, 995, 996, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1269], "against": [65, 96, 118, 120, 494, 626, 883, 1077, 1185, 1269, 1270], "eagerli": [65, 520], "unset": [65, 147, 413, 520, 995], "init": [65, 154], "eager_execut": [65, 1269], "itself": [65, 146, 301, 304, 531, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 748, 749, 771, 821, 883, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1261, 1265, 1269], "impact": [65, 188, 191, 301, 810, 813, 883, 1269], "declar": [65, 107, 109, 110, 111, 113, 120, 127, 128, 136, 301, 883], "godfath": 65, "1972": 65, "6_000_000": 65, "134_821_952": 65, "dark": 65, "knight": 65, "2008": 65, "185_000_000": 65, "533_316_061": 65, "schindler": 65, "1993": 65, "22_000_000": 65, "96_067_179": 65, "pulp": 65, "fiction": 65, "1994": 65, "8_000_000": 65, "107_930_000": 65, "shawshank": 65, "redempt": 65, "25_000_000": 65, "28_341_469": 65, "release_year": 65, "budget": 65, "gross": 65, "imdb_scor": 65, "ctx": [65, 66, 67, 68, 69, 70], "film": 65, "1990": [65, 118], "BY": [65, 67], "desc": [65, 67], "AS": [65, 751, 1269], "decad": 65, "total_gross": 65, "n_film": 65, "2000": [65, 385, 396, 400, 406, 407, 410, 886, 963, 974, 981, 988, 989, 992, 997], "533316061": 65, "232338648": 65, "1970": [65, 138], "134821952": 65, "register_glob": [66, 68, 70, 1269], "register_mani": [66, 67, 70], "unregist": [66, 67, 68, 1269], "frame_data": [66, 69], "collect": [66, 67, 70, 84, 87, 88, 132, 133, 134, 138, 148, 150, 169, 209, 226, 255, 266, 267, 301, 439, 468, 531, 699, 721, 725, 753, 771, 786, 787, 789, 793, 795, 796, 797, 798, 799, 802, 803, 804, 805, 806, 807, 808, 809, 810, 815, 817, 818, 819, 820, 822, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 839, 841, 843, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 858, 860, 861, 862, 863, 864, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 883, 886, 1049, 1261, 1269, 1270], "global": [67, 72, 90, 91, 139, 148, 153, 260, 301, 579, 771, 931, 933, 1134, 1261, 1269], "scope": [67, 70, 154, 782, 886, 1269], "map": [67, 68, 73, 109, 110, 118, 119, 120, 121, 124, 125, 130, 131, 132, 135, 160, 170, 179, 205, 211, 230, 236, 237, 238, 256, 301, 311, 414, 428, 528, 529, 530, 531, 550, 564, 579, 683, 735, 771, 789, 800, 835, 883, 886, 956, 996, 1010, 1109, 1110, 1134, 1249, 1261, 1269], "recent": [67, 141, 142, 143, 144, 565, 771, 1124, 1261, 1269], "df1": [67, 69, 70, 81, 89, 141, 142, 171, 174, 218, 272, 301, 829, 883], "df2": [67, 69, 70, 81, 89, 141, 142, 171, 174, 272, 301], "join": [67, 72, 81, 87, 88, 89, 91, 177, 208, 269, 301, 445, 462, 564, 771, 792, 793, 801, 803, 806, 819, 833, 845, 855, 860, 883], "named_fram": [68, 1269], "lf1": [68, 70], "o": [68, 124, 135, 353, 376, 622, 678, 771, 928, 954, 1181, 1210, 1245, 1261], "lf2": [68, 70, 883], "p": [68, 83, 225, 301, 568, 753, 771, 832, 883, 1185], "q": [68, 238, 301, 753], "r": [68, 118, 119, 132, 568, 618, 622, 623, 624, 625, 639, 771, 886, 1177, 1181, 1182, 1183, 1184, 1198], "lf3": [68, 883], "lf4": [68, 883], "either": [68, 73, 148, 203, 207, 208, 209, 212, 214, 219, 224, 235, 236, 251, 260, 301, 572, 579, 584, 656, 687, 696, 753, 771, 818, 819, 821, 837, 883, 886, 1128, 1134, 1215, 1261, 1270], "tbl1": [68, 70], "tbl2": [68, 70], "tbl3": 68, "tbl4": 68, "statement": [69, 761], "hello_world": 69, "baz": [69, 198, 199, 226, 267, 301, 625, 646, 648, 722, 731, 767, 817, 854, 883, 886, 1184, 1207], "hello_data": 69, "foo_bar": [69, 535, 538, 646, 733], "registr": [70, 783], "lifetim": [70, 154, 782], "context": [70, 72, 90, 91, 152, 222, 301, 310, 316, 445, 494, 529, 531, 539, 610, 611, 683, 691, 702, 704, 722, 725, 731, 732, 736, 747, 750, 770, 771, 782, 783, 860, 883, 1077, 1249, 1261, 1269], "manag": [70, 72, 90, 91, 782, 783, 1269], "often": [70, 121, 154, 188, 189, 191, 192, 235, 301, 334, 490, 491, 578, 584, 771, 810, 811, 813, 814, 837, 883, 910, 1073, 1074], "want": [70, 88, 110, 174, 211, 222, 301, 445, 529, 531, 583, 587, 588, 589, 590, 591, 593, 594, 595, 616, 630, 641, 705, 714, 723, 744, 747, 762, 771, 793, 815, 822, 883, 886, 1024, 1110, 1138, 1175, 1189, 1200, 1261], "df0": [70, 218, 301, 829, 883], "exit": [70, 72, 90, 154, 1269], "construct": [70, 72, 90, 91, 107, 109, 110, 111, 112, 113, 120, 301, 451, 744, 747, 762, 767, 771, 797, 883, 931, 1261], "persist": 70, "through": [70, 108, 120, 767, 886, 1261], "tbl0": 70, "remain": [70, 118, 119, 132, 169, 172, 177, 301, 381, 382, 445, 493, 579, 647, 648, 771, 799, 806, 823, 824, 883, 959, 960, 1018, 1028, 1076, 1134, 1206, 1207, 1261], "text": [70, 120, 630, 631, 639, 640, 642, 751, 1189, 1190, 1201, 1270], "misc": 70, "testing1234": 70, "test1": 70, "test2": 70, "test3": 70, "disabl": [72, 90, 91, 205, 301, 792, 883], "cach": [72, 87, 88, 90, 91, 124, 132, 135, 137, 141, 142, 143, 144, 153, 579, 587, 588, 589, 590, 591, 593, 594, 595, 656, 657, 658, 662, 771, 782, 792, 793, 801, 803, 833, 845, 883, 931, 1134, 1215, 1216, 1217, 1221, 1261], "under": [72, 82, 83, 84, 85, 90, 91, 763, 764, 766, 767, 772, 773, 776, 778, 779, 780, 1253, 1255, 1257, 1262, 1266, 1267, 1268], "equal": [72, 91, 118, 119, 120, 132, 141, 142, 143, 144, 159, 181, 188, 191, 208, 218, 264, 301, 377, 428, 434, 435, 454, 481, 520, 559, 572, 578, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 636, 637, 665, 748, 749, 761, 767, 771, 787, 810, 813, 819, 829, 847, 852, 883, 955, 996, 1103, 1128, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1147, 1148, 1149, 1155, 1195, 1196, 1224, 1261, 1270], "concaten": [72, 89, 90, 91, 180, 225, 301, 568, 614, 699, 700, 771, 832, 883, 937, 1116, 1173, 1261], "introduc": [72, 91, 656, 657, 658, 1215, 1216, 1217], "overhead": [72, 91, 132, 135, 136, 137], "amount": [72, 91, 316, 531, 719, 771], "depend": [72, 86, 91, 120, 140, 331, 332, 486, 487, 531, 539, 572, 575, 719, 722, 725, 731, 771, 907, 908, 1069, 1070, 1128, 1130, 1261, 1270], "nest": [72, 114, 130, 172, 301, 783, 1018, 1261, 1269, 1270], "clear": [72, 90, 162, 301, 791, 883, 942, 1261], "outermost": 72, "s1": [72, 90, 91, 143, 144, 180, 301, 1017, 1063, 1071, 1103, 1252, 1261], "color": [72, 90, 91, 287, 348, 350, 351, 352, 683, 771, 871, 1249, 1261], "red": [72, 90, 91, 287, 683, 771, 871, 1249, 1261], "green": [72, 90, 91, 287, 683, 771, 871, 1249, 1261], "blue": [72, 90, 91, 348, 350, 351, 352, 683, 771, 1249, 1261], "concat": [72, 90, 91, 119, 937, 1116, 1261], "cat": [72, 90, 91, 377, 572, 615, 618, 661, 664, 677, 700, 766, 771, 886, 955, 1037, 1128, 1174, 1177, 1220, 1223, 1257, 1261], "decor": [72, 82, 83, 84, 85, 148, 150, 211, 301, 531, 771, 782, 783, 1110, 1261], "dure": [72, 118, 119, 132, 154, 174, 301, 1024, 1261], "afterward": [72, 761], "construct_categor": 72, "schemadict": [73, 107, 109, 110, 111, 112, 113, 118, 120, 121, 123, 129, 132, 301, 753, 823, 824, 865, 871, 883], "composit": [73, 147, 1270], "initi": [73, 154, 705, 709, 723, 761], "dai": [74, 188, 191, 206, 208, 235, 270, 301, 406, 407, 410, 411, 414, 417, 420, 421, 428, 430, 584, 587, 588, 589, 590, 591, 593, 594, 595, 713, 714, 715, 716, 717, 718, 719, 758, 759, 771, 810, 813, 819, 837, 883, 886, 988, 989, 992, 993, 996, 999, 1002, 1003, 1010, 1012], "unsign": [75, 76, 77, 78, 577, 771, 886, 1051, 1132, 1261], "static": [79, 865, 871], "frametyp": [81, 1269], "joinstrategi": [81, 207, 301, 818, 883], "outer": [81, 89, 207, 269, 301, 818, 855, 883], "descend": [81, 159, 243, 249, 264, 301, 326, 343, 515, 575, 600, 610, 611, 683, 696, 771, 787, 842, 847, 852, 883, 902, 919, 1059, 1098, 1130, 1158, 1170, 1249, 1261], "fill": [81, 89, 161, 175, 176, 245, 246, 268, 301, 347, 367, 370, 443, 444, 450, 462, 587, 588, 590, 594, 601, 602, 633, 643, 724, 744, 747, 762, 771, 804, 805, 843, 844, 860, 883, 1026, 1027, 1040, 1121, 1141, 1142, 1144, 1147, 1148, 1149, 1160, 1161, 1192, 1202, 1261], "sort": [81, 82, 141, 142, 147, 159, 188, 189, 191, 192, 208, 218, 225, 226, 235, 243, 264, 270, 284, 295, 301, 326, 356, 445, 531, 564, 584, 587, 588, 589, 590, 591, 593, 594, 595, 600, 611, 683, 685, 696, 736, 771, 787, 801, 810, 811, 813, 814, 819, 829, 832, 833, 837, 842, 845, 852, 868, 879, 883, 886, 902, 932, 1059, 1158, 1246, 1249, 1261, 1270], "origin": [81, 118, 119, 132, 169, 177, 266, 301, 381, 382, 413, 414, 428, 445, 478, 493, 530, 550, 564, 577, 578, 579, 580, 617, 618, 623, 629, 694, 695, 771, 799, 806, 853, 883, 955, 959, 960, 995, 996, 1010, 1028, 1076, 1109, 1128, 1134, 1135, 1176, 1177, 1182, 1188, 1261], "In": [81, 88, 120, 122, 133, 134, 137, 148, 150, 154, 172, 174, 188, 189, 191, 192, 211, 222, 235, 260, 301, 529, 531, 584, 714, 771, 793, 810, 811, 813, 814, 837, 883, 1018, 1024, 1131, 1261], "duplic": [81, 95, 200, 207, 208, 266, 269, 301, 311, 464, 478, 550, 572, 771, 818, 819, 853, 855, 883, 1043, 1128, 1261], "suitabl": [81, 89, 120, 146, 211, 301, 531, 599, 771, 1110, 1154, 1261, 1270], "get": [81, 88, 115, 125, 131, 138, 152, 159, 163, 170, 179, 183, 185, 188, 189, 191, 192, 194, 195, 200, 202, 203, 210, 213, 220, 221, 226, 235, 236, 240, 244, 248, 253, 261, 264, 273, 284, 295, 301, 310, 324, 325, 326, 328, 336, 339, 346, 355, 367, 368, 369, 370, 371, 372, 373, 374, 375, 393, 446, 452, 458, 477, 480, 483, 496, 501, 521, 532, 533, 534, 539, 541, 545, 556, 557, 566, 567, 573, 582, 583, 584, 609, 613, 671, 672, 680, 684, 722, 727, 731, 736, 737, 738, 739, 740, 741, 742, 752, 756, 760, 771, 787, 792, 793, 794, 800, 807, 810, 811, 813, 814, 815, 820, 822, 837, 838, 846, 850, 852, 857, 868, 879, 883, 900, 901, 902, 903, 904, 912, 915, 922, 930, 937, 946, 947, 948, 949, 950, 951, 952, 953, 971, 1015, 1029, 1033, 1036, 1041, 1043, 1061, 1066, 1079, 1084, 1104, 1111, 1113, 1114, 1116, 1118, 1119, 1120, 1125, 1126, 1129, 1137, 1138, 1169, 1172, 1232, 1237, 1238, 1243, 1246, 1250, 1251, 1261], "speedup": [81, 205, 211, 301, 531, 771, 1110, 1261], "receiv": [81, 120, 132, 211, 225, 287, 301, 531, 568, 771, 832, 883, 1270], "now": [81, 235, 301, 428, 837, 883, 996, 1010, 1217], "One": [81, 166, 222, 226, 301, 313, 563, 692, 702, 722, 728, 731, 739, 740, 743, 751, 771, 796, 883, 886, 956, 1261], "whose": [81, 208, 226, 301, 439, 721, 771, 819, 883, 886], "uniqu": [81, 145, 146, 147, 150, 158, 202, 207, 222, 226, 238, 292, 301, 317, 328, 377, 477, 549, 572, 656, 657, 658, 662, 681, 683, 692, 743, 771, 786, 818, 876, 883, 904, 955, 1061, 1117, 1128, 1215, 1216, 1217, 1221, 1247, 1249, 1261], "post": 81, "constrain": [81, 169, 301, 799, 883], "newli": 81, "boolean": [81, 159, 177, 180, 209, 249, 264, 301, 312, 313, 314, 329, 330, 333, 348, 351, 352, 396, 445, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 484, 485, 489, 561, 563, 566, 567, 611, 627, 685, 686, 696, 697, 753, 761, 771, 787, 791, 806, 821, 847, 852, 883, 886, 890, 891, 903, 905, 906, 909, 923, 925, 974, 1028, 1041, 1042, 1043, 1045, 1046, 1047, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1061, 1067, 1068, 1072, 1122, 1125, 1126, 1156, 1174, 1242, 1252, 1261], "know": [81, 120, 226, 301, 520, 529, 771, 1251, 1261], "2022": [81, 160, 166, 186, 301, 386, 414, 428, 656, 714, 715, 717, 718, 719, 725, 789, 796, 883, 886, 964, 975, 996, 1010, 1215], "df3": [81, 301], "set_tbl_format": 81, "09": [81, 118, 148, 166, 235, 301, 386, 406, 407, 584, 659, 714, 759, 771, 796, 837, 883, 886, 1218], "02": [81, 160, 166, 186, 188, 235, 270, 301, 384, 386, 393, 406, 407, 410, 413, 419, 422, 425, 427, 431, 584, 587, 588, 590, 593, 594, 595, 596, 656, 657, 658, 662, 714, 715, 717, 718, 719, 771, 789, 796, 810, 837, 883, 886, 962, 964, 966, 967, 971, 972, 978, 979, 985, 988, 989, 990, 995, 996, 1000, 1001, 1004, 1007, 1009, 1010, 1103, 1215, 1216, 1217, 1221], "03": [81, 114, 118, 160, 188, 235, 270, 301, 384, 386, 387, 393, 406, 407, 410, 413, 414, 417, 419, 420, 421, 422, 425, 427, 428, 431, 584, 587, 588, 590, 593, 594, 595, 657, 662, 714, 715, 717, 718, 719, 771, 789, 810, 837, 883, 962, 964, 965, 971, 972, 978, 979, 988, 989, 990, 995, 996, 999, 1001, 1002, 1003, 1004, 1007, 1009, 1216, 1221], "af1": 81, "af2": 81, "af3": 81, "keep": [81, 118, 119, 132, 266, 269, 270, 301, 478, 530, 543, 551, 579, 698, 771, 853, 855, 883, 1109, 1134, 1261], "easili": [81, 120, 241, 274, 279, 301, 753, 839, 858, 863, 883], "dot": [81, 771, 845, 883, 1261], "product": [81, 164, 207, 301, 369, 374, 380, 771, 803, 818, 883, 948, 952, 958, 1261], "fill_nul": [81, 175, 301, 771, 804, 860, 883, 1261], "sum_horizont": [81, 251, 301, 754], "167": 81, "47": [81, 166, 301, 796, 883], "callabl": [82, 83, 84, 85, 132, 157, 180, 211, 225, 230, 281, 287, 301, 316, 520, 527, 528, 529, 531, 551, 568, 585, 586, 691, 705, 706, 709, 710, 723, 734, 735, 736, 746, 771, 823, 824, 832, 835, 865, 871, 883, 893, 1103, 1110, 1139, 1140, 1261], "by_first_letter_of_column_nam": 82, "f": [82, 119, 186, 206, 255, 265, 268, 301, 309, 520, 603, 622, 656, 658, 691, 699, 734, 771, 1103, 1181, 1215, 1217], "fromkei": [82, 84], "by_first_letter_of_column_valu": 82, "starts_with": [82, 348, 351, 615, 621, 886, 1180], "to_seri": [82, 183, 301, 656, 697, 747, 1215], "xy": [82, 84], "yz": [82, 84], "b1": [82, 84], "b2": [82, 84], "pow_n": 83, "powersofn": 83, "next": [83, 188, 208, 235, 270, 301, 347, 410, 414, 428, 575, 584, 587, 588, 589, 590, 591, 593, 594, 595, 714, 715, 717, 718, 758, 759, 771, 810, 819, 837, 883, 992, 996, 1010, 1130, 1261], "ceil": [83, 771, 1261], "previou": [83, 154, 552, 553, 565, 570, 668, 670, 771, 1124, 1261], "floor": [83, 771, 1261], "nearest": [83, 166, 208, 228, 293, 301, 358, 448, 462, 573, 591, 745, 771, 796, 819, 834, 877, 883, 936, 956, 1030, 1040, 1129, 1145, 1261], "24": [83, 152, 188, 208, 211, 235, 270, 301, 369, 376, 390, 410, 411, 414, 422, 428, 430, 548, 584, 587, 588, 589, 590, 591, 593, 594, 595, 714, 715, 717, 718, 719, 758, 759, 771, 810, 819, 837, 883, 954, 992, 996, 1004, 1010, 1063, 1261], "001": [83, 665, 719, 1005, 1006, 1008, 1224], "next_pow2": 83, "prev_pow2": 83, "nearest_pow2": 83, "split_by_column_dtyp": 84, "collect_al": [84, 88, 792, 793, 883], "31": [85, 148, 166, 301, 385, 386, 390, 400, 406, 410, 421, 656, 713, 716, 725, 733, 796, 883, 886, 961, 963, 964, 968, 981, 988, 1003, 1215, 1270], "42": [85, 166, 193, 218, 235, 301, 584, 771, 796, 829, 837, 883, 1035, 1261], "961": 85, "1764": 85, "4160": 85, "build": [86, 108, 886, 1270], "wa": [86, 141, 224, 278, 301, 579, 641, 771, 1134, 1200, 1261], "compil": [86, 331, 332, 486, 487, 907, 908, 1069, 1070], "gate": 86, "info": [86, 122, 133, 134, 140, 301, 304, 1261, 1265], "host": [86, 118, 124, 126, 135, 137], "git": 86, "lazy_fram": [87, 88], "comm_subplan_elim": [87, 88, 792, 793, 801, 803, 833, 845, 883], "comm_subexpr_elim": [87, 88, 792, 793, 801, 803, 833, 845, 883], "graph": [87, 209, 301, 792, 816, 860, 883], "parallel": [87, 89, 116, 121, 130, 137, 188, 191, 208, 209, 225, 242, 275, 301, 376, 494, 683, 761, 771, 783, 810, 813, 818, 819, 840, 859, 871, 883, 954, 1077, 1249, 1261], "threadpool": [87, 152], "Will": [87, 88, 792, 793, 801, 803, 833, 845, 883, 1261], "try": [87, 88, 104, 118, 119, 124, 130, 132, 135, 137, 792, 793, 801, 803, 833, 845, 883], "branch": [87, 88, 792, 793, 801, 803, 833, 845, 883], "subplan": [87, 88, 792, 793, 801, 803, 833, 845, 883], "union": [87, 88, 89, 512, 792, 793, 801, 803, 833, 845, 883, 886, 1095], "subexpress": [87, 88, 792, 793, 801, 803, 833, 845, 883], "reus": [87, 88, 792, 793, 801, 803, 833, 845, 883], "part": [87, 88, 107, 123, 148, 624, 647, 648, 793, 801, 803, 833, 845, 860, 883, 1183, 1206, 1207], "fashion": [87, 88, 207, 301, 793, 801, 803, 833, 845, 883], "alpha": [87, 88, 316, 436, 437, 438, 771, 792, 793, 801, 803, 833, 845, 883, 1019, 1020, 1021, 1261], "gevent": [88, 140, 793, 883], "await": [88, 793, 883], "_geventdataframeresult": [88, 793, 883], "asynchron": [88, 793, 883], "them": [88, 107, 109, 110, 111, 113, 121, 127, 128, 129, 130, 132, 136, 137, 173, 174, 188, 208, 218, 235, 270, 301, 338, 463, 500, 556, 557, 564, 584, 699, 714, 715, 717, 718, 758, 759, 771, 793, 802, 810, 819, 829, 837, 883, 886, 914, 1024, 1083, 1119, 1120, 1261], "schedul": [88, 793, 883], "insid": [88, 793, 883], "almost": [88, 211, 287, 301, 656, 657, 658, 793, 883, 1110, 1215, 1216, 1217, 1261], "instantli": [88, 793, 883], "asyncio": [88, 793, 883], "releas": [88, 316, 531, 771, 793, 883, 1261, 1270], "greenlet": [88, 793, 883], "task": [88, 793, 883], "wrapper": [88, 793, 883], "event": [88, 793, 883], "asyncresult": [88, 793, 883], "timeout": [88, 793, 883], "collect_async": [88, 883], "set_except": [88, 793, 883], "rerais": [88, 793, 883], "polarstyp": 89, "concatmethod": 89, "vertic": [89, 174, 212, 214, 219, 251, 268, 272, 301, 614, 1173], "rechunk": [89, 107, 112, 118, 119, 124, 126, 130, 132, 135, 136, 137, 174, 301, 771, 937, 1024, 1116, 1261], "combin": [89, 177, 188, 193, 208, 235, 270, 301, 313, 327, 428, 563, 579, 584, 634, 644, 650, 651, 652, 653, 714, 715, 717, 718, 758, 759, 761, 771, 810, 819, 837, 845, 883, 996, 1010, 1134, 1193, 1203, 1209, 1210, 1211, 1212, 1261], "vertical_relax": 89, "diagon": [89, 265, 301], "diagonal_relax": 89, "vstack": [89, 174, 301], "addition": [89, 236, 301], "coerc": [89, 578, 771], "supertyp": [89, 176, 301, 315, 771, 805, 883], "mismatch": [89, 102, 128, 136, 141, 143], "find": [89, 178, 184, 301, 599, 615, 616, 771, 1154, 1175, 1261], "miss": [89, 118, 119, 132, 175, 301, 347, 436, 437, 438, 450, 472, 474, 520, 771, 804, 883, 1019, 1020, 1021, 1251, 1261], "stack": [89, 196, 272, 301], "don": [89, 188, 211, 266, 268, 301, 316, 376, 494, 531, 564, 771, 810, 853, 883, 886, 954, 1017, 1077, 1110, 1155, 1251, 1261], "auto": [89, 107, 109, 110, 111, 113, 127, 128, 130, 136, 137, 265, 301, 428, 883, 996, 1010, 1270], "logic": [89, 211, 287, 301, 304, 312, 314, 531, 677, 687, 689, 736, 771, 797, 818, 841, 871, 883, 890, 891, 1110, 1244, 1261, 1265], "align_fram": 89, "pattern": [89, 118, 119, 132, 135, 136, 137, 205, 301, 537, 615, 616, 617, 618, 623, 624, 625, 626, 639, 640, 641, 871, 886, 1153, 1156, 1174, 1175, 1176, 1177, 1182, 1183, 1184, 1185, 1198, 1199, 1200, 1261], "collis": 89, "need": [89, 114, 118, 119, 121, 188, 189, 191, 192, 235, 238, 247, 260, 301, 520, 584, 603, 659, 719, 744, 747, 762, 771, 810, 811, 813, 814, 837, 883, 1162, 1218, 1261, 1270], "sure": [89, 107, 112, 118, 119, 124, 126, 130, 188, 189, 191, 192, 229, 235, 301, 584, 771, 810, 811, 813, 814, 837, 883], "contigu": [89, 107, 112, 118, 119, 124, 126, 130, 132, 135, 136, 137, 229, 301], "relev": 89, "df_h1": 89, "l1": 89, "l2": 89, "df_h2": 89, "r1": 89, "r2": 89, "r3": 89, "df_d1": 89, "df_d2": 89, "df_a1": 89, "df_a2": 89, "df_a3": 89, "enable_string_cach": 90, "stringcach": [90, 91, 207, 301, 783, 931, 933], "reliabl": [90, 91], "wai": [90, 91, 107, 109, 110, 111, 113, 127, 128, 136, 187, 206, 225, 249, 279, 301, 564, 568, 611, 623, 702, 767, 771, 809, 832, 847, 863, 871, 883, 1182], "until": [90, 209, 301, 636, 637, 665, 1195, 1196, 1224], "deprec": [91, 92, 157, 178, 181, 188, 189, 190, 191, 192, 197, 212, 214, 219, 232, 246, 251, 254, 276, 281, 301, 316, 360, 361, 371, 372, 373, 374, 375, 389, 391, 395, 399, 402, 404, 409, 413, 416, 428, 431, 466, 470, 473, 478, 490, 503, 518, 527, 528, 530, 570, 585, 602, 617, 628, 632, 633, 634, 635, 638, 643, 644, 650, 656, 658, 670, 673, 674, 685, 691, 702, 711, 712, 714, 716, 734, 771, 810, 811, 812, 813, 814, 823, 844, 851, 861, 865, 883, 893, 940, 941, 950, 951, 952, 953, 955, 967, 969, 973, 980, 983, 986, 991, 995, 996, 998, 1010, 1013, 1042, 1046, 1048, 1051, 1052, 1058, 1060, 1062, 1073, 1086, 1101, 1109, 1128, 1139, 1155, 1157, 1161, 1176, 1187, 1191, 1192, 1193, 1194, 1197, 1202, 1203, 1209, 1215, 1217, 1233, 1234, 1251, 1261], "sinc": [91, 122, 133, 157, 159, 178, 181, 188, 189, 190, 191, 192, 197, 212, 214, 219, 232, 246, 251, 254, 264, 276, 281, 301, 316, 360, 361, 371, 372, 373, 374, 375, 389, 391, 393, 395, 399, 402, 404, 409, 413, 416, 428, 431, 466, 470, 473, 478, 490, 503, 518, 527, 528, 530, 570, 585, 602, 617, 628, 632, 633, 634, 635, 638, 643, 644, 650, 656, 658, 670, 673, 674, 685, 691, 711, 712, 714, 716, 725, 734, 771, 787, 810, 811, 812, 813, 814, 823, 844, 847, 851, 852, 861, 865, 883, 893, 940, 941, 950, 951, 952, 953, 955, 967, 969, 971, 973, 980, 983, 986, 991, 995, 996, 998, 1010, 1013, 1042, 1046, 1048, 1051, 1052, 1058, 1060, 1062, 1073, 1086, 1101, 1109, 1128, 1139, 1155, 1157, 1161, 1176, 1187, 1191, 1192, 1193, 1194, 1197, 1202, 1203, 1209, 1215, 1217, 1233, 1234, 1251, 1261], "19": [91, 123, 140, 157, 178, 181, 188, 189, 190, 191, 192, 197, 208, 212, 214, 219, 232, 235, 246, 251, 254, 281, 301, 316, 360, 361, 371, 372, 373, 374, 375, 385, 391, 395, 399, 402, 404, 409, 413, 414, 416, 428, 466, 470, 473, 478, 490, 503, 518, 527, 528, 530, 570, 584, 585, 587, 588, 590, 602, 617, 628, 632, 633, 634, 635, 638, 643, 644, 650, 656, 658, 659, 670, 673, 674, 691, 711, 712, 714, 716, 734, 771, 810, 811, 812, 813, 814, 819, 823, 837, 844, 851, 865, 883, 893, 940, 941, 950, 951, 952, 953, 955, 963, 969, 973, 980, 983, 986, 991, 995, 996, 998, 1010, 1042, 1046, 1048, 1051, 1052, 1058, 1060, 1062, 1073, 1086, 1101, 1109, 1128, 1139, 1155, 1157, 1161, 1176, 1187, 1191, 1192, 1193, 1194, 1197, 1202, 1203, 1209, 1215, 1217, 1218, 1233, 1234, 1251, 1261], "longer": [91, 118, 132], "accept": [91, 117, 118, 119, 122, 124, 126, 130, 159, 167, 187, 190, 241, 242, 245, 249, 264, 274, 275, 279, 301, 309, 359, 439, 463, 530, 564, 579, 611, 686, 688, 690, 696, 698, 699, 700, 708, 712, 721, 738, 742, 750, 753, 755, 761, 771, 787, 798, 809, 812, 839, 840, 843, 847, 852, 858, 859, 863, 883, 939, 1041, 1134, 1160, 1261], "disable_string_cach": 91, "least": [98, 148, 565, 623, 625, 771, 1124, 1182, 1184, 1261], "unexpect": [100, 102, 301, 529, 531, 771, 1110, 1261], "caus": [100, 102, 108, 118, 119, 132, 141, 156, 174, 301, 529, 771, 1024, 1261], "panic": 100, "incompat": 104, "arrai": [107, 111, 118, 119, 130, 172, 255, 260, 261, 301, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 360, 361, 367, 368, 369, 370, 371, 372, 373, 374, 375, 488, 504, 505, 506, 507, 516, 519, 523, 529, 587, 588, 590, 594, 600, 720, 771, 883, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 940, 941, 946, 947, 948, 949, 950, 951, 952, 953, 958, 1018, 1071, 1087, 1088, 1089, 1090, 1098, 1099, 1102, 1106, 1107, 1141, 1142, 1144, 1147, 1148, 1149, 1158, 1163, 1237, 1242, 1243, 1251, 1261], "chunkedarrai": [107, 221, 301], "recordbatch": [107, 206, 301], "schemadefinit": [107, 109, 110, 111, 113, 127, 128, 136, 301, 883], "schema_overrid": [107, 109, 110, 111, 112, 113, 120, 121, 123, 127, 128, 129, 206, 260, 301, 883, 886, 922], "copi": [107, 108, 156, 161, 162, 206, 255, 261, 274, 301, 442, 771, 790, 791, 858, 883, 938, 942, 1025, 1237, 1242, 1243, 1261], "closest": 107, "pair": [107, 109, 110, 111, 113, 127, 128, 136, 147, 230, 301, 835, 883, 1270], "sever": [107, 109, 110, 111, 113, 127, 128, 136, 301, 883, 1270], "form": [107, 109, 110, 111, 113, 127, 128, 136, 205, 237, 268, 301, 565, 771, 883, 1124, 1261], "dimens": [107, 109, 111, 113, 127, 128, 136, 301, 580, 771, 883, 1135, 1261], "supportsinterchang": 108, "allow_copi": [108, 156], "interchang": [108, 156], "__dataframe__": 108, "convers": [108, 123, 156, 205, 206, 237, 238, 257, 260, 261, 301, 656, 657, 658, 662, 783, 1034, 1215, 1216, 1217, 1221, 1241, 1242, 1243, 1261], "detail": [108, 120, 121, 141, 143, 156, 301, 883, 1270], "latest": [108, 122, 133, 156, 413, 414, 428, 450, 540, 656, 658, 716, 771, 995, 996, 1010, 1215, 1217], "from_panda": 108, "from_arrow": 108, "effici": [108, 120, 123, 204, 206, 301, 529, 771], "convert": [108, 112, 122, 123, 129, 133, 156, 256, 257, 258, 259, 260, 261, 263, 301, 345, 378, 387, 417, 420, 519, 520, 528, 529, 551, 574, 625, 638, 656, 657, 658, 659, 660, 662, 667, 771, 883, 921, 933, 965, 999, 1002, 1102, 1103, 1184, 1197, 1215, 1216, 1217, 1218, 1219, 1221, 1227, 1230, 1240, 1241, 1242, 1243, 1251, 1261], "panda": [108, 112, 140, 188, 261, 301, 406, 407, 677, 771, 810, 883, 988, 989, 1243, 1244, 1261], "pd": [108, 112, 677, 771, 1243, 1244, 1261], "df_pd": 108, "dfi": [108, 156], "clone": [109, 110, 111, 112, 113, 161, 260, 301, 790, 883, 938, 1241, 1242, 1251, 1261], "dimension": [109, 111, 113, 260, 301, 883, 1261], "infer_schema_length": [110, 113, 118, 119, 123, 127, 132, 136, 301, 627, 628, 883, 1186, 1187], "NOT": [110, 204, 301, 520, 538, 1269], "typic": [110, 120, 137, 211, 301, 392, 886, 970, 1110, 1261], "clearer": 110, "partial": [110, 118, 132, 301, 883], "mani": [110, 113, 120, 121, 174, 301, 627, 628, 641, 1024, 1186, 1187, 1200, 1261], "scan": [110, 113, 118, 119, 132, 133, 134, 135, 136, 137, 138, 188, 189, 191, 192, 235, 301, 584, 771, 803, 810, 811, 813, 814, 815, 822, 837, 883], "slow": [110, 113, 118, 119, 132, 316, 376, 531, 586, 771, 871, 954, 1140, 1261], "present": [110, 148, 468, 530, 652, 653, 771, 803, 883, 1109, 1251, 1261], "np": [111, 177, 260, 301, 452, 673, 771, 806, 883, 1031, 1045, 1050, 1054, 1055, 1153, 1154, 1233, 1261], "ndarrai": [111, 177, 260, 301, 452, 673, 771, 806, 883, 1031, 1153, 1154, 1157, 1233, 1242, 1261], "numpi": [111, 140, 164, 205, 237, 238, 257, 260, 261, 301, 529, 556, 557, 586, 771, 883, 1045, 1050, 1054, 1055, 1119, 1120, 1140, 1242, 1243, 1251, 1261], "columnar": [111, 113, 205, 237, 301], "interpret": [111, 113, 118, 119, 132, 301, 883], "yield": [111, 113, 118, 119, 120, 132, 172, 174, 265, 301, 529, 564, 771, 883, 1018, 1024, 1261], "conclus": [111, 113, 301, 883], "nan_to_nul": [112, 301, 883, 1261], "include_index": 112, "instal": [112, 118, 119, 121, 124, 126, 164, 260, 261, 301, 845, 883, 1243, 1261], "nan": [112, 148, 156, 175, 261, 301, 381, 382, 434, 435, 443, 454, 456, 462, 472, 474, 475, 476, 481, 526, 532, 545, 556, 557, 558, 559, 586, 679, 701, 771, 804, 883, 895, 899, 959, 960, 1026, 1054, 1055, 1119, 1120, 1140, 1242, 1243, 1261, 1270], "pd_df": 112, "pd_seri": 112, "tbl": [114, 116, 119], "reconstruct": 114, "repr": [114, 148, 150], "trim": 114, "whitespac": [114, 634, 644, 650, 651, 652, 653, 1193, 1203, 1209, 1210, 1211, 1212], "prompt": 114, "extract": [114, 385, 388, 390, 391, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 408, 409, 411, 412, 415, 416, 418, 421, 422, 423, 424, 425, 426, 427, 429, 430, 432, 568, 624, 625, 627, 628, 629, 647, 771, 963, 966, 967, 968, 969, 972, 973, 975, 979, 980, 981, 982, 983, 985, 986, 987, 990, 991, 993, 994, 997, 998, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1014, 1183, 1184, 1186, 1187, 1188], "to_init_repr": [114, 301, 1261], "truncat": [114, 118, 132, 186, 188, 191, 205, 237, 238, 257, 301, 810, 813, 833, 883], "identifi": [114, 217, 224, 266, 278, 301, 828, 853, 883], "compound": [114, 238, 301, 886], "neither": [114, 123, 129, 239, 301, 520, 1103], "source_ac": 114, "source_cha": 114, "ident": [114, 161, 162, 301, 417, 582, 583, 771, 790, 791, 883, 938, 942, 999, 1137, 1138, 1261], "timestamp": [114, 188, 191, 301, 413, 414, 428, 725, 810, 813, 883, 995, 996, 1010], "tor_id": 114, "nnel_id": 114, "\u03bc": [114, 148, 188, 205, 208, 235, 237, 238, 257, 270, 301, 383, 384, 386, 387, 388, 389, 392, 394, 398, 401, 403, 406, 407, 408, 410, 413, 414, 415, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 431, 584, 587, 588, 590, 593, 594, 595, 656, 658, 717, 718, 719, 725, 771, 810, 819, 837, 883, 886, 961, 962, 964, 965, 966, 967, 970, 971, 972, 978, 979, 985, 988, 989, 990, 992, 995, 996, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1013, 1215, 1217], "asia": [114, 886, 966, 967, 1000], "tokyo": [114, 886], "123456780": 114, "9876543210": 114, "56": [114, 675, 771], "59": [114, 147, 166, 301, 386, 403, 415, 716, 757, 758, 759, 796, 883, 886, 964, 985, 997], "663053": 114, "jst": [114, 886], "803065983": 114, "2055938745": 114, "38": [114, 148], "18": [114, 166, 218, 235, 301, 370, 414, 428, 431, 462, 478, 550, 584, 588, 590, 771, 796, 829, 833, 837, 883, 886, 1013, 1217], "050545": 114, "source_actor_id": 114, "source_channel_id": 114, "to_list": [114, 235, 301, 1174, 1185, 1261], "uint32": [115, 140, 160, 172, 277, 301, 326, 331, 332, 365, 452, 455, 482, 486, 487, 502, 578, 617, 618, 630, 631, 673, 677, 702, 729, 732, 771, 789, 862, 883, 886, 903, 907, 908, 929, 1017, 1018, 1051, 1069, 1070, 1085, 1155, 1176, 1177, 1189, 1190, 1244, 1261], "regular": [115, 205, 236, 237, 270, 277, 301, 439, 615, 617, 618, 623, 624, 625, 626, 639, 640, 721, 771, 862, 883, 886, 1174, 1176, 1177, 1182, 1183, 1184, 1185, 1198, 1199], "uint64": [115, 193, 277, 301, 331, 332, 457, 486, 487, 577, 771, 862, 883, 907, 908, 1035, 1069, 1070, 1132, 1261], "bigidx": 115, "read": [116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 174, 301, 451, 529, 761, 771, 797, 803, 883, 1024, 1261], "over": [116, 118, 119, 120, 122, 132, 148, 157, 174, 204, 205, 206, 211, 236, 237, 238, 265, 278, 281, 287, 301, 316, 376, 444, 528, 529, 531, 539, 541, 542, 543, 551, 575, 587, 588, 589, 590, 591, 593, 594, 595, 691, 705, 706, 709, 710, 723, 734, 735, 736, 746, 771, 865, 871, 886, 893, 954, 1024, 1110, 1141, 1142, 1144, 1148, 1261], "fetch": [116, 132, 209, 301, 790, 792, 815, 822, 883], "ideal": 116, "read_csv_batch": [116, 784], "tpch": [116, 119], "tables_scale_100": [116, 119], "lineitem": [116, 119, 121], "try_parse_d": [116, 118, 119, 132], "n_row": [117, 118, 119, 124, 126, 130, 132, 135, 136, 137, 206, 301, 803, 883], "handler": [117, 118, 119, 123, 124, 125, 126, 127, 128, 129, 130, 131, 797, 883], "builtin": [117, 118, 119, 123, 124, 125, 126, 127, 128, 129, 130, 131, 797, 883], "stop": [117, 118, 119, 124, 126, 130, 132, 135, 136, 137, 587, 588, 590, 593, 594, 595, 771, 962, 965, 971, 972, 979, 982, 985, 990, 996, 1001], "textio": 118, "has_head": [118, 119, 123, 132], "new_column": [118, 119, 123, 132, 231, 232, 301], "comment_prefix": [118, 119, 132], "skip_row": [118, 119, 132], "missing_utf8_is_empty_str": [118, 119, 132], "ignore_error": [118, 119, 128, 132, 136], "n_thread": [118, 119], "8192": 118, "csvencod": [118, 119, 132], "low_memori": [118, 119, 130, 132, 136, 137], "skip_rows_after_head": [118, 119, 132], "row_index_nam": [118, 119, 124, 126, 130, 132, 135, 136, 137], "row_index_offset": [118, 119, 124, 126, 130, 132, 135, 136, 137], "sample_s": [118, 119], "eol_char": [118, 119, 132], "raise_if_empti": [118, 119, 123, 129, 132], "truncate_ragged_lin": [118, 132], "fsspec": [118, 119, 124, 126, 130, 133, 134, 135, 137, 140], "remot": [118, 119, 124, 126], "autogener": [118, 119, 132], "column_x": [118, 119, 132], "enumer": [118, 119, 132, 206, 301], "shorter": [118, 119, 132, 520, 729, 730], "comment": [118, 119, 132], "instanc": [118, 119, 130, 132, 137, 148, 150, 154, 160, 174, 180, 301, 354, 540, 587, 588, 589, 590, 591, 593, 594, 595, 705, 709, 723, 767, 771, 789, 824, 861, 862, 883, 929, 1024, 1261], "escap": [118, 119, 121, 132], "complet": [118, 120, 132, 1242, 1261], "wherea": [118, 120, 132, 235, 301, 414, 428, 556, 557, 584, 771, 815, 822, 837, 883, 996, 1010, 1119, 1120, 1261], "would": [118, 119, 132, 326, 337, 498, 529, 531, 539, 575, 696, 771, 902, 913, 1081, 1130, 1242, 1261], "prefer": [118, 119, 122, 132, 151, 174, 205, 211, 236, 237, 287, 301, 439, 531, 771, 883, 1024, 1110, 1261, 1270], "treat": [118, 119, 132, 615, 618, 626, 639, 640, 761, 1174, 1177, 1185, 1198, 1199], "10000": [118, 206, 301], "issu": [118, 119, 123, 132, 369, 370, 671, 771, 948, 949, 1231, 1261], "iso8601": [118, 119, 132], "succe": [118, 119, 132], "cpu": [118, 119], "system": [118, 119], "wrongli": 118, "done": [118, 119, 132, 138, 154, 158, 160, 208, 301, 315, 317, 354, 564, 771, 786, 789, 819, 883, 929, 1261], "buffer": [118, 119, 120, 172, 205, 301, 1018, 1261], "modifi": [118, 119, 132, 152, 154, 174, 196, 204, 205, 272, 301, 327, 413, 431, 615, 623, 624, 626, 639, 771, 892, 995, 1013, 1024, 1174, 1182, 1183, 1185, 1198, 1220, 1222, 1223, 1261], "upper": [118, 119, 120, 172, 188, 191, 301, 359, 360, 459, 463, 520, 682, 693, 714, 715, 717, 718, 758, 759, 771, 810, 813, 883, 939, 940, 1018, 1037, 1041, 1108, 1248, 1261], "bound": [118, 119, 172, 188, 191, 301, 337, 359, 360, 361, 463, 497, 498, 518, 520, 525, 682, 693, 714, 715, 717, 718, 758, 759, 771, 810, 813, 883, 913, 939, 940, 941, 1018, 1041, 1080, 1081, 1101, 1108, 1248, 1261], "lossi": [118, 119, 132], "decod": [118, 119, 627], "expens": [118, 119, 130, 132, 136, 137, 149, 151, 188, 189, 191, 192, 205, 211, 235, 236, 237, 238, 265, 266, 301, 316, 531, 584, 771, 796, 810, 811, 813, 814, 837, 853, 883, 1024, 1110, 1261, 1270], "aggreg": [118, 119, 130, 180, 187, 188, 190, 191, 212, 214, 216, 219, 222, 226, 227, 228, 235, 250, 251, 268, 271, 279, 280, 283, 285, 301, 310, 445, 460, 527, 529, 531, 564, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 687, 688, 689, 690, 705, 706, 707, 708, 709, 710, 711, 712, 723, 728, 737, 738, 741, 742, 746, 754, 755, 771, 810, 811, 813, 814, 824, 825, 826, 827, 830, 831, 834, 837, 848, 849, 856, 863, 864, 867, 869, 883, 1038, 1139, 1140, 1141, 1142, 1144, 1147, 1148, 1149, 1261], "parser": 118, "regard": [118, 701], "sens": [118, 124, 126, 135, 218, 270, 301, 564, 771, 829, 883], "particular": [118, 124, 126, 135, 172, 301, 1018, 1261], "usernam": [118, 121, 124, 126, 135], "password": [118, 121, 124, 126, 135], "skip": [118, 119, 123, 130, 132, 137, 268, 301, 893, 1110, 1261], "offset": [118, 119, 123, 124, 126, 130, 132, 135, 136, 137, 182, 188, 189, 191, 192, 235, 248, 254, 270, 276, 277, 301, 383, 392, 406, 407, 410, 414, 428, 453, 514, 584, 609, 645, 674, 771, 808, 810, 811, 813, 814, 837, 846, 851, 861, 862, 883, 961, 970, 988, 989, 992, 996, 1010, 1032, 1097, 1169, 1204, 1217, 1234, 1261], "sampl": [118, 119, 287, 301, 608, 771, 871, 1168, 1261], "estim": [118, 119, 158, 172, 301, 317, 437, 438, 479, 692, 771, 786, 883, 1018, 1020, 1021, 1064, 1261], "alloc": [118, 119, 172, 229, 301, 771, 1018, 1261], "encount": [118, 119, 132, 188, 191, 301, 556, 557, 627, 629, 701, 705, 723, 771, 810, 813, 883, 1119, 1120, 1186, 1188, 1261], "window": [118, 119, 132, 188, 189, 191, 192, 235, 301, 376, 414, 428, 436, 437, 438, 529, 531, 564, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 699, 748, 749, 771, 810, 811, 813, 814, 837, 883, 954, 996, 1010, 1019, 1020, 1021, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1261], "rn": [118, 119, 132], "go": [118, 119, 132, 260, 301, 621, 1180], "nodataerror": [118, 119, 123, 129, 132, 783], "lazili": [118, 119, 132, 133, 134, 135, 136, 137, 793, 883], "glob": [118, 119, 132, 135, 136, 137], "continu": [118, 130, 377, 572, 608, 771, 955, 1128, 1168, 1261], "benchmark": [118, 130], "demonstr": 118, "birthdai": 118, "alic": 118, "1995": 118, "bob": [118, 218, 301, 829, 883], "charli": 118, "2002": [118, 396, 410, 974, 992, 1014], "08": [118, 141, 142, 143, 144, 148, 166, 235, 301, 386, 406, 407, 414, 584, 656, 717, 719, 771, 796, 837, 883, 886, 996, 1010, 1215], "50000": 119, "batchedcsvread": [119, 783], "upon": 119, "creation": 119, "gather": [119, 182, 254, 301, 453, 518, 673, 674, 771, 808, 851, 883, 1032, 1101, 1233, 1234, 1261], "next_batch": 119, "big": 119, "interest": [119, 417, 420, 999, 1002], "seen_group": 119, "big_fil": 119, "df_current_batch": 119, "partition_df": 119, "partition_bi": [119, 206, 301], "as_dict": [119, 224, 301], "fh": 119, "write_csv": [119, 132, 301], "els": [119, 761], "connectionorcursor": 120, "iter_batch": 120, "execute_opt": 120, "cursor": 120, "client": 120, "odbc": 120, "establish": 120, "resultset": 120, "manner": 120, "veri": [120, 205, 265, 301, 531, 771, 871], "poor": 120, "trip": 120, "still": [120, 121], "exact": [120, 146, 148, 150, 247, 301, 317, 654, 655, 656, 657, 658, 679, 771, 1215, 1216, 1217], "incom": 120, "read_arrow_batches_from_odbc": 120, "read_database_uri": 120, "wide": [120, 186, 217, 268, 301, 828, 883], "snowflak": [120, 121], "variou": [120, 301, 771, 883, 886, 1261], "facil": 120, "initialis": [120, 154, 883, 1269], "flight": 120, "flightsql": 120, "flight_sql": 120, "about": [120, 608, 615, 623, 624, 626, 639, 771, 1168, 1174, 1182, 1183, 1185, 1198, 1261, 1270], "notabl": 120, "dremio": 120, "influxdb": 120, "notic": [120, 301, 883, 1261], "dbapi2": 120, "connectorx": [120, 121, 140], "optimis": [120, 211, 238, 287, 301, 883, 1110, 1156, 1261, 1270], "translat": 120, "conn": 120, "url": [120, 121, 130, 137, 623, 625, 1182, 1184], "test_data": 120, "user_conn": 120, "normalised_scor": 120, "uint8": [120, 145, 147, 160, 259, 260, 268, 301, 369, 370, 579, 671, 686, 771, 789, 883, 886, 948, 949, 1134, 1231, 1261, 1270], "parameteris": 120, "metric": 120, "alchemy_conn": 120, "qmark": 120, "variad": 120, "1000": [120, 123, 172, 259, 277, 301, 317, 771, 862, 883, 1005, 1106, 1240, 1261, 1270], "localhost": 120, "5432": 120, "uid": 120, "usr": 120, "pwd": 120, "max_text_s": 120, "max_binary_s": 120, "do_someth": 120, "partition_on": 121, "partition_rang": 121, "partition_num": 121, "dbreadengin": 121, "raw": 121, "warehous": 121, "role": 121, "caller": [121, 218, 301, 520, 824, 829, 865, 871, 883], "respons": [121, 218, 301, 829, 883], "come": [121, 188, 301, 406, 407, 479, 520, 771, 784, 810, 882, 883, 988, 989, 1064, 1261], "transfer": 121, "document": [121, 123, 301, 304, 417, 420, 629, 656, 657, 658, 662, 767, 933, 999, 1002, 1188, 1215, 1216, 1217, 1221, 1261, 1265], "redshift": 121, "mysql": 121, "mariadb": 121, "clickhous": 121, "oracl": 121, "bigqueri": 121, "pleas": [121, 188, 301, 304, 702, 714, 719, 810, 883, 1261, 1265], "github": 121, "sfu": 121, "connector": 121, "destin": 121, "develop": [121, 148, 150], "read_databas": 121, "usual": [121, 383, 961], "urllib": 121, "quote_plu": 121, "word": [121, 652, 653], "3f": [121, 656, 658, 1215, 1217], "20word": 121, "explicitli": [121, 146, 148, 154, 753, 782], "test_tabl": 121, "compani": 121, "testdb": 121, "public": [121, 301, 771, 783, 883, 1261], "myrol": 121, "delta_table_opt": [122, 133], "root": [122, 133, 357, 478, 528, 541, 550, 551, 552, 553, 554, 555, 570, 612, 670, 770, 771, 935, 1171, 1261], "absolut": [122, 133, 134, 141, 142, 143, 144, 308, 436, 437, 438, 771, 888, 1019, 1020, 1021, 1261], "avoid": [122, 237, 301, 311, 771], "year": [122, 133, 188, 208, 235, 270, 301, 396, 397, 410, 411, 414, 428, 429, 584, 587, 588, 589, 590, 591, 593, 594, 595, 713, 714, 715, 716, 717, 718, 758, 759, 771, 810, 819, 837, 883, 974, 975, 992, 993, 996, 1010, 1011], "2021": [122, 133, 160, 166, 186, 188, 270, 301, 656, 733, 789, 796, 810, 883, 886, 966, 967, 975, 1000, 1060, 1215, 1261], "aw": [122, 130, 133, 137], "googl": [122, 133, 134], "service_account": [122, 133], "service_account_json_absolute_path": [122, 133], "az": [122, 133, 134], "adl": [122, 133, 134], "abf": [122, 133, 134], "azure_storage_account_nam": [122, 133, 134], "azure_storage_account_kei": [122, 133, 134], "without_fil": [122, 133, 134], "track": [122, 133, 134, 211, 301, 520, 1269], "sheet_id": [123, 129], "sheet_nam": [123, 129], "xlsx2csv": [123, 140], "openpyxl": [123, 140], "pyxlsb": [123, 140], "xlsx2csv_option": 123, "read_csv_opt": 123, "spreadsheet": [123, 129, 226, 301, 783], "xlsb": 123, "sheetnam": [123, 129], "nor": [123, 129, 239, 301], "fastest": 123, "read_csv": [123, 132], "refin": 123, "significantli": [123, 211, 287, 301, 1110, 1261, 1270], "potenti": [123, 132, 135, 136, 205, 236, 238, 301, 550, 796, 883], "unabl": 123, "julian": 123, "skip_empty_lin": 123, "influenc": [123, 803, 824, 883], "pipelin": 123, "correct": [123, 129, 437, 438, 479, 588, 589, 590, 591, 592, 593, 595, 608, 771, 823, 824, 883, 1020, 1021, 1064, 1146, 1168, 1261], "known": [123, 148, 520, 587, 588, 589, 590, 591, 593, 594, 595, 771, 865, 871, 1103], "better": [123, 211, 260, 287, 301, 531, 631, 771, 871, 1153, 1156, 1190, 1261], "detect": 123, "memory_map": [124, 130, 135], "greatli": [124, 135], "repeat": [124, 135, 576, 578, 744, 762, 771], "That": [124, 823, 824, 883], "filenam": 124, "my_fil": 124, "write_ipc": [124, 301], "read_ndjson": 127, "becaus": [128, 136, 172, 188, 191, 209, 211, 268, 287, 301, 494, 810, 813, 871, 883, 893, 1018, 1077, 1110, 1261], "openoffic": 129, "od": 129, "parallelstrategi": [130, 137], "use_statist": [130, 137], "hive_partit": [130, 137], "retri": [130, 137], "row_group": [130, 137], "hive": [130, 137], "prune": [130, 137, 824, 883], "gcp": [130, 134, 137], "stabl": [130, 159, 164, 166, 193, 239, 264, 301, 457, 524, 771, 787, 796, 828, 847, 852, 883, 1035, 1261], "read_tabl": 130, "scan_parquet": [130, 138], "scan_pyarrow_dataset": [130, 137], "contribut": [130, 589, 591, 593, 595, 771], "with_column_nam": 132, "push": [132, 135, 136, 137, 138], "down": [132, 135, 136, 137, 138, 448, 771, 1030, 1261], "therebi": [132, 135, 136], "realloc": [132, 135, 136, 174, 301, 1024, 1261], "headerless": 132, "my_long_fil": 132, "thing": [132, 139], "less": [132, 208, 301, 481, 526, 529, 648, 771, 819, 883, 1207, 1270], "breezah": 132, "languag": [132, 188, 208, 235, 270, 301, 410, 414, 428, 584, 587, 588, 589, 590, 591, 593, 594, 595, 714, 715, 717, 718, 758, 759, 771, 810, 819, 837, 883, 992, 996, 1010], "hard": [132, 823, 824, 883], "mydf": 132, "lambda": [132, 157, 180, 211, 225, 226, 230, 287, 301, 316, 436, 437, 438, 520, 527, 528, 529, 531, 551, 705, 706, 723, 735, 736, 746, 771, 823, 824, 832, 835, 871, 883, 893, 1019, 1020, 1021, 1103, 1110, 1261], "lower": [132, 166, 188, 191, 228, 293, 301, 359, 361, 463, 525, 528, 551, 573, 577, 591, 693, 714, 715, 717, 718, 745, 758, 759, 771, 796, 810, 813, 834, 877, 883, 939, 941, 956, 1041, 1108, 1129, 1132, 1145, 1248, 1261], "simpli": [132, 564, 705, 723, 771], "idx": [132, 188, 206, 277, 301, 337, 520, 810, 862, 883, 1103, 1185], "uint16": [132, 369, 370, 671, 771, 886, 948, 949, 1231, 1261], "u16": [132, 148, 1270], "eu": [133, 134], "central": [133, 134, 479, 608, 771, 1064, 1168, 1261], "iceberg": [134, 783], "pyiceberg": [134, 140], "metadata": [134, 188, 189, 191, 192, 235, 301, 584, 771, 810, 811, 813, 814, 837, 883], "secret": [134, 137], "adlf": 134, "my": [134, 138, 663, 1222], "oauth": 134, "token": 134, "ya29": 134, "dr": 134, "afm": 134, "py": 134, "impl": 134, "fsspecfileio": 134, "give": [135, 136, 217, 266, 301, 393, 479, 578, 679, 771, 783, 828, 853, 883, 971, 1064, 1261], "read_parquet": 137, "east": 137, "allow_pyarrow_filt": 138, "comparison": 138, "dset": 138, "folder": 138, "04": [138, 160, 166, 188, 270, 301, 386, 387, 406, 407, 413, 414, 417, 420, 421, 422, 425, 427, 431, 587, 588, 590, 593, 594, 595, 656, 717, 719, 771, 789, 796, 810, 883, 886, 965, 979, 985, 988, 989, 990, 995, 999, 1002, 1003, 1004, 1007, 1009, 1013, 1215], "seed": [139, 193, 239, 301, 457, 508, 575, 598, 604, 771, 1035, 1091, 1130, 1152, 1164, 1261], "shuffl": [139, 239, 287, 301, 508, 598, 771, 871, 1091, 1152, 1261], "stdout": [140, 154, 186, 301, 542], "platform": 140, "maco": 140, "14": [140, 148, 166, 178, 197, 211, 212, 214, 219, 232, 251, 254, 283, 285, 288, 289, 290, 291, 292, 293, 294, 301, 371, 372, 373, 374, 375, 383, 388, 389, 394, 398, 401, 403, 408, 415, 418, 462, 518, 575, 638, 673, 674, 711, 712, 758, 771, 796, 867, 869, 872, 873, 874, 875, 876, 877, 878, 883, 886, 950, 951, 952, 953, 961, 996, 1042, 1062, 1101, 1157, 1197, 1233, 1234, 1251, 1261], "arm64": 140, "arm": 140, "64bit": [140, 577, 771, 1132, 1261], "main": [140, 793, 883], "oct": 140, "13": [140, 148, 161, 162, 166, 175, 176, 185, 198, 209, 221, 235, 274, 283, 285, 288, 289, 290, 291, 292, 293, 294, 301, 311, 388, 389, 391, 394, 395, 398, 399, 401, 402, 403, 404, 408, 409, 415, 416, 418, 539, 541, 584, 659, 699, 705, 708, 723, 755, 760, 771, 790, 791, 796, 804, 805, 821, 837, 858, 867, 869, 872, 873, 874, 875, 876, 877, 878, 883, 969, 973, 980, 983, 986, 991, 996, 998, 1010, 1011, 1048, 1051, 1058, 1060, 1110, 1218, 1261], "54": [140, 440, 771, 1270], "clang": 140, "1500": [140, 149], "adbc_driver_manag": 140, "cloudpickl": 140, "hvplot": [140, 301, 304, 1261, 1265], "matplotlib": [140, 833, 845, 883], "26": [140, 166, 172, 301, 392, 429, 796, 883, 970], "pydant": 140, "check_row_ord": [141, 142], "check_column_ord": [141, 142], "check_dtyp": [141, 142, 143, 144], "check_exact": [141, 142, 143, 144], "rtol": [141, 142, 143, 144], "atol": [141, 142, 143, 144], "categorical_as_str": [141, 142, 143, 144], "assert": [141, 142, 143, 144, 146, 148, 150, 235, 301, 783, 886], "assertionerror": [141, 142, 143, 144], "compar": [141, 142, 143, 144, 171, 181, 301, 434, 435, 454, 456, 481, 526, 558, 559, 771, 933, 1017, 1155, 1261], "unsort": [141, 142], "exactli": [141, 142, 143, 144, 147, 148, 150, 647, 648, 654, 655, 719, 1163, 1206, 1207, 1213, 1214, 1261], "toler": [141, 142, 143, 144, 208, 301, 819, 883], "inexact": [141, 142, 143, 144], "share": [141, 142, 143, 144, 172, 301, 771, 1018, 1261], "assert_series_equ": [141, 144, 1017, 1261, 1270], "assert_frame_not_equ": [141, 144], "pytest": [141, 143], "worthwhil": [141, 143], "shorten": [141, 143], "traceback": [141, 142, 143, 144], "tb": [141, 143, 172, 301, 1018, 1261], "short": [141, 143], "tend": [141, 143], "unhelpfulli": [141, 143], "assert_frame_equ": [142, 143, 171, 301, 1270], "assert_series_not_equ": [142, 143], "check_nam": [143, 144], "searchstrategi": [145, 147, 148, 150], "null_prob": [145, 148, 150], "percentag": [145, 148, 150, 565, 771, 1124, 1261], "chanc": [145, 148, 150, 1270], "independ": [145, 146, 148, 150], "flag": [145, 301, 600, 615, 623, 624, 626, 639, 771, 801, 823, 824, 883, 1158, 1174, 1182, 1183, 1185, 1198, 1261], "hypothesi": [145, 146, 147, 148, 149, 150, 1270], "sampled_from": [145, 1270], "unique_small_int": 145, "ccy": [145, 1270], "gbp": [145, 1270], "eur": [145, 186, 301, 1270], "jpy": [145, 1270], "min_col": [146, 148], "max_col": [146, 148], "standalon": [146, 148, 886], "mincol": 146, "assign": [146, 188, 301, 520, 564, 575, 647, 648, 771, 810, 883, 1103, 1130, 1206, 1207, 1261], "minimum": [146, 147, 148, 150, 180, 219, 220, 301, 436, 437, 438, 545, 557, 567, 575, 741, 742, 771, 830, 883, 984, 1019, 1020, 1021, 1120, 1126, 1130, 1261, 1270], "especi": [146, 583, 771, 803, 883, 1138, 1261], "test_unique_xyz": 146, "assert_someth": 146, "punctuat": 146, "test_special_char_colname_init": 146, "inner_dtyp": [147, 150], "select_from": [147, 150], "min_siz": [147, 148, 150, 1270], "max_siz": [147, 148, 150, 1270], "anoth": [147, 171, 181, 187, 301, 376, 384, 497, 518, 535, 538, 579, 626, 771, 809, 860, 883, 954, 962, 1017, 1024, 1080, 1134, 1155, 1185, 1261], "randomli": 147, "innermost": 147, "2x": 147, "lst": 147, "11330": 147, "24030": 147, "116": 147, "zz": [147, 150, 166, 301, 796, 883], "uint8_pair": [147, 1270], "uint": [147, 1270], "zip": [147, 1270], "131": 147, "176": 147, "149": [147, 1270], "include_col": 148, "allow_infin": [148, 150], "allowed_dtyp": [148, 150, 1270], "excluded_dtyp": [148, 150], "describ": [148, 186, 301, 883, 1261], "desir": [148, 431, 520, 1013, 1103, 1261], "n_chunk": [148, 150, 301, 892, 1024, 1261], "randomis": 148, "onto": 148, "pct": 148, "preced": [148, 886], "disallow": [148, 150], "inf": [148, 150, 323, 377, 459, 465, 469, 572, 679, 771, 899, 945, 955, 1037, 1045, 1050, 1108, 1124, 1128, 1248, 1261], "exclud": [148, 150, 188, 301, 367, 370, 463, 771, 810, 883, 1041, 1060, 1261], "usag": [148, 150, 247, 301, 886, 1163, 1261], "deploi": [148, 150], "characterist": [148, 150], "concret": [148, 150], "test_repr": 148, "isinst": [148, 150, 301], "0x11f561580": 148, "0565": 148, "34715": 148, "5844": 148, "33": [148, 166, 218, 301, 596, 771, 796, 829, 883, 1145, 1261], "076854": 148, "3382": 148, "17": [148, 279, 586, 596, 725, 758, 771, 863, 943, 945, 996, 1140, 1261, 1270], "48662": 148, "7540": 148, "836271": 148, "4063": 148, "06": [148, 160, 270, 301, 386, 405, 412, 413, 414, 415, 428, 429, 789, 883, 886, 995, 996, 1010], "39092": 148, "1889": 148, "41": [148, 166, 301, 594, 771, 796, 883, 1270], "874455": 148, "15836": 148, "1755e": 148, "575050513": 148, "profil": [149, 151, 792, 883], "balanc": [149, 151, 1270], "set_environ": 149, "polars_hypothesis_profil": [149, 151], "constructor": 150, "max_data_s": 150, "normal": [150, 188, 301, 433, 479, 608, 771, 810, 883, 1016, 1064, 1168, 1261], "test_repr_is_valid_str": 150, "experi": 150, "create_list_strategi": [150, 1270], "polars_max_thread": 152, "behind": 152, "lock": 152, "reason": [152, 166, 301, 520, 529, 771, 796, 883], "temporarili": [152, 154, 188, 189, 191, 192, 235, 301, 584, 771, 810, 811, 813, 814, 837, 883], "pyspark": 152, "udf": [152, 157, 211, 225, 281, 287, 301, 316, 531, 568, 691, 736, 771, 832, 865, 871, 883, 893, 1110, 1261], "recommend": [152, 166, 205, 225, 301, 796, 883, 886], "easi": [154, 1270], "restor": 154, "restore_default": 154, "relat": [154, 886], "set_tbl_row": 154, "whatev": 154, "were": [154, 212, 214, 219, 251, 301, 579, 767, 771, 1134, 1261], "enter": 154, "advantag": [154, 225, 301], "set_": 154, "set_verbos": 154, "do_various_th": 154, "cleaner": 154, "breviti": 154, "vein": 154, "durat": [154, 208, 270, 301, 383, 391, 392, 395, 399, 402, 404, 409, 416, 421, 422, 423, 424, 425, 426, 427, 431, 677, 714, 715, 717, 718, 758, 759, 771, 819, 883, 886, 961, 969, 970, 973, 980, 983, 986, 991, 998, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1013, 1244, 1261], "set_ascii_t": 154, "write_ascii_frame_to_stdout": 154, "sy": 154, "nan_as_nul": 156, "polarsdatafram": 156, "notimplementederror": 156, "num_row": 156, "get_column": [156, 262, 301], "dtypekind": 156, "inference_s": [157, 211, 301], "256": [157, 211, 301, 1124, 1261], "map_row": [157, 301], "tri": [157, 211, 301], "approxim": [158, 301, 317, 692, 771, 786, 883, 1270], "hyperloglog": [158, 301, 317, 692, 771, 786, 883], "algorithm": [158, 301, 317, 616, 641, 692, 771, 786, 883, 1175, 1200], "cardin": [158, 301, 317, 692, 771, 786, 883], "k": [159, 238, 264, 265, 301, 353, 366, 479, 678, 771, 787, 852, 883, 928, 1064, 1245, 1261], "intoexpr": [159, 187, 188, 189, 190, 191, 192, 235, 241, 242, 245, 249, 264, 274, 275, 279, 301, 315, 334, 348, 351, 352, 459, 463, 490, 491, 509, 510, 511, 512, 564, 579, 599, 601, 602, 611, 616, 641, 646, 647, 648, 654, 655, 688, 690, 696, 698, 699, 700, 701, 703, 705, 708, 709, 712, 716, 723, 738, 742, 747, 750, 753, 755, 771, 787, 809, 810, 811, 812, 813, 814, 837, 839, 840, 843, 847, 852, 858, 859, 863, 883, 910, 923, 926, 927, 1041, 1074, 1134, 1160, 1205, 1206, 1207, 1213, 1214, 1261], "nulls_last": [159, 249, 264, 301, 326, 343, 515, 610, 771, 787, 847, 852, 883, 902, 919, 1098, 1170, 1261], "smallest": [159, 264, 301, 353, 771, 787, 852, 883, 928, 1261], "largest": [159, 264, 301, 678, 771, 787, 852, 883, 1245, 1261], "bottom": [159, 301, 787, 883], "wors": [159, 264, 301, 787, 847, 852, 883], "search": [159, 208, 264, 301, 520, 616, 641, 787, 819, 847, 852, 883, 1175, 1200], "top_k": [159, 301, 353, 771, 787, 883, 928, 1261], "columnnameorselector": [160, 167, 169, 217, 224, 226, 238, 258, 266, 267, 268, 301, 789, 798, 799, 828, 853, 854, 883], "strict": [160, 301, 349, 354, 615, 619, 626, 638, 656, 657, 658, 660, 662, 771, 789, 883, 924, 929, 1017, 1155, 1174, 1178, 1185, 1197, 1215, 1216, 1217, 1219, 1221, 1261], "due": [160, 188, 208, 235, 238, 270, 301, 311, 354, 392, 410, 414, 428, 478, 550, 552, 553, 554, 555, 570, 584, 587, 588, 589, 590, 591, 593, 594, 595, 670, 714, 715, 717, 718, 758, 759, 771, 789, 810, 819, 837, 883, 929, 970, 992, 996, 1010, 1261], "overflow": [160, 301, 354, 369, 370, 638, 660, 671, 771, 789, 883, 929, 948, 949, 1197, 1219, 1231, 1261], "2020": [160, 166, 186, 235, 301, 304, 387, 392, 413, 417, 420, 421, 422, 423, 424, 425, 426, 427, 584, 656, 657, 658, 771, 789, 796, 837, 883, 886, 965, 970, 995, 999, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1215, 1216, 1217], "u8": [160, 258, 259, 268, 301, 579, 686, 771, 789, 883, 886, 1134, 1238, 1261, 1270], "to_dict": [160, 301, 789, 883], "as_seri": [160, 256, 301, 789, 883, 955, 1128, 1261], "tempor": [160, 188, 189, 191, 192, 205, 235, 237, 238, 257, 301, 359, 463, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 771, 783, 789, 810, 811, 813, 814, 837, 883, 886, 939, 1041, 1060, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1147, 1148, 1149, 1261], "greater": [161, 208, 301, 454, 456, 608, 636, 637, 648, 665, 771, 819, 883, 1168, 1195, 1196, 1207, 1224, 1261], "cheap": [161, 162, 242, 275, 301, 790, 791, 840, 859, 883, 938, 942, 1261], "deepcopi": [161, 301, 790, 883, 938, 1261], "appl": [163, 196, 207, 230, 233, 256, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 301, 581, 621, 649, 771, 818, 835, 866, 867, 869, 870, 872, 873, 874, 875, 876, 877, 878, 883, 1180, 1208], "banana": [163, 256, 283, 285, 288, 289, 290, 291, 292, 293, 294, 301, 581, 621, 649, 771, 867, 869, 872, 873, 874, 875, 876, 877, 878], "orang": [163, 282, 283, 285, 286, 288, 289, 291, 293, 294, 301, 866, 867, 869, 870, 872, 873, 875, 877, 878], "pairwis": [164, 301], "pearson": [164, 301, 479, 608, 701, 771, 1064, 1168, 1261], "correl": [164, 301, 701, 748], "coeffici": [164, 301, 608, 771, 1168, 1261], "corrcoef": [164, 301], "percentil": [166, 301, 796, 883, 956, 1261], "interpol": [166, 228, 293, 301, 444, 534, 573, 591, 745, 771, 796, 834, 877, 883, 956, 1129, 1145, 1261], "rollinginterpolationmethod": [166, 228, 293, 301, 573, 591, 745, 771, 796, 834, 877, 883, 956, 1129, 1145, 1261], "summari": [166, 301, 796, 883, 956, 1261], "midpoint": [166, 228, 293, 301, 573, 591, 745, 771, 796, 834, 877, 883, 956, 1129, 1145, 1261], "linear": [166, 199, 228, 293, 301, 462, 488, 534, 573, 591, 699, 700, 745, 771, 796, 817, 834, 877, 883, 956, 1040, 1071, 1129, 1145, 1261], "deem": [166, 301, 796, 883], "programmat": [166, 301, 796, 883], "versu": [166, 301, 796, 883], "interact": [166, 301, 796, 883], "explor": [166, 301, 796, 883], "glimps": [166, 194, 301], "median": [166, 226, 301, 444, 589, 771, 796, 860, 883, 956, 1143, 1261], "null_count": [166, 169, 301, 376, 771, 796, 883, 954, 956, 1034, 1261], "266667": [166, 301, 796, 883], "666667": [166, 199, 271, 289, 301, 436, 739, 771, 796, 817, 856, 873, 883, 1019, 1261], "std": [166, 301, 593, 771, 796, 883, 956, 1147, 1261], "101514": [166, 301, 796, 883], "071068": [166, 301, 796, 883], "36": [166, 301, 796, 883], "34": [166, 301, 656, 796, 883, 1215], "43": [166, 235, 301, 370, 584, 594, 771, 796, 837, 883], "70": [166, 301, 686, 771, 796, 883], "88": [166, 301, 796, 883], "90": [166, 301, 659, 796, 883, 1218], "49": [166, 301, 796, 883], "21": [166, 218, 251, 301, 385, 587, 588, 590, 593, 594, 595, 725, 771, 796, 829, 883, 886, 963], "subset": [169, 222, 266, 301, 799, 853, 883], "preserv": [169, 177, 187, 190, 207, 211, 260, 261, 301, 381, 382, 445, 493, 605, 771, 799, 806, 818, 883, 959, 960, 1028, 1076, 1165, 1243, 1261], "behavior": [169, 301, 497, 518, 530, 722, 731, 771, 799, 883, 955, 1080, 1101, 1109, 1128, 1261], "all_horizont": [169, 301, 687, 799, 883], "is_nul": [169, 301, 771, 799, 883, 1261], "null_equ": [171, 181, 301, 1017, 1155, 1261], "sizeunit": [172, 301, 1018, 1261], "heap": [172, 301, 771, 1018, 1261], "its": [172, 301, 386, 414, 428, 611, 761, 771, 933, 964, 996, 1010, 1018, 1261], "bitmap": [172, 301, 1018, 1261], "structarrai": [172, 301, 1018, 1261], "constant": [172, 235, 301, 383, 442, 771, 837, 883, 961, 1018, 1025, 1261], "unchang": [172, 301, 530, 579, 677, 771, 823, 824, 865, 871, 883, 1018, 1109, 1134, 1244, 1261], "capac": [172, 247, 301, 1018, 1163, 1261], "ffi": [172, 301, 1018, 1261], "kb": [172, 301, 1018, 1261], "mb": [172, 301, 1018, 1261], "gb": [172, 301, 1018, 1261], "revers": [172, 301, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 528, 551, 552, 553, 570, 670, 704, 771, 883, 946, 947, 948, 949, 950, 951, 952, 953, 1261], "1_000_000": [172, 301, 1018, 1261], "28000000": [172, 301], "702880859375": [172, 301], "more_column": [173, 243, 267, 301, 439, 721, 771, 802, 842, 854, 883], "long": [173, 217, 268, 301, 802, 828, 883], "letter": [173, 284, 295, 301, 439, 616, 624, 641, 721, 771, 802, 868, 879, 883, 886, 1175, 1183, 1200], "onlin": [174, 301, 1024, 1261], "rerun": [174, 301, 1024, 1261], "finish": [174, 301, 1024, 1261], "conveni": [174, 301, 892, 1024, 1261], "Not": [175, 301, 472, 474, 771, 804, 883], "fillnullstrategi": [176, 301, 444, 771, 805, 883, 1027, 1261], "matches_supertyp": [176, 301, 805, 883], "forward": [176, 208, 245, 301, 406, 444, 450, 513, 601, 771, 805, 819, 843, 883, 988, 1027, 1096, 1160, 1261], "consecut": [176, 301, 347, 444, 450, 614, 771, 805, 883, 1027, 1173, 1261], "fill_nan": [176, 301, 771, 883, 1261], "intoexprcolumn": [177, 301, 333, 337, 338, 353, 359, 360, 361, 445, 489, 500, 508, 513, 565, 569, 598, 601, 623, 645, 651, 652, 653, 665, 678, 693, 714, 715, 717, 718, 729, 730, 758, 759, 761, 771, 806, 843, 883, 909, 913, 914, 928, 939, 940, 941, 1072, 1083, 1091, 1096, 1124, 1182, 1204, 1210, 1211, 1212, 1224, 1245, 1261], "constraint": [177, 301, 445, 478, 550, 552, 553, 554, 555, 570, 670, 761, 771, 806, 883], "behav": [177, 301, 445, 531, 652, 653, 771, 806, 883], "eq": [177, 301, 435, 445, 771, 806, 883, 1261], "implicitli": [177, 301, 445, 761, 771, 806, 883], "is_in": [177, 301, 771, 1261], "get_column_index": [178, 301], "reduct": [180, 301], "supercast": [180, 301], "parent": [180, 301], "rule": [180, 301, 616, 641, 1175, 1200], "arithmet": [180, 301], "zip_with": [180, 301, 1261], "foo11": [180, 301], "bar22": [180, 301], "nth": [182, 254, 301, 453, 648, 674, 771, 808, 851, 883, 1032, 1207, 1234, 1261], "th": [182, 254, 301, 453, 509, 608, 674, 771, 808, 851, 883, 1032, 1092, 1168, 1234, 1261], "retriev": [183, 301, 331, 332, 486, 487, 666, 907, 908, 1069, 1070, 1225], "max_items_per_column": [186, 301], "max_colname_length": [186, 301], "return_as_str": [186, 301, 542], "preview": [186, 301], "few": [186, 301], "exce": [186, 301], "ellipsi": [186, 301], "head": [186, 210, 253, 301, 315, 483, 771, 822, 883, 1066, 1232, 1261], "tail": [186, 194, 301, 315, 608, 771, 883, 1036, 1168, 1261], "usd": [186, 301, 1270], "more_bi": [187, 190, 224, 249, 301, 611, 771, 809, 812, 847, 883], "groupbi": [187, 226, 301, 316, 531, 691, 736, 771, 883], "consist": [187, 190, 224, 301, 656, 809, 812, 883, 892, 1024, 1215, 1261], "regardless": [187, 190, 301, 629, 761, 1188], "agg": [187, 188, 191, 226, 235, 301, 310, 445, 447, 452, 455, 529, 531, 610, 611, 685, 736, 771, 792, 793, 801, 803, 809, 810, 811, 813, 814, 833, 837, 841, 845, 883, 886], "Or": [187, 188, 208, 235, 249, 270, 279, 301, 564, 584, 611, 714, 715, 717, 718, 758, 759, 761, 771, 809, 810, 819, 837, 847, 863, 883], "index_column": [188, 189, 191, 192, 235, 301, 584, 771, 810, 811, 813, 814, 837, 883], "timedelta": [188, 189, 191, 192, 208, 235, 270, 301, 410, 414, 428, 584, 587, 588, 589, 590, 591, 593, 594, 595, 714, 715, 717, 718, 758, 759, 771, 810, 811, 813, 814, 819, 837, 883, 886, 976, 984, 992, 996, 1010, 1119, 1120, 1261], "period": [188, 189, 191, 192, 235, 301, 414, 428, 436, 437, 438, 565, 584, 714, 715, 717, 718, 758, 759, 771, 810, 811, 813, 814, 837, 883, 996, 1010, 1019, 1020, 1021, 1124, 1261], "include_boundari": [188, 191, 301, 810, 813, 883], "closedinterv": [188, 189, 191, 192, 235, 301, 463, 584, 587, 588, 589, 590, 591, 593, 594, 595, 714, 715, 717, 718, 758, 759, 771, 810, 811, 813, 814, 837, 883, 1041, 1261], "label": [188, 301, 377, 572, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 771, 810, 833, 883, 955, 1128, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1147, 1148, 1149, 1261], "start_bi": [188, 191, 301, 810, 813, 883], "startbi": [188, 191, 301, 810, 813, 883], "check_sort": [188, 189, 191, 192, 235, 301, 584, 771, 810, 811, 813, 814, 837, 883], "dynamicgroupbi": [188, 191, 301], "member": [188, 301, 810, 883, 1049, 1261], "descript": [188, 301, 810, 883], "ascend": [188, 189, 191, 192, 235, 301, 584, 588, 589, 590, 591, 593, 595, 771, 810, 811, 813, 814, 837, 883], "dynam": [188, 191, 301, 520, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 771, 810, 813, 883, 1103, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1147, 1148, 1149, 1261], "matter": [188, 189, 191, 192, 205, 235, 237, 238, 257, 301, 584, 652, 653, 771, 810, 811, 813, 814, 837, 883], "interv": [188, 189, 191, 192, 235, 270, 301, 377, 414, 428, 459, 463, 572, 584, 587, 588, 589, 590, 591, 593, 594, 595, 714, 715, 717, 718, 758, 759, 771, 810, 811, 813, 814, 837, 883, 955, 968, 971, 972, 979, 982, 985, 987, 990, 993, 994, 996, 1001, 1010, 1011, 1037, 1041, 1128, 1261], "_lower_boundari": [188, 301, 810, 883], "_upper_boundari": [188, 301, 810, 883], "harder": [188, 191, 301, 810, 813, 883], "inclus": [188, 189, 191, 192, 235, 301, 463, 584, 587, 588, 589, 590, 591, 593, 594, 595, 646, 647, 693, 714, 715, 717, 718, 729, 730, 758, 759, 771, 810, 811, 813, 814, 837, 883, 1041, 1205, 1206, 1261], "datapoint": [188, 191, 301, 810, 813, 883], "boundari": [188, 301, 359, 360, 361, 459, 771, 810, 883, 939, 940, 941, 1037, 1261], "mondai": [188, 191, 301, 428, 430, 810, 813, 883, 1010, 1012], "tuesdai": [188, 191, 301, 810, 813, 883], "wednesdai": [188, 191, 301, 417, 420, 810, 813, 883, 999, 1002], "thursdai": [188, 191, 301, 810, 813, 883], "fridai": [188, 191, 301, 417, 420, 810, 813, 883, 999, 1002], "saturdai": [188, 191, 301, 810, 813, 883], "sundai": [188, 191, 301, 417, 420, 430, 810, 813, 883, 999, 1002, 1012], "earliest": [188, 191, 301, 413, 414, 428, 656, 658, 716, 810, 813, 883, 995, 996, 1010, 1215, 1217], "weekli": [188, 191, 301, 428, 810, 813, 883, 1010], "week": [188, 191, 208, 235, 270, 301, 410, 414, 428, 430, 584, 587, 588, 589, 590, 591, 593, 594, 595, 714, 715, 717, 718, 719, 758, 759, 771, 810, 813, 819, 837, 883, 886, 992, 996, 1010, 1012], "sorted": [188, 189, 191, 192, 235, 301, 584, 771, 810, 811, 813, 814, 837, 883], "verifi": [188, 189, 191, 192, 235, 301, 584, 771, 810, 811, 813, 814, 837, 883], "incorrectli": [188, 189, 191, 192, 235, 301, 520, 584, 771, 810, 811, 813, 814, 837, 883], "incorrect": [188, 189, 191, 192, 235, 301, 431, 529, 584, 600, 771, 810, 811, 813, 814, 837, 865, 871, 883, 1013, 1158, 1261], "roll": [188, 189, 192, 301, 406, 407, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 699, 748, 749, 771, 810, 811, 814, 883, 988, 989, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1261], "re": [188, 204, 260, 301, 406, 407, 417, 420, 810, 883, 988, 989, 999, 1002, 1269], "1d": [188, 208, 235, 270, 301, 384, 410, 414, 422, 425, 428, 431, 584, 587, 588, 589, 590, 591, 593, 594, 595, 714, 715, 717, 718, 719, 733, 758, 759, 771, 810, 819, 837, 883, 886, 962, 971, 978, 992, 996, 1001, 1004, 1007, 1010], "set_index": [188, 301, 810, 883], "resampl": [188, 301, 810, 883], "reset_index": [188, 301, 810, 883], "though": [188, 301, 767, 810, 883], "unlik": [188, 301, 810, 883], "evenli": [188, 301, 810, 883], "upsampl": [188, 301, 810, 883], "1n": [188, 208, 235, 270, 301, 410, 414, 428, 584, 587, 588, 589, 590, 591, 593, 594, 595, 714, 715, 717, 718, 758, 759, 771, 810, 819, 837, 883, 992, 996, 1010], "nanosecond": [188, 208, 235, 270, 301, 410, 414, 415, 426, 428, 584, 587, 588, 589, 590, 591, 593, 594, 595, 714, 715, 717, 718, 719, 758, 759, 771, 810, 819, 837, 883, 992, 996, 997, 1008, 1010], "1u": [188, 208, 235, 270, 301, 410, 414, 428, 584, 587, 588, 589, 590, 591, 593, 594, 595, 714, 715, 717, 718, 758, 759, 771, 810, 819, 837, 883, 992, 996, 1010], "microsecond": [188, 205, 208, 235, 237, 238, 257, 270, 301, 410, 414, 423, 428, 584, 587, 588, 589, 590, 591, 593, 594, 595, 714, 715, 716, 717, 718, 719, 757, 758, 759, 771, 810, 819, 833, 837, 883, 886, 992, 996, 1005, 1010], "1m": [188, 208, 235, 270, 301, 410, 414, 427, 428, 584, 587, 588, 589, 590, 591, 593, 594, 595, 714, 715, 717, 718, 758, 759, 771, 810, 819, 837, 883, 992, 996, 1005, 1006, 1008, 1009, 1010], "millisecond": [188, 208, 235, 270, 301, 394, 403, 410, 414, 424, 428, 584, 587, 588, 589, 590, 591, 593, 594, 595, 714, 715, 717, 718, 719, 758, 759, 771, 810, 819, 837, 883, 886, 992, 996, 1006, 1010], "minut": [188, 208, 235, 270, 301, 394, 398, 401, 408, 410, 414, 415, 425, 428, 584, 587, 588, 589, 590, 591, 593, 594, 595, 714, 715, 716, 717, 718, 719, 757, 758, 759, 771, 810, 819, 837, 883, 886, 992, 996, 1007, 1010], "1h": [188, 208, 235, 270, 301, 392, 410, 414, 428, 584, 587, 588, 589, 590, 591, 593, 594, 595, 714, 715, 717, 718, 758, 759, 771, 810, 819, 837, 883, 970, 972, 992, 996, 1010], "hour": [188, 208, 235, 270, 301, 398, 401, 403, 408, 410, 414, 415, 422, 428, 584, 587, 588, 589, 590, 591, 593, 594, 595, 714, 715, 716, 717, 718, 719, 757, 758, 759, 771, 810, 819, 837, 883, 886, 992, 996, 1004, 1010], "1w": [188, 208, 235, 270, 301, 410, 414, 428, 584, 587, 588, 589, 590, 591, 593, 594, 595, 714, 715, 717, 718, 758, 759, 771, 810, 819, 837, 883, 992, 996, 1010], "1mo": [188, 208, 235, 270, 301, 387, 406, 407, 410, 413, 414, 421, 428, 584, 587, 588, 589, 590, 591, 593, 594, 595, 714, 715, 717, 718, 758, 759, 771, 810, 819, 837, 883, 965, 987, 988, 989, 992, 993, 994, 995, 996, 1003, 1010, 1011], "month": [188, 208, 235, 270, 301, 390, 406, 407, 410, 414, 417, 420, 428, 584, 587, 588, 589, 590, 591, 593, 594, 595, 713, 714, 715, 716, 717, 718, 719, 758, 759, 771, 810, 819, 837, 883, 968, 988, 989, 992, 996, 999, 1002, 1010], "1q": [188, 208, 235, 270, 301, 410, 414, 428, 584, 587, 588, 589, 590, 591, 593, 594, 595, 714, 715, 717, 718, 758, 759, 771, 810, 819, 837, 883, 992, 996, 1010], "quarter": [188, 208, 235, 270, 301, 410, 414, 428, 584, 587, 588, 589, 590, 591, 593, 594, 595, 714, 715, 717, 718, 758, 759, 771, 810, 819, 837, 883, 992, 996, 1010], "1y": [188, 208, 235, 270, 301, 410, 414, 428, 584, 587, 588, 589, 590, 591, 593, 594, 595, 714, 715, 717, 718, 758, 759, 771, 810, 819, 837, 883, 992, 996, 1010], "1i": [188, 208, 235, 270, 301, 410, 584, 587, 588, 589, 590, 591, 593, 594, 595, 771, 810, 819, 837, 883, 992], "3d12h4m25": [188, 208, 235, 270, 301, 414, 428, 584, 714, 715, 717, 718, 758, 759, 771, 810, 819, 837, 883, 996, 1010], "correspond": [188, 208, 235, 260, 270, 301, 397, 410, 414, 428, 531, 575, 584, 587, 588, 589, 590, 591, 593, 594, 595, 714, 715, 717, 718, 758, 759, 771, 792, 810, 819, 837, 883, 975, 992, 996, 1010, 1130, 1261], "daylight": [188, 208, 235, 270, 301, 383, 392, 410, 414, 428, 584, 587, 588, 589, 590, 591, 593, 594, 595, 714, 715, 717, 718, 719, 758, 759, 771, 810, 819, 837, 883, 970, 992, 996, 1010], "10i": [188, 235, 301, 584, 771, 810, 837, 883], "datetime_rang": [188, 301, 384, 387, 406, 407, 410, 413, 414, 421, 422, 423, 424, 425, 426, 427, 428, 431, 587, 588, 590, 593, 594, 595, 714, 771, 810, 883, 961, 962, 965, 970, 971, 972, 978, 979, 982, 985, 988, 989, 990, 992, 995, 996, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "30m": [188, 301, 414, 428, 810, 883, 996, 1010], "lower_bound": [188, 301, 359, 361, 463, 771, 810, 883, 939, 941, 1041, 1248, 1261], "upper_bound": [188, 301, 359, 360, 463, 520, 771, 810, 883, 939, 940, 1041, 1108, 1261], "bys": [188, 301, 810, 883], "int_rang": [188, 268, 277, 287, 301, 693, 732, 810, 824, 862, 871, 883], "2i": [188, 301, 810, 883], "3i": [188, 301, 810, 883], "a_agg_list": [188, 301, 810, 883], "rollinggroupbi": [189, 192, 235, 301], "group_bi": [190, 222, 226, 300, 301, 310, 445, 447, 452, 455, 529, 531, 610, 611, 685, 736, 771, 792, 793, 801, 803, 812, 833, 845, 882, 883, 886], "group_by_dynam": [191, 235, 301, 813, 837, 883], "_lower_bound": [191, 301, 813, 883], "_upper_bound": [191, 301, 813, 883], "seed_1": [193, 301, 457, 771, 1035, 1261], "seed_2": [193, 301, 457, 771, 1035, 1261], "seed_3": [193, 301, 457, 771, 1035, 1261], "hash": [193, 301, 771, 1261], "Its": [193, 301, 457, 771, 1035, 1261], "u64": [193, 277, 301, 457, 577, 771, 833, 862, 883, 1035, 1261], "10783150408545073287": [193, 301], "1438741209321515184": [193, 301], "10047419486152048166": [193, 301], "2047317070637311557": [193, 301], "ab": [194, 210, 253, 274, 301, 666, 668, 771, 858, 883, 1036, 1066, 1232, 1261], "in_plac": [196, 247, 272, 301, 1131, 1163, 1170, 1261], "grown": [196, 301], "insert_column": [197, 301], "intermedi": [199, 301, 817, 883, 1270], "333333": [199, 301, 478, 550, 771, 817, 883, 1124, 1149, 1261], "mask": [200, 202, 301, 349, 464, 466, 467, 470, 471, 477, 566, 567, 615, 619, 626, 771, 924, 1028, 1034, 1041, 1043, 1046, 1047, 1052, 1053, 1061, 1125, 1126, 1156, 1174, 1178, 1185, 1252, 1261], "visual": [200, 202, 301], "scalar": [203, 211, 236, 301, 599, 691, 733, 736, 771, 1063, 1154, 1261], "With": [203, 245, 301, 513, 587, 588, 589, 590, 591, 593, 594, 595, 601, 771, 843, 883, 1063, 1096, 1160, 1261], "buffer_s": [205, 301], "fit": [205, 247, 268, 301, 603, 747, 771, 1162, 1163, 1261], "signific": [205, 211, 301, 316, 531, 597, 771, 1110, 1151, 1261], "4x": [205, 301], "materialis": [205, 206, 236, 237, 301], "rows_by_kei": [205, 237, 301], "iter_row": [206, 236, 237, 238, 301], "17_500": [206, 301], "klmnoopqrstuvwxyz": [206, 301], "__name__": [206, 301], "7500": [206, 301], "15_000": [206, 301], "record_batch": [206, 301], "to_arrow": [206, 301, 1261], "to_batch": [206, 301], "date32": [206, 301], "large_str": [206, 255, 261, 301], "15000": [206, 301], "2500": [206, 301], "left_on": [207, 208, 269, 301, 818, 819, 855, 883], "right_on": [207, 208, 269, 301, 818, 819, 855, 883], "suffix": [207, 208, 241, 274, 279, 301, 311, 351, 472, 474, 475, 476, 528, 551, 552, 554, 555, 564, 570, 581, 621, 652, 655, 771, 818, 819, 839, 858, 860, 863, 883, 886, 926, 1180, 1214], "_right": [207, 208, 301, 818, 819, 883], "joinvalid": [207, 301, 818, 883], "join_nul": [207, 301, 818, 883], "semi": [207, 301, 818, 883], "anti": [207, 301, 818, 871, 883, 1153, 1156, 1261], "cross": [207, 301, 818, 883], "outer_coalesc": [207, 301, 818, 883], "coalesc": [207, 269, 301, 656, 818, 855, 883, 1215], "cartisian": [207, 301, 818, 883], "many_to_mani": [207, 301, 818, 883], "one_to_on": [207, 301, 818, 883], "one_to_mani": [207, 301, 818, 883], "many_to_on": [207, 301, 818, 883], "join_asof": [207, 301, 818, 883], "other_df": [207, 301], "ham_right": [207, 301, 818, 883], "by_left": [208, 301, 819, 883], "by_right": [208, 301, 819, 883], "asofjoinstrategi": [208, 301, 819, 883], "allow_parallel": [208, 301, 818, 819, 883], "force_parallel": [208, 301, 818, 819, 883], "asof": [208, 301, 819, 883], "rather": [208, 301, 529, 542, 572, 583, 665, 771, 819, 883, 1128, 1138, 1224, 1261], "asof_join": [208, 301], "distanc": [208, 301, 459, 771, 819, 883, 1037, 1261], "plan": [208, 209, 301, 788, 792, 797, 801, 818, 819, 841, 845, 883], "forc": [208, 211, 287, 301, 520, 818, 819, 871, 883, 1110, 1261], "gdp": [208, 301, 819, 883], "2016": [208, 301, 819, 883], "2017": [208, 301, 819, 883], "2018": [208, 301, 413, 819, 883, 995], "2019": [208, 301, 819, 883], "jan": [208, 301, 819, 883], "1st": [208, 301, 819, 883], "4164": [208, 301, 819, 883], "4411": [208, 301, 819, 883], "4566": [208, 301, 819, 883], "4696": [208, 301, 819, 883], "set_sort": [208, 235, 270, 301, 584, 771, 819, 837, 883, 1261], "popul": [208, 301, 819, 883], "12th": [208, 301, 819, 883], "82": [208, 301, 819, 883], "66": [208, 269, 301, 594, 686, 771, 819, 855, 883, 1145, 1261], "83": [208, 301, 819, 883], "52": [208, 274, 301, 429, 596, 771, 819, 858, 883], "request": [209, 301], "describe_plan": [209, 301], "unoptim": [209, 301], "describe_optimized_plan": [209, 301], "show_graph": [209, 301, 883], "un": [209, 301], "graphviz": [209, 301, 845, 883], "much": [211, 268, 287, 301, 376, 497, 518, 531, 630, 631, 736, 771, 871, 954, 1080, 1101, 1110, 1189, 1190, 1261], "intens": [211, 287, 301, 564, 771, 1110, 1261], "materi": [211, 238, 287, 301, 792, 833, 871, 883, 886, 1110, 1261], "parallelis": [211, 287, 301, 1110, 1261], "achiev": [211, 287, 301, 531, 631, 771, 955, 1110, 1128, 1190, 1261], "best": [211, 287, 301, 531, 771, 1110, 1261], "black": [211, 301, 348, 350, 351, 352], "arbitrarili": [211, 301], "rearrang": [211, 301], "transform": [211, 301, 529, 661, 663, 664, 771], "lru_cach": [211, 301, 531, 771, 1110, 1261], "column_1": [211, 265, 301], "axi": [212, 214, 217, 219, 251, 301, 694, 695, 828, 883], "max_horizont": [212, 301, 737], "null_strategi": [214, 251, 301], "nullstrategi": [214, 251, 301], "mean_horizont": [214, 301], "propag": [214, 251, 301, 338, 435, 500, 556, 557, 559, 614, 700, 771, 914, 1083, 1119, 1120, 1173, 1261], "spam": [214, 301, 624, 1183], "ignore_nul": [215, 252, 301, 312, 314, 338, 436, 437, 438, 500, 614, 687, 689, 700, 771, 890, 891, 914, 1019, 1020, 1021, 1083, 1173, 1251, 1261], "id_var": [217, 301, 828, 883], "value_var": [217, 301, 828, 883], "variable_nam": [217, 301, 828, 883], "value_nam": [217, 301, 828, 883], "unpivot": [217, 301, 828, 883], "massag": [217, 301, 828, 883], "measur": [217, 301, 828, 883], "steve": [218, 301, 829, 883], "elis": [218, 301, 829, 883], "ag": [218, 301, 829, 883], "anna": [218, 301, 829, 883], "megan": [218, 301, 829, 883], "thoma": [218, 301, 829, 883], "min_horizont": [219, 301, 741, 750], "what": [222, 301, 304, 529, 616, 641, 771, 1175, 1200, 1251, 1261, 1265], "pack": [222, 301], "expr_unique_subset": [222, 301], "df_nuniqu": [222, 301], "df_agg_nuniqu": [222, 301], "include_kei": [224, 238, 301], "offer": [225, 301, 568, 771, 832, 883], "fulli": [225, 239, 301], "cast_str_to_int": [225, 301, 832, 883], "col_nam": [225, 301, 761, 832, 883], "tdf": [225, 301, 832, 883], "aggregate_funct": [226, 301], "pivotagg": [226, 301], "sort_column": [226, 301], "section": [226, 301, 615, 623, 624, 626, 639, 714, 715, 717, 718, 758, 759, 1174, 1182, 1183, 1185, 1198], "predefin": [226, 301], "predict": [226, 229, 270, 301], "transpos": [226, 301], "discoveri": [226, 301], "col1": [226, 301, 883, 1270], "col2": [226, 301, 883, 1270], "col3": [226, 301, 1270], "tanh": [226, 301, 771, 1261], "998347": [226, 301], "964028": [226, 301], "999954": [226, 301], "unique_column_valu": [226, 301], "column_nam": [230, 265, 301, 835, 883], "coo": [230, 301, 835, 883], "car": [230, 256, 301, 581, 771, 835, 883], "cam": [230, 301, 835, 883], "replace_column": [232, 301], "t_0": [235, 301, 584, 587, 588, 589, 590, 591, 593, 594, 595, 771, 837, 883], "t_1": [235, 301, 584, 587, 588, 589, 590, 591, 593, 594, 595, 771, 837, 883], "t_n": [235, 301, 584, 587, 588, 589, 590, 591, 593, 594, 595, 771, 837, 883], "strptime": [235, 301, 413, 584, 771, 837, 883, 995], "2d": [235, 260, 301, 410, 584, 733, 771, 837, 883, 961, 968], "sum_a": [235, 301, 584, 771, 837, 883], "min_a": [235, 301, 584, 771, 837, 883], "max_a": [235, 301, 584, 771, 837, 883], "by_pred": [236, 301], "accord": [236, 301, 530, 572, 714, 715, 717, 718, 758, 759, 771, 975, 1128, 1261], "mutual": [236, 301], "exclus": [236, 301, 686, 693, 729, 730, 771], "clariti": [236, 301], "toomanyrowsreturnederror": [236, 301, 783], "norowsreturnederror": [236, 301, 783], "inherit": [236, 301], "rowserror": [236, 301, 783], "high": [238, 301, 572, 771, 1128, 1261], "cost": [238, 301], "reoconstruct": [238, 301], "defaultdict": [238, 301], "assum": [238, 301, 823, 824, 865, 871, 883], "with_replac": [239, 301, 508, 598, 771, 1091, 1152, 1261], "ordereddict": [240, 301, 753, 838, 883], "named_expr": [241, 242, 274, 275, 301, 750, 753, 839, 840, 858, 859, 883], "threshold": [241, 301, 839, 883], "set_auto_structifi": [241, 274, 301, 839, 858, 883], "auto_structifi": [241, 274, 301, 839, 858, 883], "is_odd": [241, 301, 839, 883], "_is_odd": [241, 301, 839, 883], "sequenti": [242, 275, 301, 840, 859, 883], "fill_valu": [245, 246, 268, 301, 601, 602, 771, 843, 844, 883, 1160, 1161, 1261], "opposit": [245, 301, 513, 601, 771, 843, 883, 1096, 1160, 1261], "lag": [245, 301, 513, 601, 699, 771, 843, 883, 1096, 1160, 1261], "shift": [246, 301, 379, 492, 565, 602, 699, 771, 844, 883, 957, 1075, 1124, 1161, 1261], "shrink": [247, 301, 603, 771, 1162, 1163, 1261], "hold": [247, 301], "ddof": [250, 271, 301, 593, 595, 613, 684, 701, 703, 748, 749, 752, 760, 771, 848, 856, 883, 1147, 1149, 1172, 1250, 1261], "deviat": [250, 301, 437, 593, 613, 752, 771, 848, 883, 1020, 1172, 1261], "degre": [250, 271, 301, 574, 593, 595, 613, 684, 695, 701, 703, 748, 749, 752, 760, 771, 848, 856, 883, 1147, 1149, 1172, 1250, 1261], "freedom": [250, 271, 301, 593, 595, 613, 684, 701, 703, 748, 749, 752, 760, 771, 848, 856, 883, 1147, 1149, 1172, 1250, 1261], "divisor": [250, 271, 301, 593, 595, 613, 684, 701, 703, 748, 749, 752, 760, 771, 848, 856, 883, 1147, 1149, 1172, 1250, 1261], "816497": [250, 301], "gather_everi": [254, 301, 674, 771, 851, 883, 1234, 1261], "mostli": [255, 301, 445, 771], "categoricaltyp": [255, 301], "fruit": [256, 301, 581, 621, 649, 771, 1180, 1208], "beetl": [256, 301, 581, 771], "audi": [256, 301, 581, 771], "28": [256, 301, 309, 413, 431, 771, 995, 1013, 1270], "300": [256, 301, 562, 771, 1141, 1142, 1144, 1261], "drop_first": [258, 301], "dummi": [258, 301, 1238, 1261], "foo_1": [258, 301], "foo_2": [258, 301], "bar_3": [258, 301], "bar_4": [258, 301], "ham_a": [258, 301], "ham_b": [258, 301], "instantiat": [259, 301, 1240, 1261], "from_repr": [259, 301, 1240, 1261], "df_from_str_repr": [259, 301], "eval": [259, 301, 720, 1240, 1261], "indexord": [260, 301], "fortran": [260, 301], "downstream": [260, 301, 600, 771, 1158, 1261], "applic": [260, 301, 531, 587, 588, 589, 590, 591, 593, 594, 595, 771], "prevent": [260, 301, 311, 369, 370, 478, 550, 671, 771, 883, 948, 949, 1231, 1261], "reshap": [260, 301, 495, 771, 1078, 1261], "ll": [260, 301], "u1": [260, 301], "f4": [260, 301], "view": [260, 301, 531, 771, 1242, 1261], "recarrai": [260, 301], "rec": [260, 301], "use_pyarrow_extension_arrai": [261, 301, 1243, 1261], "extens": [261, 301, 1243, 1261], "na": [261, 301, 649, 1243, 1261], "doubl": [261, 301], "four": [263, 301], "five": [263, 301, 1270], "bottom_k": [264, 301, 678, 771, 852, 883, 1245, 1261], "header_nam": [265, 301], "perhap": [265, 301], "column_2": [265, 301], "name_gener": [265, 301], "base_nam": [265, 301], "my_column_": [265, 301], "my_column_0": [265, 301], "my_column_1": [265, 301], "my_column_2": [265, 301], "j": [265, 301], "new_id": [265, 301], "uniquekeepstrategi": [266, 301, 853, 883], "kept": [266, 301, 853, 883], "decompos": [267, 301, 854, 883], "t_a": [267, 301, 854, 883], "t_b": [267, 301, 854, 883], "t_c": [267, 301, 854, 883], "t_d": [267, 301, 854, 883], "womp": [267, 301, 854, 883], "t_": [267, 301, 854, 883], "t_struct": [267, 301, 854, 883], "step": [268, 301, 693, 729, 730], "unstackdirect": [268, 301], "pivot": [268, 301], "phase": [268, 301], "subject": [268, 301], "ascii_uppercas": [268, 301], "h": [268, 301, 309, 417, 420, 603, 656, 658, 662, 771, 1215, 1217, 1221], "x_0": [268, 301, 436, 437, 438, 771, 1019, 1020, 1021, 1261], "x_1": [268, 301], "y_0": [268, 301, 436, 437, 438, 771, 1019, 1020, 1021, 1261], "y_1": [268, 301], "z_0": [268, 301], "z_1": [268, 301], "include_nul": [269, 301, 855, 883], "implicit": [269, 301, 855, 883], "syntact": [269, 301, 579, 687, 689, 692, 702, 704, 707, 721, 722, 726, 727, 728, 731, 737, 739, 740, 741, 743, 744, 745, 750, 752, 754, 756, 760, 762, 771, 855, 883, 1134, 1171, 1261], "sugar": [269, 301, 579, 687, 689, 692, 702, 704, 707, 721, 722, 726, 727, 728, 731, 737, 739, 740, 741, 743, 744, 745, 750, 752, 754, 756, 760, 762, 771, 855, 883, 1134, 1171, 1261], "400": [269, 301, 423, 424, 426, 855, 883, 1141, 1142, 1144, 1261], "600": [269, 301, 423, 424, 426, 855, 883, 886], "700": [269, 301, 855, 883], "new_df": [269, 301, 855, 883], "time_column": [270, 301], "frequenc": [270, 301], "date_rang": [270, 301, 390, 393, 411, 419, 430, 968, 987, 993, 994, 1011, 1012], "forward_fil": [270, 301, 367, 370, 771], "varianc": [271, 301, 438, 479, 595, 684, 760, 771, 856, 883, 1021, 1064, 1149, 1250, 1261], "grow": [272, 301], "not_": [274, 301, 473, 771, 858, 883, 1261], "not_c": [274, 301, 858, 883], "diff": [274, 301, 421, 422, 423, 424, 425, 426, 427, 509, 771, 858, 883, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1092, 1261], "_diff": [274, 301, 858, 883], "row_nr": [276, 301, 861, 883], "1001": [277, 301, 862, 883], "1002": [277, 301, 862, 883], "named_agg": [279, 863], "_sum": [279, 863], "_mean_squar": [279, 863], "b_sum": [279, 863], "c_mean_squar": [279, 863], "sub": [281, 287, 331, 332, 333, 336, 337, 338, 339, 340, 341, 344, 500, 771, 907, 908, 909, 912, 913, 914, 915, 916, 917, 920, 1083], "map_group": [281, 691, 865], "toward": [282, 482, 502, 704, 771, 866, 870, 1065, 1085, 1261], "nr": [284, 295, 868, 879], "triangl": [287, 871], "group_df": [287, 871], "maxim": [288, 324, 771, 872, 900, 1261], "833333": [289, 873], "minim": [291, 325, 332, 487, 603, 611, 771, 875, 901, 908, 1070, 1114, 1162, 1261], "overview": [301, 771, 783, 883, 1261, 1270], "frameinittyp": [301, 883], "entri": [301, 883, 1269], "mydatafram": 301, "df4": 301, "df5": 301, "df6": 301, "approx_n_uniqu": [301, 771, 883], "corr": 301, "drop_in_plac": 301, "drop_nul": [301, 381, 771, 883, 959, 1261], "estimated_s": [301, 1261], "explod": [301, 447, 564, 580, 771, 883, 1135, 1261], "find_idx_by_nam": 301, "fold": [301, 540, 698, 705, 706, 709, 710, 746], "frame_equ": 301, "group_by_rol": [301, 883], "groupby_dynam": [301, 883], "groupby_rol": [301, 883], "hash_row": 301, "hstack": 301, "insert_at_idx": 301, "is_dupl": [301, 771, 1261], "is_empti": [301, 1261], "is_uniqu": [301, 771, 1261], "iter_column": 301, "iter_slic": 301, "melt": [301, 883], "merge_sort": [301, 883], "n_uniqu": [301, 317, 771, 1261], "pipe": [301, 771, 883], "plot": [301, 833, 845, 883, 1261], "hvplottabularpolar": [301, 1261], "defer": [301, 304, 1261, 1265], "galleri": [301, 304, 1261, 1265], "scatter": [301, 304, 1157, 1261], "speci": [301, 304], "setosa": [301, 304], "versicolor": [301, 304], "stock_1": [301, 304], "stock_2": [301, 304], "quantil": [301, 572, 591, 771, 883, 1128, 1145, 1261], "replace_at_idx": 301, "select_seq": [301, 883], "shift_and_fil": [301, 771, 883, 1261], "shrink_to_fit": [301, 1261], "take_everi": [301, 771, 883, 1261], "to_dummi": [301, 1261], "to_numpi": [301, 529, 771, 1261], "to_panda": [301, 1261], "to_struct": [301, 624], "unnest": [301, 377, 572, 582, 624, 625, 647, 648, 668, 771, 883, 955, 1103, 1128, 1137, 1206, 1207, 1261], "unstack": 301, "with_columns_seq": [301, 883], "with_row_count": [301, 883], "write_avro": 301, "write_databas": 301, "write_delta": 301, "write_excel": 301, "write_ipc_stream": 301, "write_json": 301, "write_parquet": 301, "cum_prod": [309, 374, 771, 952, 1261], "ghi": [309, 624, 771, 886, 1183], "94": [310, 771], "to_uppercas": [311, 554, 625, 771], "confus": [312, 472, 474, 641, 771], "kleen": [312, 314, 687, 689, 771, 890, 891, 1261], "bitwis": [313, 563, 686, 687, 688, 689, 690, 771], "upcast": [315, 771], "skip_nul": [316, 531, 771, 893, 1110, 1261], "pass_nam": [316, 531, 771], "mapelementsstrategi": [316, 531, 771], "thread_loc": [316, 531, 771], "map_el": [316, 529, 686, 771, 893, 1261], "unknown": [316, 531, 623, 733, 771, 1182], "stage": [316, 771], "code": [316, 348, 350, 351, 352, 531, 600, 771, 803, 821, 883, 1158, 1261], "gil": [316, 531, 771], "approx": [317, 771], "1005": [317, 771], "invers": [318, 319, 320, 321, 322, 323, 771, 894, 895, 896, 897, 898, 899, 1261], "cosin": [318, 319, 362, 363, 529, 771, 894, 895, 943, 944, 1261], "570796": [318, 320, 771, 894, 896, 1261], "hyperbol": [319, 321, 323, 363, 607, 676, 771, 895, 897, 899, 944, 1167, 1236, 1261], "sine": [320, 321, 529, 606, 607, 771, 896, 897, 1166, 1167, 1261], "881374": [321, 771, 897, 1261], "tangent": [322, 323, 675, 676, 771, 898, 899, 1235, 1236, 1261], "785398": [322, 694, 695, 771, 898, 1261], "arg_wher": [327, 771], "subarrai": [329, 330, 905, 906], "membership": [333, 489, 909, 1072], "number_of_two": [334, 491], "sublist": [337, 486, 487, 489, 492, 496, 497, 498, 499, 500, 501, 509, 514, 517, 518, 520, 913, 1049, 1069, 1070, 1072, 1075, 1079, 1080, 1081, 1082, 1083, 1084, 1092, 1097, 1100, 1101, 1103, 1261], "x_y": [338, 500], "i8": [345, 390, 394, 398, 401, 403, 405, 408, 411, 412, 415, 429, 430, 519, 603, 744, 747, 762, 771, 921, 957, 968, 972, 985, 987, 994, 997, 1011, 1012, 1102, 1136, 1248, 1261], "seen": [347, 450, 771], "substr": [348, 351, 352, 615, 621, 626, 639, 640, 646, 647, 648, 649, 886, 923, 926, 927, 1174, 1180, 1185, 1198, 1199, 1205, 1206, 1207, 1208], "ends_with": [348, 352, 615, 649, 886, 1208], "yellow": [348, 350, 351, 352], "x00": [348, 350, 351, 352], "xff": [348, 350, 351, 352], "contains_with_lit": 348, "contains_with_expr": 348, "transferencod": [349, 350, 619, 620, 924, 925, 1178, 1179], "hex": [349, 350, 619, 620, 660, 924, 925, 1178, 1179, 1219], "base64": [349, 350, 619, 620, 924, 925, 1178, 1179], "code_encoded_hex": 350, "000000": 350, "ffff00": 350, "0000ff": 350, "anywher": [351, 352, 656, 657, 658, 1215, 1216, 1217], "ends_with_lit": 351, "ends_with_expr": 351, "starts_with_lit": 352, "starts_with_expr": 352, "complex": [353, 376, 678, 771, 928, 954, 1245, 1261], "frac": [353, 436, 437, 438, 608, 678, 771, 928, 1019, 1020, 1021, 1168, 1245, 1261], "to_fram": [355, 393, 414, 419, 428, 656, 955, 1128, 1153, 1156, 1206, 1207, 1215, 1261], "259921": [357, 771, 935, 1261], "587401": [357, 771], "numericliter": [359, 360, 361, 771, 939, 940, 941, 1261], "temporalliter": [359, 360, 361, 771, 939, 940, 941, 977, 978, 1261], "outsid": [359, 771, 939, 1261], "clip": [360, 361, 771, 940, 941, 1261], "543081": [363, 771, 944, 1261], "cotang": [364, 771, 945, 1261], "cumul": [366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 704, 705, 706, 707, 708, 709, 710, 711, 712, 771, 946, 947, 948, 949, 950, 951, 952, 953, 1261], "cum_count_revers": [366, 771], "cum_max_revers": [367, 771], "cum_max_all_fil": [367, 771], "cum_min_revers": [368, 771], "cum_prod_revers": [369, 771], "cum_sum_revers": [370, 771], "value_cum_sum": [370, 771], "value_cum_sum_all_fil": [370, 771], "cum_count": [371, 771, 1261], "cum_max": [372, 771, 950, 1261], "cum_min": [373, 771, 951, 1261], "cum_sum": [375, 461, 669, 708, 711, 771, 816, 883, 953, 1063, 1261], "min_period": [376, 436, 437, 438, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 748, 749, 771, 954, 1019, 1020, 1021, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1147, 1148, 1149, 1261], "slide": [376, 771, 954, 1261], "slot": [376, 379, 492, 771, 954, 957, 1075, 1261], "realli": [376, 616, 641, 771, 954, 1175, 1200, 1261], "visit": [376, 771, 954, 1261], "left_clos": [377, 572, 771, 955, 1128, 1261], "include_break": [377, 572, 771, 955, 1128, 1261], "bin": [377, 459, 572, 660, 686, 764, 771, 955, 1037, 1128, 1219, 1255, 1261], "discret": [377, 379, 433, 459, 492, 509, 572, 771, 955, 957, 1016, 1037, 1075, 1092, 1128, 1261], "plu": [377, 524, 771, 955, 1107, 1128, 1261], "endpoint": [377, 572, 587, 588, 589, 590, 591, 593, 594, 595, 771, 955, 1128, 1261], "observ": [377, 436, 437, 438, 572, 771, 955, 1019, 1020, 1021, 1128, 1261], "fall": [377, 572, 771, 955, 1128, 1261], "qcut": [377, 771, 955, 1261], "breakpoint": [377, 459, 572, 771, 955, 1037, 1128, 1261], "brk": [377, 572, 771], "foo_bin": [377, 572, 771], "radian": [378, 694, 771], "720": [378, 574, 771], "540": [378, 574, 771], "360": [378, 574, 771], "180": [378, 574, 771], "null_behavior": [379, 492, 771, 957, 1075, 1261], "nullbehavior": [379, 492, 771, 957, 1075, 1261], "drop_nan": [382, 771, 960, 1261], "utc": [383, 387, 389, 392, 413, 656, 658, 886, 961, 965, 970, 995, 1215, 1217], "vari": [383, 961, 1270], "rare": [383, 961], "countri": [383, 961], "switch": [383, 961], "samoa": [383, 961], "apia": [383, 961], "did": [383, 961], "2011": [383, 961], "dst_offset": [383, 961], "2012": [383, 961], "replace_time_zon": [383, 389, 392, 966, 967, 1000], "pacif": [383, 961], "11h": [383, 961], "13h": [383, 961], "lose": [384, 962], "time_unit_m": [384, 962], "time_unit_n": [384, 962], "999": [385, 400, 886, 963, 981, 1270], "1897": [385, 400, 963, 981], "3002": [385, 400, 963, 981], "cent": 385, "0999": [385, 400], "naiv": [386, 964, 1217], "compon": [386, 415, 656, 658, 719, 964, 997, 1215, 1217], "resolv": 386, "tm": [386, 886], "456000": [386, 964], "101000": 386, "d1": 386, "d2": 386, "d3": 386, "europ": [387, 392, 413, 965, 970, 995], "london": [387, 392, 413, 965, 970, 995], "gmt": [387, 392, 413, 965, 970, 995], "bst": [387, 392, 413, 965, 970, 995], "1978": [388, 389, 394, 397, 398, 401, 403, 408, 415, 418, 432], "2024": [388, 389, 394, 398, 401, 403, 408, 415, 418, 719, 886], "500_000": [388, 389, 394, 398, 401, 403, 408, 415, 418], "2065": [388, 389, 394, 398, 401, 403, 408, 415, 418], "60_000": [388, 389, 394, 398, 401, 403, 408, 415, 418], "060": [388, 389, 394, 398, 401, 403, 408, 415, 418], "weekdai": [390, 411], "ordinal_dai": [390, 430], "day_of_month": [390, 411, 430], "day_of_year": [390, 411, 430], "356": [390, 411, 430], "357": [390, 411, 430], "358": [390, 411, 430], "359": [390, 411, 430], "total_dai": [391, 969], "base_utc_offset": [392, 970], "0m": [392, 970], "epochtimeunit": [393, 725, 971], "unix": [393, 725, 971], "epoch_n": [393, 971], "epoch_": [393, 971], "978307200000000": [393, 419, 971, 1001], "978307200": [393, 971], "978393600000000": [393, 419, 971, 1001], "978393600": [393, 971], "978480000000000": [393, 419, 971, 1001], "978480000": [393, 971], "total_hour": [395, 973], "leap": [396, 410, 974, 992], "leap_year": 396, "iso": [397, 429, 430, 975, 1011, 1012], "1977": [397, 432], "1979": [397, 432], "calendar_year": [397, 432], "1976": [397, 432], "500000": [398, 979], "60000": 398, "total_microsecond": [399, 980], "mlnm": 400, "total_millisecond": [402, 983], "total_minut": [404, 986], "think": [406, 407, 988, 989], "vectoris": [406, 407, 988, 989], "tseri": [406, 407, 988, 989], "monthend": [406, 988], "rollforward": [406, 988], "monthbegin": [407, 989], "rollback": [407, 989], "500000000": [408, 990], "60000000": 408, "total_nanosecond": [409, 991], "minu": [410, 560, 771, 992], "dictat": [410, 771, 992], "2005": [410, 992], "date_plus_1i": [410, 992], "1y2mo": [410, 992], "date_min": 410, "1998": [410, 992], "1999": [410, 886, 992], "2003": [410, 725, 992], "2004": [410, 992], "2006": [410, 992], "new_dat": 410, "ordin": [411, 575, 771, 993, 1130, 1261], "366": [411, 993], "use_earliest": [413, 428, 656, 658, 716, 995, 1010, 1215, 1217], "ambigu": [413, 414, 428, 656, 658, 716, 995, 996, 1010, 1215, 1217], "convert_time_zon": [413, 995], "london_timezon": [413, 995], "amsterdam": [413, 995], "london_to_amsterdam": [413, 995], "cet": [413, 995], "cest": [413, 995], "ts_local": [413, 995], "brussel": [413, 995], "half": [414, 436, 437, 438, 771, 996, 1019, 1020, 1021, 1261], "localis": [414, 428, 996, 1010], "dst": [414, 428, 996, 1010], "cst": [414, 428, 996, 1010], "cdt": [414, 428, 996, 1010], "225": [414, 428], "10m": [414, 428, 996, 1010], "milli": [415, 997], "micro": [415, 997], "total_second": [416, 998], "to_str": [417, 999], "datetime_str": [417, 420], "day_nam": [417, 420], "month_nam": [417, 420], "march": [417, 420, 999, 1002], "april": [417, 420, 999, 1002], "timestamp_n": [419, 1001], "timestamp_m": 419, "978307200000": 419, "978393600000": 419, "978480000000": 419, "strftime": [420, 1002], "days_diff": 421, "hours_diff": 422, "200m": [423, 424, 426], "milliseconds_diff": [423, 424, 426], "200": [423, 424, 426, 579, 771, 1134, 1141, 1142, 1144, 1261], "200000": [423, 824, 883], "800": [423, 424, 426], "minutes_diff": 425, "1440": [425, 1007], "200000000": 426, "seconds_diff": 427, "safe": [428, 577, 771, 996, 1010, 1132, 1217, 1242, 1261], "truncate_str": 428, "truncate_td": 428, "53": [429, 1011], "time_unit_u": 431, "32971": [431, 1013], "32974": [431, 1013], "32976": [431, 1013], "iso_year": 432, "pk": [433, 771, 1016, 1261], "probabl": [433, 572, 771, 1016, 1128, 1261], "459148": [433, 771], "754888": [433, 771], "span": [436, 437, 438, 771, 1019, 1020, 1021, 1261], "half_lif": [436, 437, 438, 771, 1019, 1020, 1021, 1261], "adjust": [436, 437, 438, 608, 771, 1019, 1020, 1021, 1168, 1261], "exponenti": [436, 437, 438, 440, 569, 771, 1019, 1020, 1021, 1022, 1261], "weight": [436, 437, 438, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 608, 771, 1019, 1020, 1021, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1147, 1148, 1149, 1168, 1261], "decai": [436, 437, 438, 771, 1019, 1020, 1021, 1261], "term": [436, 437, 438, 771, 1019, 1020, 1021, 1261], "mass": [436, 437, 438, 771, 1019, 1020, 1021, 1261], "gamma": [436, 437, 438, 771, 1019, 1020, 1021, 1261], "foral": [436, 437, 438, 771, 1019, 1020, 1021, 1261], "geq": [436, 437, 438, 771, 1019, 1020, 1021, 1261], "theta": [436, 437, 438, 771, 1019, 1020, 1021, 1261], "life": [436, 437, 438, 771, 1019, 1020, 1021, 1261], "exp": [436, 437, 438, 771, 1019, 1020, 1021, 1261], "ln": [436, 437, 438, 771, 1019, 1020, 1021, 1261], "smooth": [436, 437, 438, 771, 1019, 1020, 1021, 1261], "factor": [436, 437, 438, 677, 771, 1019, 1020, 1021, 1244, 1261], "leq": [436, 437, 438, 771, 1019, 1020, 1021, 1261], "imbal": [436, 437, 438, 771, 1019, 1020, 1021, 1261], "ew": [436, 437, 438, 771, 1019, 1020, 1021, 1261], "w_i": [436, 437, 438, 771, 1019, 1020, 1021, 1261], "recurs": [436, 437, 438, 771, 1019, 1020, 1021, 1261], "y_t": [436, 437, 438, 771, 1019, 1020, 1021, 1261], "y_": [436, 437, 438, 771, 1019, 1020, 1021, 1261], "x_t": [436, 437, 438, 771, 1019, 1020, 1021, 1261], "x_2": [436, 437, 438, 771, 1019, 1020, 1021, 1261], "428571": [436, 771, 1019, 1261], "bia": [437, 438, 479, 592, 608, 771, 1020, 1021, 1064, 1146, 1168, 1261], "unbias": [437, 438, 771, 1020, 1021, 1261], "707107": [437, 593, 771, 1020, 1261], "963624": [437, 771, 1020, 1261], "928571": [438, 771, 1021, 1261], "wildcard": [439, 705, 706, 709, 710, 723, 746, 771], "regex": [439, 537, 615, 617, 618, 621, 623, 624, 625, 626, 639, 640, 649, 721, 771, 886, 1174, 1176, 1177, 1180, 1182, 1183, 1184, 1185, 1198, 1199, 1208], "aa": [439, 615, 626, 721, 771, 956, 1174, 1185, 1261], "ba": [439, 649, 721, 771, 886], "cc": [439, 721, 771, 956, 1261], "718282": [440, 771, 1022, 1261], "389056": [440, 771, 1022, 1261], "59815": [440, 771], "expand": [441, 536, 537, 578, 771, 886, 1023, 1261], "pythonliter": [442, 771, 1025, 1111, 1112, 1113, 1114, 1153, 1261], "extrem": [442, 586, 771, 1025, 1140, 1261], "group_col": [445, 685, 771], "g1": [445, 685, 771], "g2": [445, 685, 771], "lt": [445, 685, 771, 1261], "gte": [445, 685, 771], "n_1": [445, 771], "n_2": [445, 771], "n_3": [445, 771], "exprlistnamespac": [447, 771], "divis": [449, 679, 771], "truediv": [449, 771], "9774092659964970114": [457, 771], "13614470193936745724": [457, 771], "1101441246220388612": [457, 771], "11638928888656214026": [457, 771], "13382926553367784577": [457, 771], "bin_count": [459, 771, 1037, 1261], "include_categori": [459, 771, 1037, 1261], "include_breakpoint": [459, 771, 1037, 1261], "occurr": [459, 466, 467, 470, 471, 683, 771, 1037, 1046, 1047, 1052, 1053, 1249, 1261], "interpolationmethod": [462, 771, 1040, 1261], "regrid": [462, 771], "grid": [462, 771], "df_original_grid": [462, 771], "grid_point": [462, 771], "df_new_grid": [462, 771], "conflat": [463, 771], "finit": [465, 679, 701, 771, 1045, 1261], "is_first_distinct": [466, 771, 1046, 1261], "optional_memb": [468, 771, 1049, 1261], "infinit": [469, 679, 771, 1050, 1261], "is_last_distinct": [470, 771, 1052, 1261], "_isnan": [472, 771], "b_isnan": [472, 771], "negat": [473, 561, 771, 1122, 1261], "_is_not_nan": [474, 771], "b_is_not_nan": [474, 771], "_not_nul": [475, 771], "a_not_nul": [475, 771], "b_not_nul": [475, 771], "_isnul": [476, 771], "a_isnul": [476, 771], "b_isnul": [476, 771], "chain": [478, 550, 552, 553, 554, 555, 570, 670, 761, 771], "undo": [478, 543, 550, 552, 553, 570, 670, 771], "fisher": [479, 608, 771, 1064, 1168, 1261], "fourth": [479, 771, 1064, 1261], "subtract": [479, 669, 771, 1064, 1261], "distribut": [479, 608, 771, 1064, 1168, 1261], "elimin": [479, 771, 1064, 1261], "bias": [479, 608, 771, 1064, 1168, 1261], "scipi": [479, 608, 771, 1064, 1168, 1261, 1265], "stat": [479, 608, 771, 1064, 1168, 1261], "153061": [479, 771], "blindli": [494, 1077], "worth": [494, 1077], "enough": [494, 608, 771, 1077, 1168, 1261], "rank": [494, 701, 720, 771, 1077, 1261], "concat_list": [494, 720], "exprnamespac": 495, "flat": [495, 580, 771, 1078, 1135, 1261], "null_on_oob": [497, 518, 1080, 1101], "cheaper": [497, 518, 1080, 1101], "symmetr": [511, 1094], "sdiff": 511, "taken": [514, 645, 1097, 1204], "n_field_strategi": [520, 1103], "tostructstrategi": [520, 1103], "first_non_nul": [520, 1103], "max_width": [520, 1103], "field_0": [520, 1103], "field_1": [520, 1103], "field_n": [520, 1103], "pre": [520, 531, 572, 744, 747, 762, 771, 1128, 1261], "obtain": 520, "ok": 520, "longest": 520, "n0": 520, "n1": 520, "logarithm": [522, 523, 524, 771, 1105, 1106, 1107, 1261], "584963": [522, 771], "30103": [523, 771], "60206": [523, 771], "natur": [524, 771, 1107, 1261], "693147": [524, 771, 1105, 1107, 1261], "098612": [524, 771, 1105, 1107, 1261], "386294": [524, 771, 1107, 1261], "lowest": [525, 771], "9223372036854775808": [525, 771], "agg_list": [527, 529, 771], "map_batch": [527, 734, 771, 823, 883], "keep_nam": [528, 771], "a_revers": [528, 551, 553, 581, 670, 771], "b_revers": [528, 551, 553, 581, 670, 771], "rstrip": [528, 551, 771], "_revers": [528, 551, 553, 581, 670, 771], "is_elementwis": [529, 771], "whole": [529, 610, 611, 623, 771, 871, 883, 1182], "elementwis": [529, 585, 586, 587, 588, 590, 594, 771, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1147, 1148, 1149, 1261], "third": [529, 771], "parti": [529, 771], "book": [529, 771], "invok": [529, 771], "bug": [529, 531, 771, 823, 824, 865, 871, 883, 1110, 1261], "argmax": [529, 771], "remap": [530, 771, 1109, 1261], "lookup": [530, 767, 771, 1109, 1261], "discourag": [531, 771], "loop": [531, 771], "a_times_2": [531, 771], "tip": [531, 771], "again": [531, 771], "exprmetanamespac": [535, 538], "foo_bar2": [535, 538], "raise_if_undetermin": 539, "computeerror": [539, 638, 660, 783, 1197, 1219], "e_filt": [539, 541], "e_sum_ov": [539, 541], "e_sum_slic": [539, 541], "tree": 542, "modulu": [546, 771], "xlog2": [548, 569, 771], "purpos": [549, 771, 792, 803, 883], "x_uniqu": [549, 771], "y_uniqu": [549, 771], "reverse_": [552, 570, 771], "reverse_a": [552, 570, 771], "reverse_b": [552, 570, 771], "lowercas": [554, 661, 1220], "uppercas": [555, 664, 1223], "to_lowercas": 555, "poison": [556, 557, 771, 1119, 1120, 1261], "nanmax": [556, 557, 771, 1119, 1120, 1261], "inequ": [558, 771], "ne": [559, 771, 1261], "unari": [560, 771], "350": [562, 771, 1142, 1261], "650": [562, 771], "850": [562, 771], "more_expr": [564, 696, 698, 699, 700, 771], "mapping_strategi": [564, 771], "windowmappingstrategi": [564, 771], "group_to_row": [564, 771], "outcom": [564, 771], "group_dtyp": [564, 771], "flatten": [564, 771], "_max": [564, 771], "c_max": [564, 771], "_min": [564, 771], "c_min": [564, 771], "percent": [565, 771, 1124, 1261], "090909": [565, 771], "peak": [566, 567, 771, 1125, 1126, 1261], "extract_numb": [568, 771], "digit": [568, 596, 597, 624, 771, 1150, 1151, 1177, 1183, 1261, 1270], "scale_negative_even": [568, 771], "expon": [569, 771, 1261], "allow_dupl": [572, 771, 1128, 1261], "duplicateerror": [572, 771, 783, 1128, 1261], "happen": [572, 771, 1128, 1261], "cut": [572, 771, 1128, 1261], "566371": [574, 771], "424778": [574, 771], "283185": [574, 771], "141593": [574, 771, 894, 1261], "rankmethod": [575, 771, 1130, 1261], "ti": [575, 771, 1130, 1261], "competit": [575, 771, 1130, 1261], "highest": [575, 682, 701, 771, 883, 1130, 1261], "immedi": [575, 693, 697, 714, 715, 717, 718, 729, 730, 744, 747, 753, 758, 759, 762, 771, 1130, 1261], "nodefault": [579, 771, 1134, 1261], "_nodefault": [579, 771, 1134, 1261], "no_default": [579, 771, 1134, 1261], "fruits_revers": [581, 771], "cars_revers": [581, 771], "rle_id": [582, 771, 1137, 1261], "rle": [583, 771, 1138, 1261], "a_r": [583, 771], "ab_r": [583, 771], "window_s": [585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 748, 749, 771, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1261], "rolling_map": [585, 771, 1139, 1261], "multipli": [585, 586, 587, 588, 590, 593, 594, 595, 771, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1147, 1148, 1149, 1261], "rolling_sum": [586, 771, 1140, 1261], "nansum": [586, 771, 1140, 1261], "warn_if_unsort": [587, 588, 589, 590, 591, 593, 594, 595, 771], "travers": [587, 588, 590, 594, 771, 1141, 1142, 1144, 1147, 1148, 1149, 1261], "vector": [587, 588, 590, 594, 771, 1141, 1142, 1144, 1147, 1148, 1149, 1261], "5h": [587, 588, 589, 590, 591, 593, 594, 595, 771], "df_tempor": [587, 588, 590, 593, 594, 595, 771], "closur": [587, 588, 593, 594, 595, 771], "rolling_row_max": [587, 771], "2h": [587, 588, 590, 593, 594, 595, 771], "rolling_row_mean": [588, 771], "rolling_row_min": [590, 771], "625": [591, 771], "skew": [592, 771, 1146, 1261], "381802": [592, 771, 1146, 1261], "47033": [592, 771, 1146, 1261], "38180177416060584": [592, 771, 1146, 1261], "47033046033698594": [592, 771, 1146, 1261], "433013": [593, 771, 848, 883], "rolling_row_std": [593, 771], "rolling_row_sum": [594, 771], "39": [594, 725, 771], "57": [594, 771, 1150, 1261, 1270], "63": [594, 771], "69": [594, 771], "1875": [595, 771, 856, 883], "rolling_row_var": [595, 771], "figur": [597, 771, 845, 883, 1151, 1261], "01234": [597, 771, 1151, 1261], "012": [597, 771, 1151, 1261], "1200": [597, 771, 1151, 1261], "searchsortedsid": [599, 771, 1154, 1261], "leftmost": [599, 771, 1154, 1261], "rightmost": [599, 771, 1154, 1261], "six": [599, 771], "extrema": [603, 771, 1162, 1261], "112": [603, 771, 1270], "129": [603, 771], "8589934592": [603, 771], "1073741824": [603, 771], "175201": [607, 771, 1167, 1261], "unimod": [608, 771, 1168, 1261], "skewtest": [608, 771, 1168, 1261], "speak": [608, 771, 1168, 1261], "g_1": [608, 771, 1168, 1261], "m_3": [608, 771, 1168, 1261], "m_2": [608, 771, 1168, 1261], "m_i": [608, 771, 1168, 1261], "sum_": [608, 771, 1168, 1261], "texttt": [608, 771, 1168, 1261], "k_3": [608, 771, 1168, 1261], "k_2": [608, 771, 1168, 1261], "sqrt": [608, 694, 695, 771, 1168, 1261], "343622": [608, 771], "value1": [611, 771], "value2": [611, 771], "attain": [611, 771], "414214": [612, 771, 1171, 1261], "sensit": [615, 624, 626, 639, 1174, 1183, 1185, 1198], "ilmsuxu": [615, 623, 624, 626, 639, 1174, 1182, 1183, 1185, 1198], "default_match": [615, 626], "insensitive_match": [615, 626], "crab": [615, 626, 1174, 1185], "dog": [615, 661, 664, 700, 1174, 1220, 1223], "rab": [615, 642, 1174, 1201], "ascii_case_insensit": [616, 641, 1175, 1200], "aho": [616, 641, 1175, 1200], "corasick": [616, 641, 1175, 1200], "insensit": [616, 624, 639, 641, 886, 1174, 1175, 1183, 1185, 1198, 1200], "set_fmt_str_length": [616, 641, 1175, 1200], "lyric": [616, 641, 1175, 1200], "everybodi": [616, 641, 1175, 1200], "tell": [616, 641, 1175, 1200], "me": [616, 641, 1175, 1200], "feel": [616, 641, 1175, 1200], "love": [616, 641, 1175, 1200], "tonight": [616, 641, 1175, 1200], "success": [617, 618, 624, 1176, 1177, 1183], "overlap": [617, 618, 624, 1176, 1177, 1183], "bla": [618, 624, 1177, 1183], "asd": [618, 624, 1177, 1183], "678": [618, 624, 1177, 1183], "910t": [618, 624, 1177, 1183], "count_digit": 618, "dbc": [618, 1177], "3xy": [618, 1177], "1zy3": [618, 1177], "strings_hex": 620, "666f6f": [620, 1179], "626172": [620, 1179], "mango": [621, 649, 1180, 1208], "has_suffix": 621, "le": [621, 771, 1261], "nu": 621, "group_index": [623, 1182], "captur": [623, 625, 1182, 1184], "nthose": [623, 1182], "nodd": [623, 1182], "nthe": [623, 1182], "odd": 623, "vote": [623, 625, 1182, 1184], "ballon_dor": [623, 625, 1182, 1184], "404": [623, 625, 1182, 1184], "ref": [623, 625, 1182, 1184], "candid": [623, 625, 1182, 1184], "messi": [623, 625, 1182, 1184], "ronaldo": [623, 1182], "haystack": [624, 1183], "email": [624, 1183], "real": [624, 1183], "some_account": [624, 1183], "somewher": [624, 1183], "net": [624, 1183], "jkl": [624, 1183], "uvw": [624, 1183], "co": [624, 771, 1183, 1261], "uk": [624, 1183], "address": 624, "xi": [624, 1183], "quantifi": [624, 1183], "email_part": [624, 1183], "extracted_nr": 624, "910": [624, 1183], "unnam": [625, 1184], "weghorst": [625, 1184], "candi": 625, "lobster": [626, 1185], "crustaceon": [626, 1185], "pat": [626, 1185], "bc": [626, 640, 754, 1185, 1199], "aeiuo": [626, 1185], "find_pat": 626, "json_path_match": [627, 1186], "jsonpath": [627, 629, 1186, 1188], "json_decod": [628, 1187], "json_path": [629, 1188], "json_val": [629, 1188], "len_char": [630, 635, 1189, 1194], "_o": [630, 631, 1189, 1190], "caf\u00e9": [630, 631, 1189, 1190], "345": [630, 631, 1189, 1190], "\u6771\u4eac": [630, 631, 1189, 1190], "n_byte": [630, 631], "n_char": [630, 631], "fill_char": [633, 636, 637, 643, 1192, 1195, 1196, 1202], "justifi": [633, 643, 1192, 1202], "pad_end": [633, 637, 1192, 1196], "strip_chars_start": [634, 652, 654, 1193], "pad": [636, 637, 665, 1195, 1196, 1224], "reach": [636, 637, 665, 1195, 1196, 1224], "pad_start": [636, 643, 665, 1195, 1202, 1224], "cow": [636, 637, 1195, 1196], "monkei": [636, 637, 1195, 1196], "hippopotamu": [636, 637, 1195, 1196], "zfill": [637, 686, 771, 1196], "radix": [638, 660, 1197, 1219], "parseerror": [638, 660, 1197, 1219], "becom": 638, "to_integ": [638, 1197], "silent": [638, 660, 1197, 1219], "replace_al": [639, 1198], "citi": 639, "philadelphia": 639, "season": 639, "spring": 639, "summer": 639, "autumn": 639, "winter": 639, "weather": [639, 1198], "raini": [639, 1198], "sunni": [639, 1198], "cloudi": 639, "snowi": 639, "foggi": [639, 1198], "123abc": [639, 1198], "abc456": [639, 1198], "abcabc": [640, 1199], "123a123": [640, 1199], "replace_with": [641, 1200], "broadcast": [641, 886, 1200], "removes_pronoun": 641, "man": [642, 1201], "ana": [642, 1201], "oof": [642, 1201], "anan": [642, 1201], "am": [642, 1201], "strip_chars_end": [644, 653, 655, 1203], "subslic": [645, 1204], "pear": [645, 1204], "papaya": [645, 1204], "dragonfruit": [645, 1204], "s_slice": 645, "ear": [645, 1204], "aya": [645, 1204], "uit": [645, 1204], "ya": [645, 1204], "onf": [645, 1204], "foo_bar_baz": 646, "split_inclus": 646, "foo_": [646, 724], "bar_": 646, "a_1": [647, 1206, 1238, 1261], "d_4": [647, 1206], "rename_field": [647, 648, 955, 1128, 1206, 1207, 1261], "first_part": [647, 648, 1206, 1207], "second_part": [647, 648, 1206, 1207], "remaind": [648, 1207], "app": [649, 1208], "has_prefix": 649, "strip_char": [650, 1209], "nworld": 651, "foo_strip": 651, "ow": 651, "hell": [651, 1210], "rld": [651, 653, 1212], "strip_suffix": [652, 654], "foo_strip_end": 652, "oldw": 652, "he": 652, "abcdeff": 652, "fed": 652, "strip_prefix": [653, 655], "tworld": [653, 1210, 1212], "foo_strip_start": 653, "wod": [653, 1212], "aabcdef": 653, "cba": 653, "foobar": [654, 655, 1213, 1214], "foofoobar": [654, 1213], "foobarbar": [655, 1214], "polarstemporaltyp": [656, 1215], "penalti": [656, 657, 658, 1215, 1216, 1217], "clean": [656, 657, 658, 1215, 1216, 1217], "beforehand": [656, 657, 658, 1215, 1216, 1217], "certainli": [656, 657, 658, 1215, 1216, 1217], "00z": [656, 658, 1215, 1217], "sun": [656, 1215], "jul": [656, 1215], "inference_length": [659, 1218], "3420": [659, 1218], "120134": [659, 1218], "3212": [659, 1218], "143": [659, 1218, 1270], "numbers_decim": 659, "110": [660, 1219], "fa1e": [660, 1219], "ff00": [660, 1219], "cafe": [660, 1219], "64030": [660, 1219], "65280": [660, 1219], "51966": [660, 1219], "variant": [661, 663, 664, 1051, 1261], "foo_low": 661, "titlecas": [663, 1222], "sing": [663, 1222], "welcom": [663, 1222], "THERE": [663, 1222], "NO": [663, 886, 1222], "foo_titl": 663, "There": [663, 1222], "foo_upp": 664, "999999": [665, 716, 757, 758, 759, 886, 1224], "0123": [665, 1224], "cd": [666, 668], "struct_col": [666, 668], "www": 668, "xxx": 668, "yyi": 668, "zzz": 668, "obvious": 668, "structfieldnotfounderror": [668, 783], "761594": [676, 771, 1236, 1261], "replic": [677, 771, 1244, 1261], "vals_phys": [677, 771], "floordiv": [679, 771], "ieee": [679, 771], "754": [679, 771], "mathemat": [679, 720, 771], "undefin": [679, 771], "On": [679, 771], "operand": [679, 771], "infin": [679, 771], "value_count": [681, 771, 1261], "9223372036854775807": [682, 771], "binary_str": [686, 771], "250": [686, 771, 1142, 1261, 1270], "bin_x": [686, 771], "bin_i": [686, 771], "xor_xi": [686, 771], "bin_xor_xi": [686, 771], "00001010": [686, 771], "00001011": [686, 771], "00001000": [686, 771], "00000010": [686, 771], "11111010": [686, 771], "00000011": [686, 771], "249": [686, 771], "11111001": [686, 771], "01000010": [686, 771], "00000100": [686, 771], "01000110": [686, 771], "AND": [687, 688, 886, 1242, 1261], "OR": [689, 690, 806, 883, 886], "any_horizont": 689, "returns_scalar": [691, 736, 771], "polarsintegertyp": [693, 729, 730], "arctan": [694, 695, 771, 1261], "angl": [694, 695], "plane": [694, 695], "rai": [694, 695], "tworoottwo": [694, 695], "arctan2d": 694, "atan2d": [694, 695], "atan2": [694, 695], "135": [694, 695], "356194": [694, 695], "arctan2": 695, "arg_tru": [697, 771, 1261], "mimic": 699, "a_lag_": 699, "a_rol": 699, "swim": 700, "walk": 700, "full_sent": 700, "correlationmethod": 701, "propagate_nan": 701, "spearman": 701, "544705": 701, "func": 702, "covari": [703, 749, 771], "acc": [705, 706, 709, 710, 723, 746], "include_init": [705, 709], "accumul": [705, 706, 709, 710, 723, 746], "fn": [705, 706, 709, 710, 723, 746], "new_valu": [705, 706, 709, 710, 723, 746], "cum_reduc": 705, "cumsum_horizont": 707, "cum_sum_horizont": 712, "granular": 714, "finer": 714, "permut": 714, "1985": [714, 717], "america": 717, "new_york": 717, "est": 717, "contrast": 719, "offset_bi": 719, "sometim": [719, 770], "tbl_width_char": 719, "120": 719, "add_week": 719, "add_dai": 719, "add_second": 719, "add_milli": 719, "add_hour": 719, "002": [719, 1005, 1006, 1008], "add_calendar_dai": 719, "add_calendar_month": 719, "mo": 719, "add_calendar_year": 719, "a_b_doubl": 720, "f_string": 724, "placehold": 724, "hello_": 724, "_world": 724, "_bar_": 724, "foo_a_bar_1": 724, "foo_b_bar_2": 724, "foo_c_bar_3": 724, "epoch": 725, "timestep": 725, "1666683077": 725, "1666683099": 725, "12345": [725, 936, 1030, 1150, 1261], "12346": 725, "agg_group": [726, 771], "allow_object": 733, "valueexcept": 733, "test_func": 735, "list_of_seri": 736, "my_custom_aggreg": 736, "understood": 736, "power": [751, 1261], "a_a": 751, "a_txt": 751, "605551": 752, "605551275463989": 752, "my_struct": 753, "elif": 761, "pick": 761, "met": 761, "own": [761, 1270], "isn": 761, "arr": [763, 1242, 1253, 1261], "technic": 767, "further": 767, "columnfactori": 767, "more_nam": 767, "__call__": 767, "helper": 767, "__getattr__": 767, "idiomat": [767, 871], "quick": [767, 956, 1261, 1270], "prototyp": 767, "keystrok": 767, "drawback": 767, "readabl": 767, "modul": [770, 886, 1270], "and_": 771, "arcco": [771, 1261], "arccosh": [771, 1261], "arcsin": [771, 1261], "arcsinh": [771, 1261], "arctanh": [771, 1261], "arg_max": [771, 1261], "arg_min": [771, 1261], "arg_sort": [771, 1261], "arg_uniqu": [771, 1261], "backward_fil": 771, "cbrt": [771, 1261], "clip_max": [771, 1261], "clip_min": [771, 1261], "cosh": [771, 1261], "cot": [771, 1261], "cumcount": 771, "cummax": [771, 1261], "cummin": [771, 1261], "cumprod": [771, 1261], "cumsum": [771, 1261], "cumulative_ev": [771, 1261], "entropi": [771, 1261], "eq_miss": [771, 1261], "ewm_mean": [771, 1261], "ewm_std": [771, 1261], "ewm_var": [771, 1261], "extend_const": [771, 1261], "from_json": 771, "ge": [771, 1261], "gt": [771, 1261], "hist": [771, 1261, 1265], "implod": [771, 1261], "inspect": [771, 883], "is_between": [771, 1261], "is_finit": [771, 1261], "is_first": [771, 1261], "is_infinit": [771, 1261], "is_last": [771, 1261], "is_nan": [771, 1261], "is_not": 771, "is_not_nan": [771, 1261], "is_not_nul": [771, 1261], "kurtosi": [771, 1261], "log10": [771, 1261], "log1p": [771, 1261], "map_alia": 771, "map_dict": [771, 1261], "mod": 771, "mul": 771, "nan_max": [771, 1261], "nan_min": [771, 1261], "ne_miss": [771, 1261], "or_": 771, "pct_chang": [771, 1261], "peak_max": [771, 1261], "peak_min": [771, 1261], "pow": [771, 1261], "register_plugin": 771, "lib": [771, 1237, 1261], "input_wildcard_expans": 771, "cast_to_supertyp": 771, "pass_name_to_appli": 771, "changes_length": 771, "plugin": 771, "highli": 771, "unsaf": 771, "serializ": 771, "ran": 771, "reinterpret": [771, 1261], "repeat_bi": 771, "rolling_appli": [771, 1261], "rolling_max": [771, 1261], "rolling_mean": [771, 1261], "rolling_median": [771, 1261], "rolling_min": [771, 1261], "rolling_quantil": [771, 1261], "rolling_skew": [771, 1261], "rolling_std": [771, 1261], "rolling_var": [771, 1261], "round_sig_fig": [771, 1261], "search_sort": [771, 1261], "shrink_dtyp": [771, 1261], "sin": [771, 1261], "sinh": [771, 1261], "sort_bi": 771, "tan": [771, 1261], "to_phys": [771, 933, 1261], "unique_count": [771, 1261], "xor": 771, "expos": 783, "miscellan": 783, "arrowerror": 783, "columnnotfounderror": 783, "invalidoperationerror": 783, "polarserror": 783, "polarspanicerror": 783, "schemaerror": 783, "schemafieldnotfounderror": 783, "shapeerror": 783, "parametr": 783, "build_info": 783, "get_index_typ": 783, "show_vers": 783, "threadpool_s": 783, "sqlcontext": [783, 1269], "hit": [788, 883], "node": [788, 792, 816, 823, 824, 828, 833, 835, 883], "background": [792, 883], "_eager": [792, 883], "inprocessqueri": [792, 883], "explain": [792, 883], "cancel": [792, 883], "set_streaming_chunk_s": [792, 883], "collect_all_async": [793, 883], "async": [793, 883], "stringio": [797, 841, 883], "snippet": [799, 883], "Be": [803, 883], "fewer": [803, 883], "suscept": [803, 883], "lazygroupbi": [809, 810, 811, 812, 813, 814, 837, 883], "other_lf": [818, 883], "validate_output_schema": [823, 824, 883], "streamabl": [823, 824, 828, 883], "past": [823, 824, 883], "paramount": [823, 824, 883], "elig": [823, 824, 883], "invari": [824, 883], "upheld": [824, 883], "100_000": [824, 883], "199998": [824, 883], "199996": [824, 883], "199994": [824, 883], "199992": [824, 883], "show_plot": [833, 883], "truncate_nod": [833, 883], "figsiz": [833, 845, 883], "gantt": [833, 883], "group_by_partit": [833, 883], "470": [833, 883], "475": [833, 883], "1964": [833, 883], "swap": [835, 883], "dynamic_group_bi": [837, 883], "deseri": [841, 883], "dataframescan": [841, 883], "output_schema": [841, 883], "run_parallel": [841, 883], "duplicate_check": [841, 883], "later": [841, 883], "output_path": [845, 883], "raw_output": [845, 883], "290994": [848, 883], "118034": [848, 883], "new_lf": [855, 883], "extern": [860, 883], "lf_other": [860, 883], "afoo": [860, 883], "cfoo": [860, 883], "train_lf": [860, 883], "feature_0": [860, 883], "feature_1": [860, 883], "test_lf": [860, 883], "_train": [860, 883], "feature_0_train": [860, 883], "opaqu": 871, "my_column": 871, "struct_seri": 871, "lf5": 883, "lf6": 883, "sink_csv": 883, "sink_ipc": 883, "sink_ndjson": 883, "sink_parquet": 883, "with_context": 883, "intuit": 886, "emploi": 886, "complement": 886, "plenti": 886, "cde": 886, "fgg": 886, "jjk": 886, "lmn": 886, "opp": 886, "qqr": 886, "by_dtyp": 886, "as_expr": 886, "dispatch": 886, "1_234_500": 886, "5_000_555": 886, "1234500": 886, "5000555": 886, "by_nam": 886, "2010": 886, "4_500_000": 886, "4500000": 886, "3265500": 886, "zap": 886, "2031": 886, "tstamp_tokyo": 886, "123465": 886, "tstamp_utc": 886, "999000": 886, "2025": 886, "666000": 886, "tstamp": 886, "600000": 886, "123000": 886, "666": 886, "td1": 886, "987000": 886, "td2": 886, "456789": [886, 997], "td3": 886, "2m": [886, 985], "456m": 886, "7d": 886, "456789\u00b5": 886, "18d": 886, "999999\u00b5": 886, "23h": 886, "987m": 886, "14d": 886, "16h": 886, "39m": 886, "21d": 886, "456001\u00b5": 886, "expand_selector": 886, "colz": [886, 1270], "everyth": 886, "signed_integ": 886, "unsigned_integ": 886, "is_selector": 886, "obj": 886, "include_categor": 886, "2345": 886, "3456": 886, "292432": [895, 1261], "549306": [899, 1261], "innter": 913, "set_ord": 934, "44225": [935, 1261], "56789": [936, 1030, 1150, 1261], "901234": [936, 1030, 1150, 1261], "1232e": [943, 945, 1261], "1656e15": [945, 1261], "break_point_label": [955, 1128, 1261], "break_point": [955, 1037, 1128, 1261], "category_label": [955, 1128, 1261], "581139": [956, 1261], "bb": [956, 1261], "arraylik": [958, 1261], "ser": [966, 967, 1000], "kathmandu": [966, 967, 1000], "0545": [966, 967, 1000], "500m": [979, 982, 990], "date_minus_1y_2mon": 992, "165": [996, 1010], "round_str": 996, "round_td": 996, "111110": 997, "765431": 997, "11111": 997, "timestamp_u": 1001, "978307200000000000": 1001, "978393600000000000": 1001, "978480000000000000": 1001, "005": [1016, 1261], "06293300616044681": [1016, 1261], "65": [1016, 1261], "8568409950394724": [1016, 1261], "4000000": [1018, 1261], "814697265625": [1018, 1261], "085537": [1022, 1261], "bitmask": [1034, 1261], "absenc": [1034, 1261], "presenc": [1034, 1242, 1261], "confirm": [1034, 1261], "10734580197236529959": [1035, 1261], "3022416320763508302": [1035, 1261], "13756996518000038261": [1035, 1261], "is_signed_integ": [1051, 1261], "is_unsigned_integ": [1051, 1261], "field_2": 1103, "n00": 1103, "n01": 1103, "n02": 1103, "2147483648": [1108, 1261], "166667": [1124, 1261], "142857": [1124, 1261], "150": [1142, 1261], "450": [1142, 1261], "dev": [1147, 1261], "527525": [1147, 1261], "frequent": [1153, 1156, 1261], "2246e": [1166, 1235, 1261], "34776706224699483": [1168, 1261], "732051": [1171, 1261], "idx_rx": 1185, "idx_lit": 1185, "orld": 1211, "tur": 1222, "6331e16": [1235, 1261], "int64arrai": [1237, 1261], "a_2": [1238, 1261], "a_3": [1238, 1261], "s_from_str_repr": [1240, 1261], "zero_copy_onli": [1242, 1261], "writabl": [1242, 1261], "sent": [1242, 1261], "immut": [1242, 1261], "127": [1248, 1261], "seriesview": [1251, 1261], "dtype_if_empti": 1261, "position": 1261, "scenario": 1261, "chunk_length": 1261, "get_chunk": 1261, "has_valid": 1261, "is_boolean": 1261, "is_float": 1261, "is_integ": 1261, "is_numer": [1261, 1270], "is_sort": 1261, "is_tempor": 1261, "is_utf8": 1261, "new_from_index": 1261, "histogram": [1261, 1265], "kde": [1261, 1265], "series_equ": 1261, "set_at_idx": 1261, "two_a": 1269, "__enter__": 1269, "__exit__": 1269, "exc_typ": 1269, "baseexcept": 1269, "exc_val": 1269, "exc_tb": 1269, "tracebacktyp": 1269, "primari": 1270, "guid": 1270, "machin": 1270, "xdist": 1270, "hardwar": 1270, "setup": 1270, "sec": 1270, "numeric_dtyp": 1270, "null_probabililti": 1270, "test_numer": 1270, "col0": 1270, "col4": 1270, "29096": 1270, "485": 1270, "2147483647": 1270, "8257e14": 1270, "7508": 1270, "37338": 1270, "7264": 1270, "16996": 1270, "121": 1270, "361": 1270, "63204": 1270, "1443e235": 1270, "conform": 1270, "ascii_lett": 1270, "id_char": 1270, "alphabet": 1270, "price": 1270, "min_valu": 1270, "max_valu": 1270, "test_price_calcul": 1270, "a101": 1270, "8nin": 1270, "qhoo": 1270, "714": 1270, "544": 1270, "i0e0": 1270, "0000": 1270, "test_miscellan": 1270, "235": 1270, "87": 1270, "186": 1270, "174": 1270, "179": 1270, "213": 1270, "221": 1270, "86": 1270, "255": 1270}, "objects": {"polars": [[2, 0, 1, "", "Array"], [3, 0, 1, "", "Binary"], [4, 0, 1, "", "Boolean"], [5, 0, 1, "", "Categorical"], [46, 0, 1, "", "DataType"], [47, 0, 1, "", "Date"], [48, 0, 1, "", "Datetime"], [49, 0, 1, "", "Decimal"], [50, 0, 1, "", "Duration"], [51, 0, 1, "", "Enum"], [52, 0, 1, "", "Float32"], [53, 0, 1, "", "Float64"], [54, 0, 1, "", "Int16"], [55, 0, 1, "", "Int32"], [56, 0, 1, "", "Int64"], [57, 0, 1, "", "Int8"], [62, 0, 1, "", "List"], [63, 0, 1, "", "Null"], [64, 0, 1, "", "Object"], [1269, 0, 1, "", "SQLContext"], [71, 0, 1, "", "String"], [72, 0, 1, "", "StringCache"], [73, 0, 1, "", "Struct"], [74, 0, 1, "", "Time"], [75, 0, 1, "", "UInt16"], [76, 0, 1, "", "UInt32"], [77, 0, 1, "", "UInt64"], [78, 0, 1, "", "UInt8"], [79, 0, 1, "", "Unknown"], [80, 3, 1, "", "Utf8"], [81, 4, 1, "", "align_frames"], [687, 4, 1, "", "all"], [688, 4, 1, "", "all_horizontal"], [689, 4, 1, "", "any"], [690, 4, 1, "", "any_horizontal"], [691, 4, 1, "", "apply"], [692, 4, 1, "", "approx_n_unique"], [693, 4, 1, "", "arange"], [694, 4, 1, "", "arctan2"], [695, 4, 1, "", "arctan2d"], [696, 4, 1, "", "arg_sort_by"], [697, 4, 1, "", "arg_where"], [86, 4, 1, "", "build_info"], [698, 4, 1, "", "coalesce"], [87, 4, 1, "", "collect_all"], [88, 4, 1, "", "collect_all_async"], [89, 4, 1, "", "concat"], [699, 4, 1, "", "concat_list"], [700, 4, 1, "", "concat_str"], [701, 4, 1, "", "corr"], [702, 4, 1, "", "count"], [703, 4, 1, "", "cov"], [704, 4, 1, "", "cum_count"], [705, 4, 1, "", "cum_fold"], [706, 4, 1, "", "cum_reduce"], [707, 4, 1, "", "cum_sum"], [708, 4, 1, "", "cum_sum_horizontal"], [709, 4, 1, "", "cumfold"], [710, 4, 1, "", "cumreduce"], [711, 4, 1, "", "cumsum"], [712, 4, 1, "", "cumsum_horizontal"], [713, 4, 1, "", "date"], [714, 4, 1, "", "date_range"], [715, 4, 1, "", "date_ranges"], [716, 4, 1, "", "datetime"], [717, 4, 1, "", "datetime_range"], [718, 4, 1, "", "datetime_ranges"], [90, 4, 1, "", "disable_string_cache"], [719, 4, 1, "", "duration"], [720, 4, 1, "", "element"], [91, 4, 1, "", "enable_string_cache"], [721, 4, 1, "", "exclude"], [722, 4, 1, "", "first"], [723, 4, 1, "", "fold"], [724, 4, 1, "", "format"], [107, 4, 1, "", "from_arrow"], [108, 4, 1, "", "from_dataframe"], [109, 4, 1, "", "from_dict"], [110, 4, 1, "", "from_dicts"], [725, 4, 1, "", "from_epoch"], [111, 4, 1, "", "from_numpy"], [112, 4, 1, "", "from_pandas"], [113, 4, 1, "", "from_records"], [114, 4, 1, "", "from_repr"], [115, 4, 1, "", "get_index_type"], [726, 4, 1, "", "groups"], [727, 4, 1, "", "head"], [728, 4, 1, "", "implode"], [729, 4, 1, "", "int_range"], [730, 4, 1, "", "int_ranges"], [731, 4, 1, "", "last"], [732, 4, 1, "", "len"], [733, 4, 1, "", "lit"], [734, 4, 1, "", "map"], [735, 4, 1, "", "map_batches"], [736, 4, 1, "", "map_groups"], [737, 4, 1, "", "max"], [738, 4, 1, "", "max_horizontal"], [739, 4, 1, "", "mean"], [740, 4, 1, "", "median"], [741, 4, 1, "", "min"], [742, 4, 1, "", "min_horizontal"], [743, 4, 1, "", "n_unique"], [744, 4, 1, "", "ones"], [745, 4, 1, "", "quantile"], [117, 4, 1, "", "read_avro"], [118, 4, 1, "", "read_csv"], [119, 4, 1, "", "read_csv_batched"], [120, 4, 1, "", "read_database"], [121, 4, 1, "", "read_database_uri"], [122, 4, 1, "", "read_delta"], [123, 4, 1, "", "read_excel"], [124, 4, 1, "", "read_ipc"], [125, 4, 1, "", "read_ipc_schema"], [126, 4, 1, "", "read_ipc_stream"], [127, 4, 1, "", "read_json"], [128, 4, 1, "", "read_ndjson"], [129, 4, 1, "", "read_ods"], [130, 4, 1, "", "read_parquet"], [131, 4, 1, "", "read_parquet_schema"], [746, 4, 1, "", "reduce"], [747, 4, 1, "", "repeat"], [748, 4, 1, "", "rolling_corr"], [749, 4, 1, "", "rolling_cov"], [132, 4, 1, "", "scan_csv"], [133, 4, 1, "", "scan_delta"], [134, 4, 1, "", "scan_iceberg"], [135, 4, 1, "", "scan_ipc"], [136, 4, 1, "", "scan_ndjson"], [137, 4, 1, "", "scan_parquet"], [138, 4, 1, "", "scan_pyarrow_dataset"], [750, 4, 1, "", "select"], [886, 6, 0, "-", "selectors"], [139, 4, 1, "", "set_random_seed"], [140, 4, 1, "", "show_versions"], [751, 4, 1, "", "sql_expr"], [752, 4, 1, "", "std"], [753, 4, 1, "", "struct"], [754, 4, 1, "", "sum"], [755, 4, 1, "", "sum_horizontal"], [756, 4, 1, "", "tail"], [152, 4, 1, "", "threadpool_size"], [757, 4, 1, "", "time"], [758, 4, 1, "", "time_range"], [759, 4, 1, "", "time_ranges"], [153, 4, 1, "", "using_string_cache"], [760, 4, 1, "", "var"], [761, 4, 1, "", "when"], [762, 4, 1, "", "zeros"]], "polars.Array": [[2, 1, 1, "", "__init__"]], "polars.Binary": [[3, 1, 1, "", "__init__"]], "polars.Boolean": [[4, 1, 1, "", "__init__"]], "polars.Categorical": [[5, 1, 1, "", "__init__"]], "polars.Config": [[6, 1, 1, "", "activate_decimals"], [7, 1, 1, "", "load"], [8, 1, 1, "", "load_from_file"], [9, 1, 1, "", "restore_defaults"], [10, 1, 1, "", "save"], [11, 1, 1, "", "save_to_file"], [12, 1, 1, "", "set_ascii_tables"], [13, 1, 1, "", "set_auto_structify"], [14, 1, 1, "", "set_decimal_separator"], [15, 1, 1, "", "set_float_precision"], [16, 1, 1, "", "set_fmt_float"], [17, 1, 1, "", "set_fmt_str_lengths"], [18, 1, 1, "", "set_fmt_table_cell_list_len"], [19, 1, 1, "", "set_streaming_chunk_size"], [20, 1, 1, "", "set_tbl_cell_alignment"], [21, 1, 1, "", "set_tbl_cell_numeric_alignment"], [22, 1, 1, "", "set_tbl_cols"], [23, 1, 1, "", "set_tbl_column_data_type_inline"], [24, 1, 1, "", "set_tbl_dataframe_shape_below"], [25, 1, 1, "", "set_tbl_formatting"], [26, 1, 1, "", "set_tbl_hide_column_data_types"], [27, 1, 1, "", "set_tbl_hide_column_names"], [28, 1, 1, "", "set_tbl_hide_dataframe_shape"], [29, 1, 1, "", "set_tbl_hide_dtype_separator"], [30, 1, 1, "", "set_tbl_rows"], [31, 1, 1, "", "set_tbl_width_chars"], [32, 1, 1, "", "set_thousands_separator"], [33, 1, 1, "", "set_trim_decimal_zeros"], [34, 1, 1, "", "set_verbose"], [35, 1, 1, "", "state"]], "polars.DataFrame": [[156, 1, 1, "", "__dataframe__"], [157, 1, 1, "", "apply"], [158, 1, 1, "", "approx_n_unique"], [159, 1, 1, "", "bottom_k"], [160, 1, 1, "", "cast"], [161, 1, 1, "", "clear"], [162, 1, 1, "", "clone"], [163, 2, 1, "", "columns"], [164, 1, 1, "", "corr"], [165, 1, 1, "", "count"], [166, 1, 1, "", "describe"], [167, 1, 1, "", "drop"], [168, 1, 1, "", "drop_in_place"], [169, 1, 1, "", "drop_nulls"], [170, 2, 1, "", "dtypes"], [171, 1, 1, "", "equals"], [172, 1, 1, "", "estimated_size"], [173, 1, 1, "", "explode"], [174, 1, 1, "", "extend"], [175, 1, 1, "", "fill_nan"], [176, 1, 1, "", "fill_null"], [177, 1, 1, "", "filter"], [178, 1, 1, "", "find_idx_by_name"], [179, 2, 1, "", "flags"], [180, 1, 1, "", "fold"], [181, 1, 1, "", "frame_equal"], [182, 1, 1, "", "gather_every"], [183, 1, 1, "", "get_column"], [184, 1, 1, "", "get_column_index"], [185, 1, 1, "", "get_columns"], [186, 1, 1, "", "glimpse"], [187, 1, 1, "", "group_by"], [188, 1, 1, "", "group_by_dynamic"], [189, 1, 1, "", "group_by_rolling"], [190, 1, 1, "", "groupby"], [191, 1, 1, "", "groupby_dynamic"], [192, 1, 1, "", "groupby_rolling"], [193, 1, 1, "", "hash_rows"], [194, 1, 1, "", "head"], [195, 2, 1, "", "height"], [196, 1, 1, "", "hstack"], [197, 1, 1, "", "insert_at_idx"], [198, 1, 1, "", "insert_column"], [199, 1, 1, "", "interpolate"], [200, 1, 1, "", "is_duplicated"], [201, 1, 1, "", "is_empty"], [202, 1, 1, "", "is_unique"], [203, 1, 1, "", "item"], [204, 1, 1, "", "iter_columns"], [205, 1, 1, "", "iter_rows"], [206, 1, 1, "", "iter_slices"], [207, 1, 1, "", "join"], [208, 1, 1, "", "join_asof"], [209, 1, 1, "", "lazy"], [210, 1, 1, "", "limit"], [211, 1, 1, "", "map_rows"], [212, 1, 1, "", "max"], [213, 1, 1, "", "max_horizontal"], [214, 1, 1, "", "mean"], [215, 1, 1, "", "mean_horizontal"], [216, 1, 1, "", "median"], [217, 1, 1, "", "melt"], [218, 1, 1, "", "merge_sorted"], [219, 1, 1, "", "min"], [220, 1, 1, "", "min_horizontal"], [221, 1, 1, "", "n_chunks"], [222, 1, 1, "", "n_unique"], [223, 1, 1, "", "null_count"], [224, 1, 1, "", "partition_by"], [225, 1, 1, "", "pipe"], [226, 1, 1, "", "pivot"], [227, 1, 1, "", "product"], [228, 1, 1, "", "quantile"], [229, 1, 1, "", "rechunk"], [230, 1, 1, "", "rename"], [231, 1, 1, "", "replace"], [232, 1, 1, "", "replace_at_idx"], [233, 1, 1, "", "replace_column"], [234, 1, 1, "", "reverse"], [235, 1, 1, "", "rolling"], [236, 1, 1, "", "row"], [237, 1, 1, "", "rows"], [238, 1, 1, "", "rows_by_key"], [239, 1, 1, "", "sample"], [240, 2, 1, "", "schema"], [241, 1, 1, "", "select"], [242, 1, 1, "", "select_seq"], [243, 1, 1, "", "set_sorted"], [244, 2, 1, "", "shape"], [245, 1, 1, "", "shift"], [246, 1, 1, "", "shift_and_fill"], [247, 1, 1, "", "shrink_to_fit"], [248, 1, 1, "", "slice"], [249, 1, 1, "", "sort"], [250, 1, 1, "", "std"], [251, 1, 1, "", "sum"], [252, 1, 1, "", "sum_horizontal"], [253, 1, 1, "", "tail"], [254, 1, 1, "", "take_every"], [255, 1, 1, "", "to_arrow"], [256, 1, 1, "", "to_dict"], [257, 1, 1, "", "to_dicts"], [258, 1, 1, "", "to_dummies"], [259, 1, 1, "", "to_init_repr"], [260, 1, 1, "", "to_numpy"], [261, 1, 1, "", "to_pandas"], [262, 1, 1, "", "to_series"], [263, 1, 1, "", "to_struct"], [264, 1, 1, "", "top_k"], [265, 1, 1, "", "transpose"], [266, 1, 1, "", "unique"], [267, 1, 1, "", "unnest"], [268, 1, 1, "", "unstack"], [269, 1, 1, "", "update"], [270, 1, 1, "", "upsample"], [271, 1, 1, "", "var"], [272, 1, 1, "", "vstack"], [273, 2, 1, "", "width"], [274, 1, 1, "", "with_columns"], [275, 1, 1, "", "with_columns_seq"], [276, 1, 1, "", "with_row_count"], [277, 1, 1, "", "with_row_index"], [36, 1, 1, "", "write_avro"], [37, 1, 1, "", "write_csv"], [38, 1, 1, "", "write_database"], [39, 1, 1, "", "write_delta"], [40, 1, 1, "", "write_excel"], [41, 1, 1, "", "write_ipc"], [42, 1, 1, "", "write_ipc_stream"], [43, 1, 1, "", "write_json"], [44, 1, 1, "", "write_ndjson"], [45, 1, 1, "", "write_parquet"]], "polars.DataType": [[46, 1, 1, "", "__init__"]], "polars.Date": [[47, 1, 1, "", "__init__"]], "polars.Datetime": [[48, 1, 1, "", "__init__"]], "polars.Decimal": [[49, 1, 1, "", "__init__"]], "polars.Duration": [[50, 1, 1, "", "__init__"]], "polars.Enum": [[51, 1, 1, "", "__init__"]], "polars.Expr": [[308, 1, 1, "", "abs"], [309, 1, 1, "", "add"], [310, 1, 1, "", "agg_groups"], [311, 1, 1, "", "alias"], [312, 1, 1, "", "all"], [313, 1, 1, "", "and_"], [314, 1, 1, "", "any"], [315, 1, 1, "", "append"], [316, 1, 1, "", "apply"], [317, 1, 1, "", "approx_n_unique"], [318, 1, 1, "", "arccos"], [319, 1, 1, "", "arccosh"], [320, 1, 1, "", "arcsin"], [321, 1, 1, "", "arcsinh"], [322, 1, 1, "", "arctan"], [323, 1, 1, "", "arctanh"], [324, 1, 1, "", "arg_max"], [325, 1, 1, "", "arg_min"], [326, 1, 1, "", "arg_sort"], [327, 1, 1, "", "arg_true"], [328, 1, 1, "", "arg_unique"], [347, 1, 1, "", "backward_fill"], [353, 1, 1, "", "bottom_k"], [354, 1, 1, "", "cast"], [357, 1, 1, "", "cbrt"], [358, 1, 1, "", "ceil"], [359, 1, 1, "", "clip"], [360, 1, 1, "", "clip_max"], [361, 1, 1, "", "clip_min"], [362, 1, 1, "", "cos"], [363, 1, 1, "", "cosh"], [364, 1, 1, "", "cot"], [365, 1, 1, "", "count"], [366, 1, 1, "", "cum_count"], [367, 1, 1, "", "cum_max"], [368, 1, 1, "", "cum_min"], [369, 1, 1, "", "cum_prod"], [370, 1, 1, "", "cum_sum"], [371, 1, 1, "", "cumcount"], [372, 1, 1, "", "cummax"], [373, 1, 1, "", "cummin"], [374, 1, 1, "", "cumprod"], [375, 1, 1, "", "cumsum"], [376, 1, 1, "", "cumulative_eval"], [377, 1, 1, "", "cut"], [378, 1, 1, "", "degrees"], [379, 1, 1, "", "diff"], [380, 1, 1, "", "dot"], [381, 1, 1, "", "drop_nans"], [382, 1, 1, "", "drop_nulls"], [433, 1, 1, "", "entropy"], [434, 1, 1, "", "eq"], [435, 1, 1, "", "eq_missing"], [436, 1, 1, "", "ewm_mean"], [437, 1, 1, "", "ewm_std"], [438, 1, 1, "", "ewm_var"], [439, 1, 1, "", "exclude"], [440, 1, 1, "", "exp"], [441, 1, 1, "", "explode"], [442, 1, 1, "", "extend_constant"], [443, 1, 1, "", "fill_nan"], [444, 1, 1, "", "fill_null"], [445, 1, 1, "", "filter"], [446, 1, 1, "", "first"], [447, 1, 1, "", "flatten"], [448, 1, 1, "", "floor"], [449, 1, 1, "", "floordiv"], [450, 1, 1, "", "forward_fill"], [451, 1, 1, "", "from_json"], [452, 1, 1, "", "gather"], [453, 1, 1, "", "gather_every"], [454, 1, 1, "", "ge"], [455, 1, 1, "", "get"], [456, 1, 1, "", "gt"], [457, 1, 1, "", "hash"], [458, 1, 1, "", "head"], [459, 1, 1, "", "hist"], [460, 1, 1, "", "implode"], [461, 1, 1, "", "inspect"], [462, 1, 1, "", "interpolate"], [463, 1, 1, "", "is_between"], [464, 1, 1, "", "is_duplicated"], [465, 1, 1, "", "is_finite"], [466, 1, 1, "", "is_first"], [467, 1, 1, "", "is_first_distinct"], [468, 1, 1, "", "is_in"], [469, 1, 1, "", "is_infinite"], [470, 1, 1, "", "is_last"], [471, 1, 1, "", "is_last_distinct"], [472, 1, 1, "", "is_nan"], [473, 1, 1, "", "is_not"], [474, 1, 1, "", "is_not_nan"], [475, 1, 1, "", "is_not_null"], [476, 1, 1, "", "is_null"], [477, 1, 1, "", "is_unique"], [478, 1, 1, "", "keep_name"], [479, 1, 1, "", "kurtosis"], [480, 1, 1, "", "last"], [481, 1, 1, "", "le"], [482, 1, 1, "", "len"], [483, 1, 1, "", "limit"], [522, 1, 1, "", "log"], [523, 1, 1, "", "log10"], [524, 1, 1, "", "log1p"], [525, 1, 1, "", "lower_bound"], [526, 1, 1, "", "lt"], [527, 1, 1, "", "map"], [528, 1, 1, "", "map_alias"], [529, 1, 1, "", "map_batches"], [530, 1, 1, "", "map_dict"], [531, 1, 1, "", "map_elements"], [532, 1, 1, "", "max"], [533, 1, 1, "", "mean"], [534, 1, 1, "", "median"], [545, 1, 1, "", "min"], [546, 1, 1, "", "mod"], [547, 1, 1, "", "mode"], [548, 1, 1, "", "mul"], [549, 1, 1, "", "n_unique"], [556, 1, 1, "", "nan_max"], [557, 1, 1, "", "nan_min"], [558, 1, 1, "", "ne"], [559, 1, 1, "", "ne_missing"], [560, 1, 1, "", "neg"], [561, 1, 1, "", "not_"], [562, 1, 1, "", "null_count"], [563, 1, 1, "", "or_"], [564, 1, 1, "", "over"], [565, 1, 1, "", "pct_change"], [566, 1, 1, "", "peak_max"], [567, 1, 1, "", "peak_min"], [568, 1, 1, "", "pipe"], [569, 1, 1, "", "pow"], [570, 1, 1, "", "prefix"], [571, 1, 1, "", "product"], [572, 1, 1, "", "qcut"], [573, 1, 1, "", "quantile"], [574, 1, 1, "", "radians"], [575, 1, 1, "", "rank"], [576, 1, 1, "", "rechunk"], [577, 1, 1, "", "reinterpret"], [578, 1, 1, "", "repeat_by"], [579, 1, 1, "", "replace"], [580, 1, 1, "", "reshape"], [581, 1, 1, "", "reverse"], [582, 1, 1, "", "rle"], [583, 1, 1, "", "rle_id"], [584, 1, 1, "", "rolling"], [585, 1, 1, "", "rolling_apply"], [586, 1, 1, "", "rolling_map"], [587, 1, 1, "", "rolling_max"], [588, 1, 1, "", "rolling_mean"], [589, 1, 1, "", "rolling_median"], [590, 1, 1, "", "rolling_min"], [591, 1, 1, "", "rolling_quantile"], [592, 1, 1, "", "rolling_skew"], [593, 1, 1, "", "rolling_std"], [594, 1, 1, "", "rolling_sum"], [595, 1, 1, "", "rolling_var"], [596, 1, 1, "", "round"], [597, 1, 1, "", "round_sig_figs"], [598, 1, 1, "", "sample"], [599, 1, 1, "", "search_sorted"], [600, 1, 1, "", "set_sorted"], [601, 1, 1, "", "shift"], [602, 1, 1, "", "shift_and_fill"], [603, 1, 1, "", "shrink_dtype"], [604, 1, 1, "", "shuffle"], [605, 1, 1, "", "sign"], [606, 1, 1, "", "sin"], [607, 1, 1, "", "sinh"], [608, 1, 1, "", "skew"], [609, 1, 1, "", "slice"], [610, 1, 1, "", "sort"], [611, 1, 1, "", "sort_by"], [612, 1, 1, "", "sqrt"], [613, 1, 1, "", "std"], [669, 1, 1, "", "sub"], [670, 1, 1, "", "suffix"], [671, 1, 1, "", "sum"], [672, 1, 1, "", "tail"], [673, 1, 1, "", "take"], [674, 1, 1, "", "take_every"], [675, 1, 1, "", "tan"], [676, 1, 1, "", "tanh"], [677, 1, 1, "", "to_physical"], [678, 1, 1, "", "top_k"], [679, 1, 1, "", "truediv"], [680, 1, 1, "", "unique"], [681, 1, 1, "", "unique_counts"], [682, 1, 1, "", "upper_bound"], [683, 1, 1, "", "value_counts"], [684, 1, 1, "", "var"], [685, 1, 1, "", "where"], [686, 1, 1, "", "xor"]], "polars.Expr.arr": [[329, 1, 1, "", "all"], [330, 1, 1, "", "any"], [331, 1, 1, "", "arg_max"], [332, 1, 1, "", "arg_min"], [333, 1, 1, "", "contains"], [334, 1, 1, "", "count_matches"], [335, 1, 1, "", "explode"], [336, 1, 1, "", "first"], [337, 1, 1, "", "get"], [338, 1, 1, "", "join"], [339, 1, 1, "", "last"], [340, 1, 1, "", "max"], [341, 1, 1, "", "min"], [342, 1, 1, "", "reverse"], [343, 1, 1, "", "sort"], [344, 1, 1, "", "sum"], [345, 1, 1, "", "to_list"], [346, 1, 1, "", "unique"]], "polars.Expr.bin": [[348, 1, 1, "", "contains"], [349, 1, 1, "", "decode"], [350, 1, 1, "", "encode"], [351, 1, 1, "", "ends_with"], [352, 1, 1, "", "starts_with"]], "polars.Expr.cat": [[355, 1, 1, "", "get_categories"], [356, 1, 1, "", "set_ordering"]], "polars.Expr.dt": [[383, 1, 1, "", "base_utc_offset"], [384, 1, 1, "", "cast_time_unit"], [385, 1, 1, "", "century"], [386, 1, 1, "", "combine"], [387, 1, 1, "", "convert_time_zone"], [388, 1, 1, "", "date"], [389, 1, 1, "", "datetime"], [390, 1, 1, "", "day"], [391, 1, 1, "", "days"], [392, 1, 1, "", "dst_offset"], [393, 1, 1, "", "epoch"], [394, 1, 1, "", "hour"], [395, 1, 1, "", "hours"], [396, 1, 1, "", "is_leap_year"], [397, 1, 1, "", "iso_year"], [398, 1, 1, "", "microsecond"], [399, 1, 1, "", "microseconds"], [400, 1, 1, "", "millennium"], [401, 1, 1, "", "millisecond"], [402, 1, 1, "", "milliseconds"], [403, 1, 1, "", "minute"], [404, 1, 1, "", "minutes"], [405, 1, 1, "", "month"], [406, 1, 1, "", "month_end"], [407, 1, 1, "", "month_start"], [408, 1, 1, "", "nanosecond"], [409, 1, 1, "", "nanoseconds"], [410, 1, 1, "", "offset_by"], [411, 1, 1, "", "ordinal_day"], [412, 1, 1, "", "quarter"], [413, 1, 1, "", "replace_time_zone"], [414, 1, 1, "", "round"], [415, 1, 1, "", "second"], [416, 1, 1, "", "seconds"], [417, 1, 1, "", "strftime"], [418, 1, 1, "", "time"], [419, 1, 1, "", "timestamp"], [420, 1, 1, "", "to_string"], [421, 1, 1, "", "total_days"], [422, 1, 1, "", "total_hours"], [423, 1, 1, "", "total_microseconds"], [424, 1, 1, "", "total_milliseconds"], [425, 1, 1, "", "total_minutes"], [426, 1, 1, "", "total_nanoseconds"], [427, 1, 1, "", "total_seconds"], [428, 1, 1, "", "truncate"], [429, 1, 1, "", "week"], [430, 1, 1, "", "weekday"], [431, 1, 1, "", "with_time_unit"], [432, 1, 1, "", "year"]], "polars.Expr.list": [[484, 1, 1, "", "all"], [485, 1, 1, "", "any"], [486, 1, 1, "", "arg_max"], [487, 1, 1, "", "arg_min"], [488, 1, 1, "", "concat"], [489, 1, 1, "", "contains"], [490, 1, 1, "", "count_match"], [491, 1, 1, "", "count_matches"], [492, 1, 1, "", "diff"], [493, 1, 1, "", "drop_nulls"], [494, 1, 1, "", "eval"], [495, 1, 1, "", "explode"], [496, 1, 1, "", "first"], [497, 1, 1, "", "gather"], [498, 1, 1, "", "get"], [499, 1, 1, "", "head"], [500, 1, 1, "", "join"], [501, 1, 1, "", "last"], [502, 1, 1, "", "len"], [503, 1, 1, "", "lengths"], [504, 1, 1, "", "max"], [505, 1, 1, "", "mean"], [506, 1, 1, "", "min"], [507, 1, 1, "", "reverse"], [508, 1, 1, "", "sample"], [509, 1, 1, "", "set_difference"], [510, 1, 1, "", "set_intersection"], [511, 1, 1, "", "set_symmetric_difference"], [512, 1, 1, "", "set_union"], [513, 1, 1, "", "shift"], [514, 1, 1, "", "slice"], [515, 1, 1, "", "sort"], [516, 1, 1, "", "sum"], [517, 1, 1, "", "tail"], [518, 1, 1, "", "take"], [519, 1, 1, "", "to_array"], [520, 1, 1, "", "to_struct"], [521, 1, 1, "", "unique"]], "polars.Expr.meta": [[535, 1, 1, "", "eq"], [536, 1, 1, "", "has_multiple_outputs"], [537, 1, 1, "", "is_regex_projection"], [538, 1, 1, "", "ne"], [539, 1, 1, "", "output_name"], [540, 1, 1, "", "pop"], [541, 1, 1, "", "root_names"], [542, 1, 1, "", "tree_format"], [543, 1, 1, "", "undo_aliases"], [544, 1, 1, "", "write_json"]], "polars.Expr.name": [[550, 1, 1, "", "keep"], [551, 1, 1, "", "map"], [552, 1, 1, "", "prefix"], [553, 1, 1, "", "suffix"], [554, 1, 1, "", "to_lowercase"], [555, 1, 1, "", "to_uppercase"]], "polars.Expr.str": [[614, 1, 1, "", "concat"], [615, 1, 1, "", "contains"], [616, 1, 1, "", "contains_any"], [617, 1, 1, "", "count_match"], [618, 1, 1, "", "count_matches"], [619, 1, 1, "", "decode"], [620, 1, 1, "", "encode"], [621, 1, 1, "", "ends_with"], [622, 1, 1, "", "explode"], [623, 1, 1, "", "extract"], [624, 1, 1, "", "extract_all"], [625, 1, 1, "", "extract_groups"], [626, 1, 1, "", "find"], [627, 1, 1, "", "json_decode"], [628, 1, 1, "", "json_extract"], [629, 1, 1, "", "json_path_match"], [630, 1, 1, "", "len_bytes"], [631, 1, 1, "", "len_chars"], [632, 1, 1, "", "lengths"], [633, 1, 1, "", "ljust"], [634, 1, 1, "", "lstrip"], [635, 1, 1, "", "n_chars"], [636, 1, 1, "", "pad_end"], [637, 1, 1, "", "pad_start"], [638, 1, 1, "", "parse_int"], [639, 1, 1, "", "replace"], [640, 1, 1, "", "replace_all"], [641, 1, 1, "", "replace_many"], [642, 1, 1, "", "reverse"], [643, 1, 1, "", "rjust"], [644, 1, 1, "", "rstrip"], [645, 1, 1, "", "slice"], [646, 1, 1, "", "split"], [647, 1, 1, "", "split_exact"], [648, 1, 1, "", "splitn"], [649, 1, 1, "", "starts_with"], [650, 1, 1, "", "strip"], [651, 1, 1, "", "strip_chars"], [652, 1, 1, "", "strip_chars_end"], [653, 1, 1, "", "strip_chars_start"], [654, 1, 1, "", "strip_prefix"], [655, 1, 1, "", "strip_suffix"], [656, 1, 1, "", "strptime"], [657, 1, 1, "", "to_date"], [658, 1, 1, "", "to_datetime"], [659, 1, 1, "", "to_decimal"], [660, 1, 1, "", "to_integer"], [661, 1, 1, "", "to_lowercase"], [662, 1, 1, "", "to_time"], [663, 1, 1, "", "to_titlecase"], [664, 1, 1, "", "to_uppercase"], [665, 1, 1, "", "zfill"]], "polars.Expr.struct": [[666, 1, 1, "", "field"], [667, 1, 1, "", "json_encode"], [668, 1, 1, "", "rename_fields"]], "polars.Float32": [[52, 1, 1, "", "__init__"]], "polars.Float64": [[53, 1, 1, "", "__init__"]], "polars.Int16": [[54, 1, 1, "", "__init__"]], "polars.Int32": [[55, 1, 1, "", "__init__"]], "polars.Int64": [[56, 1, 1, "", "__init__"]], "polars.Int8": [[57, 1, 1, "", "__init__"]], "polars.LazyFrame": [[786, 1, 1, "", "approx_n_unique"], [787, 1, 1, "", "bottom_k"], [788, 1, 1, "", "cache"], [789, 1, 1, "", "cast"], [790, 1, 1, "", "clear"], [791, 1, 1, "", "clone"], [792, 1, 1, "", "collect"], [793, 1, 1, "", "collect_async"], [794, 2, 1, "", "columns"], [795, 1, 1, "", "count"], [796, 1, 1, "", "describe"], [797, 1, 1, "", "deserialize"], [798, 1, 1, "", "drop"], [799, 1, 1, "", "drop_nulls"], [800, 2, 1, "", "dtypes"], [801, 1, 1, "", "explain"], [802, 1, 1, "", "explode"], [803, 1, 1, "", "fetch"], [804, 1, 1, "", "fill_nan"], [805, 1, 1, "", "fill_null"], [806, 1, 1, "", "filter"], [807, 1, 1, "", "first"], [808, 1, 1, "", "gather_every"], [809, 1, 1, "", "group_by"], [810, 1, 1, "", "group_by_dynamic"], [811, 1, 1, "", "group_by_rolling"], [812, 1, 1, "", "groupby"], [813, 1, 1, "", "groupby_dynamic"], [814, 1, 1, "", "groupby_rolling"], [815, 1, 1, "", "head"], [816, 1, 1, "", "inspect"], [817, 1, 1, "", "interpolate"], [818, 1, 1, "", "join"], [819, 1, 1, "", "join_asof"], [820, 1, 1, "", "last"], [821, 1, 1, "", "lazy"], [822, 1, 1, "", "limit"], [823, 1, 1, "", "map"], [824, 1, 1, "", "map_batches"], [825, 1, 1, "", "max"], [826, 1, 1, "", "mean"], [827, 1, 1, "", "median"], [828, 1, 1, "", "melt"], [829, 1, 1, "", "merge_sorted"], [830, 1, 1, "", "min"], [831, 1, 1, "", "null_count"], [832, 1, 1, "", "pipe"], [833, 1, 1, "", "profile"], [834, 1, 1, "", "quantile"], [835, 1, 1, "", "rename"], [836, 1, 1, "", "reverse"], [837, 1, 1, "", "rolling"], [838, 2, 1, "", "schema"], [839, 1, 1, "", "select"], [840, 1, 1, "", "select_seq"], [841, 1, 1, "", "serialize"], [842, 1, 1, "", "set_sorted"], [843, 1, 1, "", "shift"], [844, 1, 1, "", "shift_and_fill"], [845, 1, 1, "", "show_graph"], [58, 1, 1, "", "sink_csv"], [59, 1, 1, "", "sink_ipc"], [60, 1, 1, "", "sink_ndjson"], [61, 1, 1, "", "sink_parquet"], [846, 1, 1, "", "slice"], [847, 1, 1, "", "sort"], [848, 1, 1, "", "std"], [849, 1, 1, "", "sum"], [850, 1, 1, "", "tail"], [851, 1, 1, "", "take_every"], [852, 1, 1, "", "top_k"], [853, 1, 1, "", "unique"], [854, 1, 1, "", "unnest"], [855, 1, 1, "", "update"], [856, 1, 1, "", "var"], [857, 2, 1, "", "width"], [858, 1, 1, "", "with_columns"], [859, 1, 1, "", "with_columns_seq"], [860, 1, 1, "", "with_context"], [861, 1, 1, "", "with_row_count"], [862, 1, 1, "", "with_row_index"]], "polars.List": [[62, 1, 1, "", "__init__"]], "polars.Null": [[63, 1, 1, "", "__init__"]], "polars.Object": [[64, 1, 1, "", "__init__"]], "polars.SQLContext": [[1269, 1, 1, "", "__enter__"], [1269, 1, 1, "", "__exit__"], [1269, 1, 1, "", "__init__"], [65, 1, 1, "", "execute"], [66, 1, 1, "", "register"], [67, 1, 1, "", "register_globals"], [68, 1, 1, "", "register_many"], [69, 1, 1, "", "tables"], [70, 1, 1, "", "unregister"]], "polars.Series": [[888, 1, 1, "", "abs"], [889, 1, 1, "", "alias"], [890, 1, 1, "", "all"], [891, 1, 1, "", "any"], [892, 1, 1, "", "append"], [893, 1, 1, "", "apply"], [894, 1, 1, "", "arccos"], [895, 1, 1, "", "arccosh"], [896, 1, 1, "", "arcsin"], [897, 1, 1, "", "arcsinh"], [898, 1, 1, "", "arctan"], [899, 1, 1, "", "arctanh"], [900, 1, 1, "", "arg_max"], [901, 1, 1, "", "arg_min"], [902, 1, 1, "", "arg_sort"], [903, 1, 1, "", "arg_true"], [904, 1, 1, "", "arg_unique"], [928, 1, 1, "", "bottom_k"], [929, 1, 1, "", "cast"], [935, 1, 1, "", "cbrt"], [936, 1, 1, "", "ceil"], [937, 1, 1, "", "chunk_lengths"], [938, 1, 1, "", "clear"], [939, 1, 1, "", "clip"], [940, 1, 1, "", "clip_max"], [941, 1, 1, "", "clip_min"], [942, 1, 1, "", "clone"], [943, 1, 1, "", "cos"], [944, 1, 1, "", "cosh"], [945, 1, 1, "", "cot"], [946, 1, 1, "", "cum_max"], [947, 1, 1, "", "cum_min"], [948, 1, 1, "", "cum_prod"], [949, 1, 1, "", "cum_sum"], [950, 1, 1, "", "cummax"], [951, 1, 1, "", "cummin"], [952, 1, 1, "", "cumprod"], [953, 1, 1, "", "cumsum"], [954, 1, 1, "", "cumulative_eval"], [955, 1, 1, "", "cut"], [956, 1, 1, "", "describe"], [957, 1, 1, "", "diff"], [958, 1, 1, "", "dot"], [959, 1, 1, "", "drop_nans"], [960, 1, 1, "", "drop_nulls"], [1015, 3, 1, "", "dtype"], [1016, 1, 1, "", "entropy"], [1017, 1, 1, "", "equals"], [1018, 1, 1, "", "estimated_size"], [1019, 1, 1, "", "ewm_mean"], [1020, 1, 1, "", "ewm_std"], [1021, 1, 1, "", "ewm_var"], [1022, 1, 1, "", "exp"], [1023, 1, 1, "", "explode"], [1024, 1, 1, "", "extend"], [1025, 1, 1, "", "extend_constant"], [1026, 1, 1, "", "fill_nan"], [1027, 1, 1, "", "fill_null"], [1028, 1, 1, "", "filter"], [1029, 3, 1, "", "flags"], [1030, 1, 1, "", "floor"], [1031, 1, 1, "", "gather"], [1032, 1, 1, "", "gather_every"], [1033, 1, 1, "", "get_chunks"], [1034, 1, 1, "", "has_validity"], [1035, 1, 1, "", "hash"], [1036, 1, 1, "", "head"], [1037, 1, 1, "", "hist"], [1038, 1, 1, "", "implode"], [1039, 3, 1, "", "inner_dtype"], [1040, 1, 1, "", "interpolate"], [1041, 1, 1, "", "is_between"], [1042, 1, 1, "", "is_boolean"], [1043, 1, 1, "", "is_duplicated"], [1044, 1, 1, "", "is_empty"], [1045, 1, 1, "", "is_finite"], [1046, 1, 1, "", "is_first"], [1047, 1, 1, "", "is_first_distinct"], [1048, 1, 1, "", "is_float"], [1049, 1, 1, "", "is_in"], [1050, 1, 1, "", "is_infinite"], [1051, 1, 1, "", "is_integer"], [1052, 1, 1, "", "is_last"], [1053, 1, 1, "", "is_last_distinct"], [1054, 1, 1, "", "is_nan"], [1055, 1, 1, "", "is_not_nan"], [1056, 1, 1, "", "is_not_null"], [1057, 1, 1, "", "is_null"], [1058, 1, 1, "", "is_numeric"], [1059, 1, 1, "", "is_sorted"], [1060, 1, 1, "", "is_temporal"], [1061, 1, 1, "", "is_unique"], [1062, 1, 1, "", "is_utf8"], [1063, 1, 1, "", "item"], [1064, 1, 1, "", "kurtosis"], [1065, 1, 1, "", "len"], [1066, 1, 1, "", "limit"], [1105, 1, 1, "", "log"], [1106, 1, 1, "", "log10"], [1107, 1, 1, "", "log1p"], [1108, 1, 1, "", "lower_bound"], [1109, 1, 1, "", "map_dict"], [1110, 1, 1, "", "map_elements"], [1111, 1, 1, "", "max"], [1112, 1, 1, "", "mean"], [1113, 1, 1, "", "median"], [1114, 1, 1, "", "min"], [1115, 1, 1, "", "mode"], [1116, 1, 1, "", "n_chunks"], [1117, 1, 1, "", "n_unique"], [1118, 3, 1, "", "name"], [1119, 1, 1, "", "nan_max"], [1120, 1, 1, "", "nan_min"], [1121, 1, 1, "", "new_from_index"], [1122, 1, 1, "", "not_"], [1123, 1, 1, "", "null_count"], [1124, 1, 1, "", "pct_change"], [1125, 1, 1, "", "peak_max"], [1126, 1, 1, "", "peak_min"], [1127, 1, 1, "", "product"], [1128, 1, 1, "", "qcut"], [1129, 1, 1, "", "quantile"], [1130, 1, 1, "", "rank"], [1131, 1, 1, "", "rechunk"], [1132, 1, 1, "", "reinterpret"], [1133, 1, 1, "", "rename"], [1134, 1, 1, "", "replace"], [1135, 1, 1, "", "reshape"], [1136, 1, 1, "", "reverse"], [1137, 1, 1, "", "rle"], [1138, 1, 1, "", "rle_id"], [1139, 1, 1, "", "rolling_apply"], [1140, 1, 1, "", "rolling_map"], [1141, 1, 1, "", "rolling_max"], [1142, 1, 1, "", "rolling_mean"], [1143, 1, 1, "", "rolling_median"], [1144, 1, 1, "", "rolling_min"], [1145, 1, 1, "", "rolling_quantile"], [1146, 1, 1, "", "rolling_skew"], [1147, 1, 1, "", "rolling_std"], [1148, 1, 1, "", "rolling_sum"], [1149, 1, 1, "", "rolling_var"], [1150, 1, 1, "", "round"], [1151, 1, 1, "", "round_sig_figs"], [1152, 1, 1, "", "sample"], [1153, 1, 1, "", "scatter"], [1154, 1, 1, "", "search_sorted"], [1155, 1, 1, "", "series_equal"], [1156, 1, 1, "", "set"], [1157, 1, 1, "", "set_at_idx"], [1158, 1, 1, "", "set_sorted"], [1159, 3, 1, "", "shape"], [1160, 1, 1, "", "shift"], [1161, 1, 1, "", "shift_and_fill"], [1162, 1, 1, "", "shrink_dtype"], [1163, 1, 1, "", "shrink_to_fit"], [1164, 1, 1, "", "shuffle"], [1165, 1, 1, "", "sign"], [1166, 1, 1, "", "sin"], [1167, 1, 1, "", "sinh"], [1168, 1, 1, "", "skew"], [1169, 1, 1, "", "slice"], [1170, 1, 1, "", "sort"], [1171, 1, 1, "", "sqrt"], [1172, 1, 1, "", "std"], [1231, 1, 1, "", "sum"], [1232, 1, 1, "", "tail"], [1233, 1, 1, "", "take"], [1234, 1, 1, "", "take_every"], [1235, 1, 1, "", "tan"], [1236, 1, 1, "", "tanh"], [1237, 1, 1, "", "to_arrow"], [1238, 1, 1, "", "to_dummies"], [1239, 1, 1, "", "to_frame"], [1240, 1, 1, "", "to_init_repr"], [1241, 1, 1, "", "to_list"], [1242, 1, 1, "", "to_numpy"], [1243, 1, 1, "", "to_pandas"], [1244, 1, 1, "", "to_physical"], [1245, 1, 1, "", "top_k"], [1246, 1, 1, "", "unique"], [1247, 1, 1, "", "unique_counts"], [1248, 1, 1, "", "upper_bound"], [1249, 1, 1, "", "value_counts"], [1250, 1, 1, "", "var"], [1251, 1, 1, "", "view"], [1252, 1, 1, "", "zip_with"]], "polars.Series.arr": [[905, 1, 1, "", "all"], [906, 1, 1, "", "any"], [907, 1, 1, "", "arg_max"], [908, 1, 1, "", "arg_min"], [909, 1, 1, "", "contains"], [910, 1, 1, "", "count_matches"], [911, 1, 1, "", "explode"], [912, 1, 1, "", "first"], [913, 1, 1, "", "get"], [914, 1, 1, "", "join"], [915, 1, 1, "", "last"], [916, 1, 1, "", "max"], [917, 1, 1, "", "min"], [918, 1, 1, "", "reverse"], [919, 1, 1, "", "sort"], [920, 1, 1, "", "sum"], [921, 1, 1, "", "to_list"], [922, 1, 1, "", "unique"]], "polars.Series.bin": [[923, 1, 1, "", "contains"], [924, 1, 1, "", "decode"], [925, 1, 1, "", "encode"], [926, 1, 1, "", "ends_with"], [927, 1, 1, "", "starts_with"]], "polars.Series.cat": [[930, 1, 1, "", "get_categories"], [931, 1, 1, "", "is_local"], [932, 1, 1, "", "set_ordering"], [933, 1, 1, "", "to_local"], [934, 1, 1, "", "uses_lexical_ordering"]], "polars.Series.dt": [[961, 1, 1, "", "base_utc_offset"], [962, 1, 1, "", "cast_time_unit"], [963, 1, 1, "", "century"], [964, 1, 1, "", "combine"], [965, 1, 1, "", "convert_time_zone"], [966, 1, 1, "", "date"], [967, 1, 1, "", "datetime"], [968, 1, 1, "", "day"], [969, 1, 1, "", "days"], [970, 1, 1, "", "dst_offset"], [971, 1, 1, "", "epoch"], [972, 1, 1, "", "hour"], [973, 1, 1, "", "hours"], [974, 1, 1, "", "is_leap_year"], [975, 1, 1, "", "iso_year"], [976, 1, 1, "", "max"], [977, 1, 1, "", "mean"], [978, 1, 1, "", "median"], [979, 1, 1, "", "microsecond"], [980, 1, 1, "", "microseconds"], [981, 1, 1, "", "millennium"], [982, 1, 1, "", "millisecond"], [983, 1, 1, "", "milliseconds"], [984, 1, 1, "", "min"], [985, 1, 1, "", "minute"], [986, 1, 1, "", "minutes"], [987, 1, 1, "", "month"], [988, 1, 1, "", "month_end"], [989, 1, 1, "", "month_start"], [990, 1, 1, "", "nanosecond"], [991, 1, 1, "", "nanoseconds"], [992, 1, 1, "", "offset_by"], [993, 1, 1, "", "ordinal_day"], [994, 1, 1, "", "quarter"], [995, 1, 1, "", "replace_time_zone"], [996, 1, 1, "", "round"], [997, 1, 1, "", "second"], [998, 1, 1, "", "seconds"], [999, 1, 1, "", "strftime"], [1000, 1, 1, "", "time"], [1001, 1, 1, "", "timestamp"], [1002, 1, 1, "", "to_string"], [1003, 1, 1, "", "total_days"], [1004, 1, 1, "", "total_hours"], [1005, 1, 1, "", "total_microseconds"], [1006, 1, 1, "", "total_milliseconds"], [1007, 1, 1, "", "total_minutes"], [1008, 1, 1, "", "total_nanoseconds"], [1009, 1, 1, "", "total_seconds"], [1010, 1, 1, "", "truncate"], [1011, 1, 1, "", "week"], [1012, 1, 1, "", "weekday"], [1013, 1, 1, "", "with_time_unit"], [1014, 1, 1, "", "year"]], "polars.Series.list": [[1067, 1, 1, "", "all"], [1068, 1, 1, "", "any"], [1069, 1, 1, "", "arg_max"], [1070, 1, 1, "", "arg_min"], [1071, 1, 1, "", "concat"], [1072, 1, 1, "", "contains"], [1073, 1, 1, "", "count_match"], [1074, 1, 1, "", "count_matches"], [1075, 1, 1, "", "diff"], [1076, 1, 1, "", "drop_nulls"], [1077, 1, 1, "", "eval"], [1078, 1, 1, "", "explode"], [1079, 1, 1, "", "first"], [1080, 1, 1, "", "gather"], [1081, 1, 1, "", "get"], [1082, 1, 1, "", "head"], [1083, 1, 1, "", "join"], [1084, 1, 1, "", "last"], [1085, 1, 1, "", "len"], [1086, 1, 1, "", "lengths"], [1087, 1, 1, "", "max"], [1088, 1, 1, "", "mean"], [1089, 1, 1, "", "min"], [1090, 1, 1, "", "reverse"], [1091, 1, 1, "", "sample"], [1092, 1, 1, "", "set_difference"], [1093, 1, 1, "", "set_intersection"], [1094, 1, 1, "", "set_symmetric_difference"], [1095, 1, 1, "", "set_union"], [1096, 1, 1, "", "shift"], [1097, 1, 1, "", "slice"], [1098, 1, 1, "", "sort"], [1099, 1, 1, "", "sum"], [1100, 1, 1, "", "tail"], [1101, 1, 1, "", "take"], [1102, 1, 1, "", "to_array"], [1103, 1, 1, "", "to_struct"], [1104, 1, 1, "", "unique"]], "polars.Series.str": [[1173, 1, 1, "", "concat"], [1174, 1, 1, "", "contains"], [1175, 1, 1, "", "contains_any"], [1176, 1, 1, "", "count_match"], [1177, 1, 1, "", "count_matches"], [1178, 1, 1, "", "decode"], [1179, 1, 1, "", "encode"], [1180, 1, 1, "", "ends_with"], [1181, 1, 1, "", "explode"], [1182, 1, 1, "", "extract"], [1183, 1, 1, "", "extract_all"], [1184, 1, 1, "", "extract_groups"], [1185, 1, 1, "", "find"], [1186, 1, 1, "", "json_decode"], [1187, 1, 1, "", "json_extract"], [1188, 1, 1, "", "json_path_match"], [1189, 1, 1, "", "len_bytes"], [1190, 1, 1, "", "len_chars"], [1191, 1, 1, "", "lengths"], [1192, 1, 1, "", "ljust"], [1193, 1, 1, "", "lstrip"], [1194, 1, 1, "", "n_chars"], [1195, 1, 1, "", "pad_end"], [1196, 1, 1, "", "pad_start"], [1197, 1, 1, "", "parse_int"], [1198, 1, 1, "", "replace"], [1199, 1, 1, "", "replace_all"], [1200, 1, 1, "", "replace_many"], [1201, 1, 1, "", "reverse"], [1202, 1, 1, "", "rjust"], [1203, 1, 1, "", "rstrip"], [1204, 1, 1, "", "slice"], [1205, 1, 1, "", "split"], [1206, 1, 1, "", "split_exact"], [1207, 1, 1, "", "splitn"], [1208, 1, 1, "", "starts_with"], [1209, 1, 1, "", "strip"], [1210, 1, 1, "", "strip_chars"], [1211, 1, 1, "", "strip_chars_end"], [1212, 1, 1, "", "strip_chars_start"], [1213, 1, 1, "", "strip_prefix"], [1214, 1, 1, "", "strip_suffix"], [1215, 1, 1, "", "strptime"], [1216, 1, 1, "", "to_date"], [1217, 1, 1, "", "to_datetime"], [1218, 1, 1, "", "to_decimal"], [1219, 1, 1, "", "to_integer"], [1220, 1, 1, "", "to_lowercase"], [1221, 1, 1, "", "to_time"], [1222, 1, 1, "", "to_titlecase"], [1223, 1, 1, "", "to_uppercase"], [1224, 1, 1, "", "zfill"]], "polars.Series.struct": [[1225, 1, 1, "", "field"], [1226, 3, 1, "", "fields"], [1227, 1, 1, "", "json_encode"], [1228, 1, 1, "", "rename_fields"], [1229, 3, 1, "", "schema"], [1230, 1, 1, "", "unnest"]], "polars.String": [[71, 1, 1, "", "__init__"]], "polars.StringCache": [[72, 1, 1, "", "__init__"]], "polars.Struct": [[73, 1, 1, "", "__init__"]], "polars.Time": [[74, 1, 1, "", "__init__"]], "polars.UInt16": [[75, 1, 1, "", "__init__"]], "polars.UInt32": [[76, 1, 1, "", "__init__"]], "polars.UInt64": [[77, 1, 1, "", "__init__"]], "polars.UInt8": [[78, 1, 1, "", "__init__"]], "polars.Unknown": [[79, 1, 1, "", "__init__"]], "polars.api": [[82, 4, 1, "", "register_dataframe_namespace"], [83, 4, 1, "", "register_expr_namespace"], [84, 4, 1, "", "register_lazyframe_namespace"], [85, 4, 1, "", "register_series_namespace"]], "polars.dataframe.group_by.GroupBy": [[278, 1, 1, "", "__iter__"], [279, 1, 1, "", "agg"], [280, 1, 1, "", "all"], [281, 1, 1, "", "apply"], [282, 1, 1, "", "count"], [283, 1, 1, "", "first"], [284, 1, 1, "", "head"], [285, 1, 1, "", "last"], [286, 1, 1, "", "len"], [287, 1, 1, "", "map_groups"], [288, 1, 1, "", "max"], [289, 1, 1, "", "mean"], [290, 1, 1, "", "median"], [291, 1, 1, "", "min"], [292, 1, 1, "", "n_unique"], [293, 1, 1, "", "quantile"], [294, 1, 1, "", "sum"], [295, 1, 1, "", "tail"]], "polars.exceptions": [[92, 5, 1, "", "ArrowError"], [93, 5, 1, "", "ColumnNotFoundError"], [94, 5, 1, "", "ComputeError"], [95, 5, 1, "", "DuplicateError"], [96, 5, 1, "", "InvalidOperationError"], [97, 5, 1, "", "NoDataError"], [98, 5, 1, "", "NoRowsReturnedError"], [99, 5, 1, "", "PolarsError"], [100, 5, 1, "", "PolarsPanicError"], [101, 5, 1, "", "RowsError"], [102, 5, 1, "", "SchemaError"], [103, 5, 1, "", "SchemaFieldNotFoundError"], [104, 5, 1, "", "ShapeError"], [105, 5, 1, "", "StructFieldNotFoundError"], [106, 5, 1, "", "TooManyRowsReturnedError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[116, 1, 1, "", "next_batches"]], "polars.lazyframe.group_by.LazyGroupBy": [[863, 1, 1, "", "agg"], [864, 1, 1, "", "all"], [865, 1, 1, "", "apply"], [866, 1, 1, "", "count"], [867, 1, 1, "", "first"], [868, 1, 1, "", "head"], [869, 1, 1, "", "last"], [870, 1, 1, "", "len"], [871, 1, 1, "", "map_groups"], [872, 1, 1, "", "max"], [873, 1, 1, "", "mean"], [874, 1, 1, "", "median"], [875, 1, 1, "", "min"], [876, 1, 1, "", "n_unique"], [877, 1, 1, "", "quantile"], [878, 1, 1, "", "sum"], [879, 1, 1, "", "tail"]], "polars.selectors": [[886, 4, 1, "", "all"], [886, 4, 1, "", "by_dtype"], [886, 4, 1, "", "by_name"], [886, 4, 1, "", "categorical"], [886, 4, 1, "", "contains"], [886, 4, 1, "", "date"], [886, 4, 1, "", "datetime"], [886, 4, 1, "", "duration"], [886, 4, 1, "", "ends_with"], [886, 4, 1, "", "expand_selector"], [886, 4, 1, "", "first"], [886, 4, 1, "", "float"], [886, 4, 1, "", "integer"], [886, 4, 1, "", "is_selector"], [886, 4, 1, "", "last"], [886, 4, 1, "", "matches"], [886, 4, 1, "", "numeric"], [886, 4, 1, "", "starts_with"], [886, 4, 1, "", "string"], [886, 4, 1, "", "temporal"], [886, 4, 1, "", "time"]], "polars.testing": [[141, 4, 1, "", "assert_frame_equal"], [142, 4, 1, "", "assert_frame_not_equal"], [143, 4, 1, "", "assert_series_equal"], [144, 4, 1, "", "assert_series_not_equal"]], "polars.testing.parametric": [[145, 0, 1, "", "column"], [146, 4, 1, "", "columns"], [147, 4, 1, "", "create_list_strategy"], [148, 4, 1, "", "dataframes"], [149, 4, 1, "", "load_profile"], [150, 4, 1, "", "series"], [151, 4, 1, "", "set_profile"]], "polars.testing.parametric.column": [[145, 1, 1, "", "__init__"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:exception", "6": "py:module"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"], "6": ["py", "module", "Python module"]}, "titleterms": {"index": 0, "extend": [1, 174, 1024], "api": [1, 82, 83, 84, 85, 783], "provid": 1, "new": 1, "function": [1, 154, 770, 782, 886], "avail": 1, "registr": 1, "exampl": [1, 304, 886, 1265, 1270], "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 767, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1270], "arrai": [2, 763, 1253], "binari": [3, 764, 777, 1255], "boolean": [4, 765, 1256], "categor": 5, "config": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 154], "activate_decim": 6, "load": [7, 154], "load_from_fil": 8, "restore_default": 9, "save": [10, 154], "save_to_fil": 11, "set_ascii_t": 12, "set_auto_structifi": 13, "set_decimal_separ": 14, "set_float_precis": 15, "set_fmt_float": 16, "set_fmt_str_length": 17, "set_fmt_table_cell_list_len": 18, "set_streaming_chunk_s": 19, "set_tbl_cell_align": 20, "set_tbl_cell_numeric_align": 21, "set_tbl_col": 22, "set_tbl_column_data_type_inlin": 23, "set_tbl_dataframe_shape_below": 24, "set_tbl_format": 25, "set_tbl_hide_column_data_typ": 26, "set_tbl_hide_column_nam": 27, "set_tbl_hide_dataframe_shap": 28, "set_tbl_hide_dtype_separ": 29, "set_tbl_row": 30, "set_tbl_width_char": 31, "set_thousands_separ": 32, "set_trim_decimal_zero": 33, "set_verbos": 34, "state": [35, 154], "datafram": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 148, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 301], "write_avro": 36, "write_csv": 37, "write_databas": 38, "write_delta": 39, "write_excel": 40, "write_ipc": 41, "write_ipc_stream": 42, "write_json": [43, 544], "write_ndjson": 44, "write_parquet": 45, "datatyp": 46, "date": [47, 388, 713, 966], "datetim": [48, 389, 716, 967], "decim": 49, "durat": [50, 719], "enum": 51, "float32": 52, "float64": 53, "int16": 54, "int32": 55, "int64": 56, "int8": 57, "lazyfram": [58, 59, 60, 61, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 883], "sink_csv": 58, "sink_ipc": 59, "sink_ndjson": 60, "sink_parquet": 61, "list": [62, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 772, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1262], "null": 63, "object": 64, "sqlcontext": [65, 66, 67, 68, 69, 70], "execut": 65, "regist": 66, "register_glob": 67, "register_mani": 68, "tabl": 69, "unregist": 70, "string": [71, 778, 1266], "stringcach": [72, 782], "struct": [73, 666, 667, 668, 753, 779, 1225, 1226, 1227, 1228, 1229, 1230, 1267], "time": [74, 418, 757, 1000], "uint16": 75, "uint32": 76, "uint64": 77, "uint8": 78, "unknown": 79, "utf8": 80, "align_fram": 81, "register_dataframe_namespac": 82, "register_expr_namespac": 83, "register_lazyframe_namespac": 84, "register_series_namespac": 85, "build_info": 86, "collect_al": 87, "collect_all_async": 88, "concat": [89, 488, 614, 1071, 1173], "disable_string_cach": 90, "enable_string_cach": 91, "except": [92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 306], "arrowerror": 92, "columnnotfounderror": 93, "computeerror": 94, "duplicateerror": 95, "invalidoperationerror": 96, "nodataerror": 97, "norowsreturnederror": 98, "polarserror": 99, "polarspanicerror": 100, "rowserror": 101, "schemaerror": 102, "schemafieldnotfounderror": 103, "shapeerror": 104, "structfieldnotfounderror": 105, "toomanyrowsreturnederror": 106, "from_arrow": 107, "from_datafram": 108, "from_dict": [109, 110], "from_numpi": 111, "from_panda": 112, "from_record": 113, "from_repr": 114, "get_index_typ": 115, "io": 116, "csv": [116, 784], "batched_read": 116, "batchedcsvread": [116, 784], "next_batch": 116, "read_avro": 117, "read_csv": 118, "read_csv_batch": 119, "read_databas": 120, "read_database_uri": 121, "read_delta": 122, "read_excel": 123, "read_ipc": 124, "read_ipc_schema": 125, "read_ipc_stream": 126, "read_json": 127, "read_ndjson": 128, "read_od": 129, "read_parquet": 130, "read_parquet_schema": 131, "scan_csv": 132, "scan_delta": 133, "scan_iceberg": 134, "scan_ipc": 135, "scan_ndjson": 136, "scan_parquet": 137, "scan_pyarrow_dataset": 138, "set_random_se": 139, "show_vers": 140, "test": [141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 1270], "assert_frame_equ": 141, "assert_frame_not_equ": 142, "assert_series_equ": 143, "assert_series_not_equ": 144, "parametr": [145, 146, 147, 148, 149, 150, 151, 1270], "column": [145, 146, 163, 768, 794], "create_list_strategi": 147, "load_profil": 149, "seri": [150, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1261], "set_profil": 151, "threadpool_s": 152, "using_string_cach": 153, "option": 154, "current": 154, "us": 154, "context": 154, "manag": 154, "decor": 154, "aggreg": [155, 307, 785, 887], "__dataframe__": 156, "appli": [157, 281, 316, 691, 865, 893], "approx_n_uniqu": [158, 317, 692, 786], "bottom_k": [159, 353, 787, 928], "cast": [160, 354, 789, 929], "clear": [161, 790, 938], "clone": [162, 791, 942], "corr": [164, 701], "count": [165, 282, 365, 702, 795, 866], "describ": [166, 796, 956], "drop": [167, 798], "drop_in_plac": 168, "drop_nul": [169, 382, 493, 799, 960, 1076], "dtype": [170, 800, 1015], "equal": [171, 1017], "estimated_s": [172, 1018], "explod": [173, 335, 441, 495, 622, 802, 911, 1023, 1078, 1181], "fill_nan": [175, 443, 804, 1026], "fill_nul": [176, 444, 805, 1027], "filter": [177, 445, 806, 1028], "find_idx_by_nam": 178, "flag": [179, 1029], "fold": [180, 723], "frame_equ": 181, "gather_everi": [182, 453, 808, 1032], "get_column": [183, 185], "get_column_index": 184, "glimps": 186, "group_bi": [187, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 809, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879], "group_by_dynam": [188, 810], "group_by_rol": [189, 811], "groupbi": [190, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 300, 812, 882], "groupby_dynam": [191, 813], "groupby_rol": [192, 814], "hash_row": 193, "head": [194, 284, 458, 499, 727, 815, 868, 1036, 1082], "height": 195, "hstack": 196, "insert_at_idx": 197, "insert_column": 198, "interpol": [199, 462, 817, 1040], "is_dupl": [200, 464, 1043], "is_empti": [201, 1044], "is_uniqu": [202, 477, 1061], "item": [203, 1063], "iter_column": 204, "iter_row": 205, "iter_slic": 206, "join": [207, 338, 500, 818, 914, 1083], "join_asof": [208, 819], "lazi": [209, 821], "limit": [210, 483, 822, 1066], "map_row": 211, "max": [212, 288, 340, 504, 532, 737, 825, 872, 916, 976, 1087, 1111], "max_horizont": [213, 738], "mean": [214, 289, 505, 533, 739, 826, 873, 977, 1088, 1112], "mean_horizont": 215, "median": [216, 290, 534, 740, 827, 874, 978, 1113], "melt": [217, 828], "merge_sort": [218, 829], "min": [219, 291, 341, 506, 545, 741, 830, 875, 917, 984, 1089, 1114], "min_horizont": [220, 742], "n_chunk": [221, 1116], "n_uniqu": [222, 292, 549, 743, 876, 1117], "null_count": [223, 562, 831, 1123], "partition_bi": 224, "pipe": [225, 568, 832], "pivot": 226, "product": [227, 571, 1127], "quantil": [228, 293, 573, 745, 834, 877, 1129], "rechunk": [229, 576, 1131], "renam": [230, 835, 1133], "replac": [231, 579, 639, 1134, 1198], "replace_at_idx": 232, "replace_column": 233, "revers": [234, 342, 507, 581, 642, 836, 918, 1090, 1136, 1201], "roll": [235, 584, 837], "row": [236, 237], "rows_by_kei": 238, "sampl": [239, 508, 598, 1091, 1152], "schema": [240, 838, 1229], "select": [241, 303, 750, 775, 839, 885, 1264], "select_seq": [242, 840], "set_sort": [243, 600, 842, 1158], "shape": [244, 1159], "shift": [245, 513, 601, 843, 1096, 1160], "shift_and_fil": [246, 602, 844, 1161], "shrink_to_fit": [247, 1163], "slice": [248, 514, 609, 645, 846, 1097, 1169, 1204], "sort": [249, 343, 515, 610, 847, 919, 1098, 1170], "std": [250, 613, 752, 848, 1172], "sum": [251, 294, 344, 516, 671, 754, 849, 878, 920, 1099, 1231], "sum_horizont": [252, 755], "tail": [253, 295, 517, 672, 756, 850, 879, 1100, 1232], "take_everi": [254, 674, 851, 1234], "to_arrow": [255, 1237], "to_dict": [256, 257], "to_dummi": [258, 1238], "to_init_repr": [259, 1240], "to_numpi": [260, 1242], "to_panda": [261, 1243], "to_seri": 262, "to_struct": [263, 520, 1103], "top_k": [264, 678, 852, 1245], "transpos": 265, "uniqu": [266, 346, 521, 680, 853, 922, 1104, 1246], "unnest": [267, 854, 1230], "unstack": 268, "updat": [269, 855], "upsampl": 270, "var": [271, 684, 760, 856, 1250], "vstack": 272, "width": [273, 857], "with_column": [274, 858], "with_columns_seq": [275, 859], "with_row_count": [276, 861], "with_row_index": [277, 862], "__iter__": 278, "agg": [279, 863], "all": [280, 312, 329, 484, 687, 864, 890, 905, 1067], "first": [283, 336, 446, 496, 722, 807, 867, 912, 1079], "last": [285, 339, 480, 501, 731, 820, 869, 915, 1084], "len": [286, 482, 502, 732, 870, 1065, 1085], "map_group": [287, 736, 871], "attribut": [296, 880, 1254], "comput": [297, 769, 1258], "descript": [298, 881, 1259], "export": [299, 1260], "miscellan": [302, 774, 782, 884, 1263], "manipul": [303, 775, 885, 1264], "plot": [304, 1265], "data": 305, "type": 305, "numer": [305, 777], "tempor": [305, 780, 1268], "nest": 305, "other": 305, "expr": [308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686], "ab": [308, 888], "add": 309, "agg_group": 310, "alia": [311, 889], "and_": 313, "ani": [314, 330, 485, 689, 891, 906, 1068], "append": [315, 892], "arcco": [318, 894], "arccosh": [319, 895], "arcsin": [320, 896], "arcsinh": [321, 897], "arctan": [322, 898], "arctanh": [323, 899], "arg_max": [324, 331, 486, 900, 907, 1069], "arg_min": [325, 332, 487, 901, 908, 1070], "arg_sort": [326, 902], "arg_tru": [327, 903], "arg_uniqu": [328, 904], "arr": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922], "contain": [333, 348, 489, 615, 909, 923, 1072, 1174], "count_match": [334, 490, 491, 617, 618, 910, 1073, 1074, 1176, 1177], "get": [337, 455, 498, 913, 1081], "to_list": [345, 921, 1241], "backward_fil": 347, "bin": [348, 349, 350, 351, 352, 923, 924, 925, 926, 927], "decod": [349, 619, 924, 1178], "encod": [350, 620, 925, 1179], "ends_with": [351, 621, 926, 1180], "starts_with": [352, 649, 927, 1208], "cat": [355, 356, 930, 931, 932, 933, 934], "get_categori": [355, 930], "set_ord": [356, 932], "cbrt": [357, 935], "ceil": [358, 936], "clip": [359, 939], "clip_max": [360, 940], "clip_min": [361, 941], "co": [362, 943], "cosh": [363, 944], "cot": [364, 945], "cum_count": [366, 704], "cum_max": [367, 946], "cum_min": [368, 947], "cum_prod": [369, 948], "cum_sum": [370, 707, 949], "cumcount": 371, "cummax": [372, 950], "cummin": [373, 951], "cumprod": [374, 952], "cumsum": [375, 711, 953], "cumulative_ev": [376, 954], "cut": [377, 955], "degre": 378, "diff": [379, 492, 957, 1075], "dot": [380, 958], "drop_nan": [381, 959], "dt": [383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014], "base_utc_offset": [383, 961], "cast_time_unit": [384, 962], "centuri": [385, 963], "combin": [386, 964], "convert_time_zon": [387, 965], "dai": [390, 391, 968, 969], "dst_offset": [392, 970], "epoch": [393, 971], "hour": [394, 395, 972, 973], "is_leap_year": [396, 974], "iso_year": [397, 975], "microsecond": [398, 399, 979, 980], "millennium": [400, 981], "millisecond": [401, 402, 982, 983], "minut": [403, 404, 985, 986], "month": [405, 987], "month_end": [406, 988], "month_start": [407, 989], "nanosecond": [408, 409, 990, 991], "offset_bi": [410, 992], "ordinal_dai": [411, 993], "quarter": [412, 994], "replace_time_zon": [413, 995], "round": [414, 596, 996, 1150], "second": [415, 416, 997, 998], "strftime": [417, 999], "timestamp": [419, 1001], "to_str": [420, 1002], "total_dai": [421, 1003], "total_hour": [422, 1004], "total_microsecond": [423, 1005], "total_millisecond": [424, 1006], "total_minut": [425, 1007], "total_nanosecond": [426, 1008], "total_second": [427, 1009], "truncat": [428, 1010], "week": [429, 1011], "weekdai": [430, 1012], "with_time_unit": [431, 1013], "year": [432, 1014], "entropi": [433, 1016], "eq": [434, 535], "eq_miss": 435, "ewm_mean": [436, 1019], "ewm_std": [437, 1020], "ewm_var": [438, 1021], "exclud": [439, 721], "exp": [440, 1022], "extend_const": [442, 1025], "flatten": 447, "floor": [448, 1030], "floordiv": 449, "forward_fil": 450, "from_json": 451, "gather": [452, 497, 1031, 1080], "ge": 454, "gt": 456, "hash": [457, 1035], "hist": [459, 1037], "implod": [460, 728, 1038], "inspect": [461, 816], "is_between": [463, 1041], "is_finit": [465, 1045], "is_first": [466, 1046], "is_first_distinct": [467, 1047], "is_in": [468, 1049], "is_infinit": [469, 1050], "is_last": [470, 1052], "is_last_distinct": [471, 1053], "is_nan": [472, 1054], "is_not": 473, "is_not_nan": [474, 1055], "is_not_nul": [475, 1056], "is_nul": [476, 1057], "keep_nam": 478, "kurtosi": [479, 1064], "le": 481, "eval": [494, 1077], "length": [503, 632, 1086, 1191], "set_differ": [509, 1092], "set_intersect": [510, 1093], "set_symmetric_differ": [511, 1094], "set_union": [512, 1095], "take": [518, 673, 1101, 1233], "to_arrai": [519, 1102], "log": [522, 1105], "log10": [523, 1106], "log1p": [524, 1107], "lower_bound": [525, 1108], "lt": 526, "map": [527, 551, 734, 823], "map_alia": 528, "map_batch": [529, 735, 824], "map_dict": [530, 1109], "map_el": [531, 1110], "meta": [535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 773], "has_multiple_output": 536, "is_regex_project": 537, "ne": [538, 558], "output_nam": 539, "pop": 540, "root_nam": 541, "tree_format": 542, "undo_alias": 543, "mod": 546, "mode": [547, 1115], "mul": 548, "name": [550, 551, 552, 553, 554, 555, 768, 776, 1118], "keep": 550, "prefix": [552, 570], "suffix": [553, 670], "to_lowercas": [554, 661, 1220], "to_uppercas": [555, 664, 1223], "nan_max": [556, 1119], "nan_min": [557, 1120], "ne_miss": 559, "neg": 560, "not_": [561, 1122], "or_": 563, "over": 564, "pct_chang": [565, 1124], "peak_max": [566, 1125], "peak_min": [567, 1126], "pow": 569, "qcut": [572, 1128], "radian": 574, "rank": [575, 1130], "reinterpret": [577, 1132], "repeat_bi": 578, "reshap": [580, 1135], "rle": [582, 1137], "rle_id": [583, 1138], "rolling_appli": [585, 1139], "rolling_map": [586, 1140], "rolling_max": [587, 1141], "rolling_mean": [588, 1142], "rolling_median": [589, 1143], "rolling_min": [590, 1144], "rolling_quantil": [591, 1145], "rolling_skew": [592, 1146], "rolling_std": [593, 1147], "rolling_sum": [594, 1148], "rolling_var": [595, 1149], "round_sig_fig": [597, 1151], "search_sort": [599, 1154], "shrink_dtyp": [603, 1162], "shuffl": [604, 1164], "sign": [605, 1165], "sin": [606, 1166], "sinh": [607, 1167], "skew": [608, 1168], "sort_bi": 611, "sqrt": [612, 1171], "str": [614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224], "contains_ani": [616, 1175], "extract": [623, 1182], "extract_al": [624, 1183], "extract_group": [625, 1184], "find": [626, 1185], "json_decod": [627, 1186], "json_extract": [628, 1187], "json_path_match": [629, 1188], "len_byt": [630, 1189], "len_char": [631, 1190], "ljust": [633, 1192], "lstrip": [634, 1193], "n_char": [635, 1194], "pad_end": [636, 1195], "pad_start": [637, 1196], "parse_int": [638, 1197], "replace_al": [640, 1199], "replace_mani": [641, 1200], "rjust": [643, 1202], "rstrip": [644, 1203], "split": [646, 1205], "split_exact": [647, 1206], "splitn": [648, 1207], "strip": [650, 1209], "strip_char": [651, 1210], "strip_chars_end": [652, 1211], "strip_chars_start": [653, 1212], "strip_prefix": [654, 1213], "strip_suffix": [655, 1214], "strptime": [656, 1215], "to_dat": [657, 1216], "to_datetim": [658, 1217], "to_decim": [659, 1218], "to_integ": [660, 1219], "to_tim": [662, 1221], "to_titlecas": [663, 1222], "zfill": [665, 1224], "field": [666, 1225, 1226], "json_encod": [667, 1227], "rename_field": [668, 1228], "sub": 669, "tan": [675, 1235], "tanh": [676, 1236], "to_phys": [677, 1244], "truediv": 679, "unique_count": [681, 1247], "upper_bound": [682, 1248], "value_count": [683, 1249], "where": 685, "xor": 686, "all_horizont": 688, "any_horizont": 690, "arang": 693, "arctan2": 694, "arctan2d": 695, "arg_sort_bi": 696, "arg_wher": 697, "coalesc": 698, "concat_list": 699, "concat_str": 700, "cov": 703, "cum_fold": 705, "cum_reduc": 706, "cum_sum_horizont": 708, "cumfold": 709, "cumreduc": 710, "cumsum_horizont": 712, "date_rang": [714, 715], "datetime_rang": [717, 718], "element": 720, "format": 724, "from_epoch": 725, "group": 726, "int_rang": [729, 730], "lit": 733, "ones": 744, "reduc": 746, "repeat": 747, "rolling_corr": 748, "rolling_cov": 749, "sql_expr": 751, "time_rang": [758, 759], "when": 761, "zero": 762, "categori": [766, 1257], "col": 767, "express": 771, "oper": [777, 886], "conjunct": 777, "comparison": 777, "window": 781, "convers": 782, "parallel": 782, "random": 782, "refer": 783, "input": 784, "output": 784, "feather": 784, "ipc": 784, "parquet": 784, "databas": 784, "json": 784, "avro": 784, "spreadsheet": 784, "apach": 784, "iceberg": 784, "delta": 784, "lake": 784, "dataset": 784, "cach": 788, "collect": 792, "collect_async": 793, "deseri": 797, "explain": 801, "fetch": 803, "profil": [833, 1270], "serial": 841, "show_graph": 845, "with_context": 860, "lazygroupbi": [863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879], "read": 884, "write": 884, "logic": 884, "plan": 884, "selector": 886, "import": 886, "set": [886, 1156], "is_loc": 931, "to_loc": 933, "uses_lexical_ord": 934, "chunk_length": 937, "get_chunk": 1033, "has_valid": 1034, "inner_dtyp": 1039, "is_boolean": 1042, "is_float": 1048, "is_integ": 1051, "is_numer": 1058, "is_sort": 1059, "is_tempor": 1060, "is_utf8": 1062, "new_from_index": 1121, "scatter": 1153, "series_equ": 1155, "set_at_idx": 1157, "to_fram": 1239, "view": 1251, "zip_with": 1252, "sql": 1269, "method": 1269, "assert": 1270, "primit": 1270, "strategi": 1270, "helper": 1270, "util": 1271}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"polars.DataFrame.frame_equal": [[181, "polars-dataframe-frame-equal"]], "polars.DataFrame.height": [[195, "polars-dataframe-height"]], "polars.DataFrame.n_chunks": [[221, "polars-dataframe-n-chunks"]], "polars.DataFrame.insert_column": [[198, "polars-dataframe-insert-column"]], "polars.DataFrame.group_by": [[187, "polars-dataframe-group-by"]], "polars.DataFrame.fold": [[180, "polars-dataframe-fold"]], "polars.DataFrame.max_horizontal": [[213, "polars-dataframe-max-horizontal"]], "polars.DataFrame.groupby_rolling": [[192, "polars-dataframe-groupby-rolling"]], "polars.DataFrame.hash_rows": [[193, "polars-dataframe-hash-rows"]], "polars.DataFrame.iter_slices": [[206, "polars-dataframe-iter-slices"]], "polars.DataFrame.mean": [[214, "polars-dataframe-mean"]], "polars.DataFrame.fill_nan": [[175, "polars-dataframe-fill-nan"]], "polars.DataFrame.get_column": [[183, "polars-dataframe-get-column"]], "polars.DataFrame.limit": [[210, "polars-dataframe-limit"]], "polars.DataFrame.n_unique": [[222, "polars-dataframe-n-unique"]], "polars.DataFrame.is_unique": [[202, "polars-dataframe-is-unique"]], "polars.DataFrame.estimated_size": [[172, "polars-dataframe-estimated-size"]], "polars.DataFrame.hstack": [[196, "polars-dataframe-hstack"]], "polars.DataFrame.mean_horizontal": [[215, "polars-dataframe-mean-horizontal"]], "polars.DataFrame.item": [[203, "polars-dataframe-item"]], "polars.DataFrame.melt": [[217, "polars-dataframe-melt"]], "polars.DataFrame.min_horizontal": [[220, "polars-dataframe-min-horizontal"]], "polars.DataFrame.drop_in_place": [[168, "polars-dataframe-drop-in-place"]], "polars.DataFrame.insert_at_idx": [[197, "polars-dataframe-insert-at-idx"]], "polars.DataFrame.dtypes": [[170, "polars-dataframe-dtypes"]], "polars.DataFrame.flags": [[179, "polars-dataframe-flags"]], "polars.DataFrame.get_columns": [[185, "polars-dataframe-get-columns"]], "polars.DataFrame.fill_null": [[176, "polars-dataframe-fill-null"]], "polars.DataFrame.groupby_dynamic": [[191, "polars-dataframe-groupby-dynamic"]], "polars.DataFrame.map_rows": [[211, "polars-dataframe-map-rows"]], "polars.DataFrame.is_empty": [[201, "polars-dataframe-is-empty"]], "polars.DataFrame.groupby": [[190, "polars-dataframe-groupby"]], "polars.DataFrame.null_count": [[223, "polars-dataframe-null-count"]], "polars.DataFrame.min": [[219, "polars-dataframe-min"]], "polars.DataFrame.group_by_dynamic": [[188, "polars-dataframe-group-by-dynamic"]], "polars.DataFrame.interpolate": [[199, "polars-dataframe-interpolate"]], "polars.DataFrame.group_by_rolling": [[189, "polars-dataframe-group-by-rolling"]], "polars.DataFrame.explode": [[173, "polars-dataframe-explode"]], "polars.DataFrame.join_asof": [[208, "polars-dataframe-join-asof"]], "polars.DataFrame.lazy": [[209, "polars-dataframe-lazy"]], "polars.DataFrame.find_idx_by_name": [[178, "polars-dataframe-find-idx-by-name"]], "polars.DataFrame.gather_every": [[182, "polars-dataframe-gather-every"]], "polars.DataFrame.head": [[194, "polars-dataframe-head"]], "polars.DataFrame.median": [[216, "polars-dataframe-median"]], "polars.DataFrame.get_column_index": [[184, "polars-dataframe-get-column-index"]], "polars.DataFrame.drop_nulls": [[169, "polars-dataframe-drop-nulls"]], "polars.DataFrame.is_duplicated": [[200, "polars-dataframe-is-duplicated"]], "polars.DataFrame.max": [[212, "polars-dataframe-max"]], "polars.DataFrame.extend": [[174, "polars-dataframe-extend"]], "polars.DataFrame.iter_columns": [[204, "polars-dataframe-iter-columns"]], "polars.DataFrame.iter_rows": [[205, "polars-dataframe-iter-rows"]], "polars.DataFrame.merge_sorted": [[218, "polars-dataframe-merge-sorted"]], "polars.DataFrame.equals": [[171, "polars-dataframe-equals"]], "polars.DataFrame.join": [[207, "polars-dataframe-join"]], "polars.DataFrame.filter": [[177, "polars-dataframe-filter"]], "polars.DataFrame.glimpse": [[186, "polars-dataframe-glimpse"]], "polars.read_database": [[120, "polars-read-database"]], "polars.testing.assert_frame_not_equal": [[142, "polars-testing-assert-frame-not-equal"]], "polars.from_records": [[113, "polars-from-records"]], "polars.read_parquet_schema": [[131, "polars-read-parquet-schema"]], "polars.scan_iceberg": [[134, "polars-scan-iceberg"]], "polars.read_json": [[127, "polars-read-json"]], "polars.DataFrame.apply": [[157, "polars-dataframe-apply"]], "polars.read_ods": [[129, "polars-read-ods"]], "polars.get_index_type": [[115, "polars-get-index-type"]], "polars.DataFrame.clear": [[161, "polars-dataframe-clear"]], "polars.testing.assert_series_not_equal": [[144, "polars-testing-assert-series-not-equal"]], "polars.testing.parametric.load_profile": [[149, "polars-testing-parametric-load-profile"]], "polars.threadpool_size": [[152, "polars-threadpool-size"]], "polars.DataFrame.clone": [[162, "polars-dataframe-clone"]], "polars.DataFrame.cast": [[160, "polars-dataframe-cast"]], "polars.DataFrame.corr": [[164, "polars-dataframe-corr"]], "polars.from_pandas": [[112, "polars-from-pandas"]], "polars.read_avro": [[117, "polars-read-avro"]], "polars.testing.parametric.column": [[145, "polars-testing-parametric-column"]], "polars.using_string_cache": [[153, "polars-using-string-cache"]], "polars.DataFrame.approx_n_unique": [[158, "polars-dataframe-approx-n-unique"]], "polars.read_parquet": [[130, "polars-read-parquet"]], "polars.scan_pyarrow_dataset": [[138, "polars-scan-pyarrow-dataset"]], "Aggregation": [[155, "aggregation"], [785, "aggregation"], [887, "aggregation"], [307, "aggregation"]], "polars.read_csv_batched": [[119, "polars-read-csv-batched"]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[116, "polars-io-csv-batched-reader-batchedcsvreader-next-batches"]], "polars.DataFrame.drop": [[167, "polars-dataframe-drop"]], "polars.show_versions": [[140, "polars-show-versions"]], "polars.testing.assert_frame_equal": [[141, "polars-testing-assert-frame-equal"]], "polars.DataFrame.describe": [[166, "polars-dataframe-describe"]], "polars.read_excel": [[123, "polars-read-excel"]], "polars.scan_parquet": [[137, "polars-scan-parquet"]], "polars.scan_delta": [[133, "polars-scan-delta"]], "polars.read_database_uri": [[121, "polars-read-database-uri"]], "polars.read_ipc_schema": [[125, "polars-read-ipc-schema"]], "polars.DataFrame.count": [[165, "polars-dataframe-count"]], "polars.read_delta": [[122, "polars-read-delta"]], "polars.read_csv": [[118, "polars-read-csv"]], "polars.testing.parametric.set_profile": [[151, "polars-testing-parametric-set-profile"]], "polars.testing.parametric.create_list_strategy": [[147, "polars-testing-parametric-create-list-strategy"]], "polars.read_ipc": [[124, "polars-read-ipc"]], "polars.from_repr": [[114, "polars-from-repr"]], "polars.testing.assert_series_equal": [[143, "polars-testing-assert-series-equal"]], "polars.testing.parametric.dataframes": [[148, "polars-testing-parametric-dataframes"]], "polars.read_ndjson": [[128, "polars-read-ndjson"]], "Config": [[154, "config"]], "Config options": [[154, "config-options"]], "Config load, save, and current state": [[154, "config-load-save-and-current-state"]], "Use as a context manager": [[154, "use-as-a-context-manager"]], "Use as a function decorator": [[154, "use-as-a-function-decorator"]], "polars.testing.parametric.series": [[150, "polars-testing-parametric-series"]], "polars.DataFrame.__dataframe__": [[156, "polars-dataframe-dataframe"]], "polars.DataFrame.columns": [[163, "polars-dataframe-columns"]], "polars.scan_ipc": [[135, "polars-scan-ipc"]], "polars.testing.parametric.columns": [[146, "polars-testing-parametric-columns"]], "polars.scan_csv": [[132, "polars-scan-csv"]], "polars.scan_ndjson": [[136, "polars-scan-ndjson"]], "polars.DataFrame.bottom_k": [[159, "polars-dataframe-bottom-k"]], "polars.read_ipc_stream": [[126, "polars-read-ipc-stream"]], "polars.set_random_seed": [[139, "polars-set-random-seed"]], "polars.Series.struct.schema": [[1229, "polars-series-struct-schema"]], "polars.Series.str.find": [[1185, "polars-series-str-find"]], "polars.Series.str.replace_all": [[1199, "polars-series-str-replace-all"]], "polars.Series.str.rjust": [[1202, "polars-series-str-rjust"]], "polars.Series.str.to_date": [[1216, "polars-series-str-to-date"]], "polars.Series.str.n_chars": [[1194, "polars-series-str-n-chars"]], "polars.Series.str.json_extract": [[1187, "polars-series-str-json-extract"]], "polars.Series.str.explode": [[1181, "polars-series-str-explode"]], "polars.Series.str.to_uppercase": [[1223, "polars-series-str-to-uppercase"]], "polars.Series.str.zfill": [[1224, "polars-series-str-zfill"]], "polars.Series.str.strip_chars": [[1210, "polars-series-str-strip-chars"]], "polars.Series.str.rstrip": [[1203, "polars-series-str-rstrip"]], "polars.Series.str.strptime": [[1215, "polars-series-str-strptime"]], "polars.Series.struct.unnest": [[1230, "polars-series-struct-unnest"]], "polars.Series.str.lstrip": [[1193, "polars-series-str-lstrip"]], "polars.Series.str.to_lowercase": [[1220, "polars-series-str-to-lowercase"]], "polars.Series.str.extract_all": [[1183, "polars-series-str-extract-all"]], "polars.Series.struct.fields": [[1226, "polars-series-struct-fields"]], "polars.Series.str.splitn": [[1207, "polars-series-str-splitn"]], "polars.Series.str.reverse": [[1201, "polars-series-str-reverse"]], "polars.Series.str.strip_chars_end": [[1211, "polars-series-str-strip-chars-end"]], "polars.Series.struct.json_encode": [[1227, "polars-series-struct-json-encode"]], "polars.Series.str.parse_int": [[1197, "polars-series-str-parse-int"]], "polars.Series.str.to_decimal": [[1218, "polars-series-str-to-decimal"]], "polars.Series.str.to_integer": [[1219, "polars-series-str-to-integer"]], "polars.Series.str.replace_many": [[1200, "polars-series-str-replace-many"]], "polars.Series.str.json_path_match": [[1188, "polars-series-str-json-path-match"]], "polars.Series.str.split_exact": [[1206, "polars-series-str-split-exact"]], "polars.Series.str.strip_prefix": [[1213, "polars-series-str-strip-prefix"]], "polars.Series.str.encode": [[1179, "polars-series-str-encode"]], "polars.Series.str.ends_with": [[1180, "polars-series-str-ends-with"]], "polars.Series.str.slice": [[1204, "polars-series-str-slice"]], "polars.Series.str.to_time": [[1221, "polars-series-str-to-time"]], "polars.Series.str.json_decode": [[1186, "polars-series-str-json-decode"]], "polars.Series.str.to_datetime": [[1217, "polars-series-str-to-datetime"]], "polars.Series.str.ljust": [[1192, "polars-series-str-ljust"]], "polars.Series.str.split": [[1205, "polars-series-str-split"]], "polars.Series.struct.rename_fields": [[1228, "polars-series-struct-rename-fields"]], "polars.Series.str.lengths": [[1191, "polars-series-str-lengths"]], "polars.Series.str.to_titlecase": [[1222, "polars-series-str-to-titlecase"]], "polars.Series.str.starts_with": [[1208, "polars-series-str-starts-with"]], "polars.Series.struct.field": [[1225, "polars-series-struct-field"]], "polars.Series.str.len_bytes": [[1189, "polars-series-str-len-bytes"]], "polars.Series.str.pad_end": [[1195, "polars-series-str-pad-end"]], "polars.Series.str.replace": [[1198, "polars-series-str-replace"]], "polars.Series.str.strip_suffix": [[1214, "polars-series-str-strip-suffix"]], "polars.Series.str.count_match": [[1176, "polars-series-str-count-match"]], "polars.Series.str.pad_start": [[1196, "polars-series-str-pad-start"]], "polars.Series.str.decode": [[1178, "polars-series-str-decode"]], "polars.Series.str.len_chars": [[1190, "polars-series-str-len-chars"]], "polars.Series.str.extract": [[1182, "polars-series-str-extract"]], "polars.Series.str.strip_chars_start": [[1212, "polars-series-str-strip-chars-start"]], "polars.Series.str.strip": [[1209, "polars-series-str-strip"]], "polars.Series.str.count_matches": [[1177, "polars-series-str-count-matches"]], "polars.Series.sum": [[1231, "polars-series-sum"]], "polars.Series.str.extract_groups": [[1184, "polars-series-str-extract-groups"]], "polars.exceptions.InvalidOperationError": [[96, "polars-exceptions-invalidoperationerror"]], "polars.from_arrow": [[107, "polars-from-arrow"]], "polars.SQLContext.tables": [[69, "polars-sqlcontext-tables"]], "polars.List": [[62, "polars-list"]], "polars.from_dict": [[109, "polars-from-dict"]], "polars.exceptions.ColumnNotFoundError": [[93, "polars-exceptions-columnnotfounderror"]], "polars.from_dicts": [[110, "polars-from-dicts"]], "polars.exceptions.ComputeError": [[94, "polars-exceptions-computeerror"]], "polars.exceptions.TooManyRowsReturnedError": [[106, "polars-exceptions-toomanyrowsreturnederror"]], "polars.StringCache": [[72, "polars-stringcache"]], "polars.exceptions.SchemaError": [[102, "polars-exceptions-schemaerror"]], "polars.exceptions.NoDataError": [[97, "polars-exceptions-nodataerror"]], "polars.exceptions.PolarsError": [[99, "polars-exceptions-polarserror"]], "polars.Struct": [[73, "polars-struct"]], "polars.SQLContext.register_many": [[68, "polars-sqlcontext-register-many"]], "polars.concat": [[89, "polars-concat"]], "polars.exceptions.ArrowError": [[92, "polars-exceptions-arrowerror"]], "polars.api.register_dataframe_namespace": [[82, "polars-api-register-dataframe-namespace"]], "polars.align_frames": [[81, "polars-align-frames"]], "polars.api.register_expr_namespace": [[83, "polars-api-register-expr-namespace"]], "polars.exceptions.ShapeError": [[104, "polars-exceptions-shapeerror"]], "polars.api.register_lazyframe_namespace": [[84, "polars-api-register-lazyframe-namespace"]], "polars.Time": [[74, "polars-time"]], "polars.api.register_series_namespace": [[85, "polars-api-register-series-namespace"]], "polars.collect_all_async": [[88, "polars-collect-all-async"]], "polars.from_numpy": [[111, "polars-from-numpy"]], "polars.enable_string_cache": [[91, "polars-enable-string-cache"]], "polars.Int64": [[56, "polars-int64"]], "polars.UInt64": [[77, "polars-uint64"]], "polars.Int8": [[57, "polars-int8"]], "polars.Object": [[64, "polars-object"]], "polars.Null": [[63, "polars-null"]], "polars.LazyFrame.sink_parquet": [[61, "polars-lazyframe-sink-parquet"]], "polars.exceptions.StructFieldNotFoundError": [[105, "polars-exceptions-structfieldnotfounderror"]], "polars.exceptions.NoRowsReturnedError": [[98, "polars-exceptions-norowsreturnederror"]], "polars.Unknown": [[79, "polars-unknown"]], "polars.exceptions.PolarsPanicError": [[100, "polars-exceptions-polarspanicerror"]], "polars.UInt8": [[78, "polars-uint8"]], "polars.collect_all": [[87, "polars-collect-all"]], "polars.LazyFrame.sink_ipc": [[59, "polars-lazyframe-sink-ipc"]], "polars.build_info": [[86, "polars-build-info"]], "polars.disable_string_cache": [[90, "polars-disable-string-cache"]], "polars.exceptions.RowsError": [[101, "polars-exceptions-rowserror"]], "polars.SQLContext.unregister": [[70, "polars-sqlcontext-unregister"]], "polars.LazyFrame.sink_ndjson": [[60, "polars-lazyframe-sink-ndjson"]], "polars.SQLContext.execute": [[65, "polars-sqlcontext-execute"]], "polars.SQLContext.register": [[66, "polars-sqlcontext-register"]], "polars.String": [[71, "polars-string"]], "polars.UInt32": [[76, "polars-uint32"]], "polars.SQLContext.register_globals": [[67, "polars-sqlcontext-register-globals"]], "polars.LazyFrame.sink_csv": [[58, "polars-lazyframe-sink-csv"]], "polars.exceptions.DuplicateError": [[95, "polars-exceptions-duplicateerror"]], "polars.exceptions.SchemaFieldNotFoundError": [[103, "polars-exceptions-schemafieldnotfounderror"]], "polars.Utf8": [[80, "polars-utf8"]], "polars.from_dataframe": [[108, "polars-from-dataframe"]], "polars.UInt16": [[75, "polars-uint16"]], "polars.DataFrame.write_excel": [[40, "polars-dataframe-write-excel"]], "polars.DataFrame.write_database": [[38, "polars-dataframe-write-database"]], "polars.Datetime": [[48, "polars-datetime"]], "polars.DataFrame.write_avro": [[36, "polars-dataframe-write-avro"]], "polars.Config.save": [[10, "polars-config-save"]], "Extending the API": [[1, "extending-the-api"]], "Providing new functionality": [[1, "providing-new-functionality"]], "Available registrations": [[1, "available-registrations"]], "Examples": [[1, "examples"], [1270, "examples"], [1265, "examples"], [886, "examples"], [304, "examples"]], "polars.Boolean": [[4, "polars-boolean"]], "polars.Config.set_tbl_cols": [[22, "polars-config-set-tbl-cols"]], "polars.Float64": [[53, "polars-float64"]], "polars.Config.load_from_file": [[8, "polars-config-load-from-file"]], "polars.Config.set_auto_structify": [[13, "polars-config-set-auto-structify"]], "polars.Date": [[47, "polars-date"]], "polars.Enum": [[51, "polars-enum"]], "polars.DataFrame.write_ipc": [[41, "polars-dataframe-write-ipc"]], "polars.Config.restore_defaults": [[9, "polars-config-restore-defaults"]], "polars.Config.set_tbl_cell_alignment": [[20, "polars-config-set-tbl-cell-alignment"]], "polars.DataFrame.write_delta": [[39, "polars-dataframe-write-delta"]], "polars.Config.set_fmt_float": [[16, "polars-config-set-fmt-float"]], "polars.Array": [[2, "polars-array"]], "polars.Config.set_tbl_dataframe_shape_below": [[24, "polars-config-set-tbl-dataframe-shape-below"]], "polars.DataFrame.write_csv": [[37, "polars-dataframe-write-csv"]], "polars.Config.set_decimal_separator": [[14, "polars-config-set-decimal-separator"]], "polars.Config.set_tbl_hide_column_names": [[27, "polars-config-set-tbl-hide-column-names"]], "polars.Config.set_tbl_width_chars": [[31, "polars-config-set-tbl-width-chars"]], "polars.Binary": [[3, "polars-binary"]], "polars.Duration": [[50, "polars-duration"]], "polars.Config.set_float_precision": [[15, "polars-config-set-float-precision"]], "polars.Config.set_verbose": [[34, "polars-config-set-verbose"]], "polars.Int32": [[55, "polars-int32"]], "polars.Config.set_fmt_table_cell_list_len": [[18, "polars-config-set-fmt-table-cell-list-len"]], "polars.Int16": [[54, "polars-int16"]], "polars.Decimal": [[49, "polars-decimal"]], "polars.Config.set_tbl_hide_column_data_types": [[26, "polars-config-set-tbl-hide-column-data-types"]], "polars.Config.state": [[35, "polars-config-state"]], "polars.Categorical": [[5, "polars-categorical"]], "polars.Config.activate_decimals": [[6, "polars-config-activate-decimals"]], "polars.Config.set_ascii_tables": [[12, "polars-config-set-ascii-tables"]], "polars.Config.save_to_file": [[11, "polars-config-save-to-file"]], "polars.Config.set_streaming_chunk_size": [[19, "polars-config-set-streaming-chunk-size"]], "polars.Config.set_tbl_cell_numeric_alignment": [[21, "polars-config-set-tbl-cell-numeric-alignment"]], "polars.Config.set_fmt_str_lengths": [[17, "polars-config-set-fmt-str-lengths"]], "polars.DataFrame.write_ipc_stream": [[42, "polars-dataframe-write-ipc-stream"]], "polars.DataFrame.write_ndjson": [[44, "polars-dataframe-write-ndjson"]], "polars.Config.set_thousands_separator": [[32, "polars-config-set-thousands-separator"]], "polars.Config.set_tbl_formatting": [[25, "polars-config-set-tbl-formatting"]], "polars.Config.load": [[7, "polars-config-load"]], "polars.Float32": [[52, "polars-float32"]], "polars.DataFrame.write_parquet": [[45, "polars-dataframe-write-parquet"]], "polars.DataFrame.write_json": [[43, "polars-dataframe-write-json"]], "polars.Config.set_tbl_hide_dataframe_shape": [[28, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.Config.set_tbl_hide_dtype_separator": [[29, "polars-config-set-tbl-hide-dtype-separator"]], "polars.Config.set_tbl_column_data_type_inline": [[23, "polars-config-set-tbl-column-data-type-inline"]], "polars.Config.set_trim_decimal_zeros": [[33, "polars-config-set-trim-decimal-zeros"]], "polars.DataType": [[46, "polars-datatype"]], "Index": [[0, "index"]], "polars.Config.set_tbl_rows": [[30, "polars-config-set-tbl-rows"]], "polars.Series.list.set_symmetric_difference": [[1094, "polars-series-list-set-symmetric-difference"]], "polars.Series.name": [[1118, "polars-series-name"]], "polars.Series.map_dict": [[1109, "polars-series-map-dict"]], "polars.Series.median": [[1113, "polars-series-median"]], "polars.Series.list.explode": [[1078, "polars-series-list-explode"]], "polars.Series.list.max": [[1087, "polars-series-list-max"]], "polars.Series.list.lengths": [[1086, "polars-series-list-lengths"]], "polars.Series.list.get": [[1081, "polars-series-list-get"]], "polars.Series.lower_bound": [[1108, "polars-series-lower-bound"]], "polars.Series.list.sort": [[1098, "polars-series-list-sort"]], "polars.Series.list.mean": [[1088, "polars-series-list-mean"]], "polars.Series.list.count_matches": [[1074, "polars-series-list-count-matches"]], "polars.Series.list.join": [[1083, "polars-series-list-join"]], "polars.Series.list.first": [[1079, "polars-series-list-first"]], "polars.Series.list.arg_min": [[1070, "polars-series-list-arg-min"]], "polars.Series.len": [[1065, "polars-series-len"]], "polars.Series.n_unique": [[1117, "polars-series-n-unique"]], "polars.Series.log10": [[1106, "polars-series-log10"]], "polars.Series.list.to_struct": [[1103, "polars-series-list-to-struct"]], "polars.Series.nan_max": [[1119, "polars-series-nan-max"]], "polars.Series.max": [[1111, "polars-series-max"]], "polars.Series.list.slice": [[1097, "polars-series-list-slice"]], "polars.Series.list.sample": [[1091, "polars-series-list-sample"]], "polars.Series.list.contains": [[1072, "polars-series-list-contains"]], "polars.Series.mode": [[1115, "polars-series-mode"]], "polars.Series.list.set_union": [[1095, "polars-series-list-set-union"]], "polars.Series.list.set_difference": [[1092, "polars-series-list-set-difference"]], "polars.Series.n_chunks": [[1116, "polars-series-n-chunks"]], "polars.Series.list.concat": [[1071, "polars-series-list-concat"]], "polars.Series.log": [[1105, "polars-series-log"]], "polars.Series.list.set_intersection": [[1093, "polars-series-list-set-intersection"]], "polars.Series.list.len": [[1085, "polars-series-list-len"]], "polars.Series.log1p": [[1107, "polars-series-log1p"]], "polars.Series.limit": [[1066, "polars-series-limit"]], "polars.Series.list.take": [[1101, "polars-series-list-take"]], "polars.Series.list.last": [[1084, "polars-series-list-last"]], "polars.Series.map_elements": [[1110, "polars-series-map-elements"]], "polars.Series.list.drop_nulls": [[1076, "polars-series-list-drop-nulls"]], "polars.Series.mean": [[1112, "polars-series-mean"]], "polars.Series.list.head": [[1082, "polars-series-list-head"]], "polars.Series.list.sum": [[1099, "polars-series-list-sum"]], "polars.Series.list.min": [[1089, "polars-series-list-min"]], "polars.Series.list.gather": [[1080, "polars-series-list-gather"]], "polars.Series.kurtosis": [[1064, "polars-series-kurtosis"]], "polars.Series.list.eval": [[1077, "polars-series-list-eval"]], "polars.Series.list.shift": [[1096, "polars-series-list-shift"]], "polars.Series.list.tail": [[1100, "polars-series-list-tail"]], "polars.Series.list.arg_max": [[1069, "polars-series-list-arg-max"]], "polars.Series.list.diff": [[1075, "polars-series-list-diff"]], "polars.Series.list.count_match": [[1073, "polars-series-list-count-match"]], "polars.Series.min": [[1114, "polars-series-min"]], "polars.Series.list.any": [[1068, "polars-series-list-any"]], "polars.Series.list.to_array": [[1102, "polars-series-list-to-array"]], "polars.Series.list.unique": [[1104, "polars-series-list-unique"]], "polars.Series.list.reverse": [[1090, "polars-series-list-reverse"]], "polars.Series.list.all": [[1067, "polars-series-list-all"]], "polars.Series.rolling_max": [[1141, "polars-series-rolling-max"]], "polars.Series.peak_max": [[1125, "polars-series-peak-max"]], "polars.Series.shrink_to_fit": [[1163, "polars-series-shrink-to-fit"]], "polars.Series.set_sorted": [[1158, "polars-series-set-sorted"]], "polars.Series.str.contains_any": [[1175, "polars-series-str-contains-any"]], "polars.Series.rolling_min": [[1144, "polars-series-rolling-min"]], "polars.Series.qcut": [[1128, "polars-series-qcut"]], "polars.Series.reinterpret": [[1132, "polars-series-reinterpret"]], "polars.Series.rolling_apply": [[1139, "polars-series-rolling-apply"]], "polars.Series.std": [[1172, "polars-series-std"]], "polars.Series.product": [[1127, "polars-series-product"]], "polars.Series.rolling_quantile": [[1145, "polars-series-rolling-quantile"]], "polars.Series.rolling_median": [[1143, "polars-series-rolling-median"]], "polars.Series.sin": [[1166, "polars-series-sin"]], "polars.Series.replace": [[1134, "polars-series-replace"]], "polars.Series.reverse": [[1136, "polars-series-reverse"]], "polars.Series.set": [[1156, "polars-series-set"]], "polars.Series.sign": [[1165, "polars-series-sign"]], "polars.Series.shift_and_fill": [[1161, "polars-series-shift-and-fill"]], "polars.Series.rolling_sum": [[1148, "polars-series-rolling-sum"]], "polars.Series.sinh": [[1167, "polars-series-sinh"]], "polars.Series.set_at_idx": [[1157, "polars-series-set-at-idx"]], "polars.Series.rolling_mean": [[1142, "polars-series-rolling-mean"]], "polars.Series.not_": [[1122, "polars-series-not"]], "polars.Series.round": [[1150, "polars-series-round"]], "polars.Series.rolling_var": [[1149, "polars-series-rolling-var"]], "polars.Series.shift": [[1160, "polars-series-shift"]], "polars.Series.search_sorted": [[1154, "polars-series-search-sorted"]], "polars.Series.rename": [[1133, "polars-series-rename"]], "polars.Series.sort": [[1170, "polars-series-sort"]], "polars.Series.shape": [[1159, "polars-series-shape"]], "polars.Series.shrink_dtype": [[1162, "polars-series-shrink-dtype"]], "polars.Series.series_equal": [[1155, "polars-series-series-equal"]], "polars.Series.rle_id": [[1138, "polars-series-rle-id"]], "polars.Series.slice": [[1169, "polars-series-slice"]], "polars.Series.null_count": [[1123, "polars-series-null-count"]], "polars.Series.rolling_map": [[1140, "polars-series-rolling-map"]], "polars.Series.pct_change": [[1124, "polars-series-pct-change"]], "polars.Series.quantile": [[1129, "polars-series-quantile"]], "polars.Series.rank": [[1130, "polars-series-rank"]], "polars.Series.rle": [[1137, "polars-series-rle"]], "polars.Series.skew": [[1168, "polars-series-skew"]], "polars.Series.new_from_index": [[1121, "polars-series-new-from-index"]], "polars.Series.sample": [[1152, "polars-series-sample"]], "polars.Series.reshape": [[1135, "polars-series-reshape"]], "polars.Series.shuffle": [[1164, "polars-series-shuffle"]], "polars.Series.peak_min": [[1126, "polars-series-peak-min"]], "polars.Series.rechunk": [[1131, "polars-series-rechunk"]], "polars.Series.rolling_std": [[1147, "polars-series-rolling-std"]], "polars.Series.scatter": [[1153, "polars-series-scatter"]], "polars.Series.sqrt": [[1171, "polars-series-sqrt"]], "polars.Series.nan_min": [[1120, "polars-series-nan-min"]], "polars.Series.rolling_skew": [[1146, "polars-series-rolling-skew"]], "polars.Series.str.contains": [[1174, "polars-series-str-contains"]], "polars.Series.str.concat": [[1173, "polars-series-str-concat"]], "polars.Series.round_sig_figs": [[1151, "polars-series-round-sig-figs"]], "polars.Series.ewm_std": [[1020, "polars-series-ewm-std"]], "polars.Series.estimated_size": [[1018, "polars-series-estimated-size"]], "polars.Series.get_chunks": [[1033, "polars-series-get-chunks"]], "polars.Series.extend": [[1024, "polars-series-extend"]], "polars.Series.ewm_var": [[1021, "polars-series-ewm-var"]], "polars.Series.floor": [[1030, "polars-series-floor"]], "polars.Series.dtype": [[1015, "polars-series-dtype"]], "polars.Series.entropy": [[1016, "polars-series-entropy"]], "polars.Series.has_validity": [[1034, "polars-series-has-validity"]], "polars.Series.is_numeric": [[1058, "polars-series-is-numeric"]], "polars.Series.extend_constant": [[1025, "polars-series-extend-constant"]], "polars.Series.implode": [[1038, "polars-series-implode"]], "polars.Series.ewm_mean": [[1019, "polars-series-ewm-mean"]], "polars.Series.flags": [[1029, "polars-series-flags"]], "polars.Series.dt.total_nanoseconds": [[1008, "polars-series-dt-total-nanoseconds"]], "polars.Series.dt.year": [[1014, "polars-series-dt-year"]], "polars.Series.is_utf8": [[1062, "polars-series-is-utf8"]], "polars.Series.exp": [[1022, "polars-series-exp"]], "polars.Series.is_null": [[1057, "polars-series-is-null"]], "polars.Series.is_last_distinct": [[1053, "polars-series-is-last-distinct"]], "polars.Series.dt.with_time_unit": [[1013, "polars-series-dt-with-time-unit"]], "polars.Series.is_between": [[1041, "polars-series-is-between"]], "polars.Series.is_duplicated": [[1043, "polars-series-is-duplicated"]], "polars.Series.is_first_distinct": [[1047, "polars-series-is-first-distinct"]], "polars.Series.head": [[1036, "polars-series-head"]], "polars.Series.is_empty": [[1044, "polars-series-is-empty"]], "polars.Series.item": [[1063, "polars-series-item"]], "polars.Series.is_temporal": [[1060, "polars-series-is-temporal"]], "polars.Series.explode": [[1023, "polars-series-explode"]], "polars.Series.fill_nan": [[1026, "polars-series-fill-nan"]], "polars.Series.inner_dtype": [[1039, "polars-series-inner-dtype"]], "polars.Series.hist": [[1037, "polars-series-hist"]], "polars.Series.dt.week": [[1011, "polars-series-dt-week"]], "polars.Series.is_float": [[1048, "polars-series-is-float"]], "polars.Series.is_integer": [[1051, "polars-series-is-integer"]], "polars.Series.filter": [[1028, "polars-series-filter"]], "polars.Series.is_boolean": [[1042, "polars-series-is-boolean"]], "polars.Series.is_sorted": [[1059, "polars-series-is-sorted"]], "polars.Series.fill_null": [[1027, "polars-series-fill-null"]], "polars.Series.is_infinite": [[1050, "polars-series-is-infinite"]], "polars.Series.is_unique": [[1061, "polars-series-is-unique"]], "polars.Series.dt.weekday": [[1012, "polars-series-dt-weekday"]], "polars.Series.is_nan": [[1054, "polars-series-is-nan"]], "polars.Series.gather": [[1031, "polars-series-gather"]], "polars.Series.hash": [[1035, "polars-series-hash"]], "polars.Series.dt.total_seconds": [[1009, "polars-series-dt-total-seconds"]], "polars.Series.is_finite": [[1045, "polars-series-is-finite"]], "polars.Series.is_not_null": [[1056, "polars-series-is-not-null"]], "polars.Series.equals": [[1017, "polars-series-equals"]], "polars.Series.gather_every": [[1032, "polars-series-gather-every"]], "polars.Series.is_in": [[1049, "polars-series-is-in"]], "polars.Series.is_not_nan": [[1055, "polars-series-is-not-nan"]], "polars.Series.is_first": [[1046, "polars-series-is-first"]], "polars.Series.interpolate": [[1040, "polars-series-interpolate"]], "polars.Series.is_last": [[1052, "polars-series-is-last"]], "polars.Series.dt.truncate": [[1010, "polars-series-dt-truncate"]], "polars.Series.clone": [[942, "polars-series-clone"]], "polars.Series.cat.to_local": [[933, "polars-series-cat-to-local"]], "polars.Series.arr.any": [[906, "polars-series-arr-any"]], "polars.Series.bin.contains": [[923, "polars-series-bin-contains"]], "polars.Series.arr.sort": [[919, "polars-series-arr-sort"]], "polars.Series.arr.arg_max": [[907, "polars-series-arr-arg-max"]], "polars.Series.cum_max": [[946, "polars-series-cum-max"]], "polars.Series.arr.get": [[913, "polars-series-arr-get"]], "polars.Series.cot": [[945, "polars-series-cot"]], "polars.Series.cat.uses_lexical_ordering": [[934, "polars-series-cat-uses-lexical-ordering"]], "polars.Series.arg_sort": [[902, "polars-series-arg-sort"]], "polars.Series.ceil": [[936, "polars-series-ceil"]], "polars.Series.arr.last": [[915, "polars-series-arr-last"]], "polars.Series.cat.get_categories": [[930, "polars-series-cat-get-categories"]], "polars.Series.cat.is_local": [[931, "polars-series-cat-is-local"]], "polars.Series.cosh": [[944, "polars-series-cosh"]], "polars.Series.arr.contains": [[909, "polars-series-arr-contains"]], "polars.Series.bin.decode": [[924, "polars-series-bin-decode"]], "polars.Series.arr.max": [[916, "polars-series-arr-max"]], "polars.Series.chunk_lengths": [[937, "polars-series-chunk-lengths"]], "polars.Series.cbrt": [[935, "polars-series-cbrt"]], "polars.Series.bin.encode": [[925, "polars-series-bin-encode"]], "polars.Series.arr.reverse": [[918, "polars-series-arr-reverse"]], "polars.Series.cummax": [[950, "polars-series-cummax"]], "polars.Series.arctan": [[898, "polars-series-arctan"]], "polars.Series.arg_true": [[903, "polars-series-arg-true"]], "polars.Series.bin.starts_with": [[927, "polars-series-bin-starts-with"]], "polars.Series.arr.first": [[912, "polars-series-arr-first"]], "polars.Series.arr.unique": [[922, "polars-series-arr-unique"]], "polars.Series.clip_max": [[940, "polars-series-clip-max"]], "polars.Series.cum_min": [[947, "polars-series-cum-min"]], "polars.Series.bin.ends_with": [[926, "polars-series-bin-ends-with"]], "polars.Series.clear": [[938, "polars-series-clear"]], "polars.Series.arcsinh": [[897, "polars-series-arcsinh"]], "polars.Series.cum_prod": [[948, "polars-series-cum-prod"]], "polars.Series.arr.all": [[905, "polars-series-arr-all"]], "polars.Series.cos": [[943, "polars-series-cos"]], "polars.Series.arg_max": [[900, "polars-series-arg-max"]], "polars.Series.cummin": [[951, "polars-series-cummin"]], "polars.Series.bottom_k": [[928, "polars-series-bottom-k"]], "polars.Series.arg_min": [[901, "polars-series-arg-min"]], "polars.Series.cum_sum": [[949, "polars-series-cum-sum"]], "polars.Series.arr.to_list": [[921, "polars-series-arr-to-list"]], "polars.Series.arr.arg_min": [[908, "polars-series-arr-arg-min"]], "polars.Series.clip": [[939, "polars-series-clip"]], "polars.Series.cast": [[929, "polars-series-cast"]], "polars.Series.arr.explode": [[911, "polars-series-arr-explode"]], "polars.Series.arr.count_matches": [[910, "polars-series-arr-count-matches"]], "polars.Series.cat.set_ordering": [[932, "polars-series-cat-set-ordering"]], "polars.Series.arcsin": [[896, "polars-series-arcsin"]], "polars.Series.arctanh": [[899, "polars-series-arctanh"]], "polars.Series.arg_unique": [[904, "polars-series-arg-unique"]], "polars.Series.clip_min": [[941, "polars-series-clip-min"]], "polars.Series.arr.min": [[917, "polars-series-arr-min"]], "polars.Series.arr.sum": [[920, "polars-series-arr-sum"]], "polars.Series.arr.join": [[914, "polars-series-arr-join"]], "polars.Series.dt.millennium": [[981, "polars-series-dt-millennium"]], "polars.Series.dt.month_start": [[989, "polars-series-dt-month-start"]], "polars.Series.dt.nanoseconds": [[991, "polars-series-dt-nanoseconds"]], "polars.Series.dt.min": [[984, "polars-series-dt-min"]], "polars.Series.dt.is_leap_year": [[974, "polars-series-dt-is-leap-year"]], "polars.Series.dt.dst_offset": [[970, "polars-series-dt-dst-offset"]], "polars.Series.dt.minutes": [[986, "polars-series-dt-minutes"]], "polars.Series.dt.millisecond": [[982, "polars-series-dt-millisecond"]], "polars.Series.dt.milliseconds": [[983, "polars-series-dt-milliseconds"]], "polars.Series.drop_nulls": [[960, "polars-series-drop-nulls"]], "polars.Series.cut": [[955, "polars-series-cut"]], "polars.Series.dt.days": [[969, "polars-series-dt-days"]], "polars.Series.dt.datetime": [[967, "polars-series-dt-datetime"]], "polars.Series.dot": [[958, "polars-series-dot"]], "polars.Series.dt.base_utc_offset": [[961, "polars-series-dt-base-utc-offset"]], "polars.Series.dt.total_hours": [[1004, "polars-series-dt-total-hours"]], "polars.Series.dt.century": [[963, "polars-series-dt-century"]], "polars.Series.dt.time": [[1000, "polars-series-dt-time"]], "polars.Series.dt.total_microseconds": [[1005, "polars-series-dt-total-microseconds"]], "polars.Series.dt.month_end": [[988, "polars-series-dt-month-end"]], "polars.Series.dt.second": [[997, "polars-series-dt-second"]], "polars.Series.drop_nans": [[959, "polars-series-drop-nans"]], "polars.Series.dt.convert_time_zone": [[965, "polars-series-dt-convert-time-zone"]], "polars.Series.dt.iso_year": [[975, "polars-series-dt-iso-year"]], "polars.Series.dt.replace_time_zone": [[995, "polars-series-dt-replace-time-zone"]], "polars.Series.dt.max": [[976, "polars-series-dt-max"]], "polars.Series.dt.quarter": [[994, "polars-series-dt-quarter"]], "polars.Series.dt.ordinal_day": [[993, "polars-series-dt-ordinal-day"]], "polars.Series.dt.combine": [[964, "polars-series-dt-combine"]], "polars.Series.dt.cast_time_unit": [[962, "polars-series-dt-cast-time-unit"]], "polars.Series.dt.median": [[978, "polars-series-dt-median"]], "polars.Series.dt.microsecond": [[979, "polars-series-dt-microsecond"]], "polars.Series.dt.minute": [[985, "polars-series-dt-minute"]], "polars.Series.dt.seconds": [[998, "polars-series-dt-seconds"]], "polars.Series.dt.timestamp": [[1001, "polars-series-dt-timestamp"]], "polars.Series.dt.to_string": [[1002, "polars-series-dt-to-string"]], "polars.Series.cumsum": [[953, "polars-series-cumsum"]], "polars.Series.dt.total_milliseconds": [[1006, "polars-series-dt-total-milliseconds"]], "polars.Series.dt.total_minutes": [[1007, "polars-series-dt-total-minutes"]], "polars.Series.dt.epoch": [[971, "polars-series-dt-epoch"]], "polars.Series.dt.total_days": [[1003, "polars-series-dt-total-days"]], "polars.Series.dt.hours": [[973, "polars-series-dt-hours"]], "polars.Series.dt.microseconds": [[980, "polars-series-dt-microseconds"]], "polars.Series.dt.date": [[966, "polars-series-dt-date"]], "polars.Series.dt.nanosecond": [[990, "polars-series-dt-nanosecond"]], "polars.Series.cumulative_eval": [[954, "polars-series-cumulative-eval"]], "polars.Series.cumprod": [[952, "polars-series-cumprod"]], "polars.Series.dt.offset_by": [[992, "polars-series-dt-offset-by"]], "polars.Series.diff": [[957, "polars-series-diff"]], "polars.Series.dt.round": [[996, "polars-series-dt-round"]], "polars.Series.dt.mean": [[977, "polars-series-dt-mean"]], "polars.Series.dt.hour": [[972, "polars-series-dt-hour"]], "polars.Series.dt.day": [[968, "polars-series-dt-day"]], "polars.Series.dt.strftime": [[999, "polars-series-dt-strftime"]], "polars.Series.describe": [[956, "polars-series-describe"]], "polars.Series.dt.month": [[987, "polars-series-dt-month"]], "polars.LazyFrame.clear": [[790, "polars-lazyframe-clear"]], "polars.LazyFrame.groupby_rolling": [[814, "polars-lazyframe-groupby-rolling"]], "polars.LazyFrame.gather_every": [[808, "polars-lazyframe-gather-every"]], "polars.LazyFrame.max": [[825, "polars-lazyframe-max"]], "polars.LazyFrame.median": [[827, "polars-lazyframe-median"]], "polars.LazyFrame.rolling": [[837, "polars-lazyframe-rolling"]], "polars.LazyFrame.cast": [[789, "polars-lazyframe-cast"]], "polars.LazyFrame.join_asof": [[819, "polars-lazyframe-join-asof"]], "polars.LazyFrame.reverse": [[836, "polars-lazyframe-reverse"]], "polars.LazyFrame.groupby": [[812, "polars-lazyframe-groupby"]], "polars.LazyFrame.collect": [[792, "polars-lazyframe-collect"]], "polars.LazyFrame.drop_nulls": [[799, "polars-lazyframe-drop-nulls"]], "polars.LazyFrame.bottom_k": [[787, "polars-lazyframe-bottom-k"]], "polars.LazyFrame.cache": [[788, "polars-lazyframe-cache"]], "polars.LazyFrame.head": [[815, "polars-lazyframe-head"]], "polars.LazyFrame.describe": [[796, "polars-lazyframe-describe"]], "polars.LazyFrame.profile": [[833, "polars-lazyframe-profile"]], "polars.LazyFrame.pipe": [[832, "polars-lazyframe-pipe"]], "polars.LazyFrame.min": [[830, "polars-lazyframe-min"]], "polars.LazyFrame.first": [[807, "polars-lazyframe-first"]], "polars.LazyFrame.mean": [[826, "polars-lazyframe-mean"]], "polars.LazyFrame.inspect": [[816, "polars-lazyframe-inspect"]], "polars.LazyFrame.null_count": [[831, "polars-lazyframe-null-count"]], "polars.LazyFrame.interpolate": [[817, "polars-lazyframe-interpolate"]], "polars.LazyFrame.collect_async": [[793, "polars-lazyframe-collect-async"]], "polars.LazyFrame.select": [[839, "polars-lazyframe-select"]], "polars.LazyFrame.group_by_rolling": [[811, "polars-lazyframe-group-by-rolling"]], "polars.LazyFrame.columns": [[794, "polars-lazyframe-columns"]], "polars.LazyFrame.schema": [[838, "polars-lazyframe-schema"]], "polars.LazyFrame.deserialize": [[797, "polars-lazyframe-deserialize"]], "polars.LazyFrame.group_by_dynamic": [[810, "polars-lazyframe-group-by-dynamic"]], "polars.LazyFrame.join": [[818, "polars-lazyframe-join"]], "polars.LazyFrame.map_batches": [[824, "polars-lazyframe-map-batches"]], "polars.LazyFrame.approx_n_unique": [[786, "polars-lazyframe-approx-n-unique"]], "Input/output": [[784, "input-output"]], "CSV": [[784, "csv"]], "Feather/ IPC": [[784, "feather-ipc"]], "Parquet": [[784, "parquet"]], "Database": [[784, "database"]], "JSON": [[784, "json"]], "AVRO": [[784, "avro"]], "Spreadsheet": [[784, "spreadsheet"]], "Apache Iceberg": [[784, "apache-iceberg"]], "Delta Lake": [[784, "delta-lake"]], "Datasets": [[784, "datasets"]], "BatchedCsvReader": [[784, "batchedcsvreader"]], "polars.LazyFrame.clone": [[791, "polars-lazyframe-clone"]], "polars.LazyFrame.group_by": [[809, "polars-lazyframe-group-by"]], "polars.LazyFrame.fetch": [[803, "polars-lazyframe-fetch"]], "polars.LazyFrame.fill_null": [[805, "polars-lazyframe-fill-null"]], "polars.LazyFrame.explain": [[801, "polars-lazyframe-explain"]], "polars.LazyFrame.groupby_dynamic": [[813, "polars-lazyframe-groupby-dynamic"]], "polars.LazyFrame.filter": [[806, "polars-lazyframe-filter"]], "polars.LazyFrame.map": [[823, "polars-lazyframe-map"]], "polars.LazyFrame.dtypes": [[800, "polars-lazyframe-dtypes"]], "polars.LazyFrame.quantile": [[834, "polars-lazyframe-quantile"]], "polars.LazyFrame.fill_nan": [[804, "polars-lazyframe-fill-nan"]], "polars.LazyFrame.melt": [[828, "polars-lazyframe-melt"]], "polars.LazyFrame.merge_sorted": [[829, "polars-lazyframe-merge-sorted"]], "polars.LazyFrame.explode": [[802, "polars-lazyframe-explode"]], "polars.LazyFrame.count": [[795, "polars-lazyframe-count"]], "polars.LazyFrame.rename": [[835, "polars-lazyframe-rename"]], "polars.LazyFrame.lazy": [[821, "polars-lazyframe-lazy"]], "polars.LazyFrame.last": [[820, "polars-lazyframe-last"]], "polars.LazyFrame.limit": [[822, "polars-lazyframe-limit"]], "polars.LazyFrame.drop": [[798, "polars-lazyframe-drop"]], "polars.all": [[687, "polars-all"]], "polars.arg_where": [[697, "polars-arg-where"]], "polars.cumreduce": [[710, "polars-cumreduce"]], "polars.date": [[713, "polars-date"]], "polars.date_range": [[714, "polars-date-range"]], "polars.from_epoch": [[725, "polars-from-epoch"]], "polars.datetime": [[716, "polars-datetime"]], "polars.groups": [[726, "polars-groups"]], "polars.cum_fold": [[705, "polars-cum-fold"]], "polars.Expr.take_every": [[674, "polars-expr-take-every"]], "polars.head": [[727, "polars-head"]], "polars.apply": [[691, "polars-apply"]], "polars.approx_n_unique": [[692, "polars-approx-n-unique"]], "polars.cum_reduce": [[706, "polars-cum-reduce"]], "polars.datetime_ranges": [[718, "polars-datetime-ranges"]], "polars.concat_str": [[700, "polars-concat-str"]], "polars.Expr.tan": [[675, "polars-expr-tan"]], "polars.cum_sum": [[707, "polars-cum-sum"]], "polars.element": [[720, "polars-element"]], "polars.format": [[724, "polars-format"]], "polars.Expr.tanh": [[676, "polars-expr-tanh"]], "polars.Expr.take": [[673, "polars-expr-take"]], "polars.Expr.tail": [[672, "polars-expr-tail"]], "polars.date_ranges": [[715, "polars-date-ranges"]], "polars.corr": [[701, "polars-corr"]], "polars.first": [[722, "polars-first"]], "polars.cum_sum_horizontal": [[708, "polars-cum-sum-horizontal"]], "polars.arg_sort_by": [[696, "polars-arg-sort-by"]], "polars.cumsum_horizontal": [[712, "polars-cumsum-horizontal"]], "polars.Expr.upper_bound": [[682, "polars-expr-upper-bound"]], "polars.datetime_range": [[717, "polars-datetime-range"]], "polars.fold": [[723, "polars-fold"]], "polars.duration": [[719, "polars-duration"]], "polars.Expr.to_physical": [[677, "polars-expr-to-physical"]], "polars.concat_list": [[699, "polars-concat-list"]], "polars.coalesce": [[698, "polars-coalesce"]], "polars.cum_count": [[704, "polars-cum-count"]], "polars.all_horizontal": [[688, "polars-all-horizontal"]], "polars.cumfold": [[709, "polars-cumfold"]], "polars.count": [[702, "polars-count"]], "polars.Expr.where": [[685, "polars-expr-where"]], "polars.Expr.unique_counts": [[681, "polars-expr-unique-counts"]], "polars.Expr.top_k": [[678, "polars-expr-top-k"]], "polars.Expr.truediv": [[679, "polars-expr-truediv"]], "polars.exclude": [[721, "polars-exclude"]], "polars.Expr.var": [[684, "polars-expr-var"]], "polars.Expr.value_counts": [[683, "polars-expr-value-counts"]], "polars.arctan2d": [[695, "polars-arctan2d"]], "polars.Expr.xor": [[686, "polars-expr-xor"]], "polars.Expr.unique": [[680, "polars-expr-unique"]], "polars.arange": [[693, "polars-arange"]], "polars.any_horizontal": [[690, "polars-any-horizontal"]], "polars.arctan2": [[694, "polars-arctan2"]], "polars.cov": [[703, "polars-cov"]], "polars.cumsum": [[711, "polars-cumsum"]], "polars.any": [[689, "polars-any"]], "polars.Series.zip_with": [[1252, "polars-series-zip-with"]], "SQL": [[1269, "sql"]], "Methods": [[1269, "methods"]], "polars.Series.top_k": [[1245, "polars-series-top-k"]], "Computation": [[1258, "computation"], [769, "computation"], [297, "computation"]], "Temporal": [[1268, "temporal"], [780, "temporal"], [305, "temporal"]], "polars.Series.to_init_repr": [[1240, "polars-series-to-init-repr"]], "polars.Series.value_counts": [[1249, "polars-series-value-counts"]], "Binary": [[1255, "binary"], [777, "binary"], [764, "binary"]], "polars.Series.to_arrow": [[1237, "polars-series-to-arrow"]], "List": [[1262, "list"], [772, "list"]], "Testing": [[1270, "testing"]], "Asserts": [[1270, "asserts"]], "Parametric testing": [[1270, "parametric-testing"]], "Polars primitives": [[1270, "polars-primitives"]], "Strategy helpers": [[1270, "strategy-helpers"]], "Profiles": [[1270, "profiles"]], "polars.Series.var": [[1250, "polars-series-var"]], "polars.Series.tail": [[1232, "polars-series-tail"]], "polars.Series.to_dummies": [[1238, "polars-series-to-dummies"]], "String": [[1266, "string"], [778, "string"]], "polars.Series.to_numpy": [[1242, "polars-series-to-numpy"]], "polars.Series.unique_counts": [[1247, "polars-series-unique-counts"]], "polars.Series.take": [[1233, "polars-series-take"]], "polars.Series.to_pandas": [[1243, "polars-series-to-pandas"]], "Boolean": [[1256, "boolean"], [765, "boolean"]], "Array": [[1253, "array"], [763, "array"]], "Utils": [[1271, "utils"]], "Miscellaneous": [[1263, "miscellaneous"], [884, "miscellaneous"], [782, "miscellaneous"], [774, "miscellaneous"], [302, "miscellaneous"]], "polars.Series.tanh": [[1236, "polars-series-tanh"]], "polars.Series.to_frame": [[1239, "polars-series-to-frame"]], "Attributes": [[1254, "attributes"], [880, "attributes"], [296, "attributes"]], "Struct": [[1267, "struct"], [779, "struct"]], "Categories": [[1257, "categories"], [766, "categories"]], "polars.Series.to_list": [[1241, "polars-series-to-list"]], "Descriptive": [[1259, "descriptive"], [881, "descriptive"], [298, "descriptive"]], "Series": [[1261, "series"]], "Manipulation/selection": [[1264, "manipulation-selection"], [885, "manipulation-selection"], [775, "manipulation-selection"], [303, "manipulation-selection"]], "polars.Series.view": [[1251, "polars-series-view"]], "polars.Series.tan": [[1235, "polars-series-tan"]], "polars.Series.take_every": [[1234, "polars-series-take-every"]], "Plot": [[1265, "plot"], [304, "plot"]], "polars.Series.unique": [[1246, "polars-series-unique"]], "Export": [[1260, "export"], [299, "export"]], "polars.Series.upper_bound": [[1248, "polars-series-upper-bound"]], "polars.Series.to_physical": [[1244, "polars-series-to-physical"]], "polars.LazyFrame.serialize": [[841, "polars-lazyframe-serialize"]], "polars.lazyframe.group_by.LazyGroupBy.median": [[874, "polars-lazyframe-group-by-lazygroupby-median"]], "polars.LazyFrame.with_row_count": [[861, "polars-lazyframe-with-row-count"]], "polars.LazyFrame.tail": [[850, "polars-lazyframe-tail"]], "polars.LazyFrame.var": [[856, "polars-lazyframe-var"]], "GroupBy": [[882, "groupby"], [300, "groupby"]], "polars.lazyframe.group_by.LazyGroupBy.all": [[864, "polars-lazyframe-group-by-lazygroupby-all"]], "Selectors": [[886, "selectors"]], "Importing": [[886, "importing"]], "Set operations": [[886, "set-operations"]], "Functions": [[886, "functions"], [770, "functions"], [782, "functions"]], "polars.Series.arccos": [[894, "polars-series-arccos"]], "polars.LazyFrame.set_sorted": [[842, "polars-lazyframe-set-sorted"]], "polars.lazyframe.group_by.LazyGroupBy.apply": [[865, "polars-lazyframe-group-by-lazygroupby-apply"]], "polars.LazyFrame.unnest": [[854, "polars-lazyframe-unnest"]], "polars.LazyFrame.unique": [[853, "polars-lazyframe-unique"]], "polars.LazyFrame.take_every": [[851, "polars-lazyframe-take-every"]], "polars.LazyFrame.std": [[848, "polars-lazyframe-std"]], "polars.LazyFrame.with_columns_seq": [[859, "polars-lazyframe-with-columns-seq"]], "polars.Series.alias": [[889, "polars-series-alias"]], "polars.LazyFrame.top_k": [[852, "polars-lazyframe-top-k"]], "polars.lazyframe.group_by.LazyGroupBy.tail": [[879, "polars-lazyframe-group-by-lazygroupby-tail"]], "polars.Series.any": [[891, "polars-series-any"]], "polars.LazyFrame.width": [[857, "polars-lazyframe-width"]], "polars.lazyframe.group_by.LazyGroupBy.count": [[866, "polars-lazyframe-group-by-lazygroupby-count"]], "polars.LazyFrame.shift_and_fill": [[844, "polars-lazyframe-shift-and-fill"]], "polars.lazyframe.group_by.LazyGroupBy.mean": [[873, "polars-lazyframe-group-by-lazygroupby-mean"]], "polars.Series.apply": [[893, "polars-series-apply"]], "polars.LazyFrame.select_seq": [[840, "polars-lazyframe-select-seq"]], "polars.lazyframe.group_by.LazyGroupBy.sum": [[878, "polars-lazyframe-group-by-lazygroupby-sum"]], "polars.LazyFrame.sort": [[847, "polars-lazyframe-sort"]], "polars.lazyframe.group_by.LazyGroupBy.first": [[867, "polars-lazyframe-group-by-lazygroupby-first"]], "polars.lazyframe.group_by.LazyGroupBy.map_groups": [[871, "polars-lazyframe-group-by-lazygroupby-map-groups"]], "polars.lazyframe.group_by.LazyGroupBy.n_unique": [[876, "polars-lazyframe-group-by-lazygroupby-n-unique"]], "polars.lazyframe.group_by.LazyGroupBy.head": [[868, "polars-lazyframe-group-by-lazygroupby-head"]], "polars.LazyFrame.with_row_index": [[862, "polars-lazyframe-with-row-index"]], "Read/write logical plan": [[884, "read-write-logical-plan"]], "polars.lazyframe.group_by.LazyGroupBy.agg": [[863, "polars-lazyframe-group-by-lazygroupby-agg"]], "polars.Series.abs": [[888, "polars-series-abs"]], "polars.lazyframe.group_by.LazyGroupBy.len": [[870, "polars-lazyframe-group-by-lazygroupby-len"]], "polars.lazyframe.group_by.LazyGroupBy.quantile": [[877, "polars-lazyframe-group-by-lazygroupby-quantile"]], "LazyFrame": [[883, "lazyframe"]], "polars.Series.arccosh": [[895, "polars-series-arccosh"]], "polars.LazyFrame.shift": [[843, "polars-lazyframe-shift"]], "polars.Series.append": [[892, "polars-series-append"]], "polars.lazyframe.group_by.LazyGroupBy.last": [[869, "polars-lazyframe-group-by-lazygroupby-last"]], "polars.lazyframe.group_by.LazyGroupBy.min": [[875, "polars-lazyframe-group-by-lazygroupby-min"]], "polars.Series.all": [[890, "polars-series-all"]], "polars.LazyFrame.slice": [[846, "polars-lazyframe-slice"]], "polars.LazyFrame.update": [[855, "polars-lazyframe-update"]], "polars.LazyFrame.with_context": [[860, "polars-lazyframe-with-context"]], "polars.LazyFrame.sum": [[849, "polars-lazyframe-sum"]], "polars.LazyFrame.with_columns": [[858, "polars-lazyframe-with-columns"]], "polars.lazyframe.group_by.LazyGroupBy.max": [[872, "polars-lazyframe-group-by-lazygroupby-max"]], "polars.LazyFrame.show_graph": [[845, "polars-lazyframe-show-graph"]], "polars.Expr.str.to_date": [[657, "polars-expr-str-to-date"]], "polars.Expr.str.strip_suffix": [[655, "polars-expr-str-strip-suffix"]], "polars.Expr.str.strip_prefix": [[654, "polars-expr-str-strip-prefix"]], "polars.Expr.str.to_titlecase": [[663, "polars-expr-str-to-titlecase"]], "polars.Expr.str.count_match": [[617, "polars-expr-str-count-match"]], "polars.Expr.struct.field": [[666, "polars-expr-struct-field"]], "polars.Expr.sub": [[669, "polars-expr-sub"]], "polars.Expr.str.json_extract": [[628, "polars-expr-str-json-extract"]], "polars.Expr.str.extract_groups": [[625, "polars-expr-str-extract-groups"]], "polars.Expr.str.replace_many": [[641, "polars-expr-str-replace-many"]], "polars.Expr.str.to_decimal": [[659, "polars-expr-str-to-decimal"]], "polars.Expr.str.pad_start": [[637, "polars-expr-str-pad-start"]], "polars.Expr.str.starts_with": [[649, "polars-expr-str-starts-with"]], "polars.Expr.str.to_uppercase": [[664, "polars-expr-str-to-uppercase"]], "polars.Expr.str.extract": [[623, "polars-expr-str-extract"]], "polars.Expr.str.split": [[646, "polars-expr-str-split"]], "polars.Expr.str.to_datetime": [[658, "polars-expr-str-to-datetime"]], "polars.Expr.str.ends_with": [[621, "polars-expr-str-ends-with"]], "polars.Expr.str.strip_chars_end": [[652, "polars-expr-str-strip-chars-end"]], "polars.Expr.str.decode": [[619, "polars-expr-str-decode"]], "polars.Expr.str.slice": [[645, "polars-expr-str-slice"]], "polars.Expr.str.find": [[626, "polars-expr-str-find"]], "polars.Expr.str.replace": [[639, "polars-expr-str-replace"]], "polars.Expr.str.lstrip": [[634, "polars-expr-str-lstrip"]], "polars.Expr.str.split_exact": [[647, "polars-expr-str-split-exact"]], "polars.Expr.str.strip_chars_start": [[653, "polars-expr-str-strip-chars-start"]], "polars.Expr.str.json_decode": [[627, "polars-expr-str-json-decode"]], "polars.Expr.str.rjust": [[643, "polars-expr-str-rjust"]], "polars.Expr.str.zfill": [[665, "polars-expr-str-zfill"]], "polars.Expr.sum": [[671, "polars-expr-sum"]], "polars.Expr.str.extract_all": [[624, "polars-expr-str-extract-all"]], "polars.Expr.str.splitn": [[648, "polars-expr-str-splitn"]], "polars.Expr.str.to_integer": [[660, "polars-expr-str-to-integer"]], "polars.Expr.suffix": [[670, "polars-expr-suffix"]], "polars.Expr.str.n_chars": [[635, "polars-expr-str-n-chars"]], "polars.Expr.struct.json_encode": [[667, "polars-expr-struct-json-encode"]], "polars.Expr.str.lengths": [[632, "polars-expr-str-lengths"]], "polars.Expr.str.pad_end": [[636, "polars-expr-str-pad-end"]], "polars.Expr.str.count_matches": [[618, "polars-expr-str-count-matches"]], "polars.Expr.str.ljust": [[633, "polars-expr-str-ljust"]], "polars.Expr.str.strptime": [[656, "polars-expr-str-strptime"]], "polars.Expr.str.rstrip": [[644, "polars-expr-str-rstrip"]], "polars.Expr.str.len_bytes": [[630, "polars-expr-str-len-bytes"]], "polars.Expr.str.reverse": [[642, "polars-expr-str-reverse"]], "polars.Expr.str.len_chars": [[631, "polars-expr-str-len-chars"]], "polars.Expr.str.strip_chars": [[651, "polars-expr-str-strip-chars"]], "polars.Expr.str.json_path_match": [[629, "polars-expr-str-json-path-match"]], "polars.Expr.str.contains_any": [[616, "polars-expr-str-contains-any"]], "polars.Expr.str.explode": [[622, "polars-expr-str-explode"]], "polars.Expr.str.to_time": [[662, "polars-expr-str-to-time"]], "polars.Expr.struct.rename_fields": [[668, "polars-expr-struct-rename-fields"]], "polars.Expr.str.strip": [[650, "polars-expr-str-strip"]], "polars.Expr.str.encode": [[620, "polars-expr-str-encode"]], "polars.Expr.str.to_lowercase": [[661, "polars-expr-str-to-lowercase"]], "polars.Expr.str.parse_int": [[638, "polars-expr-str-parse-int"]], "polars.Expr.str.replace_all": [[640, "polars-expr-str-replace-all"]], "polars.Expr.list.to_array": [[519, "polars-expr-list-to-array"]], "polars.Expr.mode": [[547, "polars-expr-mode"]], "polars.Expr.list.to_struct": [[520, "polars-expr-list-to-struct"]], "polars.Expr.ne": [[558, "polars-expr-ne"]], "polars.Expr.log1p": [[524, "polars-expr-log1p"]], "polars.Expr.ne_missing": [[559, "polars-expr-ne-missing"]], "polars.Expr.meta.root_names": [[541, "polars-expr-meta-root-names"]], "polars.Expr.list.min": [[506, "polars-expr-list-min"]], "polars.Expr.map_elements": [[531, "polars-expr-map-elements"]], "polars.Expr.lower_bound": [[525, "polars-expr-lower-bound"]], "polars.Expr.mod": [[546, "polars-expr-mod"]], "polars.Expr.name.keep": [[550, "polars-expr-name-keep"]], "polars.Expr.list.set_difference": [[509, "polars-expr-list-set-difference"]], "polars.Expr.max": [[532, "polars-expr-max"]], "polars.Expr.meta.undo_aliases": [[543, "polars-expr-meta-undo-aliases"]], "polars.Expr.meta.eq": [[535, "polars-expr-meta-eq"]], "polars.Expr.name.prefix": [[552, "polars-expr-name-prefix"]], "polars.Expr.name.suffix": [[553, "polars-expr-name-suffix"]], "polars.Expr.meta.tree_format": [[542, "polars-expr-meta-tree-format"]], "polars.Expr.meta.is_regex_projection": [[537, "polars-expr-meta-is-regex-projection"]], "polars.Expr.list.sum": [[516, "polars-expr-list-sum"]], "polars.Expr.name.to_lowercase": [[554, "polars-expr-name-to-lowercase"]], "polars.Expr.list.sort": [[515, "polars-expr-list-sort"]], "polars.Expr.meta.pop": [[540, "polars-expr-meta-pop"]], "polars.Expr.list.tail": [[517, "polars-expr-list-tail"]], "polars.Expr.name.to_uppercase": [[555, "polars-expr-name-to-uppercase"]], "polars.Expr.map_dict": [[530, "polars-expr-map-dict"]], "polars.Expr.median": [[534, "polars-expr-median"]], "polars.Expr.meta.output_name": [[539, "polars-expr-meta-output-name"]], "polars.Expr.lt": [[526, "polars-expr-lt"]], "polars.Expr.mul": [[548, "polars-expr-mul"]], "polars.Expr.meta.write_json": [[544, "polars-expr-meta-write-json"]], "polars.Expr.list.shift": [[513, "polars-expr-list-shift"]], "polars.Expr.map_alias": [[528, "polars-expr-map-alias"]], "polars.Expr.list.reverse": [[507, "polars-expr-list-reverse"]], "polars.Expr.list.sample": [[508, "polars-expr-list-sample"]], "polars.Expr.list.mean": [[505, "polars-expr-list-mean"]], "polars.Expr.list.unique": [[521, "polars-expr-list-unique"]], "polars.Expr.map_batches": [[529, "polars-expr-map-batches"]], "polars.Expr.nan_max": [[556, "polars-expr-nan-max"]], "polars.Expr.n_unique": [[549, "polars-expr-n-unique"]], "polars.Expr.list.set_intersection": [[510, "polars-expr-list-set-intersection"]], "polars.Expr.list.set_union": [[512, "polars-expr-list-set-union"]], "polars.Expr.log": [[522, "polars-expr-log"]], "polars.Expr.min": [[545, "polars-expr-min"]], "polars.Expr.list.take": [[518, "polars-expr-list-take"]], "polars.Expr.meta.has_multiple_outputs": [[536, "polars-expr-meta-has-multiple-outputs"]], "polars.Expr.meta.ne": [[538, "polars-expr-meta-ne"]], "polars.Expr.name.map": [[551, "polars-expr-name-map"]], "polars.Expr.list.slice": [[514, "polars-expr-list-slice"]], "polars.Expr.map": [[527, "polars-expr-map"]], "polars.Expr.mean": [[533, "polars-expr-mean"]], "polars.Expr.nan_min": [[557, "polars-expr-nan-min"]], "polars.Expr.log10": [[523, "polars-expr-log10"]], "polars.Expr.list.set_symmetric_difference": [[511, "polars-expr-list-set-symmetric-difference"]], "polars.Expr.list.max": [[504, "polars-expr-list-max"]], "polars.Expr.sin": [[606, "polars-expr-sin"]], "polars.Expr.rank": [[575, "polars-expr-rank"]], "polars.Expr.pct_change": [[565, "polars-expr-pct-change"]], "polars.Expr.or_": [[563, "polars-expr-or"]], "polars.Expr.std": [[613, "polars-expr-std"]], "polars.Expr.replace": [[579, "polars-expr-replace"]], "polars.Expr.rolling": [[584, "polars-expr-rolling"]], "polars.Expr.over": [[564, "polars-expr-over"]], "polars.Expr.search_sorted": [[599, "polars-expr-search-sorted"]], "polars.Expr.shrink_dtype": [[603, "polars-expr-shrink-dtype"]], "polars.Expr.sign": [[605, "polars-expr-sign"]], "polars.Expr.peak_max": [[566, "polars-expr-peak-max"]], "polars.Expr.peak_min": [[567, "polars-expr-peak-min"]], "polars.Expr.quantile": [[573, "polars-expr-quantile"]], "polars.Expr.round_sig_figs": [[597, "polars-expr-round-sig-figs"]], "polars.Expr.sort_by": [[611, "polars-expr-sort-by"]], "polars.Expr.repeat_by": [[578, "polars-expr-repeat-by"]], "polars.Expr.rolling_apply": [[585, "polars-expr-rolling-apply"]], "polars.Expr.sinh": [[607, "polars-expr-sinh"]], "polars.Expr.rolling_map": [[586, "polars-expr-rolling-map"]], "polars.Expr.str.contains": [[615, "polars-expr-str-contains"]], "polars.Expr.skew": [[608, "polars-expr-skew"]], "polars.Expr.pow": [[569, "polars-expr-pow"]], "polars.Expr.product": [[571, "polars-expr-product"]], "polars.Expr.prefix": [[570, "polars-expr-prefix"]], "polars.Expr.rolling_skew": [[592, "polars-expr-rolling-skew"]], "polars.Expr.rle_id": [[583, "polars-expr-rle-id"]], "polars.Expr.shift": [[601, "polars-expr-shift"]], "polars.Expr.slice": [[609, "polars-expr-slice"]], "polars.Expr.reverse": [[581, "polars-expr-reverse"]], "polars.Expr.reshape": [[580, "polars-expr-reshape"]], "polars.Expr.sort": [[610, "polars-expr-sort"]], "polars.Expr.sample": [[598, "polars-expr-sample"]], "polars.Expr.rolling_max": [[587, "polars-expr-rolling-max"]], "polars.Expr.null_count": [[562, "polars-expr-null-count"]], "polars.Expr.rolling_quantile": [[591, "polars-expr-rolling-quantile"]], "polars.Expr.rolling_std": [[593, "polars-expr-rolling-std"]], "polars.Expr.str.concat": [[614, "polars-expr-str-concat"]], "polars.Expr.rolling_sum": [[594, "polars-expr-rolling-sum"]], "polars.Expr.not_": [[561, "polars-expr-not"]], "polars.Expr.rolling_mean": [[588, "polars-expr-rolling-mean"]], "polars.Expr.shift_and_fill": [[602, "polars-expr-shift-and-fill"]], "polars.Expr.sqrt": [[612, "polars-expr-sqrt"]], "polars.Expr.pipe": [[568, "polars-expr-pipe"]], "polars.Expr.set_sorted": [[600, "polars-expr-set-sorted"]], "polars.Expr.qcut": [[572, "polars-expr-qcut"]], "polars.Expr.rle": [[582, "polars-expr-rle"]], "polars.Expr.rolling_median": [[589, "polars-expr-rolling-median"]], "polars.Expr.neg": [[560, "polars-expr-neg"]], "polars.Expr.rolling_min": [[590, "polars-expr-rolling-min"]], "polars.Expr.rechunk": [[576, "polars-expr-rechunk"]], "polars.Expr.reinterpret": [[577, "polars-expr-reinterpret"]], "polars.Expr.shuffle": [[604, "polars-expr-shuffle"]], "polars.Expr.rolling_var": [[595, "polars-expr-rolling-var"]], "polars.Expr.radians": [[574, "polars-expr-radians"]], "polars.Expr.round": [[596, "polars-expr-round"]], "polars.Expr.is_infinite": [[469, "polars-expr-is-infinite"]], "polars.Expr.list.any": [[485, "polars-expr-list-any"]], "polars.Expr.is_last": [[470, "polars-expr-is-last"]], "polars.Expr.is_nan": [[472, "polars-expr-is-nan"]], "polars.Expr.le": [[481, "polars-expr-le"]], "polars.Expr.is_first_distinct": [[467, "polars-expr-is-first-distinct"]], "polars.Expr.list.arg_min": [[487, "polars-expr-list-arg-min"]], "polars.Expr.gather_every": [[453, "polars-expr-gather-every"]], "polars.Expr.gather": [[452, "polars-expr-gather"]], "polars.Expr.list.arg_max": [[486, "polars-expr-list-arg-max"]], "polars.Expr.is_not_null": [[475, "polars-expr-is-not-null"]], "polars.Expr.is_unique": [[477, "polars-expr-is-unique"]], "polars.Expr.from_json": [[451, "polars-expr-from-json"]], "polars.Expr.kurtosis": [[479, "polars-expr-kurtosis"]], "polars.Expr.head": [[458, "polars-expr-head"]], "polars.Expr.inspect": [[461, "polars-expr-inspect"]], "polars.Expr.list.diff": [[492, "polars-expr-list-diff"]], "polars.Expr.is_between": [[463, "polars-expr-is-between"]], "polars.Expr.list.head": [[499, "polars-expr-list-head"]], "polars.Expr.gt": [[456, "polars-expr-gt"]], "polars.Expr.ge": [[454, "polars-expr-ge"]], "polars.Expr.is_not": [[473, "polars-expr-is-not"]], "polars.Expr.is_null": [[476, "polars-expr-is-null"]], "polars.Expr.floordiv": [[449, "polars-expr-floordiv"]], "polars.Expr.keep_name": [[478, "polars-expr-keep-name"]], "polars.Expr.limit": [[483, "polars-expr-limit"]], "polars.Expr.list.all": [[484, "polars-expr-list-all"]], "polars.Expr.interpolate": [[462, "polars-expr-interpolate"]], "polars.Expr.is_last_distinct": [[471, "polars-expr-is-last-distinct"]], "polars.Expr.get": [[455, "polars-expr-get"]], "polars.Expr.list.first": [[496, "polars-expr-list-first"]], "polars.Expr.list.gather": [[497, "polars-expr-list-gather"]], "polars.Expr.is_first": [[466, "polars-expr-is-first"]], "polars.Expr.list.lengths": [[503, "polars-expr-list-lengths"]], "polars.Expr.list.count_match": [[490, "polars-expr-list-count-match"]], "polars.Expr.last": [[480, "polars-expr-last"]], "polars.Expr.forward_fill": [[450, "polars-expr-forward-fill"]], "polars.Expr.is_duplicated": [[464, "polars-expr-is-duplicated"]], "polars.Expr.list.count_matches": [[491, "polars-expr-list-count-matches"]], "polars.Expr.list.eval": [[494, "polars-expr-list-eval"]], "polars.Expr.is_in": [[468, "polars-expr-is-in"]], "polars.Expr.floor": [[448, "polars-expr-floor"]], "polars.Expr.list.len": [[502, "polars-expr-list-len"]], "polars.Expr.list.explode": [[495, "polars-expr-list-explode"]], "polars.Expr.hist": [[459, "polars-expr-hist"]], "polars.Expr.len": [[482, "polars-expr-len"]], "polars.Expr.implode": [[460, "polars-expr-implode"]], "polars.Expr.is_finite": [[465, "polars-expr-is-finite"]], "polars.Expr.hash": [[457, "polars-expr-hash"]], "polars.Expr.list.join": [[500, "polars-expr-list-join"]], "polars.Expr.list.contains": [[489, "polars-expr-list-contains"]], "polars.Expr.list.get": [[498, "polars-expr-list-get"]], "polars.Expr.list.drop_nulls": [[493, "polars-expr-list-drop-nulls"]], "polars.Expr.list.concat": [[488, "polars-expr-list-concat"]], "polars.Expr.list.last": [[501, "polars-expr-list-last"]], "polars.Expr.is_not_nan": [[474, "polars-expr-is-not-nan"]], "polars.Expr.dt.weekday": [[430, "polars-expr-dt-weekday"]], "polars.Expr.dt.with_time_unit": [[431, "polars-expr-dt-with-time-unit"]], "polars.Expr.exclude": [[439, "polars-expr-exclude"]], "polars.Expr.dt.second": [[415, "polars-expr-dt-second"]], "polars.Expr.dt.truncate": [[428, "polars-expr-dt-truncate"]], "polars.Expr.dt.hour": [[394, "polars-expr-dt-hour"]], "polars.Expr.dt.week": [[429, "polars-expr-dt-week"]], "polars.Expr.dt.total_days": [[421, "polars-expr-dt-total-days"]], "polars.Expr.dt.strftime": [[417, "polars-expr-dt-strftime"]], "polars.Expr.flatten": [[447, "polars-expr-flatten"]], "polars.Expr.dt.nanosecond": [[408, "polars-expr-dt-nanosecond"]], "polars.Expr.ewm_std": [[437, "polars-expr-ewm-std"]], "polars.Expr.dt.millennium": [[400, "polars-expr-dt-millennium"]], "polars.Expr.dt.millisecond": [[401, "polars-expr-dt-millisecond"]], "polars.Expr.dt.to_string": [[420, "polars-expr-dt-to-string"]], "polars.Expr.dt.hours": [[395, "polars-expr-dt-hours"]], "polars.Expr.dt.quarter": [[412, "polars-expr-dt-quarter"]], "polars.Expr.dt.time": [[418, "polars-expr-dt-time"]], "polars.Expr.entropy": [[433, "polars-expr-entropy"]], "polars.Expr.dt.round": [[414, "polars-expr-dt-round"]], "polars.Expr.dt.minutes": [[404, "polars-expr-dt-minutes"]], "polars.Expr.ewm_mean": [[436, "polars-expr-ewm-mean"]], "polars.Expr.dt.nanoseconds": [[409, "polars-expr-dt-nanoseconds"]], "polars.Expr.dt.year": [[432, "polars-expr-dt-year"]], "polars.Expr.dt.epoch": [[393, "polars-expr-dt-epoch"]], "polars.Expr.dt.total_seconds": [[427, "polars-expr-dt-total-seconds"]], "polars.Expr.eq_missing": [[435, "polars-expr-eq-missing"]], "polars.Expr.fill_nan": [[443, "polars-expr-fill-nan"]], "polars.Expr.dt.month_end": [[406, "polars-expr-dt-month-end"]], "polars.Expr.dt.total_microseconds": [[423, "polars-expr-dt-total-microseconds"]], "polars.Expr.first": [[446, "polars-expr-first"]], "polars.Expr.dt.ordinal_day": [[411, "polars-expr-dt-ordinal-day"]], "polars.Expr.dt.offset_by": [[410, "polars-expr-dt-offset-by"]], "polars.Expr.dt.month_start": [[407, "polars-expr-dt-month-start"]], "polars.Expr.exp": [[440, "polars-expr-exp"]], "polars.Expr.filter": [[445, "polars-expr-filter"]], "polars.Expr.eq": [[434, "polars-expr-eq"]], "polars.Expr.extend_constant": [[442, "polars-expr-extend-constant"]], "polars.Expr.dt.month": [[405, "polars-expr-dt-month"]], "polars.Expr.dt.minute": [[403, "polars-expr-dt-minute"]], "polars.Expr.dt.total_hours": [[422, "polars-expr-dt-total-hours"]], "polars.Expr.dt.milliseconds": [[402, "polars-expr-dt-milliseconds"]], "polars.Expr.dt.replace_time_zone": [[413, "polars-expr-dt-replace-time-zone"]], "polars.Expr.dt.microsecond": [[398, "polars-expr-dt-microsecond"]], "polars.Expr.dt.microseconds": [[399, "polars-expr-dt-microseconds"]], "polars.Expr.dt.total_milliseconds": [[424, "polars-expr-dt-total-milliseconds"]], "polars.Expr.dt.timestamp": [[419, "polars-expr-dt-timestamp"]], "polars.Expr.dt.seconds": [[416, "polars-expr-dt-seconds"]], "polars.Expr.fill_null": [[444, "polars-expr-fill-null"]], "polars.Expr.dt.total_minutes": [[425, "polars-expr-dt-total-minutes"]], "polars.Expr.dt.iso_year": [[397, "polars-expr-dt-iso-year"]], "polars.Expr.ewm_var": [[438, "polars-expr-ewm-var"]], "polars.Expr.explode": [[441, "polars-expr-explode"]], "polars.Expr.dt.total_nanoseconds": [[426, "polars-expr-dt-total-nanoseconds"]], "polars.Expr.dt.dst_offset": [[392, "polars-expr-dt-dst-offset"]], "polars.Expr.dt.is_leap_year": [[396, "polars-expr-dt-is-leap-year"]], "polars.Expr.degrees": [[378, "polars-expr-degrees"]], "polars.Expr.dt.days": [[391, "polars-expr-dt-days"]], "polars.Expr.bin.decode": [[349, "polars-expr-bin-decode"]], "polars.Expr.arr.min": [[341, "polars-expr-arr-min"]], "polars.Expr.bin.encode": [[350, "polars-expr-bin-encode"]], "polars.Expr.cut": [[377, "polars-expr-cut"]], "polars.Expr.arr.to_list": [[345, "polars-expr-arr-to-list"]], "polars.Expr.arr.max": [[340, "polars-expr-arr-max"]], "polars.Expr.arr.reverse": [[342, "polars-expr-arr-reverse"]], "polars.Expr.cumprod": [[374, "polars-expr-cumprod"]], "polars.Expr.cumsum": [[375, "polars-expr-cumsum"]], "polars.Expr.cos": [[362, "polars-expr-cos"]], "polars.Expr.dt.combine": [[386, "polars-expr-dt-combine"]], "polars.Expr.cot": [[364, "polars-expr-cot"]], "polars.Expr.cosh": [[363, "polars-expr-cosh"]], "polars.Expr.backward_fill": [[347, "polars-expr-backward-fill"]], "polars.Expr.cum_prod": [[369, "polars-expr-cum-prod"]], "polars.Expr.cat.get_categories": [[355, "polars-expr-cat-get-categories"]], "polars.Expr.cum_sum": [[370, "polars-expr-cum-sum"]], "polars.Expr.clip": [[359, "polars-expr-clip"]], "polars.Expr.bottom_k": [[353, "polars-expr-bottom-k"]], "polars.Expr.drop_nulls": [[382, "polars-expr-drop-nulls"]], "polars.Expr.cummax": [[372, "polars-expr-cummax"]], "polars.Expr.dt.cast_time_unit": [[384, "polars-expr-dt-cast-time-unit"]], "polars.Expr.dt.day": [[390, "polars-expr-dt-day"]], "polars.Expr.arr.first": [[336, "polars-expr-arr-first"]], "polars.Expr.cummin": [[373, "polars-expr-cummin"]], "polars.Expr.cat.set_ordering": [[356, "polars-expr-cat-set-ordering"]], "polars.Expr.cum_min": [[368, "polars-expr-cum-min"]], "polars.Expr.dt.date": [[388, "polars-expr-dt-date"]], "polars.Expr.arr.sort": [[343, "polars-expr-arr-sort"]], "polars.Expr.cum_max": [[367, "polars-expr-cum-max"]], "polars.Expr.cumcount": [[371, "polars-expr-cumcount"]], "polars.Expr.dot": [[380, "polars-expr-dot"]], "polars.Expr.clip_max": [[360, "polars-expr-clip-max"]], "polars.Expr.bin.ends_with": [[351, "polars-expr-bin-ends-with"]], "polars.Expr.ceil": [[358, "polars-expr-ceil"]], "polars.Expr.bin.starts_with": [[352, "polars-expr-bin-starts-with"]], "polars.Expr.count": [[365, "polars-expr-count"]], "polars.Expr.dt.convert_time_zone": [[387, "polars-expr-dt-convert-time-zone"]], "polars.Expr.cumulative_eval": [[376, "polars-expr-cumulative-eval"]], "polars.Expr.arr.join": [[338, "polars-expr-arr-join"]], "polars.Expr.arr.sum": [[344, "polars-expr-arr-sum"]], "polars.Expr.diff": [[379, "polars-expr-diff"]], "polars.Expr.dt.century": [[385, "polars-expr-dt-century"]], "polars.Expr.arr.unique": [[346, "polars-expr-arr-unique"]], "polars.Expr.cast": [[354, "polars-expr-cast"]], "polars.Expr.cbrt": [[357, "polars-expr-cbrt"]], "polars.Expr.clip_min": [[361, "polars-expr-clip-min"]], "polars.Expr.cum_count": [[366, "polars-expr-cum-count"]], "polars.Expr.arr.get": [[337, "polars-expr-arr-get"]], "polars.Expr.dt.datetime": [[389, "polars-expr-dt-datetime"]], "polars.Expr.bin.contains": [[348, "polars-expr-bin-contains"]], "polars.Expr.arr.last": [[339, "polars-expr-arr-last"]], "polars.Expr.drop_nans": [[381, "polars-expr-drop-nans"]], "polars.Expr.dt.base_utc_offset": [[383, "polars-expr-dt-base-utc-offset"]], "polars.DataFrame.to_numpy": [[260, "polars-dataframe-to-numpy"]], "polars.DataFrame.unnest": [[267, "polars-dataframe-unnest"]], "polars.DataFrame.shape": [[244, "polars-dataframe-shape"]], "polars.DataFrame.to_dict": [[256, "polars-dataframe-to-dict"]], "polars.DataFrame.replace_at_idx": [[232, "polars-dataframe-replace-at-idx"]], "polars.DataFrame.unique": [[266, "polars-dataframe-unique"]], "polars.DataFrame.transpose": [[265, "polars-dataframe-transpose"]], "polars.DataFrame.width": [[273, "polars-dataframe-width"]], "polars.DataFrame.shrink_to_fit": [[247, "polars-dataframe-shrink-to-fit"]], "polars.DataFrame.to_pandas": [[261, "polars-dataframe-to-pandas"]], "polars.dataframe.group_by.GroupBy.agg": [[279, "polars-dataframe-group-by-groupby-agg"]], "polars.DataFrame.row": [[236, "polars-dataframe-row"]], "polars.DataFrame.slice": [[248, "polars-dataframe-slice"]], "polars.DataFrame.rows": [[237, "polars-dataframe-rows"]], "polars.DataFrame.update": [[269, "polars-dataframe-update"]], "polars.DataFrame.select": [[241, "polars-dataframe-select"]], "polars.DataFrame.quantile": [[228, "polars-dataframe-quantile"]], "polars.DataFrame.rechunk": [[229, "polars-dataframe-rechunk"]], "polars.DataFrame.with_row_index": [[277, "polars-dataframe-with-row-index"]], "polars.dataframe.group_by.GroupBy.__iter__": [[278, "polars-dataframe-group-by-groupby-iter"]], "polars.DataFrame.tail": [[253, "polars-dataframe-tail"]], "polars.DataFrame.upsample": [[270, "polars-dataframe-upsample"]], "polars.DataFrame.take_every": [[254, "polars-dataframe-take-every"]], "polars.DataFrame.to_dummies": [[258, "polars-dataframe-to-dummies"]], "polars.DataFrame.replace": [[231, "polars-dataframe-replace"]], "polars.DataFrame.partition_by": [[224, "polars-dataframe-partition-by"]], "polars.DataFrame.replace_column": [[233, "polars-dataframe-replace-column"]], "polars.DataFrame.to_struct": [[263, "polars-dataframe-to-struct"]], "polars.DataFrame.pivot": [[226, "polars-dataframe-pivot"]], "polars.DataFrame.rolling": [[235, "polars-dataframe-rolling"]], "polars.DataFrame.sum_horizontal": [[252, "polars-dataframe-sum-horizontal"]], "polars.DataFrame.set_sorted": [[243, "polars-dataframe-set-sorted"]], "polars.DataFrame.schema": [[240, "polars-dataframe-schema"]], "polars.DataFrame.sum": [[251, "polars-dataframe-sum"]], "polars.DataFrame.product": [[227, "polars-dataframe-product"]], "polars.DataFrame.with_row_count": [[276, "polars-dataframe-with-row-count"]], "polars.DataFrame.sample": [[239, "polars-dataframe-sample"]], "polars.DataFrame.reverse": [[234, "polars-dataframe-reverse"]], "polars.DataFrame.var": [[271, "polars-dataframe-var"]], "polars.DataFrame.to_init_repr": [[259, "polars-dataframe-to-init-repr"]], "polars.DataFrame.to_dicts": [[257, "polars-dataframe-to-dicts"]], "polars.DataFrame.unstack": [[268, "polars-dataframe-unstack"]], "polars.DataFrame.pipe": [[225, "polars-dataframe-pipe"]], "polars.DataFrame.vstack": [[272, "polars-dataframe-vstack"]], "polars.DataFrame.std": [[250, "polars-dataframe-std"]], "polars.DataFrame.with_columns_seq": [[275, "polars-dataframe-with-columns-seq"]], "polars.DataFrame.to_series": [[262, "polars-dataframe-to-series"]], "polars.DataFrame.with_columns": [[274, "polars-dataframe-with-columns"]], "polars.DataFrame.shift": [[245, "polars-dataframe-shift"]], "polars.DataFrame.rename": [[230, "polars-dataframe-rename"]], "polars.DataFrame.rows_by_key": [[238, "polars-dataframe-rows-by-key"]], "polars.DataFrame.sort": [[249, "polars-dataframe-sort"]], "polars.DataFrame.select_seq": [[242, "polars-dataframe-select-seq"]], "polars.DataFrame.top_k": [[264, "polars-dataframe-top-k"]], "polars.DataFrame.to_arrow": [[255, "polars-dataframe-to-arrow"]], "polars.DataFrame.shift_and_fill": [[246, "polars-dataframe-shift-and-fill"]], "polars.reduce": [[746, "polars-reduce"]], "polars.time_ranges": [[759, "polars-time-ranges"]], "polars.zeros": [[762, "polars-zeros"]], "Window": [[781, "window"]], "polars.mean": [[739, "polars-mean"]], "polars.tail": [[756, "polars-tail"]], "Columns / names": [[768, "columns-names"]], "polars.struct": [[753, "polars-struct"]], "polars.len": [[732, "polars-len"]], "polars.std": [[752, "polars-std"]], "polars.min": [[741, "polars-min"]], "polars.col": [[767, "polars-col"]], "polars.repeat": [[747, "polars-repeat"]], "polars.var": [[760, "polars-var"]], "Conversion": [[782, "conversion"]], "Parallelization": [[782, "parallelization"]], "Random": [[782, "random"]], "StringCache": [[782, "stringcache"]], "polars.sum": [[754, "polars-sum"]], "polars.map_batches": [[735, "polars-map-batches"]], "polars.n_unique": [[743, "polars-n-unique"]], "polars.when": [[761, "polars-when"]], "Operators": [[777, "operators"]], "Conjunction": [[777, "conjunction"]], "Comparison": [[777, "comparison"]], "Numeric": [[777, "numeric"], [305, "numeric"]], "polars.ones": [[744, "polars-ones"]], "Expressions": [[771, "expressions"]], "API reference": [[783, "api-reference"]], "polars.int_range": [[729, "polars-int-range"]], "polars.quantile": [[745, "polars-quantile"]], "polars.map": [[734, "polars-map"]], "polars.time_range": [[758, "polars-time-range"]], "polars.select": [[750, "polars-select"]], "polars.last": [[731, "polars-last"]], "polars.lit": [[733, "polars-lit"]], "polars.sum_horizontal": [[755, "polars-sum-horizontal"]], "polars.max": [[737, "polars-max"]], "Name": [[776, "name"]], "polars.sql_expr": [[751, "polars-sql-expr"]], "polars.int_ranges": [[730, "polars-int-ranges"]], "polars.map_groups": [[736, "polars-map-groups"]], "polars.max_horizontal": [[738, "polars-max-horizontal"]], "polars.rolling_corr": [[748, "polars-rolling-corr"]], "polars.median": [[740, "polars-median"]], "polars.implode": [[728, "polars-implode"]], "polars.min_horizontal": [[742, "polars-min-horizontal"]], "polars.time": [[757, "polars-time"]], "Meta": [[773, "meta"]], "polars.rolling_cov": [[749, "polars-rolling-cov"]], "polars.Expr.agg_groups": [[310, "polars-expr-agg-groups"]], "DataFrame": [[301, "dataframe"]], "polars.dataframe.group_by.GroupBy.max": [[288, "polars-dataframe-group-by-groupby-max"]], "polars.dataframe.group_by.GroupBy.quantile": [[293, "polars-dataframe-group-by-groupby-quantile"]], "polars.dataframe.group_by.GroupBy.min": [[291, "polars-dataframe-group-by-groupby-min"]], "polars.Expr.any": [[314, "polars-expr-any"]], "polars.Expr.arg_true": [[327, "polars-expr-arg-true"]], "polars.Expr.arctanh": [[323, "polars-expr-arctanh"]], "polars.Expr.arg_unique": [[328, "polars-expr-arg-unique"]], "polars.Expr.arr.count_matches": [[334, "polars-expr-arr-count-matches"]], "polars.dataframe.group_by.GroupBy.mean": [[289, "polars-dataframe-group-by-groupby-mean"]], "polars.Expr.arctan": [[322, "polars-expr-arctan"]], "Exceptions": [[306, "exceptions"]], "polars.Expr.arccos": [[318, "polars-expr-arccos"]], "polars.Expr.arcsinh": [[321, "polars-expr-arcsinh"]], "polars.Expr.add": [[309, "polars-expr-add"]], "polars.Expr.arr.contains": [[333, "polars-expr-arr-contains"]], "polars.Expr.arr.arg_min": [[332, "polars-expr-arr-arg-min"]], "polars.Expr.arr.arg_max": [[331, "polars-expr-arr-arg-max"]], "polars.dataframe.group_by.GroupBy.head": [[284, "polars-dataframe-group-by-groupby-head"]], "polars.dataframe.group_by.GroupBy.len": [[286, "polars-dataframe-group-by-groupby-len"]], "Data types": [[305, "data-types"]], "Nested": [[305, "nested"]], "Other": [[305, "other"]], "polars.Expr.arg_sort": [[326, "polars-expr-arg-sort"]], "polars.dataframe.group_by.GroupBy.tail": [[295, "polars-dataframe-group-by-groupby-tail"]], "polars.Expr.append": [[315, "polars-expr-append"]], "polars.dataframe.group_by.GroupBy.median": [[290, "polars-dataframe-group-by-groupby-median"]], "polars.Expr.alias": [[311, "polars-expr-alias"]], "polars.Expr.apply": [[316, "polars-expr-apply"]], "polars.Expr.arcsin": [[320, "polars-expr-arcsin"]], "polars.Expr.arr.all": [[329, "polars-expr-arr-all"]], "polars.Expr.abs": [[308, "polars-expr-abs"]], "polars.Expr.arr.any": [[330, "polars-expr-arr-any"]], "polars.Expr.approx_n_unique": [[317, "polars-expr-approx-n-unique"]], "polars.dataframe.group_by.GroupBy.sum": [[294, "polars-dataframe-group-by-groupby-sum"]], "polars.dataframe.group_by.GroupBy.apply": [[281, "polars-dataframe-group-by-groupby-apply"]], "polars.dataframe.group_by.GroupBy.map_groups": [[287, "polars-dataframe-group-by-groupby-map-groups"]], "polars.Expr.and_": [[313, "polars-expr-and"]], "polars.dataframe.group_by.GroupBy.last": [[285, "polars-dataframe-group-by-groupby-last"]], "polars.Expr.arr.explode": [[335, "polars-expr-arr-explode"]], "polars.dataframe.group_by.GroupBy.all": [[280, "polars-dataframe-group-by-groupby-all"]], "polars.Expr.all": [[312, "polars-expr-all"]], "polars.dataframe.group_by.GroupBy.first": [[283, "polars-dataframe-group-by-groupby-first"]], "polars.Expr.arccosh": [[319, "polars-expr-arccosh"]], "polars.Expr.arg_max": [[324, "polars-expr-arg-max"]], "polars.dataframe.group_by.GroupBy.n_unique": [[292, "polars-dataframe-group-by-groupby-n-unique"]], "polars.dataframe.group_by.GroupBy.count": [[282, "polars-dataframe-group-by-groupby-count"]], "polars.Expr.arg_min": [[325, "polars-expr-arg-min"]]}, "indexentries": {"array (class in polars)": [[2, "polars.Array"]], "__init__() (polars.array method)": [[2, "polars.Array.__init__"]], "binary (class in polars)": [[3, "polars.Binary"]], "__init__() (polars.binary method)": [[3, "polars.Binary.__init__"]], "boolean (class in polars)": [[4, "polars.Boolean"]], "__init__() (polars.boolean method)": [[4, "polars.Boolean.__init__"]], "categorical (class in polars)": [[5, "polars.Categorical"]], "__init__() (polars.categorical method)": [[5, "polars.Categorical.__init__"]], "activate_decimals() (polars.config class method)": [[6, "polars.Config.activate_decimals"]], "load() (polars.config class method)": [[7, "polars.Config.load"]], "load_from_file() (polars.config class method)": [[8, "polars.Config.load_from_file"]], "restore_defaults() (polars.config class method)": [[9, "polars.Config.restore_defaults"]], "save() (polars.config class method)": [[10, "polars.Config.save"]], "save_to_file() (polars.config class method)": [[11, "polars.Config.save_to_file"]], "set_ascii_tables() (polars.config class method)": [[12, "polars.Config.set_ascii_tables"]], "set_auto_structify() (polars.config class method)": [[13, "polars.Config.set_auto_structify"]], "set_decimal_separator() (polars.config class method)": [[14, "polars.Config.set_decimal_separator"]], "set_float_precision() (polars.config class method)": [[15, "polars.Config.set_float_precision"]], "set_fmt_float() (polars.config class method)": [[16, "polars.Config.set_fmt_float"]], "set_fmt_str_lengths() (polars.config class method)": [[17, "polars.Config.set_fmt_str_lengths"]], "set_fmt_table_cell_list_len() (polars.config class method)": [[18, "polars.Config.set_fmt_table_cell_list_len"]], "set_streaming_chunk_size() (polars.config class method)": [[19, "polars.Config.set_streaming_chunk_size"]], "set_tbl_cell_alignment() (polars.config class method)": [[20, "polars.Config.set_tbl_cell_alignment"]], "set_tbl_cell_numeric_alignment() (polars.config class method)": [[21, "polars.Config.set_tbl_cell_numeric_alignment"]], "set_tbl_cols() (polars.config class method)": [[22, "polars.Config.set_tbl_cols"]], "set_tbl_column_data_type_inline() (polars.config class method)": [[23, "polars.Config.set_tbl_column_data_type_inline"]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[24, "polars.Config.set_tbl_dataframe_shape_below"]], "set_tbl_formatting() (polars.config class method)": [[25, "polars.Config.set_tbl_formatting"]], "set_tbl_hide_column_data_types() (polars.config class method)": [[26, "polars.Config.set_tbl_hide_column_data_types"]], "set_tbl_hide_column_names() (polars.config class method)": [[27, "polars.Config.set_tbl_hide_column_names"]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[28, "polars.Config.set_tbl_hide_dataframe_shape"]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[29, "polars.Config.set_tbl_hide_dtype_separator"]], "set_tbl_rows() (polars.config class method)": [[30, "polars.Config.set_tbl_rows"]], "set_tbl_width_chars() (polars.config class method)": [[31, "polars.Config.set_tbl_width_chars"]], "set_thousands_separator() (polars.config class method)": [[32, "polars.Config.set_thousands_separator"]], "set_trim_decimal_zeros() (polars.config class method)": [[33, "polars.Config.set_trim_decimal_zeros"]], "set_verbose() (polars.config class method)": [[34, "polars.Config.set_verbose"]], "state() (polars.config class method)": [[35, "polars.Config.state"]], "write_avro() (polars.dataframe method)": [[36, "polars.DataFrame.write_avro"]], "write_csv() (polars.dataframe method)": [[37, "polars.DataFrame.write_csv"]], "write_database() (polars.dataframe method)": [[38, "polars.DataFrame.write_database"]], "write_delta() (polars.dataframe method)": [[39, "polars.DataFrame.write_delta"]], "write_excel() (polars.dataframe method)": [[40, "polars.DataFrame.write_excel"]], "write_ipc() (polars.dataframe method)": [[41, "polars.DataFrame.write_ipc"]], "write_ipc_stream() (polars.dataframe method)": [[42, "polars.DataFrame.write_ipc_stream"]], "write_json() (polars.dataframe method)": [[43, "polars.DataFrame.write_json"]], "write_ndjson() (polars.dataframe method)": [[44, "polars.DataFrame.write_ndjson"]], "write_parquet() (polars.dataframe method)": [[45, "polars.DataFrame.write_parquet"]], "datatype (class in polars)": [[46, "polars.DataType"]], "__init__() (polars.datatype method)": [[46, "polars.DataType.__init__"]], "date (class in polars)": [[47, "polars.Date"]], "__init__() (polars.date method)": [[47, "polars.Date.__init__"]], "datetime (class in polars)": [[48, "polars.Datetime"]], "__init__() (polars.datetime method)": [[48, "polars.Datetime.__init__"]], "decimal (class in polars)": [[49, "polars.Decimal"]], "__init__() (polars.decimal method)": [[49, "polars.Decimal.__init__"]], "duration (class in polars)": [[50, "polars.Duration"]], "__init__() (polars.duration method)": [[50, "polars.Duration.__init__"]], "enum (class in polars)": [[51, "polars.Enum"]], "__init__() (polars.enum method)": [[51, "polars.Enum.__init__"]], "float32 (class in polars)": [[52, "polars.Float32"]], "__init__() (polars.float32 method)": [[52, "polars.Float32.__init__"]], "float64 (class in polars)": [[53, "polars.Float64"]], "__init__() (polars.float64 method)": [[53, "polars.Float64.__init__"]], "int16 (class in polars)": [[54, "polars.Int16"]], "__init__() (polars.int16 method)": [[54, "polars.Int16.__init__"]], "int32 (class in polars)": [[55, "polars.Int32"]], "__init__() (polars.int32 method)": [[55, "polars.Int32.__init__"]], "int64 (class in polars)": [[56, "polars.Int64"]], "__init__() (polars.int64 method)": [[56, "polars.Int64.__init__"]], "int8 (class in polars)": [[57, "polars.Int8"]], "__init__() (polars.int8 method)": [[57, "polars.Int8.__init__"]], "sink_csv() (polars.lazyframe method)": [[58, "polars.LazyFrame.sink_csv"]], "sink_ipc() (polars.lazyframe method)": [[59, "polars.LazyFrame.sink_ipc"]], "sink_ndjson() (polars.lazyframe method)": [[60, "polars.LazyFrame.sink_ndjson"]], "sink_parquet() (polars.lazyframe method)": [[61, "polars.LazyFrame.sink_parquet"]], "list (class in polars)": [[62, "polars.List"]], "__init__() (polars.list method)": [[62, "polars.List.__init__"]], "null (class in polars)": [[63, "polars.Null"]], "__init__() (polars.null method)": [[63, "polars.Null.__init__"]], "object (class in polars)": [[64, "polars.Object"]], "__init__() (polars.object method)": [[64, "polars.Object.__init__"]], "execute() (polars.sqlcontext method)": [[65, "polars.SQLContext.execute"]], "register() (polars.sqlcontext method)": [[66, "polars.SQLContext.register"]], "register_globals() (polars.sqlcontext method)": [[67, "polars.SQLContext.register_globals"]], "register_many() (polars.sqlcontext method)": [[68, "polars.SQLContext.register_many"]], "tables() (polars.sqlcontext method)": [[69, "polars.SQLContext.tables"]], "unregister() (polars.sqlcontext method)": [[70, "polars.SQLContext.unregister"]], "string (class in polars)": [[71, "polars.String"]], "__init__() (polars.string method)": [[71, "polars.String.__init__"]], "stringcache (class in polars)": [[72, "polars.StringCache"]], "__init__() (polars.stringcache method)": [[72, "polars.StringCache.__init__"]], "struct (class in polars)": [[73, "polars.Struct"]], "__init__() (polars.struct method)": [[73, "polars.Struct.__init__"]], "time (class in polars)": [[74, "polars.Time"]], "__init__() (polars.time method)": [[74, "polars.Time.__init__"]], "uint16 (class in polars)": [[75, "polars.UInt16"]], "__init__() (polars.uint16 method)": [[75, "polars.UInt16.__init__"]], "uint32 (class in polars)": [[76, "polars.UInt32"]], "__init__() (polars.uint32 method)": [[76, "polars.UInt32.__init__"]], "uint64 (class in polars)": [[77, "polars.UInt64"]], "__init__() (polars.uint64 method)": [[77, "polars.UInt64.__init__"]], "uint8 (class in polars)": [[78, "polars.UInt8"]], "__init__() (polars.uint8 method)": [[78, "polars.UInt8.__init__"]], "unknown (class in polars)": [[79, "polars.Unknown"]], "__init__() (polars.unknown method)": [[79, "polars.Unknown.__init__"]], "utf8 (in module polars)": [[80, "polars.Utf8"]], "align_frames() (in module polars)": [[81, "polars.align_frames"]], "register_dataframe_namespace() (in module polars.api)": [[82, "polars.api.register_dataframe_namespace"]], "register_expr_namespace() (in module polars.api)": [[83, "polars.api.register_expr_namespace"]], "register_lazyframe_namespace() (in module polars.api)": [[84, "polars.api.register_lazyframe_namespace"]], "register_series_namespace() (in module polars.api)": [[85, "polars.api.register_series_namespace"]], "build_info() (in module polars)": [[86, "polars.build_info"]], "collect_all() (in module polars)": [[87, "polars.collect_all"]], "collect_all_async() (in module polars)": [[88, "polars.collect_all_async"]], "concat() (in module polars)": [[89, "polars.concat"]], "disable_string_cache() (in module polars)": [[90, "polars.disable_string_cache"]], "enable_string_cache() (in module polars)": [[91, "polars.enable_string_cache"]], "arrowerror": [[92, "polars.exceptions.ArrowError"]], "columnnotfounderror": [[93, "polars.exceptions.ColumnNotFoundError"]], "computeerror": [[94, "polars.exceptions.ComputeError"]], "duplicateerror": [[95, "polars.exceptions.DuplicateError"]], "invalidoperationerror": [[96, "polars.exceptions.InvalidOperationError"]], "nodataerror": [[97, "polars.exceptions.NoDataError"]], "norowsreturnederror": [[98, "polars.exceptions.NoRowsReturnedError"]], "polarserror": [[99, "polars.exceptions.PolarsError"]], "polarspanicerror": [[100, "polars.exceptions.PolarsPanicError"]], "rowserror": [[101, "polars.exceptions.RowsError"]], "schemaerror": [[102, "polars.exceptions.SchemaError"]], "schemafieldnotfounderror": [[103, "polars.exceptions.SchemaFieldNotFoundError"]], "shapeerror": [[104, "polars.exceptions.ShapeError"]], "structfieldnotfounderror": [[105, "polars.exceptions.StructFieldNotFoundError"]], "toomanyrowsreturnederror": [[106, "polars.exceptions.TooManyRowsReturnedError"]], "from_arrow() (in module polars)": [[107, "polars.from_arrow"]], "from_dataframe() (in module polars)": [[108, "polars.from_dataframe"]], "from_dict() (in module polars)": [[109, "polars.from_dict"]], "from_dicts() (in module polars)": [[110, "polars.from_dicts"]], "from_numpy() (in module polars)": [[111, "polars.from_numpy"]], "from_pandas() (in module polars)": [[112, "polars.from_pandas"]], "from_records() (in module polars)": [[113, "polars.from_records"]], "from_repr() (in module polars)": [[114, "polars.from_repr"]], "get_index_type() (in module polars)": [[115, "polars.get_index_type"]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[116, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches"]], "read_avro() (in module polars)": [[117, "polars.read_avro"]], "read_csv() (in module polars)": [[118, "polars.read_csv"]], "read_csv_batched() (in module polars)": [[119, "polars.read_csv_batched"]], "read_database() (in module polars)": [[120, "polars.read_database"]], "read_database_uri() (in module polars)": [[121, "polars.read_database_uri"]], "read_delta() (in module polars)": [[122, "polars.read_delta"]], "read_excel() (in module polars)": [[123, "polars.read_excel"]], "read_ipc() (in module polars)": [[124, "polars.read_ipc"]], "read_ipc_schema() (in module polars)": [[125, "polars.read_ipc_schema"]], "read_ipc_stream() (in module polars)": [[126, "polars.read_ipc_stream"]], "read_json() (in module polars)": [[127, "polars.read_json"]], "read_ndjson() (in module polars)": [[128, "polars.read_ndjson"]], "read_ods() (in module polars)": [[129, "polars.read_ods"]], "read_parquet() (in module polars)": [[130, "polars.read_parquet"]], "read_parquet_schema() (in module polars)": [[131, "polars.read_parquet_schema"]], "scan_csv() (in module polars)": [[132, "polars.scan_csv"]], "scan_delta() (in module polars)": [[133, "polars.scan_delta"]], "scan_iceberg() (in module polars)": [[134, "polars.scan_iceberg"]], "scan_ipc() (in module polars)": [[135, "polars.scan_ipc"]], "scan_ndjson() (in module polars)": [[136, "polars.scan_ndjson"]], "scan_parquet() (in module polars)": [[137, "polars.scan_parquet"]], "scan_pyarrow_dataset() (in module polars)": [[138, "polars.scan_pyarrow_dataset"]], "set_random_seed() (in module polars)": [[139, "polars.set_random_seed"]], "show_versions() (in module polars)": [[140, "polars.show_versions"]], "assert_frame_equal() (in module polars.testing)": [[141, "polars.testing.assert_frame_equal"]], "assert_frame_not_equal() (in module polars.testing)": [[142, "polars.testing.assert_frame_not_equal"]], "assert_series_equal() (in module polars.testing)": [[143, "polars.testing.assert_series_equal"]], "assert_series_not_equal() (in module polars.testing)": [[144, "polars.testing.assert_series_not_equal"]], "__init__() (polars.testing.parametric.column method)": [[145, "polars.testing.parametric.column.__init__"]], "column (class in polars.testing.parametric)": [[145, "polars.testing.parametric.column"]], "columns() (in module polars.testing.parametric)": [[146, "polars.testing.parametric.columns"]], "create_list_strategy() (in module polars.testing.parametric)": [[147, "polars.testing.parametric.create_list_strategy"]], "dataframes() (in module polars.testing.parametric)": [[148, "polars.testing.parametric.dataframes"]], "load_profile() (in module polars.testing.parametric)": [[149, "polars.testing.parametric.load_profile"]], "series() (in module polars.testing.parametric)": [[150, "polars.testing.parametric.series"]], "set_profile() (in module polars.testing.parametric)": [[151, "polars.testing.parametric.set_profile"]], "threadpool_size() (in module polars)": [[152, "polars.threadpool_size"]], "using_string_cache() (in module polars)": [[153, "polars.using_string_cache"]], "__dataframe__() (polars.dataframe method)": [[156, "polars.DataFrame.__dataframe__"]], "apply() (polars.dataframe method)": [[157, "polars.DataFrame.apply"]], "approx_n_unique() (polars.dataframe method)": [[158, "polars.DataFrame.approx_n_unique"]], "bottom_k() (polars.dataframe method)": [[159, "polars.DataFrame.bottom_k"]], "cast() (polars.dataframe method)": [[160, "polars.DataFrame.cast"]], "clear() (polars.dataframe method)": [[161, "polars.DataFrame.clear"]], "clone() (polars.dataframe method)": [[162, "polars.DataFrame.clone"]], "columns (polars.dataframe property)": [[163, "polars.DataFrame.columns"]], "corr() (polars.dataframe method)": [[164, "polars.DataFrame.corr"]], "count() (polars.dataframe method)": [[165, "polars.DataFrame.count"]], "describe() (polars.dataframe method)": [[166, "polars.DataFrame.describe"]], "drop() (polars.dataframe method)": [[167, "polars.DataFrame.drop"]], "drop_in_place() (polars.dataframe method)": [[168, "polars.DataFrame.drop_in_place"]], "drop_nulls() (polars.dataframe method)": [[169, "polars.DataFrame.drop_nulls"]], "dtypes (polars.dataframe property)": [[170, "polars.DataFrame.dtypes"]], "equals() (polars.dataframe method)": [[171, "polars.DataFrame.equals"]], "estimated_size() (polars.dataframe method)": [[172, "polars.DataFrame.estimated_size"]], "explode() (polars.dataframe method)": [[173, "polars.DataFrame.explode"]], "extend() (polars.dataframe method)": [[174, "polars.DataFrame.extend"]], "fill_nan() (polars.dataframe method)": [[175, "polars.DataFrame.fill_nan"]], "fill_null() (polars.dataframe method)": [[176, "polars.DataFrame.fill_null"]], "filter() (polars.dataframe method)": [[177, "polars.DataFrame.filter"]], "find_idx_by_name() (polars.dataframe method)": [[178, "polars.DataFrame.find_idx_by_name"]], "flags (polars.dataframe property)": [[179, "polars.DataFrame.flags"]], "fold() (polars.dataframe method)": [[180, "polars.DataFrame.fold"]], "frame_equal() (polars.dataframe method)": [[181, "polars.DataFrame.frame_equal"]], "gather_every() (polars.dataframe method)": [[182, "polars.DataFrame.gather_every"]], "get_column() (polars.dataframe method)": [[183, "polars.DataFrame.get_column"]], "get_column_index() (polars.dataframe method)": [[184, "polars.DataFrame.get_column_index"]], "get_columns() (polars.dataframe method)": [[185, "polars.DataFrame.get_columns"]], "glimpse() (polars.dataframe method)": [[186, "polars.DataFrame.glimpse"]], "group_by() (polars.dataframe method)": [[187, "polars.DataFrame.group_by"]], "group_by_dynamic() (polars.dataframe method)": [[188, "polars.DataFrame.group_by_dynamic"]], "group_by_rolling() (polars.dataframe method)": [[189, "polars.DataFrame.group_by_rolling"]], "groupby() (polars.dataframe method)": [[190, "polars.DataFrame.groupby"]], "groupby_dynamic() (polars.dataframe method)": [[191, "polars.DataFrame.groupby_dynamic"]], "groupby_rolling() (polars.dataframe method)": [[192, "polars.DataFrame.groupby_rolling"]], "hash_rows() (polars.dataframe method)": [[193, "polars.DataFrame.hash_rows"]], "head() (polars.dataframe method)": [[194, "polars.DataFrame.head"]], "height (polars.dataframe property)": [[195, "polars.DataFrame.height"]], "hstack() (polars.dataframe method)": [[196, "polars.DataFrame.hstack"]], "insert_at_idx() (polars.dataframe method)": [[197, "polars.DataFrame.insert_at_idx"]], "insert_column() (polars.dataframe method)": [[198, "polars.DataFrame.insert_column"]], "interpolate() (polars.dataframe method)": [[199, "polars.DataFrame.interpolate"]], "is_duplicated() (polars.dataframe method)": [[200, "polars.DataFrame.is_duplicated"]], "is_empty() (polars.dataframe method)": [[201, "polars.DataFrame.is_empty"]], "is_unique() (polars.dataframe method)": [[202, "polars.DataFrame.is_unique"]], "item() (polars.dataframe method)": [[203, "polars.DataFrame.item"]], "iter_columns() (polars.dataframe method)": [[204, "polars.DataFrame.iter_columns"]], "iter_rows() (polars.dataframe method)": [[205, "polars.DataFrame.iter_rows"]], "iter_slices() (polars.dataframe method)": [[206, "polars.DataFrame.iter_slices"]], "join() (polars.dataframe method)": [[207, "polars.DataFrame.join"]], "join_asof() (polars.dataframe method)": [[208, "polars.DataFrame.join_asof"]], "lazy() (polars.dataframe method)": [[209, "polars.DataFrame.lazy"]], "limit() (polars.dataframe method)": [[210, "polars.DataFrame.limit"]], "map_rows() (polars.dataframe method)": [[211, "polars.DataFrame.map_rows"]], "max() (polars.dataframe method)": [[212, "polars.DataFrame.max"]], "max_horizontal() (polars.dataframe method)": [[213, "polars.DataFrame.max_horizontal"]], "mean() (polars.dataframe method)": [[214, "polars.DataFrame.mean"]], "mean_horizontal() (polars.dataframe method)": [[215, "polars.DataFrame.mean_horizontal"]], "median() (polars.dataframe method)": [[216, "polars.DataFrame.median"]], "melt() (polars.dataframe method)": [[217, "polars.DataFrame.melt"]], "merge_sorted() (polars.dataframe method)": [[218, "polars.DataFrame.merge_sorted"]], "min() (polars.dataframe method)": [[219, "polars.DataFrame.min"]], "min_horizontal() (polars.dataframe method)": [[220, "polars.DataFrame.min_horizontal"]], "n_chunks() (polars.dataframe method)": [[221, "polars.DataFrame.n_chunks"]], "n_unique() (polars.dataframe method)": [[222, "polars.DataFrame.n_unique"]], "null_count() (polars.dataframe method)": [[223, "polars.DataFrame.null_count"]], "partition_by() (polars.dataframe method)": [[224, "polars.DataFrame.partition_by"]], "pipe() (polars.dataframe method)": [[225, "polars.DataFrame.pipe"]], "pivot() (polars.dataframe method)": [[226, "polars.DataFrame.pivot"]], "product() (polars.dataframe method)": [[227, "polars.DataFrame.product"]], "quantile() (polars.dataframe method)": [[228, "polars.DataFrame.quantile"]], "rechunk() (polars.dataframe method)": [[229, "polars.DataFrame.rechunk"]], "rename() (polars.dataframe method)": [[230, "polars.DataFrame.rename"]], "replace() (polars.dataframe method)": [[231, "polars.DataFrame.replace"]], "replace_at_idx() (polars.dataframe method)": [[232, "polars.DataFrame.replace_at_idx"]], "replace_column() (polars.dataframe method)": [[233, "polars.DataFrame.replace_column"]], "reverse() (polars.dataframe method)": [[234, "polars.DataFrame.reverse"]], "rolling() (polars.dataframe method)": [[235, "polars.DataFrame.rolling"]], "row() (polars.dataframe method)": [[236, "polars.DataFrame.row"]], "rows() (polars.dataframe method)": [[237, "polars.DataFrame.rows"]], "rows_by_key() (polars.dataframe method)": [[238, "polars.DataFrame.rows_by_key"]], "sample() (polars.dataframe method)": [[239, "polars.DataFrame.sample"]], "schema (polars.dataframe property)": [[240, "polars.DataFrame.schema"]], "select() (polars.dataframe method)": [[241, "polars.DataFrame.select"]], "select_seq() (polars.dataframe method)": [[242, "polars.DataFrame.select_seq"]], "set_sorted() (polars.dataframe method)": [[243, "polars.DataFrame.set_sorted"]], "shape (polars.dataframe property)": [[244, "polars.DataFrame.shape"]], "shift() (polars.dataframe method)": [[245, "polars.DataFrame.shift"]], "shift_and_fill() (polars.dataframe method)": [[246, "polars.DataFrame.shift_and_fill"]], "shrink_to_fit() (polars.dataframe method)": [[247, "polars.DataFrame.shrink_to_fit"]], "slice() (polars.dataframe method)": [[248, "polars.DataFrame.slice"]], "sort() (polars.dataframe method)": [[249, "polars.DataFrame.sort"]], "std() (polars.dataframe method)": [[250, "polars.DataFrame.std"]], "sum() (polars.dataframe method)": [[251, "polars.DataFrame.sum"]], "sum_horizontal() (polars.dataframe method)": [[252, "polars.DataFrame.sum_horizontal"]], "tail() (polars.dataframe method)": [[253, "polars.DataFrame.tail"]], "take_every() (polars.dataframe method)": [[254, "polars.DataFrame.take_every"]], "to_arrow() (polars.dataframe method)": [[255, "polars.DataFrame.to_arrow"]], "to_dict() (polars.dataframe method)": [[256, "polars.DataFrame.to_dict"]], "to_dicts() (polars.dataframe method)": [[257, "polars.DataFrame.to_dicts"]], "to_dummies() (polars.dataframe method)": [[258, "polars.DataFrame.to_dummies"]], "to_init_repr() (polars.dataframe method)": [[259, "polars.DataFrame.to_init_repr"]], "to_numpy() (polars.dataframe method)": [[260, "polars.DataFrame.to_numpy"]], "to_pandas() (polars.dataframe method)": [[261, "polars.DataFrame.to_pandas"]], "to_series() (polars.dataframe method)": [[262, "polars.DataFrame.to_series"]], "to_struct() (polars.dataframe method)": [[263, "polars.DataFrame.to_struct"]], "top_k() (polars.dataframe method)": [[264, "polars.DataFrame.top_k"]], "transpose() (polars.dataframe method)": [[265, "polars.DataFrame.transpose"]], "unique() (polars.dataframe method)": [[266, "polars.DataFrame.unique"]], "unnest() (polars.dataframe method)": [[267, "polars.DataFrame.unnest"]], "unstack() (polars.dataframe method)": [[268, "polars.DataFrame.unstack"]], "update() (polars.dataframe method)": [[269, "polars.DataFrame.update"]], "upsample() (polars.dataframe method)": [[270, "polars.DataFrame.upsample"]], "var() (polars.dataframe method)": [[271, "polars.DataFrame.var"]], "vstack() (polars.dataframe method)": [[272, "polars.DataFrame.vstack"]], "width (polars.dataframe property)": [[273, "polars.DataFrame.width"]], "with_columns() (polars.dataframe method)": [[274, "polars.DataFrame.with_columns"]], "with_columns_seq() (polars.dataframe method)": [[275, "polars.DataFrame.with_columns_seq"]], "with_row_count() (polars.dataframe method)": [[276, "polars.DataFrame.with_row_count"]], "with_row_index() (polars.dataframe method)": [[277, "polars.DataFrame.with_row_index"]], "__iter__() (polars.dataframe.group_by.groupby method)": [[278, "polars.dataframe.group_by.GroupBy.__iter__"]], "agg() (polars.dataframe.group_by.groupby method)": [[279, "polars.dataframe.group_by.GroupBy.agg"]], "all() (polars.dataframe.group_by.groupby method)": [[280, "polars.dataframe.group_by.GroupBy.all"]], "apply() (polars.dataframe.group_by.groupby method)": [[281, "polars.dataframe.group_by.GroupBy.apply"]], "count() (polars.dataframe.group_by.groupby method)": [[282, "polars.dataframe.group_by.GroupBy.count"]], "first() (polars.dataframe.group_by.groupby method)": [[283, "polars.dataframe.group_by.GroupBy.first"]], "head() (polars.dataframe.group_by.groupby method)": [[284, "polars.dataframe.group_by.GroupBy.head"]], "last() (polars.dataframe.group_by.groupby method)": [[285, "polars.dataframe.group_by.GroupBy.last"]], "len() (polars.dataframe.group_by.groupby method)": [[286, "polars.dataframe.group_by.GroupBy.len"]], "map_groups() (polars.dataframe.group_by.groupby method)": [[287, "polars.dataframe.group_by.GroupBy.map_groups"]], "max() (polars.dataframe.group_by.groupby method)": [[288, "polars.dataframe.group_by.GroupBy.max"]], "mean() (polars.dataframe.group_by.groupby method)": [[289, "polars.dataframe.group_by.GroupBy.mean"]], "median() (polars.dataframe.group_by.groupby method)": [[290, "polars.dataframe.group_by.GroupBy.median"]], "min() (polars.dataframe.group_by.groupby method)": [[291, "polars.dataframe.group_by.GroupBy.min"]], "n_unique() (polars.dataframe.group_by.groupby method)": [[292, "polars.dataframe.group_by.GroupBy.n_unique"]], "quantile() (polars.dataframe.group_by.groupby method)": [[293, "polars.dataframe.group_by.GroupBy.quantile"]], "sum() (polars.dataframe.group_by.groupby method)": [[294, "polars.dataframe.group_by.GroupBy.sum"]], "tail() (polars.dataframe.group_by.groupby method)": [[295, "polars.dataframe.group_by.GroupBy.tail"]], "abs() (polars.expr method)": [[308, "polars.Expr.abs"]], "add() (polars.expr method)": [[309, "polars.Expr.add"]], "agg_groups() (polars.expr method)": [[310, "polars.Expr.agg_groups"]], "alias() (polars.expr method)": [[311, "polars.Expr.alias"]], "all() (polars.expr method)": [[312, "polars.Expr.all"]], "and_() (polars.expr method)": [[313, "polars.Expr.and_"]], "any() (polars.expr method)": [[314, "polars.Expr.any"]], "append() (polars.expr method)": [[315, "polars.Expr.append"]], "apply() (polars.expr method)": [[316, "polars.Expr.apply"]], "approx_n_unique() (polars.expr method)": [[317, "polars.Expr.approx_n_unique"]], "arccos() (polars.expr method)": [[318, "polars.Expr.arccos"]], "arccosh() (polars.expr method)": [[319, "polars.Expr.arccosh"]], "arcsin() (polars.expr method)": [[320, "polars.Expr.arcsin"]], "arcsinh() (polars.expr method)": [[321, "polars.Expr.arcsinh"]], "arctan() (polars.expr method)": [[322, "polars.Expr.arctan"]], "arctanh() (polars.expr method)": [[323, "polars.Expr.arctanh"]], "arg_max() (polars.expr method)": [[324, "polars.Expr.arg_max"]], "arg_min() (polars.expr method)": [[325, "polars.Expr.arg_min"]], "arg_sort() (polars.expr method)": [[326, "polars.Expr.arg_sort"]], "arg_true() (polars.expr method)": [[327, "polars.Expr.arg_true"]], "arg_unique() (polars.expr method)": [[328, "polars.Expr.arg_unique"]], "all() (polars.expr.arr method)": [[329, "polars.Expr.arr.all"]], "any() (polars.expr.arr method)": [[330, "polars.Expr.arr.any"]], "arg_max() (polars.expr.arr method)": [[331, "polars.Expr.arr.arg_max"]], "arg_min() (polars.expr.arr method)": [[332, "polars.Expr.arr.arg_min"]], "contains() (polars.expr.arr method)": [[333, "polars.Expr.arr.contains"]], "count_matches() (polars.expr.arr method)": [[334, "polars.Expr.arr.count_matches"]], "explode() (polars.expr.arr method)": [[335, "polars.Expr.arr.explode"]], "first() (polars.expr.arr method)": [[336, "polars.Expr.arr.first"]], "get() (polars.expr.arr method)": [[337, "polars.Expr.arr.get"]], "join() (polars.expr.arr method)": [[338, "polars.Expr.arr.join"]], "last() (polars.expr.arr method)": [[339, "polars.Expr.arr.last"]], "max() (polars.expr.arr method)": [[340, "polars.Expr.arr.max"]], "min() (polars.expr.arr method)": [[341, "polars.Expr.arr.min"]], "reverse() (polars.expr.arr method)": [[342, "polars.Expr.arr.reverse"]], "sort() (polars.expr.arr method)": [[343, "polars.Expr.arr.sort"]], "sum() (polars.expr.arr method)": [[344, "polars.Expr.arr.sum"]], "to_list() (polars.expr.arr method)": [[345, "polars.Expr.arr.to_list"]], "unique() (polars.expr.arr method)": [[346, "polars.Expr.arr.unique"]], "backward_fill() (polars.expr method)": [[347, "polars.Expr.backward_fill"]], "contains() (polars.expr.bin method)": [[348, "polars.Expr.bin.contains"]], "decode() (polars.expr.bin method)": [[349, "polars.Expr.bin.decode"]], "encode() (polars.expr.bin method)": [[350, "polars.Expr.bin.encode"]], "ends_with() (polars.expr.bin method)": [[351, "polars.Expr.bin.ends_with"]], "starts_with() (polars.expr.bin method)": [[352, "polars.Expr.bin.starts_with"]], "bottom_k() (polars.expr method)": [[353, "polars.Expr.bottom_k"]], "cast() (polars.expr method)": [[354, "polars.Expr.cast"]], "get_categories() (polars.expr.cat method)": [[355, "polars.Expr.cat.get_categories"]], "set_ordering() (polars.expr.cat method)": [[356, "polars.Expr.cat.set_ordering"]], "cbrt() (polars.expr method)": [[357, "polars.Expr.cbrt"]], "ceil() (polars.expr method)": [[358, "polars.Expr.ceil"]], "clip() (polars.expr method)": [[359, "polars.Expr.clip"]], "clip_max() (polars.expr method)": [[360, "polars.Expr.clip_max"]], "clip_min() (polars.expr method)": [[361, "polars.Expr.clip_min"]], "cos() (polars.expr method)": [[362, "polars.Expr.cos"]], "cosh() (polars.expr method)": [[363, "polars.Expr.cosh"]], "cot() (polars.expr method)": [[364, "polars.Expr.cot"]], "count() (polars.expr method)": [[365, "polars.Expr.count"]], "cum_count() (polars.expr method)": [[366, "polars.Expr.cum_count"]], "cum_max() (polars.expr method)": [[367, "polars.Expr.cum_max"]], "cum_min() (polars.expr method)": [[368, "polars.Expr.cum_min"]], "cum_prod() (polars.expr method)": [[369, "polars.Expr.cum_prod"]], "cum_sum() (polars.expr method)": [[370, "polars.Expr.cum_sum"]], "cumcount() (polars.expr method)": [[371, "polars.Expr.cumcount"]], "cummax() (polars.expr method)": [[372, "polars.Expr.cummax"]], "cummin() (polars.expr method)": [[373, "polars.Expr.cummin"]], "cumprod() (polars.expr method)": [[374, "polars.Expr.cumprod"]], "cumsum() (polars.expr method)": [[375, "polars.Expr.cumsum"]], "cumulative_eval() (polars.expr method)": [[376, "polars.Expr.cumulative_eval"]], "cut() (polars.expr method)": [[377, "polars.Expr.cut"]], "degrees() (polars.expr method)": [[378, "polars.Expr.degrees"]], "diff() (polars.expr method)": [[379, "polars.Expr.diff"]], "dot() (polars.expr method)": [[380, "polars.Expr.dot"]], "drop_nans() (polars.expr method)": [[381, "polars.Expr.drop_nans"]], "drop_nulls() (polars.expr method)": [[382, "polars.Expr.drop_nulls"]], "base_utc_offset() (polars.expr.dt method)": [[383, "polars.Expr.dt.base_utc_offset"]], "cast_time_unit() (polars.expr.dt method)": [[384, "polars.Expr.dt.cast_time_unit"]], "century() (polars.expr.dt method)": [[385, "polars.Expr.dt.century"]], "combine() (polars.expr.dt method)": [[386, "polars.Expr.dt.combine"]], "convert_time_zone() (polars.expr.dt method)": [[387, "polars.Expr.dt.convert_time_zone"]], "date() (polars.expr.dt method)": [[388, "polars.Expr.dt.date"]], "datetime() (polars.expr.dt method)": [[389, "polars.Expr.dt.datetime"]], "day() (polars.expr.dt method)": [[390, "polars.Expr.dt.day"]], "days() (polars.expr.dt method)": [[391, "polars.Expr.dt.days"]], "dst_offset() (polars.expr.dt method)": [[392, "polars.Expr.dt.dst_offset"]], "epoch() (polars.expr.dt method)": [[393, "polars.Expr.dt.epoch"]], "hour() (polars.expr.dt method)": [[394, "polars.Expr.dt.hour"]], "hours() (polars.expr.dt method)": [[395, "polars.Expr.dt.hours"]], "is_leap_year() (polars.expr.dt method)": [[396, "polars.Expr.dt.is_leap_year"]], "iso_year() (polars.expr.dt method)": [[397, "polars.Expr.dt.iso_year"]], "microsecond() (polars.expr.dt method)": [[398, "polars.Expr.dt.microsecond"]], "microseconds() (polars.expr.dt method)": [[399, "polars.Expr.dt.microseconds"]], "millennium() (polars.expr.dt method)": [[400, "polars.Expr.dt.millennium"]], "millisecond() (polars.expr.dt method)": [[401, "polars.Expr.dt.millisecond"]], "milliseconds() (polars.expr.dt method)": [[402, "polars.Expr.dt.milliseconds"]], "minute() (polars.expr.dt method)": [[403, "polars.Expr.dt.minute"]], "minutes() (polars.expr.dt method)": [[404, "polars.Expr.dt.minutes"]], "month() (polars.expr.dt method)": [[405, "polars.Expr.dt.month"]], "month_end() (polars.expr.dt method)": [[406, "polars.Expr.dt.month_end"]], "month_start() (polars.expr.dt method)": [[407, "polars.Expr.dt.month_start"]], "nanosecond() (polars.expr.dt method)": [[408, "polars.Expr.dt.nanosecond"]], "nanoseconds() (polars.expr.dt method)": [[409, "polars.Expr.dt.nanoseconds"]], "offset_by() (polars.expr.dt method)": [[410, "polars.Expr.dt.offset_by"]], "ordinal_day() (polars.expr.dt method)": [[411, "polars.Expr.dt.ordinal_day"]], "quarter() (polars.expr.dt method)": [[412, "polars.Expr.dt.quarter"]], "replace_time_zone() (polars.expr.dt method)": [[413, "polars.Expr.dt.replace_time_zone"]], "round() (polars.expr.dt method)": [[414, "polars.Expr.dt.round"]], "second() (polars.expr.dt method)": [[415, "polars.Expr.dt.second"]], "seconds() (polars.expr.dt method)": [[416, "polars.Expr.dt.seconds"]], "strftime() (polars.expr.dt method)": [[417, "polars.Expr.dt.strftime"]], "time() (polars.expr.dt method)": [[418, "polars.Expr.dt.time"]], "timestamp() (polars.expr.dt method)": [[419, "polars.Expr.dt.timestamp"]], "to_string() (polars.expr.dt method)": [[420, "polars.Expr.dt.to_string"]], "total_days() (polars.expr.dt method)": [[421, "polars.Expr.dt.total_days"]], "total_hours() (polars.expr.dt method)": [[422, "polars.Expr.dt.total_hours"]], "total_microseconds() (polars.expr.dt method)": [[423, "polars.Expr.dt.total_microseconds"]], "total_milliseconds() (polars.expr.dt method)": [[424, "polars.Expr.dt.total_milliseconds"]], "total_minutes() (polars.expr.dt method)": [[425, "polars.Expr.dt.total_minutes"]], "total_nanoseconds() (polars.expr.dt method)": [[426, "polars.Expr.dt.total_nanoseconds"]], "total_seconds() (polars.expr.dt method)": [[427, "polars.Expr.dt.total_seconds"]], "truncate() (polars.expr.dt method)": [[428, "polars.Expr.dt.truncate"]], "week() (polars.expr.dt method)": [[429, "polars.Expr.dt.week"]], "weekday() (polars.expr.dt method)": [[430, "polars.Expr.dt.weekday"]], "with_time_unit() (polars.expr.dt method)": [[431, "polars.Expr.dt.with_time_unit"]], "year() (polars.expr.dt method)": [[432, "polars.Expr.dt.year"]], "entropy() (polars.expr method)": [[433, "polars.Expr.entropy"]], "eq() (polars.expr method)": [[434, "polars.Expr.eq"]], "eq_missing() (polars.expr method)": [[435, "polars.Expr.eq_missing"]], "ewm_mean() (polars.expr method)": [[436, "polars.Expr.ewm_mean"]], "ewm_std() (polars.expr method)": [[437, "polars.Expr.ewm_std"]], "ewm_var() (polars.expr method)": [[438, "polars.Expr.ewm_var"]], "exclude() (polars.expr method)": [[439, "polars.Expr.exclude"]], "exp() (polars.expr method)": [[440, "polars.Expr.exp"]], "explode() (polars.expr method)": [[441, "polars.Expr.explode"]], "extend_constant() (polars.expr method)": [[442, "polars.Expr.extend_constant"]], "fill_nan() (polars.expr method)": [[443, "polars.Expr.fill_nan"]], "fill_null() (polars.expr method)": [[444, "polars.Expr.fill_null"]], "filter() (polars.expr method)": [[445, "polars.Expr.filter"]], "first() (polars.expr method)": [[446, "polars.Expr.first"]], "flatten() (polars.expr method)": [[447, "polars.Expr.flatten"]], "floor() (polars.expr method)": [[448, "polars.Expr.floor"]], "floordiv() (polars.expr method)": [[449, "polars.Expr.floordiv"]], "forward_fill() (polars.expr method)": [[450, "polars.Expr.forward_fill"]], "from_json() (polars.expr class method)": [[451, "polars.Expr.from_json"]], "gather() (polars.expr method)": [[452, "polars.Expr.gather"]], "gather_every() (polars.expr method)": [[453, "polars.Expr.gather_every"]], "ge() (polars.expr method)": [[454, "polars.Expr.ge"]], "get() (polars.expr method)": [[455, "polars.Expr.get"]], "gt() (polars.expr method)": [[456, "polars.Expr.gt"]], "hash() (polars.expr method)": [[457, "polars.Expr.hash"]], "head() (polars.expr method)": [[458, "polars.Expr.head"]], "hist() (polars.expr method)": [[459, "polars.Expr.hist"]], "implode() (polars.expr method)": [[460, "polars.Expr.implode"]], "inspect() (polars.expr method)": [[461, "polars.Expr.inspect"]], "interpolate() (polars.expr method)": [[462, "polars.Expr.interpolate"]], "is_between() (polars.expr method)": [[463, "polars.Expr.is_between"]], "is_duplicated() (polars.expr method)": [[464, "polars.Expr.is_duplicated"]], "is_finite() (polars.expr method)": [[465, "polars.Expr.is_finite"]], "is_first() (polars.expr method)": [[466, "polars.Expr.is_first"]], "is_first_distinct() (polars.expr method)": [[467, "polars.Expr.is_first_distinct"]], "is_in() (polars.expr method)": [[468, "polars.Expr.is_in"]], "is_infinite() (polars.expr method)": [[469, "polars.Expr.is_infinite"]], "is_last() (polars.expr method)": [[470, "polars.Expr.is_last"]], "is_last_distinct() (polars.expr method)": [[471, "polars.Expr.is_last_distinct"]], "is_nan() (polars.expr method)": [[472, "polars.Expr.is_nan"]], "is_not() (polars.expr method)": [[473, "polars.Expr.is_not"]], "is_not_nan() (polars.expr method)": [[474, "polars.Expr.is_not_nan"]], "is_not_null() (polars.expr method)": [[475, "polars.Expr.is_not_null"]], "is_null() (polars.expr method)": [[476, "polars.Expr.is_null"]], "is_unique() (polars.expr method)": [[477, "polars.Expr.is_unique"]], "keep_name() (polars.expr method)": [[478, "polars.Expr.keep_name"]], "kurtosis() (polars.expr method)": [[479, "polars.Expr.kurtosis"]], "last() (polars.expr method)": [[480, "polars.Expr.last"]], "le() (polars.expr method)": [[481, "polars.Expr.le"]], "len() (polars.expr method)": [[482, "polars.Expr.len"]], "limit() (polars.expr method)": [[483, "polars.Expr.limit"]], "all() (polars.expr.list method)": [[484, "polars.Expr.list.all"]], "any() (polars.expr.list method)": [[485, "polars.Expr.list.any"]], "arg_max() (polars.expr.list method)": [[486, "polars.Expr.list.arg_max"]], "arg_min() (polars.expr.list method)": [[487, "polars.Expr.list.arg_min"]], "concat() (polars.expr.list method)": [[488, "polars.Expr.list.concat"]], "contains() (polars.expr.list method)": [[489, "polars.Expr.list.contains"]], "count_match() (polars.expr.list method)": [[490, "polars.Expr.list.count_match"]], "count_matches() (polars.expr.list method)": [[491, "polars.Expr.list.count_matches"]], "diff() (polars.expr.list method)": [[492, "polars.Expr.list.diff"]], "drop_nulls() (polars.expr.list method)": [[493, "polars.Expr.list.drop_nulls"]], "eval() (polars.expr.list method)": [[494, "polars.Expr.list.eval"]], "explode() (polars.expr.list method)": [[495, "polars.Expr.list.explode"]], "first() (polars.expr.list method)": [[496, "polars.Expr.list.first"]], "gather() (polars.expr.list method)": [[497, "polars.Expr.list.gather"]], "get() (polars.expr.list method)": [[498, "polars.Expr.list.get"]], "head() (polars.expr.list method)": [[499, "polars.Expr.list.head"]], "join() (polars.expr.list method)": [[500, "polars.Expr.list.join"]], "last() (polars.expr.list method)": [[501, "polars.Expr.list.last"]], "len() (polars.expr.list method)": [[502, "polars.Expr.list.len"]], "lengths() (polars.expr.list method)": [[503, "polars.Expr.list.lengths"]], "max() (polars.expr.list method)": [[504, "polars.Expr.list.max"]], "mean() (polars.expr.list method)": [[505, "polars.Expr.list.mean"]], "min() (polars.expr.list method)": [[506, "polars.Expr.list.min"]], "reverse() (polars.expr.list method)": [[507, "polars.Expr.list.reverse"]], "sample() (polars.expr.list method)": [[508, "polars.Expr.list.sample"]], "set_difference() (polars.expr.list method)": [[509, "polars.Expr.list.set_difference"]], "set_intersection() (polars.expr.list method)": [[510, "polars.Expr.list.set_intersection"]], "set_symmetric_difference() (polars.expr.list method)": [[511, "polars.Expr.list.set_symmetric_difference"]], "set_union() (polars.expr.list method)": [[512, "polars.Expr.list.set_union"]], "shift() (polars.expr.list method)": [[513, "polars.Expr.list.shift"]], "slice() (polars.expr.list method)": [[514, "polars.Expr.list.slice"]], "sort() (polars.expr.list method)": [[515, "polars.Expr.list.sort"]], "sum() (polars.expr.list method)": [[516, "polars.Expr.list.sum"]], "tail() (polars.expr.list method)": [[517, "polars.Expr.list.tail"]], "take() (polars.expr.list method)": [[518, "polars.Expr.list.take"]], "to_array() (polars.expr.list method)": [[519, "polars.Expr.list.to_array"]], "to_struct() (polars.expr.list method)": [[520, "polars.Expr.list.to_struct"]], "unique() (polars.expr.list method)": [[521, "polars.Expr.list.unique"]], "log() (polars.expr method)": [[522, "polars.Expr.log"]], "log10() (polars.expr method)": [[523, "polars.Expr.log10"]], "log1p() (polars.expr method)": [[524, "polars.Expr.log1p"]], "lower_bound() (polars.expr method)": [[525, "polars.Expr.lower_bound"]], "lt() (polars.expr method)": [[526, "polars.Expr.lt"]], "map() (polars.expr method)": [[527, "polars.Expr.map"]], "map_alias() (polars.expr method)": [[528, "polars.Expr.map_alias"]], "map_batches() (polars.expr method)": [[529, "polars.Expr.map_batches"]], "map_dict() (polars.expr method)": [[530, "polars.Expr.map_dict"]], "map_elements() (polars.expr method)": [[531, "polars.Expr.map_elements"]], "max() (polars.expr method)": [[532, "polars.Expr.max"]], "mean() (polars.expr method)": [[533, "polars.Expr.mean"]], "median() (polars.expr method)": [[534, "polars.Expr.median"]], "eq() (polars.expr.meta method)": [[535, "polars.Expr.meta.eq"]], "has_multiple_outputs() (polars.expr.meta method)": [[536, "polars.Expr.meta.has_multiple_outputs"]], "is_regex_projection() (polars.expr.meta method)": [[537, "polars.Expr.meta.is_regex_projection"]], "ne() (polars.expr.meta method)": [[538, "polars.Expr.meta.ne"]], "output_name() (polars.expr.meta method)": [[539, "polars.Expr.meta.output_name"]], "pop() (polars.expr.meta method)": [[540, "polars.Expr.meta.pop"]], "root_names() (polars.expr.meta method)": [[541, "polars.Expr.meta.root_names"]], "tree_format() (polars.expr.meta method)": [[542, "polars.Expr.meta.tree_format"]], "undo_aliases() (polars.expr.meta method)": [[543, "polars.Expr.meta.undo_aliases"]], "write_json() (polars.expr.meta method)": [[544, "polars.Expr.meta.write_json"]], "min() (polars.expr method)": [[545, "polars.Expr.min"]], "mod() (polars.expr method)": [[546, "polars.Expr.mod"]], "mode() (polars.expr method)": [[547, "polars.Expr.mode"]], "mul() (polars.expr method)": [[548, "polars.Expr.mul"]], "n_unique() (polars.expr method)": [[549, "polars.Expr.n_unique"]], "keep() (polars.expr.name method)": [[550, "polars.Expr.name.keep"]], "map() (polars.expr.name method)": [[551, "polars.Expr.name.map"]], "prefix() (polars.expr.name method)": [[552, "polars.Expr.name.prefix"]], "suffix() (polars.expr.name method)": [[553, "polars.Expr.name.suffix"]], "to_lowercase() (polars.expr.name method)": [[554, "polars.Expr.name.to_lowercase"]], "to_uppercase() (polars.expr.name method)": [[555, "polars.Expr.name.to_uppercase"]], "nan_max() (polars.expr method)": [[556, "polars.Expr.nan_max"]], "nan_min() (polars.expr method)": [[557, "polars.Expr.nan_min"]], "ne() (polars.expr method)": [[558, "polars.Expr.ne"]], "ne_missing() (polars.expr method)": [[559, "polars.Expr.ne_missing"]], "neg() (polars.expr method)": [[560, "polars.Expr.neg"]], "not_() (polars.expr method)": [[561, "polars.Expr.not_"]], "null_count() (polars.expr method)": [[562, "polars.Expr.null_count"]], "or_() (polars.expr method)": [[563, "polars.Expr.or_"]], "over() (polars.expr method)": [[564, "polars.Expr.over"]], "pct_change() (polars.expr method)": [[565, "polars.Expr.pct_change"]], "peak_max() (polars.expr method)": [[566, "polars.Expr.peak_max"]], "peak_min() (polars.expr method)": [[567, "polars.Expr.peak_min"]], "pipe() (polars.expr method)": [[568, "polars.Expr.pipe"]], "pow() (polars.expr method)": [[569, "polars.Expr.pow"]], "prefix() (polars.expr method)": [[570, "polars.Expr.prefix"]], "product() (polars.expr method)": [[571, "polars.Expr.product"]], "qcut() (polars.expr method)": [[572, "polars.Expr.qcut"]], "quantile() (polars.expr method)": [[573, "polars.Expr.quantile"]], "radians() (polars.expr method)": [[574, "polars.Expr.radians"]], "rank() (polars.expr method)": [[575, "polars.Expr.rank"]], "rechunk() (polars.expr method)": [[576, "polars.Expr.rechunk"]], "reinterpret() (polars.expr method)": [[577, "polars.Expr.reinterpret"]], "repeat_by() (polars.expr method)": [[578, "polars.Expr.repeat_by"]], "replace() (polars.expr method)": [[579, "polars.Expr.replace"]], "reshape() (polars.expr method)": [[580, "polars.Expr.reshape"]], "reverse() (polars.expr method)": [[581, "polars.Expr.reverse"]], "rle() (polars.expr method)": [[582, "polars.Expr.rle"]], "rle_id() (polars.expr method)": [[583, "polars.Expr.rle_id"]], "rolling() (polars.expr method)": [[584, "polars.Expr.rolling"]], "rolling_apply() (polars.expr method)": [[585, "polars.Expr.rolling_apply"]], "rolling_map() (polars.expr method)": [[586, "polars.Expr.rolling_map"]], "rolling_max() (polars.expr method)": [[587, "polars.Expr.rolling_max"]], "rolling_mean() (polars.expr method)": [[588, "polars.Expr.rolling_mean"]], "rolling_median() (polars.expr method)": [[589, "polars.Expr.rolling_median"]], "rolling_min() (polars.expr method)": [[590, "polars.Expr.rolling_min"]], "rolling_quantile() (polars.expr method)": [[591, "polars.Expr.rolling_quantile"]], "rolling_skew() (polars.expr method)": [[592, "polars.Expr.rolling_skew"]], "rolling_std() (polars.expr method)": [[593, "polars.Expr.rolling_std"]], "rolling_sum() (polars.expr method)": [[594, "polars.Expr.rolling_sum"]], "rolling_var() (polars.expr method)": [[595, "polars.Expr.rolling_var"]], "round() (polars.expr method)": [[596, "polars.Expr.round"]], "round_sig_figs() (polars.expr method)": [[597, "polars.Expr.round_sig_figs"]], "sample() (polars.expr method)": [[598, "polars.Expr.sample"]], "search_sorted() (polars.expr method)": [[599, "polars.Expr.search_sorted"]], "set_sorted() (polars.expr method)": [[600, "polars.Expr.set_sorted"]], "shift() (polars.expr method)": [[601, "polars.Expr.shift"]], "shift_and_fill() (polars.expr method)": [[602, "polars.Expr.shift_and_fill"]], "shrink_dtype() (polars.expr method)": [[603, "polars.Expr.shrink_dtype"]], "shuffle() (polars.expr method)": [[604, "polars.Expr.shuffle"]], "sign() (polars.expr method)": [[605, "polars.Expr.sign"]], "sin() (polars.expr method)": [[606, "polars.Expr.sin"]], "sinh() (polars.expr method)": [[607, "polars.Expr.sinh"]], "skew() (polars.expr method)": [[608, "polars.Expr.skew"]], "slice() (polars.expr method)": [[609, "polars.Expr.slice"]], "sort() (polars.expr method)": [[610, "polars.Expr.sort"]], "sort_by() (polars.expr method)": [[611, "polars.Expr.sort_by"]], "sqrt() (polars.expr method)": [[612, "polars.Expr.sqrt"]], "std() (polars.expr method)": [[613, "polars.Expr.std"]], "concat() (polars.expr.str method)": [[614, "polars.Expr.str.concat"]], "contains() (polars.expr.str method)": [[615, "polars.Expr.str.contains"]], "contains_any() (polars.expr.str method)": [[616, "polars.Expr.str.contains_any"]], "count_match() (polars.expr.str method)": [[617, "polars.Expr.str.count_match"]], "count_matches() (polars.expr.str method)": [[618, "polars.Expr.str.count_matches"]], "decode() (polars.expr.str method)": [[619, "polars.Expr.str.decode"]], "encode() (polars.expr.str method)": [[620, "polars.Expr.str.encode"]], "ends_with() (polars.expr.str method)": [[621, "polars.Expr.str.ends_with"]], "explode() (polars.expr.str method)": [[622, "polars.Expr.str.explode"]], "extract() (polars.expr.str method)": [[623, "polars.Expr.str.extract"]], "extract_all() (polars.expr.str method)": [[624, "polars.Expr.str.extract_all"]], "extract_groups() (polars.expr.str method)": [[625, "polars.Expr.str.extract_groups"]], "find() (polars.expr.str method)": [[626, "polars.Expr.str.find"]], "json_decode() (polars.expr.str method)": [[627, "polars.Expr.str.json_decode"]], "json_extract() (polars.expr.str method)": [[628, "polars.Expr.str.json_extract"]], "json_path_match() (polars.expr.str method)": [[629, "polars.Expr.str.json_path_match"]], "len_bytes() (polars.expr.str method)": [[630, "polars.Expr.str.len_bytes"]], "len_chars() (polars.expr.str method)": [[631, "polars.Expr.str.len_chars"]], "lengths() (polars.expr.str method)": [[632, "polars.Expr.str.lengths"]], "ljust() (polars.expr.str method)": [[633, "polars.Expr.str.ljust"]], "lstrip() (polars.expr.str method)": [[634, "polars.Expr.str.lstrip"]], "n_chars() (polars.expr.str method)": [[635, "polars.Expr.str.n_chars"]], "pad_end() (polars.expr.str method)": [[636, "polars.Expr.str.pad_end"]], "pad_start() (polars.expr.str method)": [[637, "polars.Expr.str.pad_start"]], "parse_int() (polars.expr.str method)": [[638, "polars.Expr.str.parse_int"]], "replace() (polars.expr.str method)": [[639, "polars.Expr.str.replace"]], "replace_all() (polars.expr.str method)": [[640, "polars.Expr.str.replace_all"]], "replace_many() (polars.expr.str method)": [[641, "polars.Expr.str.replace_many"]], "reverse() (polars.expr.str method)": [[642, "polars.Expr.str.reverse"]], "rjust() (polars.expr.str method)": [[643, "polars.Expr.str.rjust"]], "rstrip() (polars.expr.str method)": [[644, "polars.Expr.str.rstrip"]], "slice() (polars.expr.str method)": [[645, "polars.Expr.str.slice"]], "split() (polars.expr.str method)": [[646, "polars.Expr.str.split"]], "split_exact() (polars.expr.str method)": [[647, "polars.Expr.str.split_exact"]], "splitn() (polars.expr.str method)": [[648, "polars.Expr.str.splitn"]], "starts_with() (polars.expr.str method)": [[649, "polars.Expr.str.starts_with"]], "strip() (polars.expr.str method)": [[650, "polars.Expr.str.strip"]], "strip_chars() (polars.expr.str method)": [[651, "polars.Expr.str.strip_chars"]], "strip_chars_end() (polars.expr.str method)": [[652, "polars.Expr.str.strip_chars_end"]], "strip_chars_start() (polars.expr.str method)": [[653, "polars.Expr.str.strip_chars_start"]], "strip_prefix() (polars.expr.str method)": [[654, "polars.Expr.str.strip_prefix"]], "strip_suffix() (polars.expr.str method)": [[655, "polars.Expr.str.strip_suffix"]], "strptime() (polars.expr.str method)": [[656, "polars.Expr.str.strptime"]], "to_date() (polars.expr.str method)": [[657, "polars.Expr.str.to_date"]], "to_datetime() (polars.expr.str method)": [[658, "polars.Expr.str.to_datetime"]], "to_decimal() (polars.expr.str method)": [[659, "polars.Expr.str.to_decimal"]], "to_integer() (polars.expr.str method)": [[660, "polars.Expr.str.to_integer"]], "to_lowercase() (polars.expr.str method)": [[661, "polars.Expr.str.to_lowercase"]], "to_time() (polars.expr.str method)": [[662, "polars.Expr.str.to_time"]], "to_titlecase() (polars.expr.str method)": [[663, "polars.Expr.str.to_titlecase"]], "to_uppercase() (polars.expr.str method)": [[664, "polars.Expr.str.to_uppercase"]], "zfill() (polars.expr.str method)": [[665, "polars.Expr.str.zfill"]], "field() (polars.expr.struct method)": [[666, "polars.Expr.struct.field"]], "json_encode() (polars.expr.struct method)": [[667, "polars.Expr.struct.json_encode"]], "rename_fields() (polars.expr.struct method)": [[668, "polars.Expr.struct.rename_fields"]], "sub() (polars.expr method)": [[669, "polars.Expr.sub"]], "suffix() (polars.expr method)": [[670, "polars.Expr.suffix"]], "sum() (polars.expr method)": [[671, "polars.Expr.sum"]], "tail() (polars.expr method)": [[672, "polars.Expr.tail"]], "take() (polars.expr method)": [[673, "polars.Expr.take"]], "take_every() (polars.expr method)": [[674, "polars.Expr.take_every"]], "tan() (polars.expr method)": [[675, "polars.Expr.tan"]], "tanh() (polars.expr method)": [[676, "polars.Expr.tanh"]], "to_physical() (polars.expr method)": [[677, "polars.Expr.to_physical"]], "top_k() (polars.expr method)": [[678, "polars.Expr.top_k"]], "truediv() (polars.expr method)": [[679, "polars.Expr.truediv"]], "unique() (polars.expr method)": [[680, "polars.Expr.unique"]], "unique_counts() (polars.expr method)": [[681, "polars.Expr.unique_counts"]], "upper_bound() (polars.expr method)": [[682, "polars.Expr.upper_bound"]], "value_counts() (polars.expr method)": [[683, "polars.Expr.value_counts"]], "var() (polars.expr method)": [[684, "polars.Expr.var"]], "where() (polars.expr method)": [[685, "polars.Expr.where"]], "xor() (polars.expr method)": [[686, "polars.Expr.xor"]], "all() (in module polars)": [[687, "polars.all"]], "all_horizontal() (in module polars)": [[688, "polars.all_horizontal"]], "any() (in module polars)": [[689, "polars.any"]], "any_horizontal() (in module polars)": [[690, "polars.any_horizontal"]], "apply() (in module polars)": [[691, "polars.apply"]], "approx_n_unique() (in module polars)": [[692, "polars.approx_n_unique"]], "arange() (in module polars)": [[693, "polars.arange"]], "arctan2() (in module polars)": [[694, "polars.arctan2"]], "arctan2d() (in module polars)": [[695, "polars.arctan2d"]], "arg_sort_by() (in module polars)": [[696, "polars.arg_sort_by"]], "arg_where() (in module polars)": [[697, "polars.arg_where"]], "coalesce() (in module polars)": [[698, "polars.coalesce"]], "concat_list() (in module polars)": [[699, "polars.concat_list"]], "concat_str() (in module polars)": [[700, "polars.concat_str"]], "corr() (in module polars)": [[701, "polars.corr"]], "count() (in module polars)": [[702, "polars.count"]], "cov() (in module polars)": [[703, "polars.cov"]], "cum_count() (in module polars)": [[704, "polars.cum_count"]], "cum_fold() (in module polars)": [[705, "polars.cum_fold"]], "cum_reduce() (in module polars)": [[706, "polars.cum_reduce"]], "cum_sum() (in module polars)": [[707, "polars.cum_sum"]], "cum_sum_horizontal() (in module polars)": [[708, "polars.cum_sum_horizontal"]], "cumfold() (in module polars)": [[709, "polars.cumfold"]], "cumreduce() (in module polars)": [[710, "polars.cumreduce"]], "cumsum() (in module polars)": [[711, "polars.cumsum"]], "cumsum_horizontal() (in module polars)": [[712, "polars.cumsum_horizontal"]], "date() (in module polars)": [[713, "polars.date"]], "date_range() (in module polars)": [[714, "polars.date_range"]], "date_ranges() (in module polars)": [[715, "polars.date_ranges"]], "datetime() (in module polars)": [[716, "polars.datetime"]], "datetime_range() (in module polars)": [[717, "polars.datetime_range"]], "datetime_ranges() (in module polars)": [[718, "polars.datetime_ranges"]], "duration() (in module polars)": [[719, "polars.duration"]], "element() (in module polars)": [[720, "polars.element"]], "exclude() (in module polars)": [[721, "polars.exclude"]], "first() (in module polars)": [[722, "polars.first"]], "fold() (in module polars)": [[723, "polars.fold"]], "format() (in module polars)": [[724, "polars.format"]], "from_epoch() (in module polars)": [[725, "polars.from_epoch"]], "groups() (in module polars)": [[726, "polars.groups"]], "head() (in module polars)": [[727, "polars.head"]], "implode() (in module polars)": [[728, "polars.implode"]], "int_range() (in module polars)": [[729, "polars.int_range"]], "int_ranges() (in module polars)": [[730, "polars.int_ranges"]], "last() (in module polars)": [[731, "polars.last"]], "len() (in module polars)": [[732, "polars.len"]], "lit() (in module polars)": [[733, "polars.lit"]], "map() (in module polars)": [[734, "polars.map"]], "map_batches() (in module polars)": [[735, "polars.map_batches"]], "map_groups() (in module polars)": [[736, "polars.map_groups"]], "max() (in module polars)": [[737, "polars.max"]], "max_horizontal() (in module polars)": [[738, "polars.max_horizontal"]], "mean() (in module polars)": [[739, "polars.mean"]], "median() (in module polars)": [[740, "polars.median"]], "min() (in module polars)": [[741, "polars.min"]], "min_horizontal() (in module polars)": [[742, "polars.min_horizontal"]], "n_unique() (in module polars)": [[743, "polars.n_unique"]], "ones() (in module polars)": [[744, "polars.ones"]], "quantile() (in module polars)": [[745, "polars.quantile"]], "reduce() (in module polars)": [[746, "polars.reduce"]], "repeat() (in module polars)": [[747, "polars.repeat"]], "rolling_corr() (in module polars)": [[748, "polars.rolling_corr"]], "rolling_cov() (in module polars)": [[749, "polars.rolling_cov"]], "select() (in module polars)": [[750, "polars.select"]], "sql_expr() (in module polars)": [[751, "polars.sql_expr"]], "std() (in module polars)": [[752, "polars.std"]], "struct() (in module polars)": [[753, "polars.struct"]], "sum() (in module polars)": [[754, "polars.sum"]], "sum_horizontal() (in module polars)": [[755, "polars.sum_horizontal"]], "tail() (in module polars)": [[756, "polars.tail"]], "time() (in module polars)": [[757, "polars.time"]], "time_range() (in module polars)": [[758, "polars.time_range"]], "time_ranges() (in module polars)": [[759, "polars.time_ranges"]], "var() (in module polars)": [[760, "polars.var"]], "when() (in module polars)": [[761, "polars.when"]], "zeros() (in module polars)": [[762, "polars.zeros"]], "approx_n_unique() (polars.lazyframe method)": [[786, "polars.LazyFrame.approx_n_unique"]], "bottom_k() (polars.lazyframe method)": [[787, "polars.LazyFrame.bottom_k"]], "cache() (polars.lazyframe method)": [[788, "polars.LazyFrame.cache"]], "cast() (polars.lazyframe method)": [[789, "polars.LazyFrame.cast"]], "clear() (polars.lazyframe method)": [[790, "polars.LazyFrame.clear"]], "clone() (polars.lazyframe method)": [[791, "polars.LazyFrame.clone"]], "collect() (polars.lazyframe method)": [[792, "polars.LazyFrame.collect"]], "collect_async() (polars.lazyframe method)": [[793, "polars.LazyFrame.collect_async"]], "columns (polars.lazyframe property)": [[794, "polars.LazyFrame.columns"]], "count() (polars.lazyframe method)": [[795, "polars.LazyFrame.count"]], "describe() (polars.lazyframe method)": [[796, "polars.LazyFrame.describe"]], "deserialize() (polars.lazyframe class method)": [[797, "polars.LazyFrame.deserialize"]], "drop() (polars.lazyframe method)": [[798, "polars.LazyFrame.drop"]], "drop_nulls() (polars.lazyframe method)": [[799, "polars.LazyFrame.drop_nulls"]], "dtypes (polars.lazyframe property)": [[800, "polars.LazyFrame.dtypes"]], "explain() (polars.lazyframe method)": [[801, "polars.LazyFrame.explain"]], "explode() (polars.lazyframe method)": [[802, "polars.LazyFrame.explode"]], "fetch() (polars.lazyframe method)": [[803, "polars.LazyFrame.fetch"]], "fill_nan() (polars.lazyframe method)": [[804, "polars.LazyFrame.fill_nan"]], "fill_null() (polars.lazyframe method)": [[805, "polars.LazyFrame.fill_null"]], "filter() (polars.lazyframe method)": [[806, "polars.LazyFrame.filter"]], "first() (polars.lazyframe method)": [[807, "polars.LazyFrame.first"]], "gather_every() (polars.lazyframe method)": [[808, "polars.LazyFrame.gather_every"]], "group_by() (polars.lazyframe method)": [[809, "polars.LazyFrame.group_by"]], "group_by_dynamic() (polars.lazyframe method)": [[810, "polars.LazyFrame.group_by_dynamic"]], "group_by_rolling() (polars.lazyframe method)": [[811, "polars.LazyFrame.group_by_rolling"]], "groupby() (polars.lazyframe method)": [[812, "polars.LazyFrame.groupby"]], "groupby_dynamic() (polars.lazyframe method)": [[813, "polars.LazyFrame.groupby_dynamic"]], "groupby_rolling() (polars.lazyframe method)": [[814, "polars.LazyFrame.groupby_rolling"]], "head() (polars.lazyframe method)": [[815, "polars.LazyFrame.head"]], "inspect() (polars.lazyframe method)": [[816, "polars.LazyFrame.inspect"]], "interpolate() (polars.lazyframe method)": [[817, "polars.LazyFrame.interpolate"]], "join() (polars.lazyframe method)": [[818, "polars.LazyFrame.join"]], "join_asof() (polars.lazyframe method)": [[819, "polars.LazyFrame.join_asof"]], "last() (polars.lazyframe method)": [[820, "polars.LazyFrame.last"]], "lazy() (polars.lazyframe method)": [[821, "polars.LazyFrame.lazy"]], "limit() (polars.lazyframe method)": [[822, "polars.LazyFrame.limit"]], "map() (polars.lazyframe method)": [[823, "polars.LazyFrame.map"]], "map_batches() (polars.lazyframe method)": [[824, "polars.LazyFrame.map_batches"]], "max() (polars.lazyframe method)": [[825, "polars.LazyFrame.max"]], "mean() (polars.lazyframe method)": [[826, "polars.LazyFrame.mean"]], "median() (polars.lazyframe method)": [[827, "polars.LazyFrame.median"]], "melt() (polars.lazyframe method)": [[828, "polars.LazyFrame.melt"]], "merge_sorted() (polars.lazyframe method)": [[829, "polars.LazyFrame.merge_sorted"]], "min() (polars.lazyframe method)": [[830, "polars.LazyFrame.min"]], "null_count() (polars.lazyframe method)": [[831, "polars.LazyFrame.null_count"]], "pipe() (polars.lazyframe method)": [[832, "polars.LazyFrame.pipe"]], "profile() (polars.lazyframe method)": [[833, "polars.LazyFrame.profile"]], "quantile() (polars.lazyframe method)": [[834, "polars.LazyFrame.quantile"]], "rename() (polars.lazyframe method)": [[835, "polars.LazyFrame.rename"]], "reverse() (polars.lazyframe method)": [[836, "polars.LazyFrame.reverse"]], "rolling() (polars.lazyframe method)": [[837, "polars.LazyFrame.rolling"]], "schema (polars.lazyframe property)": [[838, "polars.LazyFrame.schema"]], "select() (polars.lazyframe method)": [[839, "polars.LazyFrame.select"]], "select_seq() (polars.lazyframe method)": [[840, "polars.LazyFrame.select_seq"]], "serialize() (polars.lazyframe method)": [[841, "polars.LazyFrame.serialize"]], "set_sorted() (polars.lazyframe method)": [[842, "polars.LazyFrame.set_sorted"]], "shift() (polars.lazyframe method)": [[843, "polars.LazyFrame.shift"]], "shift_and_fill() (polars.lazyframe method)": [[844, "polars.LazyFrame.shift_and_fill"]], "show_graph() (polars.lazyframe method)": [[845, "polars.LazyFrame.show_graph"]], "slice() (polars.lazyframe method)": [[846, "polars.LazyFrame.slice"]], "sort() (polars.lazyframe method)": [[847, "polars.LazyFrame.sort"]], "std() (polars.lazyframe method)": [[848, "polars.LazyFrame.std"]], "sum() (polars.lazyframe method)": [[849, "polars.LazyFrame.sum"]], "tail() (polars.lazyframe method)": [[850, "polars.LazyFrame.tail"]], "take_every() (polars.lazyframe method)": [[851, "polars.LazyFrame.take_every"]], "top_k() (polars.lazyframe method)": [[852, "polars.LazyFrame.top_k"]], "unique() (polars.lazyframe method)": [[853, "polars.LazyFrame.unique"]], "unnest() (polars.lazyframe method)": [[854, "polars.LazyFrame.unnest"]], "update() (polars.lazyframe method)": [[855, "polars.LazyFrame.update"]], "var() (polars.lazyframe method)": [[856, "polars.LazyFrame.var"]], "width (polars.lazyframe property)": [[857, "polars.LazyFrame.width"]], "with_columns() (polars.lazyframe method)": [[858, "polars.LazyFrame.with_columns"]], "with_columns_seq() (polars.lazyframe method)": [[859, "polars.LazyFrame.with_columns_seq"]], "with_context() (polars.lazyframe method)": [[860, "polars.LazyFrame.with_context"]], "with_row_count() (polars.lazyframe method)": [[861, "polars.LazyFrame.with_row_count"]], "with_row_index() (polars.lazyframe method)": [[862, "polars.LazyFrame.with_row_index"]], "agg() (polars.lazyframe.group_by.lazygroupby method)": [[863, "polars.lazyframe.group_by.LazyGroupBy.agg"]], "all() (polars.lazyframe.group_by.lazygroupby method)": [[864, "polars.lazyframe.group_by.LazyGroupBy.all"]], "apply() (polars.lazyframe.group_by.lazygroupby method)": [[865, "polars.lazyframe.group_by.LazyGroupBy.apply"]], "count() (polars.lazyframe.group_by.lazygroupby method)": [[866, "polars.lazyframe.group_by.LazyGroupBy.count"]], "first() (polars.lazyframe.group_by.lazygroupby method)": [[867, "polars.lazyframe.group_by.LazyGroupBy.first"]], "head() (polars.lazyframe.group_by.lazygroupby method)": [[868, "polars.lazyframe.group_by.LazyGroupBy.head"]], "last() (polars.lazyframe.group_by.lazygroupby method)": [[869, "polars.lazyframe.group_by.LazyGroupBy.last"]], "len() (polars.lazyframe.group_by.lazygroupby method)": [[870, "polars.lazyframe.group_by.LazyGroupBy.len"]], "map_groups() (polars.lazyframe.group_by.lazygroupby method)": [[871, "polars.lazyframe.group_by.LazyGroupBy.map_groups"]], "max() (polars.lazyframe.group_by.lazygroupby method)": [[872, "polars.lazyframe.group_by.LazyGroupBy.max"]], "mean() (polars.lazyframe.group_by.lazygroupby method)": [[873, "polars.lazyframe.group_by.LazyGroupBy.mean"]], "median() (polars.lazyframe.group_by.lazygroupby method)": [[874, "polars.lazyframe.group_by.LazyGroupBy.median"]], "min() (polars.lazyframe.group_by.lazygroupby method)": [[875, "polars.lazyframe.group_by.LazyGroupBy.min"]], "n_unique() (polars.lazyframe.group_by.lazygroupby method)": [[876, "polars.lazyframe.group_by.LazyGroupBy.n_unique"]], "quantile() (polars.lazyframe.group_by.lazygroupby method)": [[877, "polars.lazyframe.group_by.LazyGroupBy.quantile"]], "sum() (polars.lazyframe.group_by.lazygroupby method)": [[878, "polars.lazyframe.group_by.LazyGroupBy.sum"]], "tail() (polars.lazyframe.group_by.lazygroupby method)": [[879, "polars.lazyframe.group_by.LazyGroupBy.tail"]], "all() (in module polars.selectors)": [[886, "polars.selectors.all"]], "by_dtype() (in module polars.selectors)": [[886, "polars.selectors.by_dtype"]], "by_name() (in module polars.selectors)": [[886, "polars.selectors.by_name"]], "categorical() (in module polars.selectors)": [[886, "polars.selectors.categorical"]], "contains() (in module polars.selectors)": [[886, "polars.selectors.contains"]], "date() (in module polars.selectors)": [[886, "polars.selectors.date"]], "datetime() (in module polars.selectors)": [[886, "polars.selectors.datetime"]], "duration() (in module polars.selectors)": [[886, "polars.selectors.duration"]], "ends_with() (in module polars.selectors)": [[886, "polars.selectors.ends_with"]], "expand_selector() (in module polars.selectors)": [[886, "polars.selectors.expand_selector"]], "first() (in module polars.selectors)": [[886, "polars.selectors.first"]], "float() (in module polars.selectors)": [[886, "polars.selectors.float"]], "integer() (in module polars.selectors)": [[886, "polars.selectors.integer"]], "is_selector() (in module polars.selectors)": [[886, "polars.selectors.is_selector"]], "last() (in module polars.selectors)": [[886, "polars.selectors.last"]], "matches() (in module polars.selectors)": [[886, "polars.selectors.matches"]], "module": [[886, "module-polars.selectors"]], "numeric() (in module polars.selectors)": [[886, "polars.selectors.numeric"]], "polars.selectors": [[886, "module-polars.selectors"]], "starts_with() (in module polars.selectors)": [[886, "polars.selectors.starts_with"]], "string() (in module polars.selectors)": [[886, "polars.selectors.string"]], "temporal() (in module polars.selectors)": [[886, "polars.selectors.temporal"]], "time() (in module polars.selectors)": [[886, "polars.selectors.time"]], "abs() (polars.series method)": [[888, "polars.Series.abs"]], "alias() (polars.series method)": [[889, "polars.Series.alias"]], "all() (polars.series method)": [[890, "polars.Series.all"]], "any() (polars.series method)": [[891, "polars.Series.any"]], "append() (polars.series method)": [[892, "polars.Series.append"]], "apply() (polars.series method)": [[893, "polars.Series.apply"]], "arccos() (polars.series method)": [[894, "polars.Series.arccos"]], "arccosh() (polars.series method)": [[895, "polars.Series.arccosh"]], "arcsin() (polars.series method)": [[896, "polars.Series.arcsin"]], "arcsinh() (polars.series method)": [[897, "polars.Series.arcsinh"]], "arctan() (polars.series method)": [[898, "polars.Series.arctan"]], "arctanh() (polars.series method)": [[899, "polars.Series.arctanh"]], "arg_max() (polars.series method)": [[900, "polars.Series.arg_max"]], "arg_min() (polars.series method)": [[901, "polars.Series.arg_min"]], "arg_sort() (polars.series method)": [[902, "polars.Series.arg_sort"]], "arg_true() (polars.series method)": [[903, "polars.Series.arg_true"]], "arg_unique() (polars.series method)": [[904, "polars.Series.arg_unique"]], "all() (polars.series.arr method)": [[905, "polars.Series.arr.all"]], "any() (polars.series.arr method)": [[906, "polars.Series.arr.any"]], "arg_max() (polars.series.arr method)": [[907, "polars.Series.arr.arg_max"]], "arg_min() (polars.series.arr method)": [[908, "polars.Series.arr.arg_min"]], "contains() (polars.series.arr method)": [[909, "polars.Series.arr.contains"]], "count_matches() (polars.series.arr method)": [[910, "polars.Series.arr.count_matches"]], "explode() (polars.series.arr method)": [[911, "polars.Series.arr.explode"]], "first() (polars.series.arr method)": [[912, "polars.Series.arr.first"]], "get() (polars.series.arr method)": [[913, "polars.Series.arr.get"]], "join() (polars.series.arr method)": [[914, "polars.Series.arr.join"]], "last() (polars.series.arr method)": [[915, "polars.Series.arr.last"]], "max() (polars.series.arr method)": [[916, "polars.Series.arr.max"]], "min() (polars.series.arr method)": [[917, "polars.Series.arr.min"]], "reverse() (polars.series.arr method)": [[918, "polars.Series.arr.reverse"]], "sort() (polars.series.arr method)": [[919, "polars.Series.arr.sort"]], "sum() (polars.series.arr method)": [[920, "polars.Series.arr.sum"]], "to_list() (polars.series.arr method)": [[921, "polars.Series.arr.to_list"]], "unique() (polars.series.arr method)": [[922, "polars.Series.arr.unique"]], "contains() (polars.series.bin method)": [[923, "polars.Series.bin.contains"]], "decode() (polars.series.bin method)": [[924, "polars.Series.bin.decode"]], "encode() (polars.series.bin method)": [[925, "polars.Series.bin.encode"]], "ends_with() (polars.series.bin method)": [[926, "polars.Series.bin.ends_with"]], "starts_with() (polars.series.bin method)": [[927, "polars.Series.bin.starts_with"]], "bottom_k() (polars.series method)": [[928, "polars.Series.bottom_k"]], "cast() (polars.series method)": [[929, "polars.Series.cast"]], "get_categories() (polars.series.cat method)": [[930, "polars.Series.cat.get_categories"]], "is_local() (polars.series.cat method)": [[931, "polars.Series.cat.is_local"]], "set_ordering() (polars.series.cat method)": [[932, "polars.Series.cat.set_ordering"]], "to_local() (polars.series.cat method)": [[933, "polars.Series.cat.to_local"]], "uses_lexical_ordering() (polars.series.cat method)": [[934, "polars.Series.cat.uses_lexical_ordering"]], "cbrt() (polars.series method)": [[935, "polars.Series.cbrt"]], "ceil() (polars.series method)": [[936, "polars.Series.ceil"]], "chunk_lengths() (polars.series method)": [[937, "polars.Series.chunk_lengths"]], "clear() (polars.series method)": [[938, "polars.Series.clear"]], "clip() (polars.series method)": [[939, "polars.Series.clip"]], "clip_max() (polars.series method)": [[940, "polars.Series.clip_max"]], "clip_min() (polars.series method)": [[941, "polars.Series.clip_min"]], "clone() (polars.series method)": [[942, "polars.Series.clone"]], "cos() (polars.series method)": [[943, "polars.Series.cos"]], "cosh() (polars.series method)": [[944, "polars.Series.cosh"]], "cot() (polars.series method)": [[945, "polars.Series.cot"]], "cum_max() (polars.series method)": [[946, "polars.Series.cum_max"]], "cum_min() (polars.series method)": [[947, "polars.Series.cum_min"]], "cum_prod() (polars.series method)": [[948, "polars.Series.cum_prod"]], "cum_sum() (polars.series method)": [[949, "polars.Series.cum_sum"]], "cummax() (polars.series method)": [[950, "polars.Series.cummax"]], "cummin() (polars.series method)": [[951, "polars.Series.cummin"]], "cumprod() (polars.series method)": [[952, "polars.Series.cumprod"]], "cumsum() (polars.series method)": [[953, "polars.Series.cumsum"]], "cumulative_eval() (polars.series method)": [[954, "polars.Series.cumulative_eval"]], "cut() (polars.series method)": [[955, "polars.Series.cut"]], "describe() (polars.series method)": [[956, "polars.Series.describe"]], "diff() (polars.series method)": [[957, "polars.Series.diff"]], "dot() (polars.series method)": [[958, "polars.Series.dot"]], "drop_nans() (polars.series method)": [[959, "polars.Series.drop_nans"]], "drop_nulls() (polars.series method)": [[960, "polars.Series.drop_nulls"]], "base_utc_offset() (polars.series.dt method)": [[961, "polars.Series.dt.base_utc_offset"]], "cast_time_unit() (polars.series.dt method)": [[962, "polars.Series.dt.cast_time_unit"]], "century() (polars.series.dt method)": [[963, "polars.Series.dt.century"]], "combine() (polars.series.dt method)": [[964, "polars.Series.dt.combine"]], "convert_time_zone() (polars.series.dt method)": [[965, "polars.Series.dt.convert_time_zone"]], "date() (polars.series.dt method)": [[966, "polars.Series.dt.date"]], "datetime() (polars.series.dt method)": [[967, "polars.Series.dt.datetime"]], "day() (polars.series.dt method)": [[968, "polars.Series.dt.day"]], "days() (polars.series.dt method)": [[969, "polars.Series.dt.days"]], "dst_offset() (polars.series.dt method)": [[970, "polars.Series.dt.dst_offset"]], "epoch() (polars.series.dt method)": [[971, "polars.Series.dt.epoch"]], "hour() (polars.series.dt method)": [[972, "polars.Series.dt.hour"]], "hours() (polars.series.dt method)": [[973, "polars.Series.dt.hours"]], "is_leap_year() (polars.series.dt method)": [[974, "polars.Series.dt.is_leap_year"]], "iso_year() (polars.series.dt method)": [[975, "polars.Series.dt.iso_year"]], "max() (polars.series.dt method)": [[976, "polars.Series.dt.max"]], "mean() (polars.series.dt method)": [[977, "polars.Series.dt.mean"]], "median() (polars.series.dt method)": [[978, "polars.Series.dt.median"]], "microsecond() (polars.series.dt method)": [[979, "polars.Series.dt.microsecond"]], "microseconds() (polars.series.dt method)": [[980, "polars.Series.dt.microseconds"]], "millennium() (polars.series.dt method)": [[981, "polars.Series.dt.millennium"]], "millisecond() (polars.series.dt method)": [[982, "polars.Series.dt.millisecond"]], "milliseconds() (polars.series.dt method)": [[983, "polars.Series.dt.milliseconds"]], "min() (polars.series.dt method)": [[984, "polars.Series.dt.min"]], "minute() (polars.series.dt method)": [[985, "polars.Series.dt.minute"]], "minutes() (polars.series.dt method)": [[986, "polars.Series.dt.minutes"]], "month() (polars.series.dt method)": [[987, "polars.Series.dt.month"]], "month_end() (polars.series.dt method)": [[988, "polars.Series.dt.month_end"]], "month_start() (polars.series.dt method)": [[989, "polars.Series.dt.month_start"]], "nanosecond() (polars.series.dt method)": [[990, "polars.Series.dt.nanosecond"]], "nanoseconds() (polars.series.dt method)": [[991, "polars.Series.dt.nanoseconds"]], "offset_by() (polars.series.dt method)": [[992, "polars.Series.dt.offset_by"]], "ordinal_day() (polars.series.dt method)": [[993, "polars.Series.dt.ordinal_day"]], "quarter() (polars.series.dt method)": [[994, "polars.Series.dt.quarter"]], "replace_time_zone() (polars.series.dt method)": [[995, "polars.Series.dt.replace_time_zone"]], "round() (polars.series.dt method)": [[996, "polars.Series.dt.round"]], "second() (polars.series.dt method)": [[997, "polars.Series.dt.second"]], "seconds() (polars.series.dt method)": [[998, "polars.Series.dt.seconds"]], "strftime() (polars.series.dt method)": [[999, "polars.Series.dt.strftime"]], "time() (polars.series.dt method)": [[1000, "polars.Series.dt.time"]], "timestamp() (polars.series.dt method)": [[1001, "polars.Series.dt.timestamp"]], "to_string() (polars.series.dt method)": [[1002, "polars.Series.dt.to_string"]], "total_days() (polars.series.dt method)": [[1003, "polars.Series.dt.total_days"]], "total_hours() (polars.series.dt method)": [[1004, "polars.Series.dt.total_hours"]], "total_microseconds() (polars.series.dt method)": [[1005, "polars.Series.dt.total_microseconds"]], "total_milliseconds() (polars.series.dt method)": [[1006, "polars.Series.dt.total_milliseconds"]], "total_minutes() (polars.series.dt method)": [[1007, "polars.Series.dt.total_minutes"]], "total_nanoseconds() (polars.series.dt method)": [[1008, "polars.Series.dt.total_nanoseconds"]], "total_seconds() (polars.series.dt method)": [[1009, "polars.Series.dt.total_seconds"]], "truncate() (polars.series.dt method)": [[1010, "polars.Series.dt.truncate"]], "week() (polars.series.dt method)": [[1011, "polars.Series.dt.week"]], "weekday() (polars.series.dt method)": [[1012, "polars.Series.dt.weekday"]], "with_time_unit() (polars.series.dt method)": [[1013, "polars.Series.dt.with_time_unit"]], "year() (polars.series.dt method)": [[1014, "polars.Series.dt.year"]], "dtype (polars.series attribute)": [[1015, "polars.Series.dtype"]], "entropy() (polars.series method)": [[1016, "polars.Series.entropy"]], "equals() (polars.series method)": [[1017, "polars.Series.equals"]], "estimated_size() (polars.series method)": [[1018, "polars.Series.estimated_size"]], "ewm_mean() (polars.series method)": [[1019, "polars.Series.ewm_mean"]], "ewm_std() (polars.series method)": [[1020, "polars.Series.ewm_std"]], "ewm_var() (polars.series method)": [[1021, "polars.Series.ewm_var"]], "exp() (polars.series method)": [[1022, "polars.Series.exp"]], "explode() (polars.series method)": [[1023, "polars.Series.explode"]], "extend() (polars.series method)": [[1024, "polars.Series.extend"]], "extend_constant() (polars.series method)": [[1025, "polars.Series.extend_constant"]], "fill_nan() (polars.series method)": [[1026, "polars.Series.fill_nan"]], "fill_null() (polars.series method)": [[1027, "polars.Series.fill_null"]], "filter() (polars.series method)": [[1028, "polars.Series.filter"]], "flags (polars.series attribute)": [[1029, "polars.Series.flags"]], "floor() (polars.series method)": [[1030, "polars.Series.floor"]], "gather() (polars.series method)": [[1031, "polars.Series.gather"]], "gather_every() (polars.series method)": [[1032, "polars.Series.gather_every"]], "get_chunks() (polars.series method)": [[1033, "polars.Series.get_chunks"]], "has_validity() (polars.series method)": [[1034, "polars.Series.has_validity"]], "hash() (polars.series method)": [[1035, "polars.Series.hash"]], "head() (polars.series method)": [[1036, "polars.Series.head"]], "hist() (polars.series method)": [[1037, "polars.Series.hist"]], "implode() (polars.series method)": [[1038, "polars.Series.implode"]], "inner_dtype (polars.series attribute)": [[1039, "polars.Series.inner_dtype"]], "interpolate() (polars.series method)": [[1040, "polars.Series.interpolate"]], "is_between() (polars.series method)": [[1041, "polars.Series.is_between"]], "is_boolean() (polars.series method)": [[1042, "polars.Series.is_boolean"]], "is_duplicated() (polars.series method)": [[1043, "polars.Series.is_duplicated"]], "is_empty() (polars.series method)": [[1044, "polars.Series.is_empty"]], "is_finite() (polars.series method)": [[1045, "polars.Series.is_finite"]], "is_first() (polars.series method)": [[1046, "polars.Series.is_first"]], "is_first_distinct() (polars.series method)": [[1047, "polars.Series.is_first_distinct"]], "is_float() (polars.series method)": [[1048, "polars.Series.is_float"]], "is_in() (polars.series method)": [[1049, "polars.Series.is_in"]], "is_infinite() (polars.series method)": [[1050, "polars.Series.is_infinite"]], "is_integer() (polars.series method)": [[1051, "polars.Series.is_integer"]], "is_last() (polars.series method)": [[1052, "polars.Series.is_last"]], "is_last_distinct() (polars.series method)": [[1053, "polars.Series.is_last_distinct"]], "is_nan() (polars.series method)": [[1054, "polars.Series.is_nan"]], "is_not_nan() (polars.series method)": [[1055, "polars.Series.is_not_nan"]], "is_not_null() (polars.series method)": [[1056, "polars.Series.is_not_null"]], "is_null() (polars.series method)": [[1057, "polars.Series.is_null"]], "is_numeric() (polars.series method)": [[1058, "polars.Series.is_numeric"]], "is_sorted() (polars.series method)": [[1059, "polars.Series.is_sorted"]], "is_temporal() (polars.series method)": [[1060, "polars.Series.is_temporal"]], "is_unique() (polars.series method)": [[1061, "polars.Series.is_unique"]], "is_utf8() (polars.series method)": [[1062, "polars.Series.is_utf8"]], "item() (polars.series method)": [[1063, "polars.Series.item"]], "kurtosis() (polars.series method)": [[1064, "polars.Series.kurtosis"]], "len() (polars.series method)": [[1065, "polars.Series.len"]], "limit() (polars.series method)": [[1066, "polars.Series.limit"]], "all() (polars.series.list method)": [[1067, "polars.Series.list.all"]], "any() (polars.series.list method)": [[1068, "polars.Series.list.any"]], "arg_max() (polars.series.list method)": [[1069, "polars.Series.list.arg_max"]], "arg_min() (polars.series.list method)": [[1070, "polars.Series.list.arg_min"]], "concat() (polars.series.list method)": [[1071, "polars.Series.list.concat"]], "contains() (polars.series.list method)": [[1072, "polars.Series.list.contains"]], "count_match() (polars.series.list method)": [[1073, "polars.Series.list.count_match"]], "count_matches() (polars.series.list method)": [[1074, "polars.Series.list.count_matches"]], "diff() (polars.series.list method)": [[1075, "polars.Series.list.diff"]], "drop_nulls() (polars.series.list method)": [[1076, "polars.Series.list.drop_nulls"]], "eval() (polars.series.list method)": [[1077, "polars.Series.list.eval"]], "explode() (polars.series.list method)": [[1078, "polars.Series.list.explode"]], "first() (polars.series.list method)": [[1079, "polars.Series.list.first"]], "gather() (polars.series.list method)": [[1080, "polars.Series.list.gather"]], "get() (polars.series.list method)": [[1081, "polars.Series.list.get"]], "head() (polars.series.list method)": [[1082, "polars.Series.list.head"]], "join() (polars.series.list method)": [[1083, "polars.Series.list.join"]], "last() (polars.series.list method)": [[1084, "polars.Series.list.last"]], "len() (polars.series.list method)": [[1085, "polars.Series.list.len"]], "lengths() (polars.series.list method)": [[1086, "polars.Series.list.lengths"]], "max() (polars.series.list method)": [[1087, "polars.Series.list.max"]], "mean() (polars.series.list method)": [[1088, "polars.Series.list.mean"]], "min() (polars.series.list method)": [[1089, "polars.Series.list.min"]], "reverse() (polars.series.list method)": [[1090, "polars.Series.list.reverse"]], "sample() (polars.series.list method)": [[1091, "polars.Series.list.sample"]], "set_difference() (polars.series.list method)": [[1092, "polars.Series.list.set_difference"]], "set_intersection() (polars.series.list method)": [[1093, "polars.Series.list.set_intersection"]], "set_symmetric_difference() (polars.series.list method)": [[1094, "polars.Series.list.set_symmetric_difference"]], "set_union() (polars.series.list method)": [[1095, "polars.Series.list.set_union"]], "shift() (polars.series.list method)": [[1096, "polars.Series.list.shift"]], "slice() (polars.series.list method)": [[1097, "polars.Series.list.slice"]], "sort() (polars.series.list method)": [[1098, "polars.Series.list.sort"]], "sum() (polars.series.list method)": [[1099, "polars.Series.list.sum"]], "tail() (polars.series.list method)": [[1100, "polars.Series.list.tail"]], "take() (polars.series.list method)": [[1101, "polars.Series.list.take"]], "to_array() (polars.series.list method)": [[1102, "polars.Series.list.to_array"]], "to_struct() (polars.series.list method)": [[1103, "polars.Series.list.to_struct"]], "unique() (polars.series.list method)": [[1104, "polars.Series.list.unique"]], "log() (polars.series method)": [[1105, "polars.Series.log"]], "log10() (polars.series method)": [[1106, "polars.Series.log10"]], "log1p() (polars.series method)": [[1107, "polars.Series.log1p"]], "lower_bound() (polars.series method)": [[1108, "polars.Series.lower_bound"]], "map_dict() (polars.series method)": [[1109, "polars.Series.map_dict"]], "map_elements() (polars.series method)": [[1110, "polars.Series.map_elements"]], "max() (polars.series method)": [[1111, "polars.Series.max"]], "mean() (polars.series method)": [[1112, "polars.Series.mean"]], "median() (polars.series method)": [[1113, "polars.Series.median"]], "min() (polars.series method)": [[1114, "polars.Series.min"]], "mode() (polars.series method)": [[1115, "polars.Series.mode"]], "n_chunks() (polars.series method)": [[1116, "polars.Series.n_chunks"]], "n_unique() (polars.series method)": [[1117, "polars.Series.n_unique"]], "name (polars.series attribute)": [[1118, "polars.Series.name"]], "nan_max() (polars.series method)": [[1119, "polars.Series.nan_max"]], "nan_min() (polars.series method)": [[1120, "polars.Series.nan_min"]], "new_from_index() (polars.series method)": [[1121, "polars.Series.new_from_index"]], "not_() (polars.series method)": [[1122, "polars.Series.not_"]], "null_count() (polars.series method)": [[1123, "polars.Series.null_count"]], "pct_change() (polars.series method)": [[1124, "polars.Series.pct_change"]], "peak_max() (polars.series method)": [[1125, "polars.Series.peak_max"]], "peak_min() (polars.series method)": [[1126, "polars.Series.peak_min"]], "product() (polars.series method)": [[1127, "polars.Series.product"]], "qcut() (polars.series method)": [[1128, "polars.Series.qcut"]], "quantile() (polars.series method)": [[1129, "polars.Series.quantile"]], "rank() (polars.series method)": [[1130, "polars.Series.rank"]], "rechunk() (polars.series method)": [[1131, "polars.Series.rechunk"]], "reinterpret() (polars.series method)": [[1132, "polars.Series.reinterpret"]], "rename() (polars.series method)": [[1133, "polars.Series.rename"]], "replace() (polars.series method)": [[1134, "polars.Series.replace"]], "reshape() (polars.series method)": [[1135, "polars.Series.reshape"]], "reverse() (polars.series method)": [[1136, "polars.Series.reverse"]], "rle() (polars.series method)": [[1137, "polars.Series.rle"]], "rle_id() (polars.series method)": [[1138, "polars.Series.rle_id"]], "rolling_apply() (polars.series method)": [[1139, "polars.Series.rolling_apply"]], "rolling_map() (polars.series method)": [[1140, "polars.Series.rolling_map"]], "rolling_max() (polars.series method)": [[1141, "polars.Series.rolling_max"]], "rolling_mean() (polars.series method)": [[1142, "polars.Series.rolling_mean"]], "rolling_median() (polars.series method)": [[1143, "polars.Series.rolling_median"]], "rolling_min() (polars.series method)": [[1144, "polars.Series.rolling_min"]], "rolling_quantile() (polars.series method)": [[1145, "polars.Series.rolling_quantile"]], "rolling_skew() (polars.series method)": [[1146, "polars.Series.rolling_skew"]], "rolling_std() (polars.series method)": [[1147, "polars.Series.rolling_std"]], "rolling_sum() (polars.series method)": [[1148, "polars.Series.rolling_sum"]], "rolling_var() (polars.series method)": [[1149, "polars.Series.rolling_var"]], "round() (polars.series method)": [[1150, "polars.Series.round"]], "round_sig_figs() (polars.series method)": [[1151, "polars.Series.round_sig_figs"]], "sample() (polars.series method)": [[1152, "polars.Series.sample"]], "scatter() (polars.series method)": [[1153, "polars.Series.scatter"]], "search_sorted() (polars.series method)": [[1154, "polars.Series.search_sorted"]], "series_equal() (polars.series method)": [[1155, "polars.Series.series_equal"]], "set() (polars.series method)": [[1156, "polars.Series.set"]], "set_at_idx() (polars.series method)": [[1157, "polars.Series.set_at_idx"]], "set_sorted() (polars.series method)": [[1158, "polars.Series.set_sorted"]], "shape (polars.series attribute)": [[1159, "polars.Series.shape"]], "shift() (polars.series method)": [[1160, "polars.Series.shift"]], "shift_and_fill() (polars.series method)": [[1161, "polars.Series.shift_and_fill"]], "shrink_dtype() (polars.series method)": [[1162, "polars.Series.shrink_dtype"]], "shrink_to_fit() (polars.series method)": [[1163, "polars.Series.shrink_to_fit"]], "shuffle() (polars.series method)": [[1164, "polars.Series.shuffle"]], "sign() (polars.series method)": [[1165, "polars.Series.sign"]], "sin() (polars.series method)": [[1166, "polars.Series.sin"]], "sinh() (polars.series method)": [[1167, "polars.Series.sinh"]], "skew() (polars.series method)": [[1168, "polars.Series.skew"]], "slice() (polars.series method)": [[1169, "polars.Series.slice"]], "sort() (polars.series method)": [[1170, "polars.Series.sort"]], "sqrt() (polars.series method)": [[1171, "polars.Series.sqrt"]], "std() (polars.series method)": [[1172, "polars.Series.std"]], "concat() (polars.series.str method)": [[1173, "polars.Series.str.concat"]], "contains() (polars.series.str method)": [[1174, "polars.Series.str.contains"]], "contains_any() (polars.series.str method)": [[1175, "polars.Series.str.contains_any"]], "count_match() (polars.series.str method)": [[1176, "polars.Series.str.count_match"]], "count_matches() (polars.series.str method)": [[1177, "polars.Series.str.count_matches"]], "decode() (polars.series.str method)": [[1178, "polars.Series.str.decode"]], "encode() (polars.series.str method)": [[1179, "polars.Series.str.encode"]], "ends_with() (polars.series.str method)": [[1180, "polars.Series.str.ends_with"]], "explode() (polars.series.str method)": [[1181, "polars.Series.str.explode"]], "extract() (polars.series.str method)": [[1182, "polars.Series.str.extract"]], "extract_all() (polars.series.str method)": [[1183, "polars.Series.str.extract_all"]], "extract_groups() (polars.series.str method)": [[1184, "polars.Series.str.extract_groups"]], "find() (polars.series.str method)": [[1185, "polars.Series.str.find"]], "json_decode() (polars.series.str method)": [[1186, "polars.Series.str.json_decode"]], "json_extract() (polars.series.str method)": [[1187, "polars.Series.str.json_extract"]], "json_path_match() (polars.series.str method)": [[1188, "polars.Series.str.json_path_match"]], "len_bytes() (polars.series.str method)": [[1189, "polars.Series.str.len_bytes"]], "len_chars() (polars.series.str method)": [[1190, "polars.Series.str.len_chars"]], "lengths() (polars.series.str method)": [[1191, "polars.Series.str.lengths"]], "ljust() (polars.series.str method)": [[1192, "polars.Series.str.ljust"]], "lstrip() (polars.series.str method)": [[1193, "polars.Series.str.lstrip"]], "n_chars() (polars.series.str method)": [[1194, "polars.Series.str.n_chars"]], "pad_end() (polars.series.str method)": [[1195, "polars.Series.str.pad_end"]], "pad_start() (polars.series.str method)": [[1196, "polars.Series.str.pad_start"]], "parse_int() (polars.series.str method)": [[1197, "polars.Series.str.parse_int"]], "replace() (polars.series.str method)": [[1198, "polars.Series.str.replace"]], "replace_all() (polars.series.str method)": [[1199, "polars.Series.str.replace_all"]], "replace_many() (polars.series.str method)": [[1200, "polars.Series.str.replace_many"]], "reverse() (polars.series.str method)": [[1201, "polars.Series.str.reverse"]], "rjust() (polars.series.str method)": [[1202, "polars.Series.str.rjust"]], "rstrip() (polars.series.str method)": [[1203, "polars.Series.str.rstrip"]], "slice() (polars.series.str method)": [[1204, "polars.Series.str.slice"]], "split() (polars.series.str method)": [[1205, "polars.Series.str.split"]], "split_exact() (polars.series.str method)": [[1206, "polars.Series.str.split_exact"]], "splitn() (polars.series.str method)": [[1207, "polars.Series.str.splitn"]], "starts_with() (polars.series.str method)": [[1208, "polars.Series.str.starts_with"]], "strip() (polars.series.str method)": [[1209, "polars.Series.str.strip"]], "strip_chars() (polars.series.str method)": [[1210, "polars.Series.str.strip_chars"]], "strip_chars_end() (polars.series.str method)": [[1211, "polars.Series.str.strip_chars_end"]], "strip_chars_start() (polars.series.str method)": [[1212, "polars.Series.str.strip_chars_start"]], "strip_prefix() (polars.series.str method)": [[1213, "polars.Series.str.strip_prefix"]], "strip_suffix() (polars.series.str method)": [[1214, "polars.Series.str.strip_suffix"]], "strptime() (polars.series.str method)": [[1215, "polars.Series.str.strptime"]], "to_date() (polars.series.str method)": [[1216, "polars.Series.str.to_date"]], "to_datetime() (polars.series.str method)": [[1217, "polars.Series.str.to_datetime"]], "to_decimal() (polars.series.str method)": [[1218, "polars.Series.str.to_decimal"]], "to_integer() (polars.series.str method)": [[1219, "polars.Series.str.to_integer"]], "to_lowercase() (polars.series.str method)": [[1220, "polars.Series.str.to_lowercase"]], "to_time() (polars.series.str method)": [[1221, "polars.Series.str.to_time"]], "to_titlecase() (polars.series.str method)": [[1222, "polars.Series.str.to_titlecase"]], "to_uppercase() (polars.series.str method)": [[1223, "polars.Series.str.to_uppercase"]], "zfill() (polars.series.str method)": [[1224, "polars.Series.str.zfill"]], "field() (polars.series.struct method)": [[1225, "polars.Series.struct.field"]], "fields (polars.series.struct attribute)": [[1226, "polars.Series.struct.fields"]], "json_encode() (polars.series.struct method)": [[1227, "polars.Series.struct.json_encode"]], "rename_fields() (polars.series.struct method)": [[1228, "polars.Series.struct.rename_fields"]], "schema (polars.series.struct attribute)": [[1229, "polars.Series.struct.schema"]], "unnest() (polars.series.struct method)": [[1230, "polars.Series.struct.unnest"]], "sum() (polars.series method)": [[1231, "polars.Series.sum"]], "tail() (polars.series method)": [[1232, "polars.Series.tail"]], "take() (polars.series method)": [[1233, "polars.Series.take"]], "take_every() (polars.series method)": [[1234, "polars.Series.take_every"]], "tan() (polars.series method)": [[1235, "polars.Series.tan"]], "tanh() (polars.series method)": [[1236, "polars.Series.tanh"]], "to_arrow() (polars.series method)": [[1237, "polars.Series.to_arrow"]], "to_dummies() (polars.series method)": [[1238, "polars.Series.to_dummies"]], "to_frame() (polars.series method)": [[1239, "polars.Series.to_frame"]], "to_init_repr() (polars.series method)": [[1240, "polars.Series.to_init_repr"]], "to_list() (polars.series method)": [[1241, "polars.Series.to_list"]], "to_numpy() (polars.series method)": [[1242, "polars.Series.to_numpy"]], "to_pandas() (polars.series method)": [[1243, "polars.Series.to_pandas"]], "to_physical() (polars.series method)": [[1244, "polars.Series.to_physical"]], "top_k() (polars.series method)": [[1245, "polars.Series.top_k"]], "unique() (polars.series method)": [[1246, "polars.Series.unique"]], "unique_counts() (polars.series method)": [[1247, "polars.Series.unique_counts"]], "upper_bound() (polars.series method)": [[1248, "polars.Series.upper_bound"]], "value_counts() (polars.series method)": [[1249, "polars.Series.value_counts"]], "var() (polars.series method)": [[1250, "polars.Series.var"]], "view() (polars.series method)": [[1251, "polars.Series.view"]], "zip_with() (polars.series method)": [[1252, "polars.Series.zip_with"]], "sqlcontext (class in polars)": [[1269, "polars.SQLContext"]], "__enter__() (polars.sqlcontext method)": [[1269, "polars.SQLContext.__enter__"]], "__exit__() (polars.sqlcontext method)": [[1269, "polars.SQLContext.__exit__"]], "__init__() (polars.sqlcontext method)": [[1269, "polars.SQLContext.__init__"]]}})