Search.setIndex({"docnames": ["index", "reference/api", "reference/api/polars.Array", "reference/api/polars.Binary", "reference/api/polars.Boolean", "reference/api/polars.Categorical", "reference/api/polars.Config.activate_decimals", "reference/api/polars.Config.load", "reference/api/polars.Config.load_from_file", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.save_to_file", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_auto_structify", "reference/api/polars.Config.set_decimal_separator", "reference/api/polars.Config.set_float_precision", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_fmt_table_cell_list_len", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cell_numeric_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_thousands_separator", "reference/api/polars.Config.set_trim_decimal_zeros", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_delta", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_ipc_stream", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.DataType", "reference/api/polars.Date", "reference/api/polars.Datetime", "reference/api/polars.Decimal", "reference/api/polars.Duration", "reference/api/polars.Enum", "reference/api/polars.Float32", "reference/api/polars.Float64", "reference/api/polars.Int16", "reference/api/polars.Int32", "reference/api/polars.Int64", "reference/api/polars.Int8", "reference/api/polars.LazyFrame.sink_csv", "reference/api/polars.LazyFrame.sink_ipc", "reference/api/polars.LazyFrame.sink_ndjson", "reference/api/polars.LazyFrame.sink_parquet", "reference/api/polars.List", "reference/api/polars.Null", "reference/api/polars.Object", "reference/api/polars.SQLContext.execute", "reference/api/polars.SQLContext.register", "reference/api/polars.SQLContext.register_globals", "reference/api/polars.SQLContext.register_many", "reference/api/polars.SQLContext.tables", "reference/api/polars.SQLContext.unregister", "reference/api/polars.String", "reference/api/polars.StringCache", "reference/api/polars.Struct", "reference/api/polars.Time", "reference/api/polars.UInt16", "reference/api/polars.UInt32", "reference/api/polars.UInt64", "reference/api/polars.UInt8", "reference/api/polars.Unknown", "reference/api/polars.Utf8", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.collect_all_async", "reference/api/polars.concat", "reference/api/polars.disable_string_cache", "reference/api/polars.enable_string_cache", "reference/api/polars.exceptions.ArrowError", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.PolarsError", "reference/api/polars.exceptions.PolarsPanicError", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.read_avro", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_database_uri", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_ipc_stream", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_ods", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_iceberg", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.set_random_seed", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_frame_not_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.assert_series_not_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.create_list_strategy", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.load_profile", "reference/api/polars.testing.parametric.series", "reference/api/polars.testing.parametric.set_profile", "reference/api/polars.threadpool_size", "reference/api/polars.using_string_cache", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.apply", "reference/dataframe/api/polars.DataFrame.approx_n_unique", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.cast", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.count", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.equals", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.find_idx_by_name", "reference/dataframe/api/polars.DataFrame.flags", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.frame_equal", "reference/dataframe/api/polars.DataFrame.gather_every", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_column_index", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.group_by", "reference/dataframe/api/polars.DataFrame.group_by_dynamic", "reference/dataframe/api/polars.DataFrame.group_by_rolling", "reference/dataframe/api/polars.DataFrame.groupby", "reference/dataframe/api/polars.DataFrame.groupby_dynamic", "reference/dataframe/api/polars.DataFrame.groupby_rolling", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_at_idx", "reference/dataframe/api/polars.DataFrame.insert_column", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_columns", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.map_rows", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.max_horizontal", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.mean_horizontal", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.min_horizontal", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace", "reference/dataframe/api/polars.DataFrame.replace_at_idx", "reference/dataframe/api/polars.DataFrame.replace_column", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.rolling", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.rows_by_key", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.select_seq", "reference/dataframe/api/polars.DataFrame.set_sorted", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shift_and_fill", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.sum_horizontal", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.take_every", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_columns_seq", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.DataFrame.with_row_index", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.apply", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/group_by", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/dataframe/plot", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.apply", "reference/expressions/api/polars.Expr.approx_n_unique", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.all", "reference/expressions/api/polars.Expr.arr.any", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.contains", "reference/expressions/api/polars.Expr.arr.count_matches", "reference/expressions/api/polars.Expr.arr.first", "reference/expressions/api/polars.Expr.arr.get", "reference/expressions/api/polars.Expr.arr.join", "reference/expressions/api/polars.Expr.arr.last", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.to_list", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.get_categories", "reference/expressions/api/polars.Expr.cat.set_ordering", "reference/expressions/api/polars.Expr.cbrt", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.clip_max", "reference/expressions/api/polars.Expr.clip_min", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.cot", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cum_count", "reference/expressions/api/polars.Expr.cum_max", "reference/expressions/api/polars.Expr.cum_min", "reference/expressions/api/polars.Expr.cum_prod", "reference/expressions/api/polars.Expr.cum_sum", "reference/expressions/api/polars.Expr.cumcount", "reference/expressions/api/polars.Expr.cummax", "reference/expressions/api/polars.Expr.cummin", "reference/expressions/api/polars.Expr.cumprod", "reference/expressions/api/polars.Expr.cumsum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.cut", "reference/expressions/api/polars.Expr.degrees", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.base_utc_offset", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.days", "reference/expressions/api/polars.Expr.dt.dst_offset", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.hours", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.microseconds", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.milliseconds", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.minutes", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.month_end", "reference/expressions/api/polars.Expr.dt.month_start", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.nanoseconds", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.seconds", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.to_string", "reference/expressions/api/polars.Expr.dt.total_days", "reference/expressions/api/polars.Expr.dt.total_hours", "reference/expressions/api/polars.Expr.dt.total_microseconds", "reference/expressions/api/polars.Expr.dt.total_milliseconds", "reference/expressions/api/polars.Expr.dt.total_minutes", "reference/expressions/api/polars.Expr.dt.total_nanoseconds", "reference/expressions/api/polars.Expr.dt.total_seconds", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.eq_missing", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.from_json", "reference/expressions/api/polars.Expr.gather", "reference/expressions/api/polars.Expr.gather_every", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.get", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.hist", "reference/expressions/api/polars.Expr.implode", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first", "reference/expressions/api/polars.Expr.is_first_distinct", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_last", "reference/expressions/api/polars.Expr.is_last_distinct", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.keep_name", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list.all", "reference/expressions/api/polars.Expr.list.any", "reference/expressions/api/polars.Expr.list.arg_max", "reference/expressions/api/polars.Expr.list.arg_min", "reference/expressions/api/polars.Expr.list.concat", "reference/expressions/api/polars.Expr.list.contains", "reference/expressions/api/polars.Expr.list.count_match", "reference/expressions/api/polars.Expr.list.count_matches", "reference/expressions/api/polars.Expr.list.diff", "reference/expressions/api/polars.Expr.list.drop_nulls", "reference/expressions/api/polars.Expr.list.eval", "reference/expressions/api/polars.Expr.list.explode", "reference/expressions/api/polars.Expr.list.first", "reference/expressions/api/polars.Expr.list.gather", "reference/expressions/api/polars.Expr.list.get", "reference/expressions/api/polars.Expr.list.head", "reference/expressions/api/polars.Expr.list.join", "reference/expressions/api/polars.Expr.list.last", "reference/expressions/api/polars.Expr.list.len", "reference/expressions/api/polars.Expr.list.lengths", "reference/expressions/api/polars.Expr.list.max", "reference/expressions/api/polars.Expr.list.mean", "reference/expressions/api/polars.Expr.list.min", "reference/expressions/api/polars.Expr.list.reverse", "reference/expressions/api/polars.Expr.list.sample", "reference/expressions/api/polars.Expr.list.set_difference", "reference/expressions/api/polars.Expr.list.set_intersection", "reference/expressions/api/polars.Expr.list.set_symmetric_difference", "reference/expressions/api/polars.Expr.list.set_union", "reference/expressions/api/polars.Expr.list.shift", "reference/expressions/api/polars.Expr.list.slice", "reference/expressions/api/polars.Expr.list.sort", "reference/expressions/api/polars.Expr.list.sum", "reference/expressions/api/polars.Expr.list.tail", "reference/expressions/api/polars.Expr.list.take", "reference/expressions/api/polars.Expr.list.to_array", "reference/expressions/api/polars.Expr.list.to_struct", "reference/expressions/api/polars.Expr.list.unique", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map", "reference/expressions/api/polars.Expr.map_alias", "reference/expressions/api/polars.Expr.map_batches", "reference/expressions/api/polars.Expr.map_dict", "reference/expressions/api/polars.Expr.map_elements", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.eq", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.ne", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.tree_format", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.meta.write_json", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.name.keep", "reference/expressions/api/polars.Expr.name.map", "reference/expressions/api/polars.Expr.name.prefix", "reference/expressions/api/polars.Expr.name.suffix", "reference/expressions/api/polars.Expr.name.to_lowercase", "reference/expressions/api/polars.Expr.name.to_uppercase", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.ne_missing", "reference/expressions/api/polars.Expr.not_", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.peak_max", "reference/expressions/api/polars.Expr.peak_min", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.prefix", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.qcut", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.radians", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.replace", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rle", "reference/expressions/api/polars.Expr.rle_id", "reference/expressions/api/polars.Expr.rolling", "reference/expressions/api/polars.Expr.rolling_apply", "reference/expressions/api/polars.Expr.rolling_map", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.round_sig_figs", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shift_and_fill", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.contains_any", "reference/expressions/api/polars.Expr.str.count_match", "reference/expressions/api/polars.Expr.str.count_matches", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.extract_groups", "reference/expressions/api/polars.Expr.str.find", "reference/expressions/api/polars.Expr.str.json_decode", "reference/expressions/api/polars.Expr.str.json_extract", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.len_bytes", "reference/expressions/api/polars.Expr.str.len_chars", "reference/expressions/api/polars.Expr.str.lengths", "reference/expressions/api/polars.Expr.str.ljust", "reference/expressions/api/polars.Expr.str.lstrip", "reference/expressions/api/polars.Expr.str.n_chars", "reference/expressions/api/polars.Expr.str.pad_end", "reference/expressions/api/polars.Expr.str.pad_start", "reference/expressions/api/polars.Expr.str.parse_int", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.replace_many", "reference/expressions/api/polars.Expr.str.reverse", "reference/expressions/api/polars.Expr.str.rjust", "reference/expressions/api/polars.Expr.str.rstrip", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip", "reference/expressions/api/polars.Expr.str.strip_chars", "reference/expressions/api/polars.Expr.str.strip_chars_end", "reference/expressions/api/polars.Expr.str.strip_chars_start", "reference/expressions/api/polars.Expr.str.strip_prefix", "reference/expressions/api/polars.Expr.str.strip_suffix", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.to_date", "reference/expressions/api/polars.Expr.str.to_datetime", "reference/expressions/api/polars.Expr.str.to_decimal", "reference/expressions/api/polars.Expr.str.to_integer", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_time", "reference/expressions/api/polars.Expr.str.to_titlecase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.json_encode", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.suffix", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.take", "reference/expressions/api/polars.Expr.take_every", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.all_horizontal", "reference/expressions/api/polars.any", "reference/expressions/api/polars.any_horizontal", "reference/expressions/api/polars.apply", "reference/expressions/api/polars.approx_n_unique", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arctan2", "reference/expressions/api/polars.arctan2d", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.arg_where", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cum_count", "reference/expressions/api/polars.cum_fold", "reference/expressions/api/polars.cum_reduce", "reference/expressions/api/polars.cum_sum", "reference/expressions/api/polars.cum_sum_horizontal", "reference/expressions/api/polars.cumfold", "reference/expressions/api/polars.cumreduce", "reference/expressions/api/polars.cumsum", "reference/expressions/api/polars.cumsum_horizontal", "reference/expressions/api/polars.date", "reference/expressions/api/polars.date_range", "reference/expressions/api/polars.date_ranges", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.datetime_range", "reference/expressions/api/polars.datetime_ranges", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.implode", "reference/expressions/api/polars.int_range", "reference/expressions/api/polars.int_ranges", "reference/expressions/api/polars.last", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map", "reference/expressions/api/polars.map_batches", "reference/expressions/api/polars.map_groups", "reference/expressions/api/polars.max", "reference/expressions/api/polars.max_horizontal", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.min_horizontal", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.ones", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.rolling_corr", "reference/expressions/api/polars.rolling_cov", "reference/expressions/api/polars.select", "reference/expressions/api/polars.sql_expr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.sum_horizontal", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.time", "reference/expressions/api/polars.time_range", "reference/expressions/api/polars.time_ranges", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/api/polars.zeros", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/col", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/name", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.cast", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.collect_async", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.count", "reference/lazyframe/api/polars.LazyFrame.deserialize", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fetch", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.gather_every", "reference/lazyframe/api/polars.LazyFrame.group_by", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic", "reference/lazyframe/api/polars.LazyFrame.group_by_rolling", "reference/lazyframe/api/polars.LazyFrame.groupby", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map", "reference/lazyframe/api/polars.LazyFrame.map_batches", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.null_count", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.rolling", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.select_seq", "reference/lazyframe/api/polars.LazyFrame.serialize", "reference/lazyframe/api/polars.LazyFrame.set_sorted", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.take_every", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.with_row_index", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.apply", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/group_by", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/selectors", "reference/series/aggregation", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.apply", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr.all", "reference/series/api/polars.Series.arr.any", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.contains", "reference/series/api/polars.Series.arr.count_matches", "reference/series/api/polars.Series.arr.first", "reference/series/api/polars.Series.arr.get", "reference/series/api/polars.Series.arr.join", "reference/series/api/polars.Series.arr.last", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.to_list", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat.get_categories", "reference/series/api/polars.Series.cat.is_local", "reference/series/api/polars.Series.cat.set_ordering", "reference/series/api/polars.Series.cat.to_local", "reference/series/api/polars.Series.cat.uses_lexical_ordering", "reference/series/api/polars.Series.cbrt", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clip_max", "reference/series/api/polars.Series.clip_min", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cot", "reference/series/api/polars.Series.cum_max", "reference/series/api/polars.Series.cum_min", "reference/series/api/polars.Series.cum_prod", "reference/series/api/polars.Series.cum_sum", "reference/series/api/polars.Series.cummax", "reference/series/api/polars.Series.cummin", "reference/series/api/polars.Series.cumprod", "reference/series/api/polars.Series.cumsum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt.base_utc_offset", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.days", "reference/series/api/polars.Series.dt.dst_offset", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.hours", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.microseconds", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.milliseconds", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.minutes", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.month_end", "reference/series/api/polars.Series.dt.month_start", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.nanoseconds", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.seconds", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.to_string", "reference/series/api/polars.Series.dt.total_days", "reference/series/api/polars.Series.dt.total_hours", "reference/series/api/polars.Series.dt.total_microseconds", "reference/series/api/polars.Series.dt.total_milliseconds", "reference/series/api/polars.Series.dt.total_minutes", "reference/series/api/polars.Series.dt.total_nanoseconds", "reference/series/api/polars.Series.dt.total_seconds", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.equals", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.gather", "reference/series/api/polars.Series.gather_every", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.implode", "reference/series/api/polars.Series.inner_dtype", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_boolean", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first", "reference/series/api/polars.Series.is_first_distinct", "reference/series/api/polars.Series.is_float", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_integer", "reference/series/api/polars.Series.is_last", "reference/series/api/polars.Series.is_last_distinct", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_numeric", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_temporal", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.is_utf8", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.list.all", "reference/series/api/polars.Series.list.any", "reference/series/api/polars.Series.list.arg_max", "reference/series/api/polars.Series.list.arg_min", "reference/series/api/polars.Series.list.concat", "reference/series/api/polars.Series.list.contains", "reference/series/api/polars.Series.list.count_match", "reference/series/api/polars.Series.list.count_matches", "reference/series/api/polars.Series.list.diff", "reference/series/api/polars.Series.list.drop_nulls", "reference/series/api/polars.Series.list.eval", "reference/series/api/polars.Series.list.explode", "reference/series/api/polars.Series.list.first", "reference/series/api/polars.Series.list.gather", "reference/series/api/polars.Series.list.get", "reference/series/api/polars.Series.list.head", "reference/series/api/polars.Series.list.join", "reference/series/api/polars.Series.list.last", "reference/series/api/polars.Series.list.len", "reference/series/api/polars.Series.list.lengths", "reference/series/api/polars.Series.list.max", "reference/series/api/polars.Series.list.mean", "reference/series/api/polars.Series.list.min", "reference/series/api/polars.Series.list.reverse", "reference/series/api/polars.Series.list.sample", "reference/series/api/polars.Series.list.set_difference", "reference/series/api/polars.Series.list.set_intersection", "reference/series/api/polars.Series.list.set_symmetric_difference", "reference/series/api/polars.Series.list.set_union", "reference/series/api/polars.Series.list.shift", "reference/series/api/polars.Series.list.slice", "reference/series/api/polars.Series.list.sort", "reference/series/api/polars.Series.list.sum", "reference/series/api/polars.Series.list.tail", "reference/series/api/polars.Series.list.take", "reference/series/api/polars.Series.list.to_array", "reference/series/api/polars.Series.list.to_struct", "reference/series/api/polars.Series.list.unique", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.map_dict", "reference/series/api/polars.Series.map_elements", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.not_", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.replace", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rle", "reference/series/api/polars.Series.rle_id", "reference/series/api/polars.Series.rolling_apply", "reference/series/api/polars.Series.rolling_map", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.round_sig_figs", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.scatter", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.series_equal", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_at_idx", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shift_and_fill", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.contains_any", "reference/series/api/polars.Series.str.count_match", "reference/series/api/polars.Series.str.count_matches", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.extract_groups", "reference/series/api/polars.Series.str.find", "reference/series/api/polars.Series.str.json_decode", "reference/series/api/polars.Series.str.json_extract", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.len_bytes", "reference/series/api/polars.Series.str.len_chars", "reference/series/api/polars.Series.str.lengths", "reference/series/api/polars.Series.str.ljust", "reference/series/api/polars.Series.str.lstrip", "reference/series/api/polars.Series.str.n_chars", "reference/series/api/polars.Series.str.pad_end", "reference/series/api/polars.Series.str.pad_start", "reference/series/api/polars.Series.str.parse_int", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.replace_many", "reference/series/api/polars.Series.str.reverse", "reference/series/api/polars.Series.str.rjust", "reference/series/api/polars.Series.str.rstrip", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip", "reference/series/api/polars.Series.str.strip_chars", "reference/series/api/polars.Series.str.strip_chars_end", "reference/series/api/polars.Series.str.strip_chars_start", "reference/series/api/polars.Series.str.strip_prefix", "reference/series/api/polars.Series.str.strip_suffix", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.to_date", "reference/series/api/polars.Series.str.to_datetime", "reference/series/api/polars.Series.str.to_decimal", "reference/series/api/polars.Series.str.to_integer", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_time", "reference/series/api/polars.Series.str.to_titlecase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.json_encode", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.schema", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.take", "reference/series/api/polars.Series.take_every", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.view", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/plot", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql", "reference/testing", "reference/utils"], "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Array.rst", "reference/api/polars.Binary.rst", "reference/api/polars.Boolean.rst", "reference/api/polars.Categorical.rst", "reference/api/polars.Config.activate_decimals.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.load_from_file.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.save_to_file.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_auto_structify.rst", "reference/api/polars.Config.set_decimal_separator.rst", "reference/api/polars.Config.set_float_precision.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_fmt_table_cell_list_len.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cell_numeric_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_thousands_separator.rst", "reference/api/polars.Config.set_trim_decimal_zeros.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_delta.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_ipc_stream.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.DataType.rst", "reference/api/polars.Date.rst", "reference/api/polars.Datetime.rst", "reference/api/polars.Decimal.rst", "reference/api/polars.Duration.rst", "reference/api/polars.Enum.rst", "reference/api/polars.Float32.rst", "reference/api/polars.Float64.rst", "reference/api/polars.Int16.rst", "reference/api/polars.Int32.rst", "reference/api/polars.Int64.rst", "reference/api/polars.Int8.rst", "reference/api/polars.LazyFrame.sink_csv.rst", "reference/api/polars.LazyFrame.sink_ipc.rst", "reference/api/polars.LazyFrame.sink_ndjson.rst", "reference/api/polars.LazyFrame.sink_parquet.rst", "reference/api/polars.List.rst", "reference/api/polars.Null.rst", "reference/api/polars.Object.rst", "reference/api/polars.SQLContext.execute.rst", "reference/api/polars.SQLContext.register.rst", "reference/api/polars.SQLContext.register_globals.rst", "reference/api/polars.SQLContext.register_many.rst", "reference/api/polars.SQLContext.tables.rst", "reference/api/polars.SQLContext.unregister.rst", "reference/api/polars.String.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.Struct.rst", "reference/api/polars.Time.rst", "reference/api/polars.UInt16.rst", "reference/api/polars.UInt32.rst", "reference/api/polars.UInt64.rst", "reference/api/polars.UInt8.rst", "reference/api/polars.Unknown.rst", "reference/api/polars.Utf8.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.collect_all_async.rst", "reference/api/polars.concat.rst", "reference/api/polars.disable_string_cache.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.exceptions.ArrowError.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.PolarsError.rst", "reference/api/polars.exceptions.PolarsPanicError.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_database_uri.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_ipc_stream.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_ods.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_iceberg.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.set_random_seed.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_frame_not_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.assert_series_not_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.create_list_strategy.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.load_profile.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.testing.parametric.set_profile.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.using_string_cache.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.apply.rst", "reference/dataframe/api/polars.DataFrame.approx_n_unique.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.cast.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.count.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.equals.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.find_idx_by_name.rst", "reference/dataframe/api/polars.DataFrame.flags.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.frame_equal.rst", "reference/dataframe/api/polars.DataFrame.gather_every.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_column_index.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.group_by.rst", "reference/dataframe/api/polars.DataFrame.group_by_dynamic.rst", "reference/dataframe/api/polars.DataFrame.group_by_rolling.rst", "reference/dataframe/api/polars.DataFrame.groupby.rst", "reference/dataframe/api/polars.DataFrame.groupby_dynamic.rst", "reference/dataframe/api/polars.DataFrame.groupby_rolling.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_at_idx.rst", "reference/dataframe/api/polars.DataFrame.insert_column.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_columns.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.map_rows.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.max_horizontal.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.mean_horizontal.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.min_horizontal.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace.rst", "reference/dataframe/api/polars.DataFrame.replace_at_idx.rst", "reference/dataframe/api/polars.DataFrame.replace_column.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.rolling.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.rows_by_key.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.select_seq.rst", "reference/dataframe/api/polars.DataFrame.set_sorted.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shift_and_fill.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.sum_horizontal.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.take_every.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_columns_seq.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.DataFrame.with_row_index.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.apply.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/group_by.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/dataframe/plot.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.apply.rst", "reference/expressions/api/polars.Expr.approx_n_unique.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.all.rst", "reference/expressions/api/polars.Expr.arr.any.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.contains.rst", "reference/expressions/api/polars.Expr.arr.count_matches.rst", "reference/expressions/api/polars.Expr.arr.first.rst", "reference/expressions/api/polars.Expr.arr.get.rst", "reference/expressions/api/polars.Expr.arr.join.rst", "reference/expressions/api/polars.Expr.arr.last.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.to_list.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.get_categories.rst", "reference/expressions/api/polars.Expr.cat.set_ordering.rst", "reference/expressions/api/polars.Expr.cbrt.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.clip_max.rst", "reference/expressions/api/polars.Expr.clip_min.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.cot.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cum_count.rst", "reference/expressions/api/polars.Expr.cum_max.rst", "reference/expressions/api/polars.Expr.cum_min.rst", "reference/expressions/api/polars.Expr.cum_prod.rst", "reference/expressions/api/polars.Expr.cum_sum.rst", "reference/expressions/api/polars.Expr.cumcount.rst", "reference/expressions/api/polars.Expr.cummax.rst", "reference/expressions/api/polars.Expr.cummin.rst", "reference/expressions/api/polars.Expr.cumprod.rst", "reference/expressions/api/polars.Expr.cumsum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.cut.rst", "reference/expressions/api/polars.Expr.degrees.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.base_utc_offset.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.days.rst", "reference/expressions/api/polars.Expr.dt.dst_offset.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.hours.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.microseconds.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.milliseconds.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.minutes.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.month_end.rst", "reference/expressions/api/polars.Expr.dt.month_start.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.seconds.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.to_string.rst", "reference/expressions/api/polars.Expr.dt.total_days.rst", "reference/expressions/api/polars.Expr.dt.total_hours.rst", "reference/expressions/api/polars.Expr.dt.total_microseconds.rst", "reference/expressions/api/polars.Expr.dt.total_milliseconds.rst", "reference/expressions/api/polars.Expr.dt.total_minutes.rst", "reference/expressions/api/polars.Expr.dt.total_nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.total_seconds.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.eq_missing.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.from_json.rst", "reference/expressions/api/polars.Expr.gather.rst", "reference/expressions/api/polars.Expr.gather_every.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.get.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.hist.rst", "reference/expressions/api/polars.Expr.implode.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first.rst", "reference/expressions/api/polars.Expr.is_first_distinct.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_last.rst", "reference/expressions/api/polars.Expr.is_last_distinct.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.keep_name.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.all.rst", "reference/expressions/api/polars.Expr.list.any.rst", "reference/expressions/api/polars.Expr.list.arg_max.rst", "reference/expressions/api/polars.Expr.list.arg_min.rst", "reference/expressions/api/polars.Expr.list.concat.rst", "reference/expressions/api/polars.Expr.list.contains.rst", "reference/expressions/api/polars.Expr.list.count_match.rst", "reference/expressions/api/polars.Expr.list.count_matches.rst", "reference/expressions/api/polars.Expr.list.diff.rst", "reference/expressions/api/polars.Expr.list.drop_nulls.rst", "reference/expressions/api/polars.Expr.list.eval.rst", "reference/expressions/api/polars.Expr.list.explode.rst", "reference/expressions/api/polars.Expr.list.first.rst", "reference/expressions/api/polars.Expr.list.gather.rst", "reference/expressions/api/polars.Expr.list.get.rst", "reference/expressions/api/polars.Expr.list.head.rst", "reference/expressions/api/polars.Expr.list.join.rst", "reference/expressions/api/polars.Expr.list.last.rst", "reference/expressions/api/polars.Expr.list.len.rst", "reference/expressions/api/polars.Expr.list.lengths.rst", "reference/expressions/api/polars.Expr.list.max.rst", "reference/expressions/api/polars.Expr.list.mean.rst", "reference/expressions/api/polars.Expr.list.min.rst", "reference/expressions/api/polars.Expr.list.reverse.rst", "reference/expressions/api/polars.Expr.list.sample.rst", "reference/expressions/api/polars.Expr.list.set_difference.rst", "reference/expressions/api/polars.Expr.list.set_intersection.rst", "reference/expressions/api/polars.Expr.list.set_symmetric_difference.rst", "reference/expressions/api/polars.Expr.list.set_union.rst", "reference/expressions/api/polars.Expr.list.shift.rst", "reference/expressions/api/polars.Expr.list.slice.rst", "reference/expressions/api/polars.Expr.list.sort.rst", "reference/expressions/api/polars.Expr.list.sum.rst", "reference/expressions/api/polars.Expr.list.tail.rst", "reference/expressions/api/polars.Expr.list.take.rst", "reference/expressions/api/polars.Expr.list.to_array.rst", "reference/expressions/api/polars.Expr.list.to_struct.rst", "reference/expressions/api/polars.Expr.list.unique.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map.rst", "reference/expressions/api/polars.Expr.map_alias.rst", "reference/expressions/api/polars.Expr.map_batches.rst", "reference/expressions/api/polars.Expr.map_dict.rst", "reference/expressions/api/polars.Expr.map_elements.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.eq.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.ne.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.tree_format.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.meta.write_json.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.name.keep.rst", "reference/expressions/api/polars.Expr.name.map.rst", "reference/expressions/api/polars.Expr.name.prefix.rst", "reference/expressions/api/polars.Expr.name.suffix.rst", "reference/expressions/api/polars.Expr.name.to_lowercase.rst", "reference/expressions/api/polars.Expr.name.to_uppercase.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.ne_missing.rst", "reference/expressions/api/polars.Expr.not_.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.peak_max.rst", "reference/expressions/api/polars.Expr.peak_min.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.prefix.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.qcut.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.radians.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.replace.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rle.rst", "reference/expressions/api/polars.Expr.rle_id.rst", "reference/expressions/api/polars.Expr.rolling.rst", "reference/expressions/api/polars.Expr.rolling_apply.rst", "reference/expressions/api/polars.Expr.rolling_map.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.round_sig_figs.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shift_and_fill.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.contains_any.rst", "reference/expressions/api/polars.Expr.str.count_match.rst", "reference/expressions/api/polars.Expr.str.count_matches.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.extract_groups.rst", "reference/expressions/api/polars.Expr.str.find.rst", "reference/expressions/api/polars.Expr.str.json_decode.rst", "reference/expressions/api/polars.Expr.str.json_extract.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.len_bytes.rst", "reference/expressions/api/polars.Expr.str.len_chars.rst", "reference/expressions/api/polars.Expr.str.lengths.rst", "reference/expressions/api/polars.Expr.str.ljust.rst", "reference/expressions/api/polars.Expr.str.lstrip.rst", "reference/expressions/api/polars.Expr.str.n_chars.rst", "reference/expressions/api/polars.Expr.str.pad_end.rst", "reference/expressions/api/polars.Expr.str.pad_start.rst", "reference/expressions/api/polars.Expr.str.parse_int.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.replace_many.rst", "reference/expressions/api/polars.Expr.str.reverse.rst", "reference/expressions/api/polars.Expr.str.rjust.rst", "reference/expressions/api/polars.Expr.str.rstrip.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip.rst", "reference/expressions/api/polars.Expr.str.strip_chars.rst", "reference/expressions/api/polars.Expr.str.strip_chars_end.rst", "reference/expressions/api/polars.Expr.str.strip_chars_start.rst", "reference/expressions/api/polars.Expr.str.strip_prefix.rst", "reference/expressions/api/polars.Expr.str.strip_suffix.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.to_date.rst", "reference/expressions/api/polars.Expr.str.to_datetime.rst", "reference/expressions/api/polars.Expr.str.to_decimal.rst", "reference/expressions/api/polars.Expr.str.to_integer.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_time.rst", "reference/expressions/api/polars.Expr.str.to_titlecase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.json_encode.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.suffix.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.take.rst", "reference/expressions/api/polars.Expr.take_every.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.all_horizontal.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.any_horizontal.rst", "reference/expressions/api/polars.apply.rst", "reference/expressions/api/polars.approx_n_unique.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arctan2.rst", "reference/expressions/api/polars.arctan2d.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.arg_where.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cum_count.rst", "reference/expressions/api/polars.cum_fold.rst", "reference/expressions/api/polars.cum_reduce.rst", "reference/expressions/api/polars.cum_sum.rst", "reference/expressions/api/polars.cum_sum_horizontal.rst", "reference/expressions/api/polars.cumfold.rst", "reference/expressions/api/polars.cumreduce.rst", "reference/expressions/api/polars.cumsum.rst", "reference/expressions/api/polars.cumsum_horizontal.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.date_range.rst", "reference/expressions/api/polars.date_ranges.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.datetime_range.rst", "reference/expressions/api/polars.datetime_ranges.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.implode.rst", "reference/expressions/api/polars.int_range.rst", "reference/expressions/api/polars.int_ranges.rst", "reference/expressions/api/polars.last.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map.rst", "reference/expressions/api/polars.map_batches.rst", "reference/expressions/api/polars.map_groups.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.max_horizontal.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.min_horizontal.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.ones.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.rolling_corr.rst", "reference/expressions/api/polars.rolling_cov.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.sql_expr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.sum_horizontal.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.time.rst", "reference/expressions/api/polars.time_range.rst", "reference/expressions/api/polars.time_ranges.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/api/polars.zeros.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/col.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/name.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.cast.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.collect_async.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.count.rst", "reference/lazyframe/api/polars.LazyFrame.deserialize.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fetch.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.gather_every.rst", "reference/lazyframe/api/polars.LazyFrame.group_by.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.groupby.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map.rst", "reference/lazyframe/api/polars.LazyFrame.map_batches.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.null_count.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.rolling.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.select_seq.rst", "reference/lazyframe/api/polars.LazyFrame.serialize.rst", "reference/lazyframe/api/polars.LazyFrame.set_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.take_every.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_index.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.apply.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/group_by.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/selectors.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.apply.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.all.rst", "reference/series/api/polars.Series.arr.any.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.contains.rst", "reference/series/api/polars.Series.arr.count_matches.rst", "reference/series/api/polars.Series.arr.first.rst", "reference/series/api/polars.Series.arr.get.rst", "reference/series/api/polars.Series.arr.join.rst", "reference/series/api/polars.Series.arr.last.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.to_list.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.get_categories.rst", "reference/series/api/polars.Series.cat.is_local.rst", "reference/series/api/polars.Series.cat.set_ordering.rst", "reference/series/api/polars.Series.cat.to_local.rst", "reference/series/api/polars.Series.cat.uses_lexical_ordering.rst", "reference/series/api/polars.Series.cbrt.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clip_max.rst", "reference/series/api/polars.Series.clip_min.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cot.rst", "reference/series/api/polars.Series.cum_max.rst", "reference/series/api/polars.Series.cum_min.rst", "reference/series/api/polars.Series.cum_prod.rst", "reference/series/api/polars.Series.cum_sum.rst", "reference/series/api/polars.Series.cummax.rst", "reference/series/api/polars.Series.cummin.rst", "reference/series/api/polars.Series.cumprod.rst", "reference/series/api/polars.Series.cumsum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.base_utc_offset.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.days.rst", "reference/series/api/polars.Series.dt.dst_offset.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.hours.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.microseconds.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.milliseconds.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.minutes.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.month_end.rst", "reference/series/api/polars.Series.dt.month_start.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.nanoseconds.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.seconds.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.to_string.rst", "reference/series/api/polars.Series.dt.total_days.rst", "reference/series/api/polars.Series.dt.total_hours.rst", "reference/series/api/polars.Series.dt.total_microseconds.rst", "reference/series/api/polars.Series.dt.total_milliseconds.rst", "reference/series/api/polars.Series.dt.total_minutes.rst", "reference/series/api/polars.Series.dt.total_nanoseconds.rst", "reference/series/api/polars.Series.dt.total_seconds.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.equals.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.gather.rst", "reference/series/api/polars.Series.gather_every.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.implode.rst", "reference/series/api/polars.Series.inner_dtype.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_boolean.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first.rst", "reference/series/api/polars.Series.is_first_distinct.rst", "reference/series/api/polars.Series.is_float.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_integer.rst", "reference/series/api/polars.Series.is_last.rst", "reference/series/api/polars.Series.is_last_distinct.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_numeric.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_temporal.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.is_utf8.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.list.all.rst", "reference/series/api/polars.Series.list.any.rst", "reference/series/api/polars.Series.list.arg_max.rst", "reference/series/api/polars.Series.list.arg_min.rst", "reference/series/api/polars.Series.list.concat.rst", "reference/series/api/polars.Series.list.contains.rst", "reference/series/api/polars.Series.list.count_match.rst", "reference/series/api/polars.Series.list.count_matches.rst", "reference/series/api/polars.Series.list.diff.rst", "reference/series/api/polars.Series.list.drop_nulls.rst", "reference/series/api/polars.Series.list.eval.rst", "reference/series/api/polars.Series.list.explode.rst", "reference/series/api/polars.Series.list.first.rst", "reference/series/api/polars.Series.list.gather.rst", "reference/series/api/polars.Series.list.get.rst", "reference/series/api/polars.Series.list.head.rst", "reference/series/api/polars.Series.list.join.rst", "reference/series/api/polars.Series.list.last.rst", "reference/series/api/polars.Series.list.len.rst", "reference/series/api/polars.Series.list.lengths.rst", "reference/series/api/polars.Series.list.max.rst", "reference/series/api/polars.Series.list.mean.rst", "reference/series/api/polars.Series.list.min.rst", "reference/series/api/polars.Series.list.reverse.rst", "reference/series/api/polars.Series.list.sample.rst", "reference/series/api/polars.Series.list.set_difference.rst", "reference/series/api/polars.Series.list.set_intersection.rst", "reference/series/api/polars.Series.list.set_symmetric_difference.rst", "reference/series/api/polars.Series.list.set_union.rst", "reference/series/api/polars.Series.list.shift.rst", "reference/series/api/polars.Series.list.slice.rst", "reference/series/api/polars.Series.list.sort.rst", "reference/series/api/polars.Series.list.sum.rst", "reference/series/api/polars.Series.list.tail.rst", "reference/series/api/polars.Series.list.take.rst", "reference/series/api/polars.Series.list.to_array.rst", "reference/series/api/polars.Series.list.to_struct.rst", "reference/series/api/polars.Series.list.unique.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.map_dict.rst", "reference/series/api/polars.Series.map_elements.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.not_.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.replace.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rle.rst", "reference/series/api/polars.Series.rle_id.rst", "reference/series/api/polars.Series.rolling_apply.rst", "reference/series/api/polars.Series.rolling_map.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.round_sig_figs.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.scatter.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.series_equal.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_at_idx.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shift_and_fill.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.contains_any.rst", "reference/series/api/polars.Series.str.count_match.rst", "reference/series/api/polars.Series.str.count_matches.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.extract_groups.rst", "reference/series/api/polars.Series.str.find.rst", "reference/series/api/polars.Series.str.json_decode.rst", "reference/series/api/polars.Series.str.json_extract.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.len_bytes.rst", "reference/series/api/polars.Series.str.len_chars.rst", "reference/series/api/polars.Series.str.lengths.rst", "reference/series/api/polars.Series.str.ljust.rst", "reference/series/api/polars.Series.str.lstrip.rst", "reference/series/api/polars.Series.str.n_chars.rst", "reference/series/api/polars.Series.str.pad_end.rst", "reference/series/api/polars.Series.str.pad_start.rst", "reference/series/api/polars.Series.str.parse_int.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.replace_many.rst", "reference/series/api/polars.Series.str.reverse.rst", "reference/series/api/polars.Series.str.rjust.rst", "reference/series/api/polars.Series.str.rstrip.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip.rst", "reference/series/api/polars.Series.str.strip_chars.rst", "reference/series/api/polars.Series.str.strip_chars_end.rst", "reference/series/api/polars.Series.str.strip_chars_start.rst", "reference/series/api/polars.Series.str.strip_prefix.rst", "reference/series/api/polars.Series.str.strip_suffix.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.to_date.rst", "reference/series/api/polars.Series.str.to_datetime.rst", "reference/series/api/polars.Series.str.to_decimal.rst", "reference/series/api/polars.Series.str.to_integer.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_time.rst", "reference/series/api/polars.Series.str.to_titlecase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.json_encode.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.schema.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.take.rst", "reference/series/api/polars.Series.take_every.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.view.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/plot.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql.rst", "reference/testing.rst", "reference/utils.rst"], "titles": ["Index", "Extending the API", "polars.Array", "polars.Binary", "polars.Boolean", "polars.Categorical", "polars.Config.activate_decimals", "polars.Config.load", "polars.Config.load_from_file", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.save_to_file", "polars.Config.set_ascii_tables", "polars.Config.set_auto_structify", "polars.Config.set_decimal_separator", "polars.Config.set_float_precision", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_fmt_table_cell_list_len", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cell_numeric_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_thousands_separator", "polars.Config.set_trim_decimal_zeros", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame.write_avro", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_delta", "polars.DataFrame.write_excel", "polars.DataFrame.write_ipc", "polars.DataFrame.write_ipc_stream", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.DataType", "polars.Date", "polars.Datetime", "polars.Decimal", "polars.Duration", "polars.Enum", "polars.Float32", "polars.Float64", "polars.Int16", "polars.Int32", "polars.Int64", "polars.Int8", "polars.LazyFrame.sink_csv", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_ndjson", "polars.LazyFrame.sink_parquet", "polars.List", "polars.Null", "polars.Object", "polars.SQLContext.execute", "polars.SQLContext.register", "polars.SQLContext.register_globals", "polars.SQLContext.register_many", "polars.SQLContext.tables", "polars.SQLContext.unregister", "polars.String", "polars.StringCache", "polars.Struct", "polars.Time", "polars.UInt16", "polars.UInt32", "polars.UInt64", "polars.UInt8", "polars.Unknown", "polars.Utf8", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.build_info", "polars.collect_all", "polars.collect_all_async", "polars.concat", "polars.disable_string_cache", "polars.enable_string_cache", "polars.exceptions.ArrowError", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.PolarsError", "polars.exceptions.PolarsPanicError", "polars.exceptions.RowsError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.read_avro", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_database_uri", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_ipc_stream", "polars.read_json", "polars.read_ndjson", "polars.read_ods", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_iceberg", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.set_random_seed", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_frame_not_equal", "polars.testing.assert_series_equal", "polars.testing.assert_series_not_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.create_list_strategy", "polars.testing.parametric.dataframes", "polars.testing.parametric.load_profile", "polars.testing.parametric.series", "polars.testing.parametric.set_profile", "polars.threadpool_size", "polars.using_string_cache", "Config", "Aggregation", "polars.DataFrame.__dataframe__", "polars.DataFrame.apply", "polars.DataFrame.approx_n_unique", "polars.DataFrame.bottom_k", "polars.DataFrame.cast", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.count", "polars.DataFrame.describe", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.equals", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.find_idx_by_name", "polars.DataFrame.flags", "polars.DataFrame.fold", "polars.DataFrame.frame_equal", "polars.DataFrame.gather_every", "polars.DataFrame.get_column", "polars.DataFrame.get_column_index", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.group_by", "polars.DataFrame.group_by_dynamic", "polars.DataFrame.group_by_rolling", "polars.DataFrame.groupby", "polars.DataFrame.groupby_dynamic", "polars.DataFrame.groupby_rolling", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_at_idx", "polars.DataFrame.insert_column", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_columns", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.map_rows", "polars.DataFrame.max", "polars.DataFrame.max_horizontal", "polars.DataFrame.mean", "polars.DataFrame.mean_horizontal", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.min_horizontal", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace", "polars.DataFrame.replace_at_idx", "polars.DataFrame.replace_column", "polars.DataFrame.reverse", "polars.DataFrame.rolling", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.rows_by_key", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.select_seq", "polars.DataFrame.set_sorted", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shift_and_fill", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.sum_horizontal", "polars.DataFrame.tail", "polars.DataFrame.take_every", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_columns_seq", "polars.DataFrame.with_row_count", "polars.DataFrame.with_row_index", "polars.dataframe.group_by.GroupBy.__iter__", "polars.dataframe.group_by.GroupBy.agg", "polars.dataframe.group_by.GroupBy.all", "polars.dataframe.group_by.GroupBy.apply", "polars.dataframe.group_by.GroupBy.count", "polars.dataframe.group_by.GroupBy.first", "polars.dataframe.group_by.GroupBy.head", "polars.dataframe.group_by.GroupBy.last", "polars.dataframe.group_by.GroupBy.map_groups", "polars.dataframe.group_by.GroupBy.max", "polars.dataframe.group_by.GroupBy.mean", "polars.dataframe.group_by.GroupBy.median", "polars.dataframe.group_by.GroupBy.min", "polars.dataframe.group_by.GroupBy.n_unique", "polars.dataframe.group_by.GroupBy.quantile", "polars.dataframe.group_by.GroupBy.sum", "polars.dataframe.group_by.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Plot", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.apply", "polars.Expr.approx_n_unique", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.all", "polars.Expr.arr.any", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.contains", "polars.Expr.arr.count_matches", "polars.Expr.arr.first", "polars.Expr.arr.get", "polars.Expr.arr.join", "polars.Expr.arr.last", "polars.Expr.arr.max", "polars.Expr.arr.min", "polars.Expr.arr.reverse", "polars.Expr.arr.sort", "polars.Expr.arr.sum", "polars.Expr.arr.to_list", "polars.Expr.arr.unique", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.starts_with", "polars.Expr.bottom_k", "polars.Expr.cast", "polars.Expr.cat.get_categories", "polars.Expr.cat.set_ordering", "polars.Expr.cbrt", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.clip_max", "polars.Expr.clip_min", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.cot", "polars.Expr.count", "polars.Expr.cum_count", "polars.Expr.cum_max", "polars.Expr.cum_min", "polars.Expr.cum_prod", "polars.Expr.cum_sum", "polars.Expr.cumcount", "polars.Expr.cummax", "polars.Expr.cummin", "polars.Expr.cumprod", "polars.Expr.cumsum", "polars.Expr.cumulative_eval", "polars.Expr.cut", "polars.Expr.degrees", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.base_utc_offset", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.days", "polars.Expr.dt.dst_offset", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.hours", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.microseconds", "polars.Expr.dt.millisecond", "polars.Expr.dt.milliseconds", "polars.Expr.dt.minute", "polars.Expr.dt.minutes", "polars.Expr.dt.month", "polars.Expr.dt.month_end", "polars.Expr.dt.month_start", "polars.Expr.dt.nanosecond", "polars.Expr.dt.nanoseconds", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.seconds", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.to_string", "polars.Expr.dt.total_days", "polars.Expr.dt.total_hours", "polars.Expr.dt.total_microseconds", "polars.Expr.dt.total_milliseconds", "polars.Expr.dt.total_minutes", "polars.Expr.dt.total_nanoseconds", "polars.Expr.dt.total_seconds", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.eq_missing", "polars.Expr.ewm_mean", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.from_json", "polars.Expr.gather", "polars.Expr.gather_every", "polars.Expr.ge", "polars.Expr.get", "polars.Expr.gt", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.hist", "polars.Expr.implode", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first", "polars.Expr.is_first_distinct", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_last", "polars.Expr.is_last_distinct", "polars.Expr.is_nan", "polars.Expr.is_not", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.keep_name", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list.all", "polars.Expr.list.any", "polars.Expr.list.arg_max", "polars.Expr.list.arg_min", "polars.Expr.list.concat", "polars.Expr.list.contains", "polars.Expr.list.count_match", "polars.Expr.list.count_matches", "polars.Expr.list.diff", "polars.Expr.list.drop_nulls", "polars.Expr.list.eval", "polars.Expr.list.explode", "polars.Expr.list.first", "polars.Expr.list.gather", "polars.Expr.list.get", "polars.Expr.list.head", "polars.Expr.list.join", "polars.Expr.list.last", "polars.Expr.list.len", "polars.Expr.list.lengths", "polars.Expr.list.max", "polars.Expr.list.mean", "polars.Expr.list.min", "polars.Expr.list.reverse", "polars.Expr.list.sample", "polars.Expr.list.set_difference", "polars.Expr.list.set_intersection", "polars.Expr.list.set_symmetric_difference", "polars.Expr.list.set_union", "polars.Expr.list.shift", "polars.Expr.list.slice", "polars.Expr.list.sort", "polars.Expr.list.sum", "polars.Expr.list.tail", "polars.Expr.list.take", "polars.Expr.list.to_array", "polars.Expr.list.to_struct", "polars.Expr.list.unique", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map", "polars.Expr.map_alias", "polars.Expr.map_batches", "polars.Expr.map_dict", "polars.Expr.map_elements", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.eq", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.ne", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.tree_format", "polars.Expr.meta.undo_aliases", "polars.Expr.meta.write_json", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.name.keep", "polars.Expr.name.map", "polars.Expr.name.prefix", "polars.Expr.name.suffix", "polars.Expr.name.to_lowercase", "polars.Expr.name.to_uppercase", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.ne_missing", "polars.Expr.not_", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.peak_max", "polars.Expr.peak_min", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.prefix", "polars.Expr.product", "polars.Expr.qcut", "polars.Expr.quantile", "polars.Expr.radians", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.replace", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rle", "polars.Expr.rle_id", "polars.Expr.rolling", "polars.Expr.rolling_apply", "polars.Expr.rolling_map", "polars.Expr.rolling_max", "polars.Expr.rolling_mean", "polars.Expr.rolling_median", "polars.Expr.rolling_min", "polars.Expr.rolling_quantile", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_sum", "polars.Expr.rolling_var", "polars.Expr.round", "polars.Expr.round_sig_figs", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shift_and_fill", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.contains_any", "polars.Expr.str.count_match", "polars.Expr.str.count_matches", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.extract_groups", "polars.Expr.str.find", "polars.Expr.str.json_decode", "polars.Expr.str.json_extract", "polars.Expr.str.json_path_match", "polars.Expr.str.len_bytes", "polars.Expr.str.len_chars", "polars.Expr.str.lengths", "polars.Expr.str.ljust", "polars.Expr.str.lstrip", "polars.Expr.str.n_chars", "polars.Expr.str.pad_end", "polars.Expr.str.pad_start", "polars.Expr.str.parse_int", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.replace_many", "polars.Expr.str.reverse", "polars.Expr.str.rjust", "polars.Expr.str.rstrip", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip", "polars.Expr.str.strip_chars", "polars.Expr.str.strip_chars_end", "polars.Expr.str.strip_chars_start", "polars.Expr.str.strip_prefix", "polars.Expr.str.strip_suffix", "polars.Expr.str.strptime", "polars.Expr.str.to_date", "polars.Expr.str.to_datetime", "polars.Expr.str.to_decimal", "polars.Expr.str.to_integer", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_time", "polars.Expr.str.to_titlecase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.json_encode", "polars.Expr.struct.rename_fields", "polars.Expr.sub", "polars.Expr.suffix", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.take", "polars.Expr.take_every", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.all_horizontal", "polars.any", "polars.any_horizontal", "polars.apply", "polars.approx_n_unique", "polars.arange", "polars.arctan2", "polars.arctan2d", "polars.arg_sort_by", "polars.arg_where", "polars.coalesce", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cum_count", "polars.cum_fold", "polars.cum_reduce", "polars.cum_sum", "polars.cum_sum_horizontal", "polars.cumfold", "polars.cumreduce", "polars.cumsum", "polars.cumsum_horizontal", "polars.date", "polars.date_range", "polars.date_ranges", "polars.datetime", "polars.datetime_range", "polars.datetime_ranges", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.implode", "polars.int_range", "polars.int_ranges", "polars.last", "polars.lit", "polars.map", "polars.map_batches", "polars.map_groups", "polars.max", "polars.max_horizontal", "polars.mean", "polars.median", "polars.min", "polars.min_horizontal", "polars.n_unique", "polars.ones", "polars.quantile", "polars.reduce", "polars.repeat", "polars.rolling_corr", "polars.rolling_cov", "polars.select", "polars.sql_expr", "polars.std", "polars.struct", "polars.sum", "polars.sum_horizontal", "polars.tail", "polars.time", "polars.time_range", "polars.time_ranges", "polars.var", "polars.when", "polars.zeros", "Array", "Binary", "Boolean", "Categories", "polars.col", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Name", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "API reference", "Input/output", "Aggregation", "polars.LazyFrame.approx_n_unique", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.cast", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.collect_async", "polars.LazyFrame.columns", "polars.LazyFrame.count", "polars.LazyFrame.deserialize", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.gather_every", "polars.LazyFrame.group_by", "polars.LazyFrame.group_by_dynamic", "polars.LazyFrame.group_by_rolling", "polars.LazyFrame.groupby", "polars.LazyFrame.groupby_dynamic", "polars.LazyFrame.groupby_rolling", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map", "polars.LazyFrame.map_batches", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.null_count", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.rolling", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.select_seq", "polars.LazyFrame.serialize", "polars.LazyFrame.set_sorted", "polars.LazyFrame.shift", "polars.LazyFrame.shift_and_fill", "polars.LazyFrame.show_graph", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.take_every", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_columns_seq", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.with_row_index", "polars.lazyframe.group_by.LazyGroupBy.agg", "polars.lazyframe.group_by.LazyGroupBy.all", "polars.lazyframe.group_by.LazyGroupBy.apply", "polars.lazyframe.group_by.LazyGroupBy.count", "polars.lazyframe.group_by.LazyGroupBy.first", "polars.lazyframe.group_by.LazyGroupBy.head", "polars.lazyframe.group_by.LazyGroupBy.last", "polars.lazyframe.group_by.LazyGroupBy.map_groups", "polars.lazyframe.group_by.LazyGroupBy.max", "polars.lazyframe.group_by.LazyGroupBy.mean", "polars.lazyframe.group_by.LazyGroupBy.median", "polars.lazyframe.group_by.LazyGroupBy.min", "polars.lazyframe.group_by.LazyGroupBy.n_unique", "polars.lazyframe.group_by.LazyGroupBy.quantile", "polars.lazyframe.group_by.LazyGroupBy.sum", "polars.lazyframe.group_by.LazyGroupBy.tail", "Attributes", "Descriptive", "GroupBy", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Selectors", "Aggregation", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.apply", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr.all", "polars.Series.arr.any", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.contains", "polars.Series.arr.count_matches", "polars.Series.arr.first", "polars.Series.arr.get", "polars.Series.arr.join", "polars.Series.arr.last", "polars.Series.arr.max", "polars.Series.arr.min", "polars.Series.arr.reverse", "polars.Series.arr.sort", "polars.Series.arr.sum", "polars.Series.arr.to_list", "polars.Series.arr.unique", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.starts_with", "polars.Series.bottom_k", "polars.Series.cast", "polars.Series.cat.get_categories", "polars.Series.cat.is_local", "polars.Series.cat.set_ordering", "polars.Series.cat.to_local", "polars.Series.cat.uses_lexical_ordering", "polars.Series.cbrt", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clip_max", "polars.Series.clip_min", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cot", "polars.Series.cum_max", "polars.Series.cum_min", "polars.Series.cum_prod", "polars.Series.cum_sum", "polars.Series.cummax", "polars.Series.cummin", "polars.Series.cumprod", "polars.Series.cumsum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt.base_utc_offset", "polars.Series.dt.cast_time_unit", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.days", "polars.Series.dt.dst_offset", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.hours", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.microseconds", "polars.Series.dt.millisecond", "polars.Series.dt.milliseconds", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.minutes", "polars.Series.dt.month", "polars.Series.dt.month_end", "polars.Series.dt.month_start", "polars.Series.dt.nanosecond", "polars.Series.dt.nanoseconds", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.seconds", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.to_string", "polars.Series.dt.total_days", "polars.Series.dt.total_hours", "polars.Series.dt.total_microseconds", "polars.Series.dt.total_milliseconds", "polars.Series.dt.total_minutes", "polars.Series.dt.total_nanoseconds", "polars.Series.dt.total_seconds", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.equals", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.gather", "polars.Series.gather_every", "polars.Series.get_chunks", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.implode", "polars.Series.inner_dtype", "polars.Series.interpolate", "polars.Series.is_between", "polars.Series.is_boolean", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first", "polars.Series.is_first_distinct", "polars.Series.is_float", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_integer", "polars.Series.is_last", "polars.Series.is_last_distinct", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_numeric", "polars.Series.is_sorted", "polars.Series.is_temporal", "polars.Series.is_unique", "polars.Series.is_utf8", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.list.all", "polars.Series.list.any", "polars.Series.list.arg_max", "polars.Series.list.arg_min", "polars.Series.list.concat", "polars.Series.list.contains", "polars.Series.list.count_match", "polars.Series.list.count_matches", "polars.Series.list.diff", "polars.Series.list.drop_nulls", "polars.Series.list.eval", "polars.Series.list.explode", "polars.Series.list.first", "polars.Series.list.gather", "polars.Series.list.get", "polars.Series.list.head", "polars.Series.list.join", "polars.Series.list.last", "polars.Series.list.len", "polars.Series.list.lengths", "polars.Series.list.max", "polars.Series.list.mean", "polars.Series.list.min", "polars.Series.list.reverse", "polars.Series.list.sample", "polars.Series.list.set_difference", "polars.Series.list.set_intersection", "polars.Series.list.set_symmetric_difference", "polars.Series.list.set_union", "polars.Series.list.shift", "polars.Series.list.slice", "polars.Series.list.sort", "polars.Series.list.sum", "polars.Series.list.tail", "polars.Series.list.take", "polars.Series.list.to_array", "polars.Series.list.to_struct", "polars.Series.list.unique", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.map_dict", "polars.Series.map_elements", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.new_from_index", "polars.Series.not_", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.replace", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rle", "polars.Series.rle_id", "polars.Series.rolling_apply", "polars.Series.rolling_map", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.round_sig_figs", "polars.Series.sample", "polars.Series.scatter", "polars.Series.search_sorted", "polars.Series.series_equal", "polars.Series.set", "polars.Series.set_at_idx", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shift_and_fill", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.contains_any", "polars.Series.str.count_match", "polars.Series.str.count_matches", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.extract_groups", "polars.Series.str.find", "polars.Series.str.json_decode", "polars.Series.str.json_extract", "polars.Series.str.json_path_match", "polars.Series.str.len_bytes", "polars.Series.str.len_chars", "polars.Series.str.lengths", "polars.Series.str.ljust", "polars.Series.str.lstrip", "polars.Series.str.n_chars", "polars.Series.str.pad_end", "polars.Series.str.pad_start", "polars.Series.str.parse_int", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.replace_many", "polars.Series.str.reverse", "polars.Series.str.rjust", "polars.Series.str.rstrip", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip", "polars.Series.str.strip_chars", "polars.Series.str.strip_chars_end", "polars.Series.str.strip_chars_start", "polars.Series.str.strip_prefix", "polars.Series.str.strip_suffix", "polars.Series.str.strptime", "polars.Series.str.to_date", "polars.Series.str.to_datetime", "polars.Series.str.to_decimal", "polars.Series.str.to_integer", "polars.Series.str.to_lowercase", "polars.Series.str.to_time", "polars.Series.str.to_titlecase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.json_encode", "polars.Series.struct.rename_fields", "polars.Series.struct.schema", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.take", "polars.Series.take_every", "polars.Series.tan", "polars.Series.tanh", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.view", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "Plot", "String", "Struct", "Temporal", "SQL", "Testing", "Utils"], "terms": {"api": [0, 108, 138, 156, 211, 286, 300, 527, 730, 765, 863, 925, 1099, 1250], "refer": [0, 40, 117, 118, 119, 123, 124, 125, 126, 127, 128, 129, 130, 131, 164, 300, 303, 413, 416, 525, 570, 618, 651, 652, 653, 657, 765, 790, 875, 988, 991, 1119, 1204, 1205, 1206, 1210, 1250, 1254], "input": [0, 81, 87, 110, 118, 119, 159, 167, 187, 190, 211, 215, 224, 241, 242, 245, 249, 252, 264, 274, 275, 279, 300, 308, 357, 435, 459, 519, 525, 526, 527, 536, 559, 574, 606, 647, 648, 649, 650, 681, 683, 685, 686, 688, 691, 693, 694, 695, 703, 707, 716, 717, 724, 725, 726, 728, 729, 730, 732, 736, 744, 747, 749, 755, 765, 777, 781, 791, 802, 805, 832, 833, 834, 836, 840, 845, 851, 852, 856, 875, 930, 1030, 1095, 1096, 1099, 1123, 1149, 1250], "output": [0, 13, 35, 37, 40, 41, 42, 43, 44, 58, 123, 157, 166, 188, 189, 191, 192, 205, 211, 215, 218, 224, 226, 235, 237, 241, 252, 270, 274, 300, 311, 313, 315, 375, 516, 523, 524, 525, 527, 535, 547, 567, 579, 584, 586, 588, 590, 609, 626, 678, 682, 684, 686, 696, 709, 710, 728, 729, 730, 765, 777, 803, 804, 806, 807, 816, 817, 821, 822, 830, 832, 834, 851, 858, 863, 875, 882, 883, 885, 946, 1099, 1117, 1162, 1179, 1238, 1250], "seri": [0, 1, 2, 16, 30, 51, 72, 73, 82, 83, 84, 85, 89, 90, 91, 107, 109, 112, 114, 141, 143, 144, 148, 168, 177, 180, 183, 185, 188, 193, 196, 197, 198, 200, 202, 204, 212, 213, 214, 215, 219, 220, 231, 232, 233, 235, 239, 251, 252, 256, 259, 262, 263, 280, 300, 314, 315, 326, 346, 353, 354, 356, 409, 438, 441, 444, 448, 449, 457, 461, 464, 465, 468, 470, 471, 472, 484, 491, 493, 514, 516, 521, 523, 525, 527, 570, 571, 572, 573, 574, 575, 577, 579, 580, 581, 587, 595, 598, 640, 651, 652, 653, 657, 661, 668, 669, 677, 686, 688, 692, 700, 701, 704, 705, 709, 710, 712, 713, 718, 720, 724, 725, 727, 728, 729, 730, 738, 740, 741, 744, 747, 752, 753, 756, 765, 777, 799, 803, 830, 857, 875, 1242, 1244, 1246, 1249, 1251, 1254, 1255, 1256, 1257, 1259], "datafram": [0, 1, 12, 13, 14, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 58, 59, 60, 61, 62, 65, 66, 67, 68, 69, 70, 81, 82, 83, 84, 85, 87, 88, 89, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 132, 135, 136, 137, 141, 142, 145, 146, 154, 298, 299, 303, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 355, 356, 357, 360, 361, 362, 363, 364, 365, 366, 367, 368, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 391, 393, 394, 395, 397, 399, 401, 402, 403, 404, 406, 407, 408, 409, 411, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 527, 528, 529, 530, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 631, 632, 634, 635, 636, 637, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 710, 713, 714, 715, 716, 717, 718, 719, 720, 722, 723, 724, 725, 726, 729, 730, 731, 732, 733, 734, 735, 736, 737, 740, 744, 745, 746, 747, 748, 749, 750, 753, 754, 755, 761, 765, 777, 786, 787, 791, 795, 796, 800, 803, 811, 812, 813, 814, 816, 817, 821, 822, 826, 829, 839, 846, 847, 848, 853, 856, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 875, 878, 911, 913, 946, 947, 984, 1026, 1099, 1117, 1177, 1195, 1196, 1219, 1227, 1228, 1238, 1250, 1258, 1259], "lazyfram": [0, 1, 65, 66, 68, 70, 81, 82, 83, 84, 85, 87, 88, 89, 132, 133, 134, 135, 136, 137, 138, 141, 142, 148, 209, 225, 226, 300, 441, 516, 765, 777, 874, 878, 1258, 1259], "express": [0, 13, 58, 59, 60, 61, 87, 88, 145, 148, 150, 159, 173, 175, 177, 187, 190, 211, 222, 226, 236, 241, 242, 245, 249, 264, 274, 275, 277, 279, 286, 300, 308, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 325, 326, 330, 331, 332, 333, 336, 343, 346, 348, 349, 350, 357, 360, 361, 362, 363, 374, 375, 376, 378, 381, 382, 383, 384, 385, 386, 387, 389, 391, 393, 394, 395, 397, 399, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 413, 414, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 435, 437, 438, 440, 441, 445, 447, 448, 450, 451, 452, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 474, 477, 478, 482, 483, 485, 486, 487, 490, 491, 496, 498, 515, 516, 521, 522, 524, 525, 526, 527, 531, 532, 533, 534, 535, 536, 538, 540, 542, 544, 546, 547, 548, 549, 550, 551, 554, 555, 556, 558, 559, 563, 564, 565, 566, 567, 569, 573, 574, 575, 577, 593, 594, 595, 597, 599, 601, 602, 604, 606, 609, 610, 612, 613, 615, 617, 618, 619, 620, 621, 622, 624, 625, 626, 634, 635, 640, 641, 642, 643, 655, 664, 665, 668, 670, 671, 674, 675, 677, 678, 680, 681, 682, 683, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 724, 725, 726, 727, 728, 729, 730, 732, 736, 738, 740, 741, 742, 743, 744, 745, 747, 749, 751, 752, 753, 755, 756, 761, 764, 777, 781, 786, 787, 794, 795, 796, 799, 802, 805, 826, 832, 833, 836, 837, 838, 840, 845, 851, 852, 853, 855, 856, 863, 875, 878, 902, 930, 945, 954, 1014, 1030, 1062, 1063, 1066, 1099, 1123, 1143, 1149, 1150, 1163, 1165, 1166, 1171, 1172, 1173, 1174, 1175, 1177, 1187, 1188, 1250], "selector": [0, 40, 160, 167, 169, 173, 217, 224, 226, 258, 266, 268, 300, 435, 441, 765, 777, 783, 791, 792, 795, 821, 846, 875], "extend": [0, 110, 272, 300, 438, 765, 777, 884, 1014, 1250], "function": [0, 40, 72, 81, 82, 83, 84, 85, 88, 90, 91, 108, 114, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 137, 141, 142, 143, 144, 146, 156, 157, 164, 172, 180, 211, 217, 225, 226, 260, 261, 265, 268, 269, 281, 286, 300, 311, 315, 374, 410, 432, 433, 434, 455, 516, 523, 524, 525, 527, 547, 559, 563, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 603, 672, 682, 686, 687, 697, 699, 700, 701, 704, 705, 706, 707, 717, 718, 720, 722, 723, 726, 728, 729, 730, 733, 734, 737, 738, 740, 746, 750, 754, 756, 761, 765, 777, 786, 787, 790, 796, 816, 817, 821, 825, 848, 855, 858, 863, 875, 885, 945, 985, 1007, 1008, 1009, 1010, 1026, 1092, 1099, 1117, 1128, 1129, 1142, 1145, 1152, 1157, 1232, 1250, 1259], "data": [0, 1, 6, 15, 23, 24, 26, 33, 36, 37, 38, 39, 40, 41, 42, 45, 46, 58, 59, 60, 61, 65, 72, 73, 81, 82, 84, 89, 91, 96, 97, 102, 104, 107, 108, 109, 110, 111, 112, 113, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 136, 141, 142, 143, 144, 146, 147, 148, 150, 156, 162, 174, 186, 187, 188, 189, 190, 191, 192, 205, 206, 207, 209, 211, 224, 225, 229, 235, 236, 237, 238, 247, 255, 260, 261, 265, 274, 278, 298, 300, 311, 312, 313, 317, 318, 319, 320, 321, 322, 325, 328, 329, 330, 331, 332, 336, 338, 339, 342, 343, 344, 346, 348, 349, 350, 352, 353, 357, 360, 361, 362, 363, 375, 376, 381, 382, 385, 386, 387, 389, 391, 393, 394, 395, 397, 399, 401, 402, 403, 404, 406, 407, 408, 410, 411, 414, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 437, 448, 450, 451, 452, 455, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 477, 478, 482, 483, 485, 491, 496, 498, 504, 515, 517, 522, 527, 554, 555, 558, 559, 567, 569, 570, 573, 574, 575, 577, 579, 582, 583, 584, 585, 586, 588, 589, 590, 591, 593, 601, 602, 603, 609, 612, 613, 615, 617, 618, 619, 620, 624, 625, 626, 640, 641, 642, 643, 651, 652, 653, 655, 657, 660, 670, 671, 672, 674, 675, 678, 681, 686, 688, 697, 708, 709, 710, 711, 712, 713, 714, 724, 725, 727, 728, 729, 730, 738, 741, 751, 752, 753, 756, 761, 765, 777, 784, 785, 786, 796, 802, 803, 804, 805, 806, 807, 825, 830, 851, 875, 882, 883, 895, 897, 898, 899, 900, 901, 904, 905, 911, 912, 913, 914, 916, 920, 921, 929, 930, 933, 946, 947, 952, 953, 956, 957, 958, 960, 962, 964, 965, 969, 971, 974, 976, 977, 978, 979, 981, 982, 983, 985, 986, 989, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1012, 1013, 1026, 1032, 1034, 1035, 1036, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1050, 1056, 1057, 1058, 1059, 1061, 1067, 1072, 1074, 1080, 1091, 1093, 1099, 1111, 1117, 1119, 1123, 1124, 1126, 1139, 1141, 1152, 1157, 1162, 1163, 1165, 1166, 1168, 1170, 1171, 1172, 1173, 1177, 1178, 1179, 1193, 1194, 1195, 1196, 1204, 1205, 1206, 1208, 1210, 1213, 1230, 1231, 1232, 1233, 1235, 1240, 1249, 1250, 1258], "type": [0, 1, 2, 3, 4, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 39, 40, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 71, 73, 74, 75, 76, 77, 78, 79, 82, 83, 84, 85, 87, 88, 96, 107, 109, 110, 111, 112, 113, 118, 119, 120, 122, 123, 127, 128, 129, 132, 133, 134, 136, 140, 141, 142, 143, 144, 147, 148, 157, 180, 186, 188, 189, 191, 192, 193, 206, 207, 211, 235, 255, 261, 263, 266, 277, 300, 311, 313, 317, 318, 319, 320, 321, 322, 325, 330, 331, 332, 336, 343, 346, 348, 349, 350, 352, 353, 354, 357, 360, 361, 362, 363, 375, 376, 381, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 435, 437, 448, 451, 453, 459, 460, 461, 462, 463, 464, 465, 466, 467, 478, 482, 483, 485, 491, 496, 498, 515, 516, 525, 527, 567, 569, 573, 574, 575, 577, 579, 601, 602, 609, 612, 613, 615, 617, 618, 619, 620, 624, 625, 626, 640, 641, 642, 643, 651, 655, 670, 671, 672, 678, 686, 688, 697, 708, 709, 710, 711, 712, 713, 714, 716, 717, 724, 725, 726, 727, 728, 729, 730, 738, 741, 751, 752, 753, 756, 761, 765, 777, 786, 787, 794, 796, 803, 804, 806, 807, 811, 826, 830, 838, 846, 855, 875, 882, 883, 895, 897, 898, 899, 900, 901, 904, 905, 912, 914, 916, 920, 921, 923, 930, 946, 947, 952, 955, 956, 957, 958, 959, 960, 962, 963, 964, 965, 969, 970, 971, 972, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 989, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1012, 1024, 1032, 1034, 1035, 1036, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1050, 1056, 1057, 1058, 1059, 1061, 1067, 1072, 1074, 1091, 1092, 1111, 1117, 1123, 1124, 1126, 1152, 1162, 1163, 1165, 1166, 1168, 1170, 1171, 1172, 1173, 1177, 1178, 1179, 1193, 1194, 1195, 1196, 1204, 1208, 1230, 1231, 1233, 1241, 1250, 1258], "config": [0, 81, 241, 274, 300, 611, 636, 710, 713, 714, 777, 786, 832, 851, 875, 1164, 1189], "except": [0, 141, 194, 208, 210, 253, 300, 716, 777, 812, 875, 878, 1025, 1055, 1221, 1231, 1240, 1250], "test": [0, 6, 120, 121, 123, 129, 777, 808, 815, 875], "util": [0, 114, 720, 777, 796, 875], "sql": [0, 38, 65, 69, 120, 121, 207, 245, 300, 509, 596, 745, 765, 777, 836, 875, 1085, 1149, 1250], "These": [1, 40, 120, 154, 265, 300, 424, 764, 765, 985, 999], "allow": [1, 13, 39, 40, 58, 59, 60, 61, 72, 91, 96, 108, 120, 132, 135, 136, 137, 138, 148, 150, 156, 205, 208, 209, 236, 237, 239, 260, 261, 266, 278, 300, 406, 413, 416, 504, 525, 527, 572, 593, 651, 652, 653, 765, 811, 812, 816, 817, 821, 846, 853, 875, 878, 981, 988, 991, 1006, 1080, 1099, 1121, 1141, 1144, 1204, 1205, 1206, 1232, 1250, 1259], "you": [1, 15, 19, 40, 45, 61, 70, 81, 88, 89, 107, 109, 110, 111, 113, 118, 119, 120, 121, 123, 124, 127, 128, 130, 132, 136, 138, 154, 174, 188, 189, 191, 192, 204, 205, 211, 222, 226, 235, 236, 237, 238, 257, 260, 265, 286, 300, 303, 402, 403, 406, 409, 413, 416, 424, 435, 441, 459, 490, 516, 525, 527, 572, 578, 579, 582, 583, 584, 585, 586, 588, 589, 590, 611, 625, 636, 700, 709, 714, 718, 730, 738, 741, 756, 765, 787, 792, 803, 804, 806, 807, 808, 815, 830, 838, 863, 875, 878, 977, 978, 984, 985, 988, 991, 999, 1013, 1030, 1066, 1099, 1121, 1127, 1164, 1178, 1189, 1206, 1240, 1250, 1254, 1259], "regist": [1, 65, 67, 68, 69, 70, 82, 83, 84, 85, 149, 151, 765, 1258], "custom": [1, 32, 39, 40, 82, 83, 84, 85, 149, 150, 151, 157, 211, 281, 286, 300, 315, 413, 416, 516, 523, 525, 527, 580, 581, 686, 728, 729, 730, 765, 816, 817, 858, 863, 875, 885, 988, 991, 1092, 1099, 1128, 1129, 1250, 1259], "dedic": [1, 108, 205, 237, 300], "namespac": [1, 299, 300, 764, 777, 874, 1250, 1259], "underli": [1, 72, 91, 100, 107, 109, 110, 111, 113, 120, 121, 127, 128, 130, 136, 145, 148, 150, 173, 174, 205, 206, 237, 255, 300, 347, 382, 383, 387, 391, 393, 394, 395, 397, 399, 401, 404, 407, 408, 409, 411, 425, 426, 427, 428, 572, 591, 610, 614, 621, 765, 795, 875, 878, 915, 924, 953, 954, 958, 962, 964, 965, 969, 971, 974, 976, 979, 982, 983, 984, 986, 1000, 1001, 1002, 1003, 1013, 1121, 1139, 1152, 1163, 1167, 1174, 1226, 1231, 1250], "polar": [1, 300, 303, 764, 765, 771, 777, 875, 878, 1250, 1254, 1258], "class": [1, 2, 3, 4, 5, 22, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 62, 63, 64, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 83, 84, 85, 99, 145, 146, 238, 261, 300, 752, 761, 765, 771, 777, 875, 1230, 1231, 1250, 1258], "without": [1, 88, 114, 122, 125, 131, 133, 134, 138, 268, 269, 300, 315, 374, 410, 455, 582, 583, 584, 585, 586, 588, 589, 590, 611, 636, 697, 744, 765, 787, 848, 875, 922, 925, 945, 985, 1026, 1117, 1164, 1189, 1231, 1250], "requir": [1, 39, 40, 45, 61, 81, 112, 120, 121, 141, 142, 143, 144, 159, 164, 236, 261, 264, 300, 344, 432, 433, 434, 517, 527, 598, 651, 652, 653, 675, 741, 765, 781, 840, 845, 875, 913, 1008, 1009, 1010, 1093, 1151, 1204, 1205, 1206, 1231, 1232, 1235, 1250, 1254], "subclass": [1, 300], "mixin": 1, "expr": [1, 81, 82, 83, 84, 85, 173, 175, 207, 208, 222, 226, 236, 241, 242, 274, 275, 300, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 757, 758, 760, 761, 765, 766, 767, 770, 771, 772, 773, 774, 795, 797, 811, 812, 827, 832, 833, 834, 837, 851, 852, 875, 945, 954, 981, 999, 1015, 1020, 1062, 1066, 1071, 1086, 1089, 1150, 1163, 1169, 1174, 1197, 1222, 1250], "ar": [1, 15, 16, 22, 25, 35, 37, 39, 40, 58, 59, 60, 61, 70, 72, 81, 88, 89, 90, 91, 98, 106, 107, 108, 109, 110, 111, 112, 113, 114, 118, 119, 120, 121, 122, 123, 124, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 141, 142, 143, 144, 146, 148, 154, 156, 159, 164, 169, 172, 175, 179, 180, 186, 187, 188, 189, 190, 191, 192, 205, 207, 208, 209, 211, 217, 218, 224, 226, 235, 236, 237, 238, 241, 242, 243, 245, 249, 256, 261, 264, 269, 270, 274, 275, 278, 279, 300, 311, 313, 328, 357, 365, 367, 368, 410, 424, 429, 431, 432, 433, 434, 459, 461, 464, 465, 468, 470, 471, 472, 475, 480, 509, 516, 525, 526, 555, 559, 567, 570, 573, 574, 575, 579, 582, 583, 584, 585, 586, 587, 588, 589, 590, 596, 600, 603, 605, 606, 620, 622, 623, 624, 631, 632, 633, 655, 660, 666, 682, 683, 685, 691, 693, 694, 695, 696, 699, 703, 707, 709, 710, 712, 713, 732, 736, 744, 747, 749, 752, 753, 755, 757, 758, 760, 764, 765, 766, 767, 770, 771, 772, 773, 774, 777, 781, 786, 787, 792, 796, 797, 802, 803, 804, 805, 806, 807, 808, 811, 812, 815, 817, 821, 822, 826, 828, 830, 832, 833, 835, 836, 840, 845, 848, 851, 852, 853, 856, 875, 878, 882, 883, 897, 922, 930, 939, 940, 985, 999, 1005, 1007, 1008, 1009, 1010, 1018, 1023, 1030, 1034, 1038, 1039, 1043, 1044, 1045, 1046, 1053, 1056, 1085, 1092, 1117, 1119, 1123, 1124, 1135, 1149, 1154, 1157, 1173, 1175, 1176, 1184, 1185, 1186, 1206, 1208, 1213, 1220, 1232, 1240, 1242, 1244, 1246, 1250, 1251, 1255, 1256, 1257, 1259], "all": [1, 9, 13, 18, 22, 25, 30, 35, 37, 39, 40, 46, 58, 67, 81, 87, 99, 107, 110, 112, 113, 118, 119, 122, 123, 124, 126, 129, 130, 132, 135, 136, 145, 146, 150, 154, 160, 166, 169, 176, 194, 200, 202, 204, 205, 206, 207, 209, 210, 215, 217, 221, 222, 229, 236, 237, 238, 242, 248, 252, 253, 258, 260, 266, 268, 269, 270, 275, 277, 300, 312, 314, 336, 345, 363, 374, 379, 380, 381, 435, 440, 446, 453, 456, 458, 461, 465, 471, 472, 474, 478, 489, 490, 496, 512, 516, 524, 525, 543, 546, 547, 548, 549, 550, 551, 557, 565, 570, 574, 576, 581, 598, 604, 606, 612, 613, 619, 620, 622, 623, 624, 629, 634, 635, 639, 645, 646, 647, 648, 665, 683, 700, 701, 702, 703, 706, 707, 709, 716, 718, 723, 724, 740, 747, 748, 749, 755, 765, 771, 777, 783, 786, 787, 792, 794, 796, 798, 811, 816, 817, 821, 826, 833, 838, 839, 846, 848, 852, 853, 855, 875, 878, 905, 945, 947, 950, 951, 952, 1025, 1032, 1050, 1055, 1065, 1066, 1072, 1088, 1092, 1119, 1123, 1129, 1158, 1165, 1166, 1172, 1173, 1175, 1176, 1177, 1182, 1187, 1188, 1192, 1198, 1199, 1200, 1201, 1221, 1250, 1258, 1259], "support": [1, 39, 40, 45, 89, 107, 108, 109, 110, 111, 112, 113, 114, 120, 121, 122, 123, 127, 128, 129, 130, 133, 134, 137, 145, 150, 154, 205, 206, 207, 208, 212, 214, 219, 237, 238, 248, 249, 251, 257, 261, 300, 510, 559, 574, 604, 606, 636, 640, 761, 765, 771, 811, 812, 839, 840, 875, 878, 1086, 1123, 1158, 1189, 1193, 1232, 1250, 1258], "target": [1, 38, 39, 40, 86, 123, 300, 618, 651, 652, 653, 878, 1171, 1204, 1205, 1206], "thi": [1, 6, 9, 15, 17, 19, 35, 37, 38, 39, 40, 43, 45, 49, 51, 58, 59, 60, 61, 65, 66, 70, 72, 81, 87, 88, 89, 91, 107, 109, 110, 111, 112, 113, 114, 116, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 150, 152, 154, 156, 157, 158, 159, 162, 164, 169, 170, 172, 174, 178, 179, 180, 181, 186, 187, 188, 189, 190, 191, 192, 193, 197, 198, 200, 202, 203, 204, 205, 207, 208, 209, 211, 212, 214, 216, 217, 218, 219, 221, 222, 224, 227, 228, 229, 232, 233, 235, 236, 237, 238, 239, 241, 242, 245, 246, 248, 250, 251, 254, 255, 257, 260, 261, 264, 265, 266, 268, 269, 270, 271, 272, 274, 275, 276, 277, 281, 286, 299, 300, 311, 314, 315, 316, 325, 336, 340, 341, 344, 351, 353, 354, 357, 369, 370, 371, 372, 373, 374, 375, 381, 382, 394, 402, 403, 406, 409, 410, 413, 416, 424, 427, 431, 437, 453, 455, 457, 458, 459, 462, 464, 466, 469, 474, 486, 490, 491, 496, 499, 504, 505, 506, 507, 508, 509, 511, 514, 516, 517, 520, 521, 523, 524, 525, 526, 527, 531, 532, 533, 534, 535, 536, 545, 546, 548, 549, 550, 551, 552, 553, 555, 559, 565, 567, 570, 571, 572, 573, 574, 575, 578, 579, 580, 582, 583, 584, 585, 586, 588, 589, 590, 593, 595, 596, 597, 598, 599, 604, 605, 606, 609, 611, 612, 618, 623, 627, 628, 629, 630, 631, 632, 633, 636, 638, 639, 645, 646, 647, 648, 649, 650, 654, 660, 662, 665, 668, 669, 673, 675, 676, 677, 678, 682, 686, 687, 694, 697, 699, 700, 704, 706, 707, 717, 718, 720, 722, 723, 726, 728, 730, 733, 734, 737, 738, 744, 746, 750, 754, 755, 756, 761, 765, 777, 778, 780, 781, 782, 785, 786, 787, 792, 794, 796, 802, 803, 804, 805, 806, 807, 809, 811, 812, 816, 817, 821, 822, 826, 828, 830, 832, 833, 834, 836, 837, 838, 839, 840, 844, 845, 846, 848, 851, 852, 853, 854, 855, 858, 863, 874, 875, 878, 884, 885, 894, 905, 909, 910, 913, 919, 921, 923, 924, 925, 930, 933, 941, 942, 943, 944, 945, 946, 952, 953, 954, 965, 977, 978, 981, 984, 985, 988, 991, 999, 1002, 1004, 1007, 1012, 1013, 1021, 1022, 1024, 1026, 1031, 1035, 1037, 1038, 1040, 1041, 1047, 1049, 1051, 1052, 1062, 1066, 1067, 1072, 1075, 1080, 1081, 1082, 1083, 1084, 1085, 1087, 1090, 1093, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1105, 1106, 1107, 1108, 1109, 1112, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1127, 1128, 1130, 1131, 1133, 1136, 1137, 1138, 1141, 1142, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1158, 1159, 1161, 1162, 1164, 1165, 1171, 1176, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1189, 1191, 1192, 1198, 1199, 1200, 1201, 1206, 1207, 1213, 1214, 1216, 1219, 1220, 1222, 1223, 1226, 1228, 1230, 1231, 1232, 1234, 1235, 1237, 1238, 1239, 1240, 1250, 1254, 1258, 1259], "featur": [1, 45, 49, 51, 86, 300], "i": [1, 6, 17, 19, 22, 37, 39, 40, 41, 42, 43, 44, 49, 51, 58, 59, 60, 61, 65, 70, 72, 81, 86, 87, 88, 89, 91, 93, 95, 96, 98, 103, 105, 107, 108, 109, 110, 111, 112, 113, 116, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 150, 152, 153, 154, 158, 159, 162, 166, 169, 171, 172, 174, 177, 181, 187, 188, 189, 190, 191, 192, 193, 194, 197, 198, 199, 201, 203, 205, 206, 207, 208, 209, 210, 211, 214, 217, 218, 222, 224, 225, 226, 233, 235, 236, 237, 238, 239, 242, 245, 248, 249, 250, 251, 253, 255, 260, 261, 264, 265, 266, 268, 269, 270, 271, 275, 277, 278, 286, 299, 300, 308, 311, 313, 314, 315, 316, 326, 329, 335, 374, 375, 379, 380, 381, 383, 393, 406, 410, 413, 424, 432, 433, 434, 437, 441, 453, 455, 457, 459, 475, 481, 489, 490, 493, 494, 504, 509, 510, 514, 516, 520, 525, 527, 531, 534, 535, 536, 545, 559, 567, 570, 572, 573, 574, 575, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 593, 594, 595, 596, 599, 600, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 618, 619, 620, 621, 624, 625, 629, 631, 632, 633, 634, 636, 639, 640, 643, 645, 646, 647, 648, 651, 652, 653, 655, 657, 660, 678, 679, 682, 684, 687, 692, 694, 696, 697, 698, 699, 700, 701, 704, 705, 709, 710, 712, 713, 718, 722, 723, 724, 727, 730, 733, 734, 737, 738, 741, 742, 743, 744, 746, 750, 752, 753, 754, 755, 756, 761, 765, 780, 781, 785, 786, 787, 792, 794, 796, 799, 802, 803, 804, 805, 806, 807, 810, 811, 812, 814, 816, 817, 821, 822, 826, 830, 833, 834, 836, 838, 839, 840, 841, 845, 846, 848, 849, 852, 855, 858, 863, 875, 878, 882, 883, 884, 885, 898, 904, 922, 925, 930, 933, 945, 946, 947, 950, 951, 952, 954, 964, 981, 985, 988, 999, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1017, 1023, 1024, 1025, 1026, 1031, 1033, 1040, 1047, 1048, 1049, 1051, 1052, 1053, 1055, 1057, 1065, 1066, 1069, 1070, 1080, 1085, 1086, 1090, 1092, 1099, 1117, 1119, 1121, 1123, 1124, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1136, 1137, 1138, 1141, 1142, 1143, 1144, 1145, 1147, 1149, 1153, 1154, 1157, 1158, 1161, 1162, 1163, 1164, 1165, 1166, 1171, 1172, 1173, 1174, 1177, 1178, 1182, 1184, 1185, 1186, 1187, 1189, 1192, 1193, 1196, 1198, 1199, 1200, 1201, 1204, 1205, 1206, 1208, 1210, 1213, 1221, 1226, 1231, 1232, 1238, 1239, 1240, 1250, 1258, 1259], "primarili": 1, "intend": [1, 141, 142, 143, 144, 660, 1213], "us": [1, 12, 14, 16, 17, 19, 25, 30, 32, 37, 38, 40, 45, 48, 58, 61, 65, 66, 67, 68, 70, 72, 73, 81, 88, 89, 90, 91, 108, 110, 111, 113, 115, 118, 119, 120, 121, 122, 123, 124, 126, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 157, 158, 160, 167, 169, 175, 176, 177, 180, 187, 188, 189, 190, 191, 192, 200, 202, 204, 205, 206, 208, 211, 212, 214, 217, 219, 221, 222, 224, 225, 226, 235, 236, 237, 238, 239, 241, 242, 246, 249, 250, 251, 257, 258, 259, 260, 261, 265, 266, 268, 269, 270, 271, 274, 275, 276, 277, 279, 286, 300, 303, 309, 311, 313, 315, 316, 326, 347, 348, 354, 358, 359, 374, 379, 380, 386, 388, 392, 396, 398, 400, 405, 409, 410, 412, 413, 416, 424, 427, 429, 432, 433, 434, 435, 440, 441, 455, 458, 459, 475, 490, 504, 516, 525, 526, 527, 530, 559, 567, 570, 572, 575, 578, 579, 581, 582, 583, 584, 585, 586, 588, 589, 590, 593, 595, 597, 598, 603, 605, 606, 608, 610, 611, 614, 615, 616, 618, 619, 621, 622, 623, 625, 626, 634, 636, 640, 642, 644, 647, 648, 649, 650, 651, 652, 653, 657, 660, 679, 680, 682, 683, 684, 685, 687, 695, 696, 697, 698, 699, 700, 702, 703, 706, 707, 709, 710, 711, 712, 713, 714, 718, 720, 724, 727, 730, 731, 732, 735, 736, 738, 741, 742, 743, 744, 746, 747, 748, 749, 752, 753, 754, 755, 756, 761, 764, 765, 776, 777, 780, 783, 786, 787, 791, 792, 796, 797, 798, 799, 802, 803, 804, 806, 807, 808, 812, 814, 815, 821, 830, 832, 833, 837, 840, 841, 846, 848, 849, 851, 852, 854, 855, 856, 863, 875, 878, 882, 883, 885, 915, 916, 923, 925, 931, 932, 945, 946, 950, 951, 957, 959, 963, 970, 972, 975, 980, 984, 985, 987, 988, 991, 999, 1002, 1005, 1008, 1009, 1010, 1015, 1016, 1020, 1023, 1026, 1029, 1030, 1031, 1037, 1040, 1047, 1049, 1051, 1053, 1066, 1080, 1092, 1098, 1099, 1117, 1119, 1121, 1124, 1127, 1129, 1141, 1142, 1145, 1147, 1150, 1151, 1157, 1161, 1163, 1164, 1167, 1168, 1171, 1172, 1174, 1175, 1176, 1178, 1179, 1187, 1189, 1193, 1195, 1204, 1205, 1206, 1210, 1213, 1222, 1227, 1229, 1230, 1231, 1232, 1239, 1240, 1250, 1254, 1258, 1259], "librari": [1, 100, 120, 123, 525, 765, 1259], "author": 1, "domain": [1, 619, 1172], "specif": [1, 35, 39, 40, 107, 109, 111, 113, 118, 121, 122, 123, 127, 128, 129, 133, 147, 148, 160, 205, 300, 413, 416, 651, 652, 653, 657, 783, 875, 878, 988, 991, 1204, 1205, 1206, 1210, 1250, 1259], "capabl": [1, 40, 300], "which": [1, 11, 15, 25, 36, 37, 39, 40, 41, 42, 43, 44, 45, 58, 59, 60, 61, 72, 81, 82, 83, 84, 85, 110, 118, 119, 120, 121, 122, 123, 132, 133, 134, 141, 142, 149, 151, 159, 160, 169, 174, 175, 187, 188, 189, 190, 191, 192, 198, 208, 235, 260, 264, 266, 270, 300, 311, 406, 410, 413, 424, 438, 459, 461, 465, 468, 470, 471, 472, 516, 525, 527, 536, 578, 579, 582, 583, 584, 585, 586, 588, 589, 590, 633, 655, 709, 710, 712, 713, 714, 752, 753, 755, 765, 781, 783, 792, 794, 803, 804, 806, 807, 812, 830, 834, 845, 846, 875, 981, 985, 988, 999, 1013, 1014, 1030, 1034, 1039, 1043, 1044, 1045, 1046, 1092, 1127, 1145, 1186, 1208, 1231, 1250, 1259], "mai": [1, 39, 49, 51, 61, 88, 89, 107, 109, 110, 111, 113, 118, 120, 122, 124, 127, 128, 133, 134, 135, 136, 138, 141, 143, 166, 172, 174, 188, 208, 211, 235, 246, 261, 268, 269, 270, 300, 315, 374, 381, 382, 394, 406, 410, 413, 416, 424, 435, 455, 493, 514, 516, 525, 527, 535, 579, 582, 583, 584, 585, 586, 588, 589, 590, 597, 625, 700, 701, 704, 705, 709, 710, 712, 713, 718, 740, 752, 753, 765, 786, 787, 796, 803, 812, 816, 817, 830, 837, 848, 854, 855, 858, 863, 875, 924, 925, 945, 947, 952, 953, 965, 981, 985, 988, 991, 999, 1007, 1013, 1026, 1069, 1099, 1117, 1150, 1178, 1206, 1231, 1250, 1259], "exist": [1, 38, 39, 40, 81, 122, 133, 148, 265, 269, 274, 275, 300, 310, 346, 349, 350, 383, 526, 765, 828, 848, 851, 852, 875, 878, 954, 1098, 1250], "belong": [1, 188, 300, 803, 875], "core": [1, 261, 300, 1259], "cannot": [1, 118, 119, 123, 124, 126, 129, 130, 152, 211, 238, 239, 277, 286, 300, 347, 435, 504, 527, 593, 614, 642, 663, 730, 765, 838, 855, 863, 875, 915, 1080, 1099, 1141, 1167, 1195, 1250], "overrid": [1, 40, 107, 109, 110, 111, 112, 113, 118, 120, 121, 123, 127, 128, 129, 145, 146, 150, 152, 300, 526, 765, 875, 1098, 1250], "str": [1, 7, 8, 10, 11, 14, 15, 17, 20, 21, 22, 25, 26, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 51, 58, 59, 60, 61, 65, 66, 67, 68, 69, 70, 81, 82, 83, 84, 85, 86, 107, 108, 109, 110, 111, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 145, 146, 148, 149, 150, 151, 154, 159, 160, 163, 166, 167, 168, 169, 170, 172, 173, 177, 178, 179, 180, 183, 184, 186, 187, 188, 189, 191, 192, 194, 196, 200, 202, 203, 205, 207, 208, 212, 214, 216, 217, 218, 219, 221, 222, 224, 226, 228, 230, 231, 233, 234, 235, 236, 237, 239, 240, 243, 246, 248, 249, 250, 251, 253, 256, 257, 258, 259, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 300, 308, 309, 310, 332, 336, 346, 348, 349, 350, 353, 364, 375, 378, 384, 406, 409, 410, 413, 416, 424, 435, 437, 441, 443, 447, 448, 451, 457, 459, 484, 485, 494, 495, 496, 510, 513, 516, 524, 527, 535, 537, 538, 540, 547, 548, 549, 550, 551, 556, 559, 563, 565, 567, 573, 574, 576, 578, 579, 582, 583, 584, 585, 586, 588, 589, 590, 598, 605, 606, 661, 662, 663, 665, 680, 681, 682, 683, 684, 685, 686, 687, 689, 690, 695, 697, 699, 700, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 726, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 761, 765, 772, 781, 783, 786, 787, 788, 790, 791, 792, 794, 795, 796, 799, 802, 803, 804, 806, 807, 809, 811, 812, 821, 822, 826, 828, 829, 830, 831, 834, 835, 837, 838, 839, 840, 845, 846, 847, 848, 853, 854, 855, 856, 857, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 875, 878, 881, 901, 905, 920, 921, 946, 947, 955, 981, 984, 985, 988, 991, 999, 1012, 1016, 1060, 1061, 1062, 1072, 1092, 1108, 1109, 1117, 1122, 1123, 1145, 1146, 1214, 1216, 1217, 1227, 1228, 1229, 1238, 1250, 1255, 1258, 1259], "dt": [1, 81, 123, 129, 235, 300, 579, 714, 765, 774, 830, 875, 878, 1257], "attempt": [1, 260, 300], "do": [1, 40, 58, 59, 60, 61, 81, 87, 88, 118, 132, 141, 142, 143, 144, 174, 188, 189, 191, 192, 204, 208, 226, 235, 255, 265, 268, 300, 374, 490, 525, 559, 579, 646, 647, 648, 738, 741, 756, 765, 786, 787, 794, 803, 804, 806, 807, 812, 816, 817, 826, 830, 838, 875, 878, 945, 1013, 1066, 1199, 1200, 1201, 1240, 1250], "so": [1, 120, 121, 132, 152, 186, 188, 189, 191, 192, 226, 235, 300, 326, 335, 459, 494, 516, 527, 579, 636, 646, 647, 648, 765, 803, 804, 806, 807, 830, 875, 904, 1070, 1189, 1199, 1200, 1201], "rais": [1, 20, 21, 25, 39, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 118, 119, 123, 129, 132, 141, 143, 156, 226, 236, 300, 347, 409, 410, 424, 493, 514, 535, 567, 610, 614, 621, 633, 651, 652, 653, 655, 657, 711, 727, 765, 915, 984, 985, 999, 1069, 1090, 1117, 1163, 1167, 1174, 1186, 1204, 1205, 1206, 1208, 1210, 1231, 1240, 1250], "an": [1, 35, 37, 38, 39, 40, 49, 51, 58, 59, 60, 82, 84, 85, 87, 88, 91, 96, 97, 100, 107, 118, 119, 120, 121, 122, 123, 125, 129, 130, 132, 134, 135, 146, 148, 150, 160, 161, 162, 172, 175, 180, 188, 189, 191, 192, 204, 205, 206, 208, 211, 222, 226, 232, 233, 235, 236, 255, 260, 265, 268, 269, 274, 277, 286, 300, 310, 333, 335, 343, 347, 352, 358, 359, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 383, 384, 406, 409, 413, 427, 438, 440, 441, 447, 448, 451, 474, 486, 487, 490, 493, 494, 514, 515, 516, 524, 525, 527, 536, 546, 547, 566, 567, 575, 579, 580, 582, 583, 584, 585, 586, 588, 589, 590, 610, 614, 619, 621, 622, 651, 652, 653, 655, 657, 668, 674, 682, 688, 692, 709, 710, 712, 713, 715, 717, 720, 724, 725, 726, 727, 738, 740, 741, 744, 747, 752, 753, 755, 756, 761, 765, 777, 783, 784, 785, 786, 787, 794, 796, 799, 803, 804, 806, 807, 812, 817, 826, 830, 838, 848, 851, 853, 855, 863, 875, 878, 902, 904, 912, 915, 920, 929, 931, 932, 933, 937, 938, 939, 940, 941, 942, 943, 944, 945, 954, 988, 1002, 1007, 1014, 1040, 1052, 1062, 1063, 1066, 1069, 1070, 1090, 1091, 1099, 1128, 1130, 1131, 1132, 1133, 1134, 1136, 1137, 1138, 1142, 1145, 1163, 1167, 1172, 1174, 1175, 1204, 1205, 1206, 1208, 1210, 1231, 1240, 1250, 1258], "attributeerror": 1, "howev": [1, 110, 120, 172, 211, 260, 300, 1007, 1250], "can": [1, 19, 32, 40, 45, 48, 70, 72, 73, 81, 90, 91, 97, 110, 118, 119, 120, 123, 124, 129, 130, 132, 135, 137, 138, 146, 147, 148, 150, 152, 154, 159, 161, 169, 170, 180, 187, 188, 189, 190, 191, 192, 200, 202, 204, 211, 222, 226, 235, 238, 241, 249, 260, 264, 265, 268, 274, 277, 286, 300, 303, 311, 315, 365, 368, 374, 402, 403, 406, 409, 413, 416, 424, 438, 441, 459, 474, 490, 516, 525, 527, 535, 543, 546, 548, 549, 550, 551, 559, 565, 567, 572, 578, 579, 582, 583, 584, 585, 586, 588, 589, 590, 595, 598, 600, 603, 606, 611, 624, 636, 646, 647, 648, 651, 665, 691, 718, 720, 724, 730, 755, 761, 764, 765, 776, 781, 786, 792, 794, 796, 803, 804, 806, 807, 830, 832, 834, 840, 845, 851, 854, 855, 875, 878, 885, 925, 945, 946, 977, 978, 981, 984, 985, 988, 991, 999, 1014, 1030, 1066, 1092, 1099, 1104, 1117, 1121, 1123, 1127, 1142, 1145, 1147, 1151, 1154, 1157, 1164, 1165, 1166, 1173, 1177, 1189, 1199, 1200, 1201, 1204, 1206, 1231, 1250, 1254, 1258], "other": [1, 25, 40, 45, 70, 88, 118, 119, 120, 132, 141, 142, 143, 144, 169, 171, 174, 177, 181, 207, 208, 217, 218, 236, 238, 241, 242, 269, 272, 274, 275, 298, 300, 308, 312, 314, 326, 357, 378, 430, 431, 441, 445, 450, 452, 459, 464, 477, 484, 505, 506, 507, 508, 522, 531, 534, 542, 544, 554, 555, 558, 574, 606, 664, 672, 674, 681, 683, 685, 693, 694, 695, 703, 707, 709, 732, 736, 744, 747, 749, 765, 777, 787, 792, 799, 811, 812, 821, 822, 832, 833, 848, 851, 852, 853, 875, 878, 884, 930, 949, 1006, 1013, 1038, 1060, 1081, 1082, 1083, 1084, 1123, 1144, 1233, 1241, 1249, 1250], "onli": [1, 15, 18, 25, 35, 37, 40, 58, 65, 67, 72, 81, 86, 89, 91, 118, 119, 122, 124, 126, 130, 132, 133, 135, 136, 137, 138, 141, 142, 143, 144, 148, 150, 154, 157, 169, 174, 188, 191, 193, 205, 207, 208, 211, 212, 214, 219, 226, 235, 237, 238, 251, 257, 259, 260, 269, 270, 286, 300, 309, 311, 313, 315, 326, 356, 357, 406, 414, 435, 444, 453, 474, 525, 527, 546, 548, 549, 550, 551, 559, 565, 572, 582, 583, 584, 585, 586, 588, 589, 590, 611, 636, 665, 676, 709, 710, 730, 765, 786, 792, 803, 804, 806, 807, 808, 811, 812, 815, 830, 848, 863, 875, 882, 883, 884, 927, 930, 946, 981, 1013, 1019, 1024, 1040, 1099, 1117, 1121, 1164, 1189, 1226, 1229, 1250, 1258, 1259], "gener": [1, 120, 121, 139, 145, 146, 147, 148, 150, 156, 164, 226, 239, 258, 260, 265, 300, 504, 593, 599, 688, 709, 712, 724, 725, 741, 752, 753, 765, 875, 1080, 1141, 1153, 1227, 1250, 1259], "userwarn": 1, "pl": [1, 2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 58, 59, 60, 61, 62, 65, 66, 67, 68, 69, 70, 72, 73, 81, 82, 83, 84, 85, 89, 90, 91, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 129, 132, 133, 134, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 152, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 180, 182, 183, 184, 185, 186, 187, 188, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 300, 303, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 355, 356, 357, 360, 361, 362, 363, 364, 365, 366, 367, 368, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 393, 394, 395, 397, 399, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 631, 632, 634, 635, 636, 637, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 709, 710, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 744, 745, 746, 747, 748, 749, 750, 752, 753, 754, 755, 756, 761, 765, 778, 780, 781, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 808, 809, 810, 811, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 836, 838, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 875, 878, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 919, 920, 921, 922, 924, 925, 926, 927, 928, 929, 930, 933, 934, 935, 936, 937, 938, 939, 940, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 960, 961, 962, 964, 965, 966, 967, 968, 969, 971, 973, 974, 976, 977, 978, 979, 981, 982, 983, 984, 985, 986, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1056, 1057, 1058, 1059, 1060, 1061, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1144, 1145, 1147, 1148, 1149, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1166, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1177, 1178, 1179, 1184, 1185, 1187, 1188, 1189, 1190, 1193, 1195, 1196, 1197, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1216, 1219, 1220, 1221, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1241, 1250, 1254, 1258, 1259], "register_expr_namespac": [1, 82, 84, 85], "greet": 1, "def": [1, 72, 82, 83, 84, 85, 146, 147, 148, 150, 154, 225, 265, 300, 308, 563, 619, 648, 681, 729, 765, 787, 825, 875, 878, 1172, 1259], "__init__": [1, 2, 3, 4, 5, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 62, 63, 64, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 83, 84, 85, 145, 1258], "self": [1, 66, 67, 68, 70, 82, 83, 84, 85, 87, 88, 161, 162, 166, 174, 194, 196, 197, 198, 210, 212, 214, 216, 217, 219, 223, 224, 226, 228, 229, 231, 232, 233, 239, 247, 248, 250, 251, 253, 258, 265, 267, 270, 271, 272, 276, 277, 278, 300, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 345, 351, 352, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 541, 542, 543, 544, 545, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 761, 765, 780, 781, 782, 783, 785, 786, 787, 789, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 801, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 875, 884, 885, 920, 933, 1013, 1017, 1027, 1097, 1098, 1099, 1110, 1114, 1115, 1120, 1123, 1142, 1145, 1147, 1159, 1237, 1241, 1250], "_expr": [1, 83], "hello": [1, 25, 66, 69, 646, 647, 648, 1072, 1199, 1200, 1201], "return": [1, 10, 11, 35, 37, 38, 39, 40, 41, 42, 43, 44, 58, 59, 60, 61, 65, 69, 72, 81, 82, 83, 84, 85, 86, 87, 88, 98, 101, 106, 107, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 136, 147, 157, 159, 161, 164, 165, 168, 170, 172, 173, 174, 175, 176, 179, 180, 182, 183, 186, 187, 188, 190, 191, 194, 196, 203, 204, 205, 206, 207, 209, 210, 211, 213, 215, 220, 221, 222, 224, 225, 226, 235, 236, 237, 238, 239, 252, 253, 254, 260, 261, 264, 265, 266, 270, 274, 275, 282, 284, 286, 289, 294, 300, 311, 313, 317, 318, 319, 320, 321, 322, 325, 326, 330, 331, 332, 335, 336, 343, 346, 348, 349, 350, 351, 360, 361, 362, 363, 364, 375, 376, 381, 385, 386, 387, 389, 391, 393, 394, 395, 397, 399, 401, 402, 403, 404, 406, 407, 408, 410, 411, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 437, 448, 449, 451, 454, 455, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 478, 479, 482, 483, 485, 491, 493, 494, 495, 496, 498, 499, 504, 513, 514, 515, 521, 526, 536, 538, 543, 563, 567, 569, 573, 574, 575, 577, 593, 594, 600, 601, 602, 609, 610, 612, 613, 615, 617, 618, 619, 620, 621, 624, 625, 626, 627, 628, 630, 631, 632, 637, 638, 640, 641, 642, 643, 655, 660, 667, 669, 670, 671, 673, 674, 676, 677, 678, 681, 682, 686, 688, 689, 690, 691, 692, 697, 699, 708, 709, 710, 711, 712, 713, 714, 717, 720, 722, 724, 725, 726, 727, 728, 729, 730, 738, 741, 744, 747, 750, 751, 752, 753, 755, 756, 765, 781, 784, 786, 787, 789, 793, 794, 796, 801, 803, 804, 806, 807, 808, 811, 814, 815, 817, 825, 826, 830, 834, 838, 843, 844, 845, 846, 851, 852, 859, 861, 866, 871, 875, 882, 883, 884, 892, 893, 895, 896, 897, 898, 899, 900, 901, 904, 905, 912, 914, 916, 919, 922, 925, 929, 946, 947, 952, 956, 957, 958, 960, 962, 964, 965, 966, 967, 968, 969, 971, 973, 974, 976, 977, 978, 979, 981, 982, 983, 985, 986, 989, 990, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1006, 1007, 1012, 1013, 1018, 1021, 1023, 1025, 1026, 1032, 1034, 1035, 1036, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1050, 1052, 1054, 1055, 1056, 1057, 1058, 1059, 1061, 1067, 1069, 1070, 1071, 1072, 1074, 1075, 1080, 1089, 1090, 1091, 1097, 1098, 1099, 1104, 1111, 1117, 1123, 1124, 1125, 1126, 1127, 1141, 1143, 1144, 1154, 1162, 1163, 1165, 1166, 1168, 1170, 1171, 1172, 1173, 1174, 1177, 1178, 1179, 1180, 1181, 1183, 1184, 1185, 1190, 1191, 1193, 1194, 1195, 1196, 1208, 1213, 1221, 1223, 1234, 1236, 1237, 1238, 1241, 1250, 1258, 1259], "lit": [1, 310, 346, 459, 474, 546, 621, 700, 704, 718, 738, 741, 756, 765, 1016, 1250], "alia": [1, 17, 80, 81, 83, 85, 188, 210, 226, 235, 267, 274, 277, 300, 308, 312, 346, 348, 349, 350, 351, 364, 365, 366, 367, 368, 375, 377, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 394, 395, 397, 399, 401, 404, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 421, 423, 424, 425, 426, 427, 428, 430, 431, 443, 445, 450, 452, 457, 459, 463, 467, 474, 477, 479, 522, 527, 531, 532, 533, 534, 536, 539, 542, 544, 546, 554, 555, 558, 560, 564, 567, 570, 572, 592, 594, 610, 611, 613, 616, 618, 619, 621, 625, 626, 636, 637, 640, 641, 642, 643, 644, 649, 650, 661, 662, 663, 664, 672, 673, 674, 680, 681, 688, 689, 690, 693, 694, 695, 709, 712, 714, 715, 718, 719, 724, 729, 730, 740, 747, 752, 755, 765, 803, 809, 815, 830, 847, 851, 855, 875, 946, 952, 953, 955, 958, 960, 961, 962, 968, 969, 971, 974, 976, 977, 978, 979, 981, 982, 983, 984, 985, 988, 990, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1055, 1117, 1122, 1171, 1172, 1195, 1196, 1250], "hi": 1, "goodby": 1, "say\u014dnara": 1, "bye": 1, "world": [1, 25, 66, 69, 611, 636, 646, 647, 648, 658, 1072, 1164, 1189, 1199, 1200, 1201, 1211], "select": [1, 13, 38, 65, 66, 67, 81, 82, 83, 84, 117, 118, 119, 120, 121, 122, 124, 126, 130, 132, 138, 147, 203, 204, 208, 211, 222, 225, 236, 242, 248, 262, 267, 270, 277, 300, 307, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 338, 339, 342, 343, 344, 345, 346, 349, 350, 351, 353, 355, 356, 360, 361, 362, 363, 374, 376, 377, 378, 379, 380, 382, 383, 384, 393, 394, 402, 403, 406, 409, 417, 418, 419, 420, 421, 422, 423, 424, 427, 428, 429, 432, 433, 434, 435, 436, 437, 438, 442, 444, 446, 449, 453, 455, 456, 457, 458, 460, 461, 465, 473, 474, 475, 476, 478, 490, 491, 516, 518, 519, 520, 521, 525, 527, 528, 529, 530, 541, 543, 545, 546, 552, 553, 556, 557, 558, 561, 562, 566, 568, 569, 570, 571, 572, 573, 575, 576, 577, 581, 587, 591, 593, 594, 595, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 617, 618, 619, 620, 621, 651, 661, 663, 666, 670, 671, 673, 675, 676, 677, 678, 679, 682, 684, 687, 689, 690, 691, 692, 694, 696, 697, 698, 699, 702, 713, 714, 716, 717, 718, 719, 720, 722, 723, 724, 726, 731, 733, 734, 735, 737, 740, 741, 745, 746, 747, 748, 750, 754, 761, 765, 788, 812, 825, 833, 834, 839, 847, 853, 855, 875, 878, 911, 913, 984, 1020, 1066, 1142, 1145, 1158, 1177, 1204, 1222, 1250, 1258], "shape": [1, 2, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 32, 33, 62, 65, 66, 67, 69, 72, 73, 81, 82, 83, 84, 85, 89, 90, 91, 104, 107, 108, 109, 110, 111, 112, 113, 114, 118, 132, 138, 148, 150, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 173, 174, 175, 176, 177, 180, 182, 183, 185, 187, 188, 193, 194, 196, 198, 199, 200, 202, 203, 204, 207, 208, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 226, 227, 228, 230, 231, 233, 234, 235, 239, 241, 245, 248, 249, 250, 251, 252, 253, 256, 258, 259, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 300, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 355, 356, 357, 360, 361, 362, 363, 364, 365, 366, 367, 368, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 393, 394, 395, 397, 399, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 527, 528, 529, 530, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 631, 632, 634, 635, 636, 637, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 709, 710, 712, 713, 714, 715, 716, 717, 718, 719, 720, 722, 723, 724, 725, 726, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 744, 745, 746, 747, 748, 749, 750, 752, 753, 754, 755, 756, 761, 765, 780, 781, 783, 784, 786, 787, 789, 790, 791, 792, 795, 796, 797, 798, 799, 800, 801, 802, 803, 808, 810, 811, 812, 813, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 834, 836, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 851, 853, 854, 855, 856, 857, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 875, 878, 880, 881, 884, 886, 887, 888, 889, 890, 891, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 919, 920, 921, 924, 926, 927, 929, 930, 933, 934, 935, 936, 937, 938, 939, 940, 945, 946, 947, 948, 950, 951, 952, 953, 954, 955, 956, 957, 958, 960, 961, 962, 964, 965, 968, 969, 971, 974, 976, 977, 978, 979, 981, 982, 983, 984, 985, 986, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1008, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1024, 1025, 1026, 1027, 1029, 1030, 1032, 1034, 1036, 1038, 1039, 1042, 1043, 1044, 1045, 1046, 1050, 1052, 1056, 1057, 1058, 1059, 1060, 1061, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1099, 1104, 1111, 1113, 1114, 1115, 1117, 1119, 1122, 1123, 1124, 1125, 1126, 1127, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1145, 1149, 1153, 1154, 1155, 1156, 1158, 1159, 1160, 1162, 1163, 1164, 1166, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1177, 1178, 1179, 1184, 1185, 1187, 1188, 1189, 1190, 1193, 1195, 1196, 1197, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1216, 1219, 1221, 1224, 1225, 1227, 1228, 1229, 1233, 1234, 1235, 1236, 1237, 1238, 1241, 1250, 1258], "3": [1, 2, 12, 13, 14, 15, 16, 18, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 32, 36, 37, 39, 40, 41, 42, 43, 44, 45, 62, 65, 67, 68, 70, 81, 82, 83, 84, 85, 89, 91, 107, 108, 109, 110, 111, 112, 113, 114, 118, 121, 123, 129, 132, 138, 140, 141, 142, 143, 144, 147, 148, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 177, 180, 182, 183, 184, 185, 186, 187, 188, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 300, 303, 308, 309, 310, 311, 313, 325, 326, 327, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 355, 356, 363, 364, 365, 366, 367, 368, 374, 375, 377, 378, 379, 380, 382, 383, 384, 385, 386, 390, 391, 393, 394, 395, 397, 399, 401, 404, 406, 408, 409, 410, 411, 413, 414, 415, 416, 417, 424, 425, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 473, 474, 475, 477, 478, 479, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 518, 519, 520, 521, 522, 524, 525, 527, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 554, 556, 557, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 603, 605, 606, 607, 610, 611, 612, 615, 616, 618, 619, 620, 621, 622, 625, 626, 629, 634, 636, 637, 639, 640, 641, 642, 643, 644, 645, 652, 657, 661, 662, 663, 664, 665, 667, 673, 676, 677, 678, 680, 681, 687, 688, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 709, 710, 712, 713, 714, 715, 716, 717, 718, 719, 722, 723, 724, 725, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 744, 745, 746, 747, 748, 749, 750, 752, 753, 754, 755, 756, 761, 765, 780, 781, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 799, 800, 801, 802, 803, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 836, 838, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 875, 878, 880, 881, 884, 886, 888, 889, 890, 892, 893, 894, 895, 896, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 913, 919, 920, 921, 924, 926, 927, 928, 933, 934, 935, 936, 937, 938, 939, 940, 945, 946, 947, 948, 949, 950, 951, 953, 954, 955, 958, 961, 962, 964, 966, 967, 968, 973, 974, 976, 982, 984, 985, 986, 988, 990, 991, 992, 994, 995, 997, 999, 1001, 1002, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1024, 1025, 1026, 1027, 1029, 1030, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1053, 1054, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1073, 1074, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1111, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1122, 1123, 1124, 1125, 1126, 1127, 1129, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1145, 1147, 1148, 1149, 1153, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1164, 1165, 1168, 1169, 1171, 1172, 1173, 1175, 1178, 1179, 1182, 1187, 1189, 1190, 1192, 1193, 1197, 1198, 1205, 1210, 1216, 1219, 1220, 1221, 1224, 1225, 1226, 1227, 1230, 1231, 1232, 1234, 1235, 1236, 1237, 1238, 1239, 1241, 1250, 1258, 1259], "1": [1, 2, 12, 13, 14, 16, 17, 18, 20, 22, 23, 24, 26, 27, 28, 29, 30, 32, 33, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 61, 62, 65, 66, 67, 68, 69, 70, 73, 81, 82, 83, 84, 85, 89, 107, 108, 109, 110, 111, 112, 113, 114, 118, 119, 122, 123, 124, 129, 132, 133, 134, 137, 138, 140, 141, 142, 143, 144, 145, 148, 150, 156, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 180, 182, 183, 184, 185, 186, 187, 188, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 300, 303, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 330, 331, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 351, 352, 353, 355, 356, 357, 360, 361, 362, 363, 364, 365, 366, 367, 368, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 390, 391, 393, 394, 395, 397, 399, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 467, 468, 470, 471, 472, 473, 474, 475, 476, 478, 479, 482, 483, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 527, 528, 529, 530, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 634, 635, 642, 643, 644, 646, 647, 648, 660, 661, 662, 663, 664, 665, 666, 667, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 687, 688, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 722, 723, 724, 725, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 752, 753, 754, 755, 761, 765, 780, 781, 783, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 808, 809, 810, 811, 812, 813, 815, 818, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 836, 837, 838, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 875, 878, 880, 881, 884, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 913, 919, 920, 924, 926, 927, 928, 930, 933, 934, 935, 937, 938, 939, 940, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 961, 962, 964, 965, 966, 967, 968, 969, 971, 973, 974, 976, 977, 978, 979, 981, 982, 983, 984, 985, 986, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1024, 1025, 1026, 1027, 1029, 1030, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1054, 1058, 1059, 1061, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1073, 1074, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1141, 1142, 1143, 1145, 1147, 1148, 1149, 1150, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1171, 1173, 1174, 1175, 1177, 1178, 1179, 1187, 1195, 1196, 1213, 1216, 1219, 1220, 1221, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1241, 1250, 1254, 1258, 1259], "2": [1, 2, 12, 13, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 36, 37, 39, 40, 41, 42, 43, 44, 45, 62, 65, 67, 68, 70, 73, 81, 82, 83, 84, 85, 89, 107, 108, 109, 110, 111, 112, 113, 114, 118, 121, 132, 138, 139, 140, 141, 142, 143, 144, 147, 148, 150, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 180, 182, 183, 184, 185, 186, 187, 188, 194, 195, 196, 198, 200, 201, 202, 203, 204, 205, 207, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 300, 303, 307, 308, 309, 310, 312, 314, 316, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 351, 352, 355, 356, 357, 362, 363, 364, 365, 366, 367, 368, 374, 375, 377, 378, 381, 383, 384, 385, 386, 387, 389, 401, 402, 403, 406, 407, 408, 409, 410, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 527, 538, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 603, 604, 605, 606, 607, 609, 611, 613, 615, 616, 618, 620, 621, 622, 624, 625, 626, 631, 632, 634, 635, 636, 637, 640, 642, 643, 644, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 667, 670, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 709, 710, 713, 714, 715, 716, 717, 718, 719, 720, 722, 723, 724, 725, 726, 727, 729, 730, 731, 733, 734, 735, 737, 740, 744, 745, 746, 747, 748, 750, 753, 754, 755, 761, 765, 780, 781, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 808, 809, 811, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 834, 836, 838, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 875, 878, 880, 881, 884, 887, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 919, 924, 926, 927, 928, 929, 933, 934, 936, 938, 939, 940, 945, 946, 947, 948, 949, 952, 954, 956, 957, 960, 962, 966, 967, 968, 973, 974, 976, 977, 978, 983, 984, 985, 989, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1024, 1025, 1026, 1027, 1029, 1030, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1054, 1058, 1059, 1060, 1061, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1122, 1123, 1124, 1125, 1126, 1127, 1129, 1130, 1131, 1132, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1145, 1147, 1148, 1149, 1153, 1155, 1157, 1158, 1159, 1160, 1161, 1162, 1166, 1171, 1173, 1174, 1175, 1177, 1179, 1187, 1188, 1195, 1196, 1199, 1200, 1201, 1204, 1206, 1207, 1208, 1209, 1211, 1212, 1216, 1219, 1220, 1221, 1224, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1234, 1235, 1236, 1237, 1238, 1239, 1241, 1250, 1254, 1258, 1259], "column_0": [1, 211, 265, 300], "register_dataframe_namespac": [1, 83, 84, 85], "split": [1, 40, 82, 206, 300, 642, 643, 1195, 1196], "splitfram": [1, 82], "df": [1, 12, 13, 14, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 36, 37, 39, 40, 41, 42, 43, 44, 45, 62, 65, 66, 82, 83, 107, 108, 109, 110, 111, 112, 113, 114, 119, 120, 121, 132, 146, 148, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 175, 176, 177, 180, 183, 184, 185, 186, 187, 188, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 300, 303, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 351, 352, 353, 355, 356, 357, 360, 361, 362, 363, 364, 365, 366, 367, 368, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 393, 394, 395, 397, 399, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 527, 528, 529, 530, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 631, 632, 634, 635, 636, 637, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 654, 655, 656, 658, 659, 660, 661, 663, 664, 665, 666, 667, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 710, 713, 714, 715, 716, 717, 718, 719, 720, 722, 723, 724, 725, 726, 729, 730, 731, 732, 733, 734, 735, 736, 737, 740, 744, 745, 746, 747, 748, 749, 750, 753, 754, 755, 761, 765, 803, 830, 834, 847, 848, 861, 863, 871, 875, 878, 911, 913, 984, 1177, 1188, 1195, 1196, 1228, 1250, 1259], "_df": [1, 82], "by_alternate_row": 1, "list": [1, 2, 18, 39, 40, 48, 65, 69, 73, 81, 82, 84, 87, 88, 107, 109, 110, 111, 113, 114, 116, 117, 118, 119, 121, 122, 123, 124, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 146, 147, 148, 150, 163, 167, 170, 172, 173, 177, 185, 187, 188, 196, 205, 221, 224, 236, 237, 238, 241, 249, 256, 257, 265, 266, 267, 268, 274, 279, 280, 300, 309, 343, 344, 375, 437, 443, 448, 456, 464, 523, 525, 527, 536, 537, 559, 567, 573, 575, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 605, 606, 619, 641, 661, 663, 668, 672, 691, 694, 710, 713, 715, 723, 725, 727, 730, 745, 747, 753, 765, 788, 793, 795, 799, 802, 803, 832, 840, 846, 847, 851, 853, 856, 857, 875, 878, 912, 913, 928, 946, 1007, 1012, 1017, 1020, 1022, 1026, 1027, 1038, 1117, 1124, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1136, 1137, 1138, 1143, 1164, 1172, 1189, 1194, 1222, 1230, 1233, 1250, 1259], "with_row_index": [1, 276, 300, 582, 583, 585, 588, 589, 590, 765, 854, 875, 1142, 1250], "name": [1, 23, 27, 29, 36, 37, 38, 40, 43, 58, 66, 67, 68, 69, 70, 73, 82, 83, 84, 85, 89, 95, 107, 109, 110, 111, 112, 113, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 143, 144, 145, 146, 148, 149, 150, 151, 159, 160, 163, 167, 168, 169, 173, 177, 178, 179, 183, 184, 186, 187, 190, 203, 204, 205, 207, 208, 211, 213, 215, 217, 218, 220, 224, 226, 230, 236, 237, 238, 240, 241, 242, 249, 252, 256, 258, 260, 263, 264, 265, 266, 267, 268, 269, 274, 275, 276, 277, 278, 279, 300, 310, 315, 346, 348, 349, 350, 375, 413, 416, 435, 441, 459, 468, 470, 471, 472, 474, 516, 524, 527, 535, 537, 539, 559, 565, 567, 576, 606, 619, 620, 661, 663, 665, 682, 683, 684, 685, 687, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 702, 703, 706, 707, 716, 717, 722, 723, 726, 731, 732, 733, 734, 735, 736, 737, 739, 742, 743, 744, 746, 747, 748, 749, 750, 754, 755, 761, 765, 781, 783, 788, 791, 792, 795, 799, 802, 805, 811, 812, 821, 822, 828, 831, 832, 833, 834, 840, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 875, 878, 881, 929, 946, 988, 991, 1018, 1092, 1117, 1122, 1171, 1172, 1173, 1187, 1214, 1217, 1227, 1228, 1232, 1250, 1258, 1259], "n": [1, 17, 18, 22, 30, 37, 44, 48, 50, 58, 67, 68, 82, 83, 84, 85, 116, 118, 119, 132, 157, 161, 174, 182, 188, 194, 205, 206, 210, 211, 237, 238, 239, 245, 246, 250, 253, 254, 257, 259, 271, 284, 294, 300, 316, 351, 374, 377, 382, 383, 390, 415, 427, 438, 441, 449, 454, 479, 488, 495, 504, 505, 509, 513, 516, 560, 563, 573, 588, 590, 593, 596, 597, 603, 608, 625, 626, 634, 642, 643, 646, 647, 653, 667, 669, 673, 674, 679, 681, 696, 698, 709, 710, 711, 712, 713, 714, 720, 722, 738, 741, 742, 743, 746, 750, 754, 756, 765, 784, 786, 801, 803, 808, 815, 836, 837, 841, 843, 844, 849, 861, 871, 875, 878, 919, 929, 945, 948, 953, 954, 961, 990, 1002, 1013, 1014, 1021, 1025, 1055, 1064, 1071, 1080, 1081, 1085, 1089, 1092, 1113, 1136, 1138, 1141, 1149, 1150, 1157, 1161, 1178, 1179, 1187, 1195, 1196, 1206, 1221, 1223, 1229, 1234, 1239, 1250, 1258, 1259], "filter": [1, 82, 122, 132, 133, 138, 169, 200, 201, 202, 207, 226, 286, 300, 535, 537, 616, 644, 680, 718, 755, 765, 792, 796, 809, 811, 863, 875, 878, 1145, 1250], "col": [1, 17, 37, 40, 58, 81, 82, 83, 84, 111, 113, 132, 146, 148, 177, 187, 188, 201, 203, 209, 211, 222, 225, 226, 235, 236, 241, 249, 267, 268, 274, 279, 300, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 348, 349, 350, 351, 352, 353, 355, 356, 357, 360, 361, 362, 364, 365, 366, 367, 368, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 393, 394, 395, 397, 399, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 448, 449, 450, 451, 452, 455, 457, 458, 459, 460, 463, 464, 467, 468, 470, 473, 474, 475, 476, 477, 480, 481, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 544, 545, 546, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 613, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 631, 632, 634, 635, 636, 637, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 666, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 687, 692, 693, 694, 695, 697, 699, 702, 714, 717, 718, 719, 720, 721, 722, 723, 726, 731, 733, 734, 735, 737, 739, 740, 746, 748, 750, 754, 755, 765, 785, 799, 802, 803, 809, 814, 825, 830, 832, 840, 847, 851, 853, 856, 875, 878, 911, 913, 981, 984, 1066, 1124, 1142, 1145, 1177, 1204, 1250, 1259], "0": [1, 12, 14, 16, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 40, 45, 49, 61, 62, 65, 70, 81, 82, 83, 85, 89, 91, 108, 118, 119, 120, 121, 123, 124, 126, 129, 130, 132, 135, 136, 137, 138, 140, 145, 146, 147, 148, 150, 156, 157, 160, 161, 162, 164, 165, 166, 167, 170, 171, 175, 176, 178, 180, 181, 182, 185, 186, 187, 188, 189, 190, 191, 192, 193, 197, 198, 199, 203, 205, 206, 207, 209, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 226, 227, 228, 232, 233, 237, 238, 239, 240, 241, 246, 248, 249, 250, 251, 252, 254, 258, 259, 260, 261, 262, 265, 268, 270, 271, 274, 276, 277, 279, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 300, 307, 309, 310, 312, 315, 317, 318, 319, 320, 321, 322, 325, 326, 327, 330, 331, 333, 335, 352, 355, 356, 358, 359, 360, 361, 362, 369, 370, 371, 372, 373, 374, 375, 376, 379, 380, 385, 386, 388, 391, 392, 395, 396, 397, 398, 399, 400, 404, 405, 409, 411, 412, 414, 419, 420, 422, 423, 424, 427, 430, 431, 432, 433, 434, 436, 438, 439, 440, 441, 444, 445, 449, 450, 452, 453, 455, 458, 461, 462, 465, 466, 468, 469, 470, 471, 472, 474, 475, 477, 482, 483, 486, 487, 490, 493, 494, 499, 501, 514, 516, 518, 519, 520, 522, 523, 524, 525, 526, 528, 529, 530, 536, 541, 542, 544, 546, 552, 553, 554, 555, 557, 558, 560, 563, 564, 565, 567, 568, 569, 570, 574, 578, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 597, 598, 600, 601, 602, 603, 607, 608, 612, 613, 618, 619, 621, 623, 627, 628, 629, 630, 633, 638, 639, 645, 651, 653, 664, 665, 666, 668, 669, 670, 671, 672, 674, 679, 680, 682, 686, 688, 689, 690, 691, 692, 693, 694, 696, 698, 700, 704, 706, 707, 709, 711, 715, 718, 724, 725, 728, 730, 733, 734, 739, 740, 745, 751, 752, 753, 754, 755, 756, 761, 765, 783, 784, 785, 789, 791, 793, 797, 798, 801, 802, 803, 804, 805, 806, 807, 810, 811, 814, 816, 817, 820, 824, 826, 827, 831, 832, 837, 838, 840, 841, 844, 849, 851, 853, 854, 855, 856, 858, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 875, 878, 885, 886, 887, 888, 889, 890, 891, 892, 894, 896, 899, 904, 920, 924, 926, 927, 929, 931, 932, 934, 935, 936, 941, 942, 943, 944, 945, 946, 947, 949, 950, 951, 957, 959, 962, 963, 967, 968, 969, 970, 971, 972, 974, 975, 979, 980, 984, 985, 986, 987, 994, 995, 997, 998, 999, 1002, 1005, 1008, 1009, 1010, 1015, 1019, 1021, 1024, 1026, 1029, 1031, 1034, 1035, 1037, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1049, 1051, 1052, 1053, 1058, 1059, 1062, 1063, 1066, 1069, 1070, 1075, 1077, 1090, 1092, 1094, 1095, 1096, 1097, 1098, 1101, 1102, 1113, 1117, 1118, 1119, 1123, 1127, 1128, 1129, 1131, 1132, 1134, 1135, 1136, 1138, 1139, 1140, 1141, 1144, 1146, 1150, 1154, 1155, 1156, 1157, 1160, 1161, 1165, 1166, 1171, 1172, 1174, 1176, 1177, 1180, 1181, 1182, 1183, 1186, 1191, 1192, 1198, 1204, 1206, 1222, 1223, 1224, 1225, 1227, 1232, 1233, 1237, 1239, 1240, 1250, 1259], "drop": [1, 110, 168, 169, 211, 266, 274, 300, 377, 379, 380, 488, 489, 567, 765, 792, 846, 851, 875, 948, 950, 951, 1064, 1065, 1117, 1250], "aaa": [1, 40, 300, 610, 621, 661, 663, 1163, 1174], "bbb": [1, 40, 300, 661, 663, 878], "ccc": [1, 40, 300, 661, 663], "ddd": [1, 40, 300, 661, 663], "eee": [1, 40, 300, 878], "fff": 1, "column": [1, 15, 21, 22, 23, 26, 27, 29, 39, 40, 43, 48, 72, 73, 81, 82, 89, 91, 93, 95, 107, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 141, 142, 143, 144, 148, 159, 160, 164, 165, 167, 168, 169, 170, 173, 177, 178, 179, 183, 184, 186, 187, 188, 189, 190, 191, 192, 196, 197, 198, 203, 204, 205, 207, 208, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 235, 236, 237, 238, 240, 241, 242, 243, 249, 250, 251, 252, 256, 258, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 274, 275, 276, 277, 279, 300, 310, 311, 313, 325, 340, 341, 343, 357, 363, 364, 375, 383, 385, 386, 387, 391, 393, 394, 395, 397, 399, 401, 404, 407, 408, 411, 413, 414, 416, 425, 426, 428, 435, 437, 441, 443, 455, 459, 474, 478, 484, 491, 493, 511, 514, 515, 516, 526, 527, 533, 535, 537, 546, 548, 549, 550, 551, 559, 565, 567, 571, 573, 575, 578, 579, 582, 583, 584, 585, 586, 588, 589, 590, 598, 605, 606, 609, 617, 621, 642, 643, 651, 652, 653, 654, 655, 657, 662, 665, 680, 682, 683, 684, 685, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 716, 717, 718, 720, 721, 722, 723, 724, 725, 726, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 761, 765, 781, 783, 789, 791, 792, 793, 795, 799, 802, 803, 804, 805, 806, 807, 811, 812, 817, 818, 819, 820, 821, 823, 824, 825, 827, 828, 830, 831, 832, 833, 834, 835, 840, 841, 842, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 863, 875, 878, 882, 883, 909, 910, 912, 922, 924, 930, 946, 956, 957, 958, 962, 964, 965, 969, 971, 974, 976, 979, 982, 983, 986, 988, 989, 991, 1000, 1001, 1003, 1012, 1023, 1026, 1060, 1067, 1069, 1087, 1091, 1117, 1124, 1127, 1151, 1162, 1170, 1174, 1195, 1196, 1204, 1205, 1206, 1207, 1208, 1210, 1216, 1219, 1227, 1228, 1250, 1259], "txt": [1, 17, 132, 610, 621, 1174], "string": [1, 5, 7, 8, 10, 11, 17, 19, 20, 21, 25, 36, 37, 38, 40, 43, 44, 48, 51, 58, 65, 72, 73, 80, 90, 91, 110, 114, 118, 119, 120, 121, 132, 141, 142, 143, 144, 145, 146, 147, 150, 153, 159, 160, 170, 172, 173, 180, 186, 187, 188, 190, 208, 224, 226, 235, 238, 240, 241, 242, 249, 259, 260, 264, 265, 268, 270, 274, 275, 278, 279, 300, 308, 332, 336, 348, 349, 354, 406, 410, 413, 416, 424, 435, 437, 443, 447, 459, 496, 538, 559, 563, 574, 579, 582, 583, 584, 585, 586, 588, 589, 590, 606, 609, 610, 611, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 660, 662, 683, 685, 691, 693, 694, 695, 703, 707, 709, 710, 712, 713, 719, 732, 736, 744, 747, 749, 752, 753, 755, 765, 781, 783, 793, 794, 795, 802, 803, 805, 812, 830, 831, 832, 833, 834, 840, 845, 851, 852, 856, 875, 878, 905, 917, 922, 923, 981, 985, 988, 991, 999, 1012, 1030, 1051, 1072, 1123, 1162, 1163, 1164, 1166, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1193, 1194, 1195, 1196, 1197, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1216, 1229, 1250, 1259], "register_lazyframe_namespac": [1, 82, 83, 85], "dtypeoper": [1, 84], "ldf": [1, 84, 856, 857, 860, 862, 864, 865, 866, 867, 868, 869, 870], "_ldf": [1, 84], "upcast_integer_typ": [1, 84], "with_column": [1, 17, 84, 188, 225, 235, 268, 275, 300, 308, 310, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 348, 352, 357, 364, 365, 366, 367, 368, 375, 377, 381, 385, 386, 387, 389, 390, 391, 395, 397, 399, 401, 404, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 425, 426, 430, 431, 439, 440, 445, 450, 452, 453, 458, 459, 463, 464, 467, 468, 470, 471, 472, 474, 477, 480, 481, 482, 483, 484, 485, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 517, 522, 524, 527, 542, 544, 546, 547, 548, 549, 550, 551, 554, 555, 559, 560, 563, 564, 565, 567, 570, 574, 578, 579, 582, 583, 584, 585, 586, 588, 589, 590, 592, 596, 610, 611, 613, 615, 616, 618, 619, 620, 621, 622, 624, 625, 626, 631, 632, 634, 635, 636, 637, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 654, 655, 656, 658, 659, 660, 662, 664, 665, 672, 674, 681, 683, 685, 693, 695, 700, 701, 703, 710, 715, 725, 729, 732, 736, 745, 749, 753, 755, 761, 765, 803, 809, 825, 830, 852, 875, 878, 946, 984, 1117, 1250], "tp": [1, 84], "cast": [1, 39, 83, 84, 107, 141, 142, 143, 144, 180, 188, 189, 191, 192, 225, 235, 261, 274, 300, 314, 367, 368, 382, 413, 416, 427, 558, 563, 572, 579, 622, 623, 624, 660, 666, 672, 695, 745, 765, 803, 804, 806, 807, 825, 830, 851, 875, 878, 925, 939, 940, 953, 988, 991, 1002, 1121, 1175, 1176, 1177, 1213, 1220, 1228, 1233, 1250], "int64": [1, 2, 39, 40, 43, 73, 83, 84, 89, 118, 170, 180, 188, 189, 191, 192, 209, 225, 235, 240, 255, 261, 300, 330, 331, 333, 338, 339, 340, 341, 342, 344, 367, 368, 417, 418, 419, 420, 421, 422, 423, 427, 435, 525, 563, 572, 579, 622, 655, 666, 672, 688, 716, 724, 725, 727, 741, 747, 765, 785, 793, 803, 804, 806, 807, 809, 814, 825, 830, 831, 834, 875, 899, 900, 902, 907, 908, 909, 910, 911, 913, 939, 940, 992, 993, 994, 995, 996, 997, 998, 1002, 1004, 1006, 1121, 1144, 1208, 1220, 1231, 1232, 1233, 1250], "int8": [1, 73, 84, 180, 300, 343, 367, 368, 387, 391, 399, 401, 408, 411, 425, 426, 515, 666, 738, 741, 756, 765, 912, 939, 940, 948, 958, 962, 974, 976, 983, 986, 1000, 1001, 1091, 1125, 1220, 1237, 1250], "int16": [1, 84, 367, 368, 407, 666, 765, 878, 939, 940, 982, 1220, 1229, 1250], "int32": [1, 84, 89, 107, 110, 123, 147, 148, 188, 189, 191, 192, 206, 235, 300, 334, 335, 337, 352, 394, 395, 397, 404, 428, 579, 672, 741, 765, 803, 804, 806, 807, 830, 875, 878, 901, 903, 904, 906, 965, 969, 971, 979, 1003, 1097, 1233, 1250], "b": [1, 15, 36, 37, 39, 41, 42, 45, 67, 68, 70, 73, 84, 89, 107, 108, 109, 110, 111, 112, 113, 114, 118, 123, 156, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 180, 182, 184, 185, 186, 187, 188, 193, 194, 196, 198, 200, 202, 203, 204, 205, 206, 207, 209, 212, 214, 216, 217, 219, 221, 222, 223, 224, 225, 226, 227, 228, 230, 233, 234, 236, 237, 238, 239, 240, 241, 245, 248, 249, 250, 251, 253, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 276, 277, 278, 279, 280, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 300, 308, 310, 311, 313, 314, 327, 332, 336, 345, 346, 348, 349, 350, 352, 363, 375, 378, 413, 416, 435, 437, 439, 440, 441, 443, 446, 453, 456, 458, 459, 461, 465, 468, 470, 471, 472, 474, 478, 484, 490, 496, 505, 506, 507, 508, 524, 525, 527, 532, 543, 546, 547, 548, 549, 556, 557, 559, 563, 565, 567, 570, 574, 576, 578, 598, 604, 606, 617, 621, 622, 634, 662, 665, 676, 680, 682, 683, 684, 685, 687, 691, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 715, 716, 717, 718, 719, 722, 723, 724, 726, 729, 730, 731, 732, 733, 734, 735, 736, 737, 740, 742, 743, 746, 747, 748, 749, 750, 754, 765, 780, 781, 784, 785, 786, 787, 788, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 808, 811, 813, 814, 815, 817, 818, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 831, 832, 836, 838, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 851, 853, 854, 855, 856, 857, 859, 860, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 875, 878, 881, 884, 905, 922, 924, 925, 946, 947, 949, 988, 991, 1005, 1006, 1007, 1013, 1016, 1030, 1038, 1051, 1060, 1081, 1082, 1083, 1084, 1117, 1122, 1170, 1174, 1175, 1187, 1216, 1219, 1232, 1236, 1250, 1258], "4": [1, 2, 13, 18, 22, 30, 36, 37, 39, 40, 41, 42, 45, 62, 65, 67, 68, 70, 81, 82, 83, 84, 85, 89, 107, 108, 109, 110, 111, 112, 113, 114, 123, 132, 150, 156, 158, 159, 160, 161, 162, 165, 166, 169, 173, 174, 175, 176, 180, 182, 183, 185, 186, 187, 188, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 211, 213, 214, 215, 217, 218, 220, 221, 222, 224, 225, 226, 227, 231, 235, 237, 238, 244, 245, 249, 252, 253, 255, 256, 257, 258, 263, 264, 265, 267, 268, 269, 270, 272, 273, 274, 276, 277, 279, 280, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 300, 303, 307, 308, 309, 310, 312, 314, 327, 334, 335, 337, 338, 339, 342, 343, 345, 351, 352, 355, 356, 357, 363, 364, 365, 366, 367, 368, 374, 376, 378, 383, 386, 387, 407, 408, 409, 410, 411, 413, 416, 418, 421, 423, 424, 426, 430, 431, 436, 437, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 471, 472, 474, 477, 478, 479, 487, 488, 489, 490, 491, 493, 495, 504, 505, 506, 507, 508, 509, 510, 513, 515, 519, 522, 524, 525, 527, 542, 544, 546, 547, 548, 549, 550, 551, 554, 555, 558, 559, 561, 562, 563, 564, 565, 568, 570, 574, 575, 576, 578, 579, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 594, 596, 600, 604, 605, 606, 607, 610, 613, 619, 621, 625, 626, 631, 632, 634, 640, 641, 642, 643, 649, 650, 651, 655, 660, 661, 663, 664, 665, 667, 672, 673, 674, 680, 681, 683, 685, 687, 689, 690, 691, 692, 693, 695, 696, 698, 700, 701, 702, 703, 709, 710, 712, 713, 715, 717, 718, 722, 724, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 745, 746, 747, 748, 749, 750, 752, 753, 754, 755, 761, 765, 780, 781, 783, 784, 785, 786, 787, 789, 792, 794, 795, 796, 797, 798, 800, 801, 802, 803, 808, 810, 811, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 830, 836, 838, 839, 840, 841, 842, 843, 845, 847, 848, 849, 850, 851, 854, 855, 856, 857, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 875, 878, 884, 887, 894, 901, 903, 904, 906, 907, 908, 911, 912, 919, 927, 928, 930, 945, 947, 949, 957, 962, 969, 971, 974, 976, 977, 978, 979, 983, 984, 985, 988, 991, 993, 996, 998, 999, 1000, 1001, 1006, 1013, 1015, 1016, 1020, 1021, 1025, 1026, 1029, 1030, 1032, 1038, 1043, 1044, 1045, 1046, 1050, 1063, 1064, 1065, 1066, 1067, 1071, 1076, 1078, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1089, 1091, 1105, 1108, 1109, 1113, 1114, 1115, 1119, 1123, 1124, 1127, 1132, 1134, 1135, 1136, 1137, 1138, 1141, 1149, 1154, 1157, 1158, 1159, 1163, 1166, 1172, 1174, 1178, 1179, 1184, 1185, 1193, 1195, 1196, 1202, 1203, 1204, 1208, 1213, 1219, 1221, 1229, 1232, 1233, 1234, 1241, 1250, 1254, 1259], "c": [1, 15, 36, 37, 39, 41, 42, 45, 67, 68, 70, 82, 84, 89, 108, 110, 112, 114, 123, 132, 146, 156, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 173, 177, 180, 184, 185, 186, 187, 188, 194, 196, 198, 206, 207, 209, 212, 214, 216, 217, 219, 221, 222, 223, 224, 226, 227, 228, 230, 233, 234, 236, 239, 240, 241, 248, 249, 250, 251, 253, 255, 258, 259, 260, 261, 262, 264, 268, 269, 271, 272, 274, 279, 283, 284, 285, 287, 288, 290, 293, 294, 300, 308, 310, 311, 313, 315, 332, 345, 375, 441, 459, 474, 484, 496, 524, 527, 546, 547, 557, 559, 563, 567, 598, 642, 651, 676, 683, 685, 687, 693, 695, 696, 697, 698, 700, 701, 703, 717, 718, 719, 722, 723, 726, 729, 731, 732, 733, 734, 735, 736, 737, 746, 748, 749, 750, 754, 761, 765, 781, 783, 784, 785, 786, 787, 788, 789, 791, 792, 793, 794, 795, 796, 799, 802, 803, 811, 814, 821, 824, 826, 828, 829, 831, 832, 838, 839, 840, 845, 848, 851, 853, 856, 860, 861, 862, 864, 865, 867, 870, 871, 875, 878, 924, 946, 947, 1030, 1051, 1060, 1117, 1195, 1204, 1236, 1250], "5": [1, 12, 13, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 36, 37, 39, 41, 42, 45, 68, 70, 81, 82, 84, 85, 89, 107, 110, 111, 112, 113, 114, 116, 118, 119, 132, 140, 141, 143, 148, 160, 161, 162, 166, 173, 174, 175, 176, 180, 182, 183, 185, 186, 187, 188, 194, 195, 198, 199, 201, 203, 204, 205, 207, 208, 209, 210, 211, 213, 214, 215, 217, 220, 221, 222, 224, 226, 227, 228, 231, 235, 238, 244, 245, 249, 252, 253, 255, 256, 257, 258, 260, 263, 265, 268, 269, 270, 273, 274, 276, 277, 279, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 300, 303, 308, 309, 312, 328, 329, 334, 335, 337, 351, 352, 356, 357, 374, 375, 376, 377, 378, 383, 384, 385, 386, 391, 395, 397, 399, 404, 409, 411, 413, 414, 416, 417, 423, 427, 431, 434, 435, 438, 440, 444, 445, 449, 450, 452, 454, 456, 458, 459, 463, 467, 468, 470, 471, 472, 474, 477, 479, 487, 490, 491, 493, 495, 498, 501, 504, 505, 506, 507, 508, 509, 512, 513, 542, 544, 546, 555, 558, 559, 560, 561, 562, 563, 567, 568, 570, 574, 575, 576, 578, 579, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 594, 600, 606, 613, 621, 624, 625, 626, 655, 664, 667, 673, 674, 687, 692, 693, 694, 696, 698, 700, 701, 702, 703, 709, 714, 715, 716, 717, 718, 722, 724, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 740, 746, 748, 749, 750, 754, 761, 765, 783, 784, 785, 786, 787, 794, 795, 796, 797, 798, 800, 801, 802, 803, 808, 810, 811, 812, 813, 814, 815, 819, 820, 821, 826, 830, 836, 838, 839, 840, 841, 842, 843, 848, 850, 851, 854, 855, 856, 860, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 875, 878, 884, 887, 891, 894, 897, 898, 901, 903, 904, 906, 919, 928, 930, 937, 945, 946, 947, 948, 949, 954, 955, 956, 957, 958, 984, 986, 988, 989, 991, 992, 998, 1000, 1001, 1002, 1006, 1010, 1013, 1014, 1025, 1026, 1029, 1030, 1036, 1042, 1063, 1066, 1067, 1071, 1074, 1080, 1081, 1082, 1083, 1084, 1085, 1088, 1089, 1097, 1105, 1113, 1114, 1115, 1117, 1118, 1119, 1123, 1124, 1127, 1129, 1130, 1131, 1133, 1134, 1137, 1141, 1154, 1157, 1160, 1166, 1174, 1177, 1178, 1208, 1221, 1234, 1237, 1241, 1250, 1259], "6": [1, 13, 18, 36, 37, 39, 40, 41, 42, 43, 44, 45, 68, 70, 72, 82, 84, 89, 90, 91, 107, 110, 111, 112, 113, 140, 160, 163, 167, 168, 169, 170, 171, 173, 174, 177, 182, 183, 184, 185, 186, 188, 194, 196, 198, 199, 201, 203, 204, 205, 207, 211, 212, 213, 214, 215, 216, 217, 219, 220, 223, 226, 227, 228, 230, 231, 233, 235, 236, 237, 238, 239, 240, 241, 245, 248, 249, 250, 251, 252, 253, 255, 257, 258, 259, 260, 261, 262, 265, 267, 268, 270, 271, 272, 274, 276, 277, 284, 293, 294, 300, 303, 308, 312, 334, 335, 337, 345, 352, 367, 368, 378, 383, 387, 401, 406, 407, 408, 419, 420, 422, 425, 426, 429, 431, 439, 440, 446, 449, 454, 456, 458, 479, 480, 481, 491, 505, 506, 507, 508, 527, 555, 558, 566, 569, 570, 571, 575, 577, 579, 582, 583, 584, 585, 586, 588, 589, 590, 594, 606, 613, 617, 625, 626, 655, 664, 667, 681, 700, 701, 702, 715, 718, 724, 729, 730, 748, 761, 765, 783, 786, 787, 788, 790, 791, 792, 793, 794, 795, 796, 799, 800, 801, 803, 808, 810, 811, 813, 815, 817, 821, 824, 826, 828, 830, 831, 832, 834, 836, 838, 839, 840, 843, 847, 850, 851, 854, 855, 861, 870, 871, 875, 878, 901, 903, 904, 906, 928, 934, 936, 939, 940, 949, 981, 1001, 1006, 1026, 1056, 1057, 1067, 1081, 1082, 1083, 1084, 1105, 1116, 1119, 1124, 1126, 1132, 1134, 1136, 1138, 1166, 1170, 1178, 1208, 1220, 1250, 1258, 1259], "7": [1, 21, 32, 36, 37, 39, 40, 41, 42, 43, 44, 45, 70, 82, 84, 89, 160, 163, 164, 166, 167, 168, 170, 171, 173, 177, 182, 184, 188, 194, 196, 199, 207, 212, 214, 216, 218, 219, 223, 226, 228, 230, 233, 235, 236, 238, 239, 240, 241, 245, 248, 250, 251, 252, 253, 259, 260, 261, 262, 268, 270, 271, 272, 300, 308, 312, 334, 335, 337, 342, 368, 383, 387, 407, 409, 410, 424, 426, 436, 449, 454, 458, 479, 505, 506, 507, 508, 558, 570, 575, 579, 589, 606, 621, 654, 667, 700, 701, 712, 718, 723, 729, 730, 748, 765, 783, 788, 791, 793, 795, 799, 801, 803, 808, 810, 811, 815, 822, 824, 827, 828, 830, 831, 832, 836, 843, 875, 878, 891, 903, 904, 906, 911, 954, 958, 965, 984, 985, 999, 1001, 1011, 1052, 1081, 1082, 1083, 1084, 1123, 1124, 1137, 1174, 1207, 1250, 1259], "float32": [1, 15, 37, 58, 84, 160, 180, 259, 260, 300, 727, 783, 875, 878, 1033, 1097, 1250], "lazi": [1, 65, 66, 67, 68, 70, 84, 89, 132, 148, 208, 225, 226, 300, 527, 720, 738, 741, 756, 765, 811, 812, 853, 856, 857, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 875, 878, 1258, 1259], "i16": [1, 84, 387, 407, 426, 598, 765, 878, 982, 1229, 1250, 1259], "i32": [1, 84, 107, 110, 114, 147, 148, 241, 300, 334, 335, 337, 352, 391, 394, 395, 397, 399, 404, 428, 577, 598, 755, 765, 832, 875, 903, 904, 906, 965, 969, 971, 979, 1003, 1097, 1126, 1250, 1259], "f32": [1, 84, 160, 259, 300, 598, 765, 783, 875, 878, 1097, 1250], "i64": [1, 2, 15, 18, 21, 22, 26, 32, 62, 65, 67, 82, 83, 84, 85, 89, 107, 108, 109, 110, 111, 112, 113, 114, 118, 120, 132, 159, 161, 162, 163, 167, 169, 170, 173, 174, 176, 177, 182, 183, 185, 186, 187, 188, 194, 196, 198, 200, 202, 204, 207, 208, 211, 212, 217, 218, 219, 224, 225, 226, 227, 230, 231, 233, 234, 235, 239, 241, 245, 248, 249, 251, 253, 256, 262, 264, 265, 266, 267, 268, 269, 270, 272, 274, 276, 277, 278, 279, 280, 283, 284, 285, 286, 287, 290, 293, 294, 300, 308, 310, 314, 330, 331, 333, 338, 339, 340, 341, 342, 344, 345, 351, 357, 365, 366, 367, 368, 375, 377, 378, 390, 415, 417, 418, 419, 420, 421, 422, 423, 435, 437, 438, 440, 441, 442, 443, 445, 446, 448, 449, 451, 454, 456, 457, 458, 459, 463, 464, 467, 468, 470, 471, 472, 474, 476, 479, 482, 483, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 516, 517, 521, 524, 525, 527, 542, 543, 544, 546, 547, 548, 549, 550, 551, 559, 560, 563, 564, 565, 566, 567, 570, 571, 572, 574, 575, 576, 577, 578, 579, 593, 595, 596, 598, 599, 600, 604, 605, 606, 634, 635, 655, 660, 661, 663, 664, 665, 666, 667, 673, 674, 675, 677, 680, 688, 693, 695, 700, 701, 702, 703, 714, 715, 716, 717, 718, 722, 723, 724, 725, 726, 727, 729, 730, 731, 732, 735, 736, 740, 744, 745, 748, 749, 750, 755, 761, 765, 781, 784, 786, 787, 790, 791, 792, 795, 796, 798, 799, 800, 801, 802, 803, 808, 811, 812, 813, 815, 817, 818, 821, 822, 823, 825, 826, 828, 829, 830, 832, 834, 836, 839, 840, 842, 843, 845, 846, 847, 848, 851, 854, 855, 856, 857, 860, 861, 862, 863, 864, 867, 870, 871, 875, 878, 880, 881, 884, 907, 908, 909, 910, 911, 913, 919, 930, 933, 937, 938, 939, 940, 946, 947, 961, 990, 992, 993, 994, 995, 996, 997, 998, 1013, 1014, 1016, 1017, 1020, 1021, 1025, 1027, 1038, 1064, 1065, 1067, 1068, 1069, 1070, 1071, 1073, 1076, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1092, 1093, 1099, 1104, 1117, 1122, 1123, 1124, 1126, 1130, 1133, 1137, 1141, 1142, 1145, 1149, 1153, 1154, 1158, 1159, 1208, 1219, 1221, 1228, 1234, 1235, 1241, 1250, 1258, 1259], "register_series_namespac": [1, 82, 83, 84], "math": [1, 15, 85, 376, 689, 690, 765, 934, 936, 1155, 1224, 1250], "mathshortcut": [1, 85], "": [1, 2, 16, 37, 39, 40, 45, 58, 65, 68, 73, 85, 107, 114, 118, 119, 120, 121, 123, 129, 133, 134, 137, 138, 150, 159, 160, 169, 172, 177, 182, 187, 188, 190, 191, 198, 204, 207, 208, 217, 224, 226, 231, 233, 238, 241, 242, 249, 258, 264, 266, 267, 268, 269, 274, 275, 300, 336, 390, 413, 416, 435, 441, 475, 496, 525, 527, 536, 543, 552, 553, 559, 560, 572, 577, 578, 606, 610, 618, 619, 620, 621, 634, 640, 641, 643, 651, 652, 653, 657, 658, 661, 663, 682, 683, 684, 685, 691, 696, 699, 702, 703, 706, 707, 716, 719, 720, 729, 730, 731, 732, 735, 736, 744, 745, 747, 748, 749, 755, 761, 765, 781, 783, 792, 802, 803, 805, 806, 812, 821, 832, 833, 840, 845, 846, 847, 848, 851, 852, 858, 863, 875, 878, 880, 881, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 912, 919, 920, 921, 922, 924, 925, 926, 927, 928, 929, 930, 933, 934, 935, 936, 937, 938, 939, 940, 945, 946, 947, 948, 949, 950, 951, 952, 954, 958, 960, 961, 964, 966, 967, 971, 973, 977, 978, 982, 985, 986, 988, 991, 999, 1001, 1002, 1003, 1004, 1007, 1008, 1009, 1010, 1011, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1024, 1025, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1056, 1057, 1058, 1059, 1061, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1076, 1077, 1078, 1079, 1080, 1085, 1086, 1087, 1088, 1089, 1091, 1093, 1094, 1095, 1096, 1097, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1122, 1123, 1124, 1125, 1126, 1127, 1129, 1130, 1131, 1132, 1133, 1134, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1145, 1147, 1148, 1149, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1163, 1164, 1166, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1178, 1179, 1184, 1185, 1187, 1189, 1190, 1193, 1196, 1197, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1216, 1217, 1219, 1220, 1221, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1250, 1254], "_": [1, 81, 85, 226, 258, 300, 336, 496, 611, 619, 625, 626, 636, 641, 642, 924, 1164, 1172, 1178, 1179, 1189, 1195, 1227, 1250], "squar": [1, 85, 286, 475, 607, 765, 863, 1053, 1160, 1250], "cube": [1, 85, 355, 564, 765, 926, 1250], "s2": [1, 72, 90, 91, 143, 144, 180, 300, 928, 949, 1006, 1038, 1052, 1060, 1092, 1105, 1232, 1241, 1250], "renam": [1, 110, 118, 119, 157, 178, 181, 189, 190, 191, 192, 197, 232, 241, 242, 254, 274, 275, 279, 281, 300, 310, 315, 369, 370, 371, 372, 373, 462, 466, 469, 474, 486, 499, 514, 523, 524, 526, 539, 547, 548, 549, 565, 580, 612, 623, 627, 628, 629, 630, 633, 638, 639, 645, 663, 665, 668, 669, 686, 706, 707, 728, 744, 747, 765, 804, 805, 806, 807, 816, 832, 833, 844, 851, 852, 856, 858, 875, 881, 885, 941, 942, 943, 944, 946, 1035, 1041, 1062, 1075, 1090, 1098, 1117, 1128, 1144, 1146, 1165, 1174, 1176, 1180, 1181, 1182, 1183, 1186, 1191, 1192, 1198, 1217, 1222, 1223, 1228, 1250], "n2": 1, "in_plac": [1, 196, 247, 272, 300, 1120, 1152, 1159, 1250], "true": [1, 6, 12, 13, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 37, 39, 40, 43, 45, 58, 59, 60, 61, 65, 67, 69, 87, 88, 89, 107, 108, 112, 114, 116, 118, 119, 120, 122, 123, 124, 126, 129, 130, 132, 133, 135, 137, 138, 141, 142, 143, 144, 145, 146, 148, 149, 150, 154, 156, 159, 160, 161, 162, 166, 171, 176, 180, 181, 185, 186, 187, 188, 189, 190, 191, 192, 198, 200, 201, 202, 205, 208, 209, 214, 215, 221, 222, 224, 226, 227, 235, 236, 237, 238, 239, 241, 249, 252, 256, 258, 260, 261, 264, 265, 266, 267, 268, 269, 270, 274, 280, 283, 285, 287, 288, 289, 290, 291, 292, 293, 300, 309, 310, 311, 312, 313, 314, 315, 326, 328, 329, 332, 341, 346, 347, 349, 350, 352, 364, 365, 366, 367, 368, 375, 382, 384, 387, 390, 393, 402, 403, 406, 407, 409, 410, 411, 415, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 429, 430, 431, 432, 433, 434, 448, 450, 451, 452, 455, 459, 460, 461, 463, 464, 465, 467, 468, 470, 471, 472, 473, 475, 477, 480, 481, 485, 493, 511, 514, 516, 522, 525, 527, 531, 532, 533, 534, 535, 536, 538, 539, 554, 555, 556, 558, 561, 562, 567, 572, 579, 582, 583, 584, 585, 586, 587, 588, 589, 590, 593, 598, 603, 605, 606, 609, 610, 611, 613, 614, 616, 621, 622, 624, 633, 641, 642, 644, 651, 652, 653, 655, 657, 661, 663, 675, 678, 681, 682, 683, 684, 685, 686, 688, 691, 692, 696, 709, 711, 712, 718, 724, 730, 738, 741, 747, 752, 755, 756, 765, 781, 783, 784, 785, 786, 787, 794, 796, 798, 802, 803, 804, 805, 806, 807, 811, 812, 814, 816, 817, 821, 826, 830, 832, 834, 838, 840, 845, 846, 847, 848, 851, 857, 860, 862, 864, 865, 866, 867, 868, 869, 870, 875, 878, 882, 883, 885, 895, 897, 898, 901, 910, 915, 920, 922, 925, 928, 929, 946, 952, 953, 955, 958, 960, 961, 962, 964, 968, 969, 971, 974, 976, 977, 978, 979, 981, 982, 983, 984, 985, 986, 990, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1005, 1006, 1008, 1009, 1010, 1017, 1023, 1026, 1030, 1031, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1056, 1057, 1061, 1069, 1087, 1090, 1099, 1105, 1111, 1114, 1115, 1117, 1121, 1135, 1144, 1157, 1159, 1162, 1163, 1164, 1166, 1167, 1169, 1174, 1175, 1177, 1186, 1194, 1195, 1197, 1204, 1205, 1206, 1208, 1210, 1231, 1232, 1238, 1240, 1241, 1250, 1259], "s3": [1, 39, 122, 133, 134, 137, 138, 300, 1092, 1250], "n3": 1, "8": [1, 16, 36, 37, 39, 41, 42, 43, 44, 45, 57, 58, 65, 70, 71, 78, 81, 82, 84, 85, 89, 140, 146, 148, 160, 163, 164, 166, 167, 168, 169, 170, 171, 173, 177, 182, 184, 186, 194, 196, 204, 207, 211, 212, 214, 216, 219, 228, 230, 233, 236, 238, 239, 240, 241, 245, 248, 250, 251, 253, 259, 260, 261, 262, 268, 271, 272, 274, 300, 312, 314, 327, 334, 335, 337, 365, 368, 374, 383, 449, 455, 458, 488, 490, 499, 505, 506, 507, 508, 544, 558, 564, 575, 576, 581, 598, 604, 606, 627, 630, 631, 632, 651, 681, 687, 696, 698, 701, 703, 715, 717, 722, 723, 726, 729, 730, 731, 732, 733, 734, 735, 736, 737, 746, 749, 750, 754, 765, 783, 788, 791, 792, 793, 795, 799, 801, 808, 811, 815, 817, 826, 828, 831, 832, 836, 843, 851, 875, 878, 903, 904, 906, 936, 945, 965, 1026, 1052, 1064, 1066, 1075, 1081, 1082, 1083, 1084, 1113, 1124, 1127, 1129, 1132, 1134, 1136, 1138, 1180, 1183, 1184, 1185, 1204, 1250, 1259], "9": [1, 14, 36, 37, 39, 40, 41, 42, 45, 65, 70, 81, 89, 140, 164, 166, 180, 189, 194, 199, 211, 235, 237, 238, 241, 252, 253, 268, 272, 274, 293, 300, 308, 312, 314, 327, 334, 335, 337, 340, 341, 365, 368, 376, 383, 441, 449, 458, 464, 474, 488, 503, 511, 546, 558, 569, 575, 579, 581, 587, 589, 600, 604, 619, 654, 662, 694, 700, 701, 723, 753, 765, 804, 808, 810, 815, 830, 832, 843, 851, 870, 875, 878, 899, 900, 903, 904, 906, 909, 910, 947, 958, 969, 971, 979, 985, 999, 1000, 1038, 1052, 1064, 1079, 1087, 1124, 1129, 1135, 1137, 1139, 1154, 1172, 1207, 1216, 1250], "27": [1, 85, 293, 368, 401, 408, 425, 765, 870, 1250, 1259], "16": [1, 40, 54, 75, 83, 140, 181, 188, 235, 274, 300, 365, 368, 458, 526, 544, 564, 579, 655, 700, 714, 715, 718, 765, 803, 830, 838, 851, 875, 878, 985, 999, 1098, 1113, 1144, 1155, 1208, 1224, 1250], "64": [1, 53, 56, 77, 83, 85, 139, 156, 362, 544, 564, 765, 1113, 1250], "25": [1, 32, 40, 85, 114, 148, 166, 188, 208, 235, 270, 274, 300, 377, 387, 389, 407, 410, 424, 426, 567, 579, 582, 583, 584, 585, 586, 588, 589, 590, 674, 709, 710, 712, 713, 714, 720, 730, 752, 753, 765, 803, 812, 819, 830, 849, 851, 875, 878, 947, 948, 960, 985, 999, 1005, 1026, 1113, 1117, 1250], "125": [1, 40, 85, 300, 308, 765, 1113, 1250], "inner": [2, 62, 147, 207, 269, 300, 336, 343, 378, 496, 515, 573, 672, 765, 811, 834, 848, 875, 905, 912, 949, 1072, 1091, 1233, 1250], "polarsdatatyp": [2, 62, 118, 119, 132, 145, 146, 147, 148, 150, 157, 160, 211, 300, 315, 352, 435, 523, 525, 526, 527, 574, 622, 623, 686, 716, 727, 728, 729, 730, 738, 741, 756, 761, 765, 783, 875, 878, 885, 920, 1098, 1099, 1123, 1175, 1176, 1250], "pythondatatyp": [2, 62], "width": [2, 31, 40, 118, 119, 132, 300, 303, 515, 875, 1091], "int": [2, 15, 17, 18, 19, 22, 30, 31, 37, 38, 40, 45, 49, 58, 61, 67, 70, 83, 110, 113, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 129, 130, 132, 133, 135, 136, 137, 138, 139, 146, 147, 148, 149, 150, 151, 152, 157, 159, 161, 166, 172, 175, 176, 178, 182, 184, 186, 193, 194, 195, 197, 198, 203, 205, 206, 208, 210, 211, 212, 214, 219, 221, 222, 232, 233, 236, 239, 244, 245, 246, 248, 250, 251, 253, 254, 259, 262, 264, 268, 271, 273, 276, 277, 284, 294, 300, 308, 332, 335, 345, 351, 374, 377, 432, 433, 434, 438, 439, 440, 446, 448, 449, 451, 453, 454, 455, 479, 485, 488, 493, 494, 495, 504, 509, 510, 513, 514, 515, 516, 558, 560, 563, 564, 567, 570, 573, 575, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 596, 597, 599, 604, 608, 618, 622, 623, 628, 631, 632, 633, 634, 638, 640, 642, 643, 654, 655, 660, 667, 668, 669, 673, 679, 681, 688, 696, 698, 708, 711, 714, 720, 722, 724, 725, 738, 741, 742, 743, 746, 747, 750, 751, 754, 756, 765, 781, 784, 796, 797, 798, 801, 808, 812, 815, 826, 836, 837, 839, 841, 843, 844, 845, 849, 850, 854, 855, 861, 871, 875, 892, 893, 901, 904, 919, 920, 928, 929, 945, 948, 1007, 1008, 1009, 1010, 1014, 1015, 1016, 1020, 1021, 1024, 1025, 1026, 1052, 1054, 1055, 1061, 1062, 1064, 1069, 1070, 1071, 1080, 1085, 1086, 1089, 1090, 1091, 1092, 1105, 1106, 1108, 1109, 1110, 1112, 1113, 1116, 1117, 1119, 1124, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1145, 1146, 1149, 1150, 1153, 1158, 1161, 1171, 1175, 1176, 1181, 1184, 1185, 1186, 1187, 1191, 1193, 1195, 1196, 1207, 1208, 1213, 1220, 1221, 1222, 1223, 1229, 1234, 1239, 1250, 1258, 1259], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 300, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 761, 765, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 875, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1216, 1217, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1250, 1258], "fix": [2, 15, 51, 123, 146, 148, 427, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 714, 765, 1002, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1136, 1137, 1138, 1250], "length": [2, 62, 89, 118, 119, 132, 146, 186, 188, 189, 191, 192, 235, 248, 300, 303, 374, 410, 424, 510, 516, 536, 574, 577, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 604, 625, 626, 628, 630, 631, 632, 638, 640, 660, 738, 741, 742, 743, 756, 765, 803, 804, 806, 807, 826, 830, 839, 875, 928, 945, 954, 985, 999, 1086, 1092, 1110, 1123, 1126, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1136, 1137, 1138, 1158, 1178, 1179, 1181, 1183, 1184, 1185, 1191, 1193, 1213, 1250], "paramet": [2, 5, 7, 8, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 50, 51, 58, 59, 60, 61, 62, 65, 66, 67, 68, 70, 73, 81, 82, 83, 84, 85, 87, 88, 89, 91, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 156, 157, 159, 160, 161, 164, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 203, 205, 206, 207, 208, 210, 211, 212, 214, 215, 217, 218, 219, 221, 222, 224, 225, 226, 228, 230, 231, 232, 233, 235, 236, 237, 238, 239, 241, 242, 243, 245, 246, 248, 249, 250, 251, 252, 253, 254, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 279, 281, 284, 286, 292, 294, 300, 308, 310, 311, 312, 313, 314, 315, 325, 332, 333, 335, 336, 341, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 357, 358, 359, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 382, 383, 384, 390, 406, 409, 410, 411, 413, 415, 416, 424, 427, 429, 430, 431, 432, 433, 434, 435, 438, 440, 441, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 459, 464, 475, 477, 479, 484, 485, 486, 487, 488, 490, 493, 494, 495, 496, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 522, 523, 524, 525, 526, 527, 538, 542, 544, 547, 548, 549, 554, 555, 558, 559, 560, 563, 564, 565, 567, 568, 570, 572, 573, 574, 575, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 628, 629, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 660, 661, 663, 664, 665, 667, 668, 669, 673, 674, 675, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 716, 717, 718, 719, 720, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 761, 765, 781, 783, 784, 786, 787, 790, 791, 792, 794, 795, 796, 797, 798, 799, 801, 802, 803, 804, 805, 806, 807, 808, 811, 812, 815, 816, 817, 821, 822, 825, 826, 827, 828, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 858, 861, 863, 869, 871, 875, 878, 881, 882, 883, 884, 885, 894, 901, 902, 904, 905, 910, 913, 914, 915, 916, 917, 918, 919, 920, 923, 929, 930, 931, 932, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 953, 954, 955, 961, 981, 984, 985, 986, 988, 990, 991, 999, 1002, 1005, 1006, 1007, 1008, 1009, 1010, 1013, 1014, 1015, 1016, 1017, 1020, 1021, 1024, 1025, 1026, 1029, 1030, 1040, 1048, 1049, 1053, 1055, 1060, 1061, 1062, 1063, 1064, 1066, 1069, 1070, 1071, 1072, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1089, 1090, 1091, 1092, 1093, 1098, 1099, 1113, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1149, 1150, 1153, 1157, 1158, 1159, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1181, 1182, 1184, 1185, 1186, 1187, 1188, 1189, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1210, 1213, 1214, 1217, 1221, 1222, 1223, 1227, 1228, 1229, 1230, 1231, 1232, 1234, 1235, 1238, 1239, 1240, 1241, 1250, 1258], "The": [2, 25, 38, 39, 40, 45, 61, 62, 65, 69, 72, 73, 81, 86, 87, 91, 107, 109, 110, 111, 113, 116, 118, 119, 120, 121, 123, 127, 128, 130, 132, 136, 137, 138, 141, 142, 143, 144, 152, 166, 168, 169, 170, 173, 174, 177, 186, 187, 188, 191, 193, 199, 205, 208, 211, 218, 224, 235, 236, 237, 238, 241, 242, 260, 267, 270, 274, 275, 277, 278, 279, 286, 300, 310, 345, 346, 347, 348, 375, 379, 380, 387, 401, 406, 407, 410, 413, 424, 425, 435, 438, 441, 446, 453, 489, 493, 514, 525, 526, 527, 559, 567, 570, 573, 574, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 600, 603, 609, 614, 615, 618, 622, 623, 629, 631, 632, 639, 645, 646, 647, 648, 649, 650, 651, 716, 720, 730, 742, 743, 744, 747, 755, 757, 758, 760, 761, 765, 766, 767, 770, 772, 773, 774, 792, 795, 799, 803, 806, 808, 810, 812, 815, 817, 822, 826, 830, 832, 833, 834, 847, 851, 852, 855, 856, 863, 875, 881, 884, 914, 915, 916, 929, 946, 947, 950, 951, 958, 976, 981, 982, 985, 988, 999, 1000, 1013, 1014, 1017, 1024, 1065, 1069, 1098, 1099, 1117, 1119, 1123, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1154, 1157, 1162, 1167, 1168, 1175, 1176, 1182, 1184, 1185, 1192, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1242, 1244, 1246, 1250, 1251, 1255, 1256, 1257, 1259], "datatyp": [2, 37, 43, 58, 62, 79, 107, 109, 110, 111, 113, 115, 123, 125, 127, 128, 131, 136, 150, 170, 173, 180, 240, 300, 352, 435, 598, 672, 716, 727, 765, 777, 793, 795, 831, 834, 875, 885, 920, 947, 1040, 1047, 1049, 1051, 1099, 1151, 1233, 1250], "valu": [2, 5, 9, 15, 16, 17, 18, 22, 33, 35, 37, 40, 43, 58, 62, 63, 65, 69, 72, 79, 81, 89, 91, 110, 112, 118, 119, 120, 121, 123, 132, 138, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 156, 158, 159, 166, 169, 171, 174, 175, 176, 177, 181, 186, 188, 191, 193, 194, 199, 203, 205, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 222, 224, 226, 227, 228, 230, 235, 236, 237, 238, 239, 245, 246, 249, 250, 251, 252, 253, 256, 257, 261, 264, 265, 268, 269, 270, 271, 278, 282, 283, 285, 287, 288, 290, 291, 300, 307, 308, 309, 311, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 333, 334, 335, 337, 338, 339, 341, 342, 344, 345, 347, 348, 349, 350, 351, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 368, 374, 375, 377, 379, 380, 383, 387, 401, 407, 425, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 470, 471, 472, 473, 476, 477, 478, 480, 481, 482, 483, 486, 487, 488, 489, 492, 494, 495, 497, 498, 500, 501, 502, 504, 509, 511, 512, 513, 516, 517, 519, 521, 522, 525, 526, 527, 528, 529, 530, 541, 542, 543, 544, 545, 552, 553, 554, 555, 557, 559, 560, 563, 564, 567, 568, 570, 573, 574, 577, 578, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 593, 594, 595, 596, 597, 600, 601, 602, 603, 605, 606, 607, 609, 610, 612, 613, 614, 615, 616, 618, 621, 622, 623, 624, 631, 632, 634, 635, 637, 640, 642, 643, 644, 660, 662, 664, 666, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 681, 682, 684, 687, 693, 695, 697, 699, 700, 701, 702, 703, 704, 705, 706, 707, 717, 718, 723, 724, 726, 727, 731, 732, 733, 734, 735, 736, 737, 740, 741, 742, 743, 748, 749, 755, 765, 780, 781, 792, 797, 798, 799, 803, 806, 809, 810, 811, 812, 818, 819, 820, 821, 823, 824, 827, 828, 830, 834, 836, 837, 840, 841, 842, 845, 848, 849, 859, 860, 862, 864, 865, 867, 868, 875, 878, 880, 882, 883, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 897, 898, 899, 900, 902, 903, 904, 906, 907, 908, 910, 911, 913, 915, 916, 917, 918, 923, 927, 930, 931, 932, 934, 935, 936, 945, 946, 947, 948, 950, 951, 954, 958, 976, 982, 1000, 1006, 1007, 1008, 1009, 1010, 1013, 1014, 1015, 1016, 1018, 1019, 1020, 1021, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1032, 1034, 1035, 1036, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1050, 1054, 1055, 1056, 1057, 1058, 1059, 1062, 1063, 1064, 1065, 1068, 1070, 1071, 1073, 1074, 1076, 1077, 1078, 1080, 1085, 1087, 1088, 1089, 1093, 1098, 1100, 1101, 1103, 1104, 1106, 1108, 1109, 1110, 1112, 1113, 1116, 1117, 1118, 1119, 1123, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1141, 1142, 1143, 1144, 1145, 1146, 1149, 1150, 1154, 1155, 1156, 1157, 1162, 1163, 1165, 1166, 1167, 1168, 1169, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1184, 1185, 1187, 1188, 1190, 1193, 1195, 1196, 1197, 1213, 1216, 1220, 1221, 1222, 1223, 1224, 1225, 1231, 1232, 1233, 1236, 1238, 1240, 1241, 1250, 1259], "within": [2, 62, 141, 142, 143, 144, 187, 188, 189, 190, 191, 192, 193, 208, 235, 270, 300, 453, 570, 579, 606, 765, 803, 804, 806, 807, 812, 830, 875, 1024, 1250, 1258], "each": [2, 37, 40, 58, 62, 81, 119, 120, 136, 141, 142, 143, 144, 146, 165, 177, 186, 187, 188, 189, 190, 191, 192, 206, 208, 211, 224, 235, 239, 261, 267, 269, 270, 278, 279, 282, 284, 286, 294, 300, 375, 410, 424, 441, 462, 463, 466, 467, 495, 498, 499, 504, 513, 520, 527, 567, 570, 578, 584, 586, 588, 590, 593, 599, 606, 619, 625, 626, 627, 630, 642, 643, 688, 691, 695, 724, 725, 747, 755, 765, 786, 789, 799, 803, 804, 806, 807, 812, 826, 830, 847, 848, 856, 858, 859, 861, 863, 871, 875, 928, 946, 985, 999, 1035, 1036, 1041, 1042, 1071, 1074, 1075, 1080, 1089, 1117, 1119, 1127, 1141, 1153, 1172, 1178, 1179, 1180, 1183, 1195, 1196, 1219, 1250, 1259], "exampl": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 58, 59, 60, 61, 62, 65, 66, 67, 68, 69, 70, 72, 73, 81, 82, 83, 84, 85, 89, 90, 91, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 129, 132, 133, 134, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 180, 182, 183, 184, 185, 186, 187, 188, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 300, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 355, 356, 357, 360, 361, 362, 363, 364, 365, 366, 367, 368, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 393, 394, 395, 397, 399, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 631, 632, 634, 635, 636, 637, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 709, 710, 712, 713, 714, 715, 716, 717, 718, 719, 720, 722, 723, 724, 725, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 744, 745, 746, 747, 748, 749, 750, 752, 753, 754, 755, 756, 761, 765, 777, 780, 781, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 808, 809, 810, 811, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 836, 838, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 875, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 919, 920, 921, 922, 924, 925, 926, 927, 928, 929, 930, 933, 934, 935, 936, 937, 938, 939, 940, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 960, 961, 962, 964, 965, 966, 967, 968, 969, 971, 973, 974, 976, 977, 978, 979, 981, 982, 983, 984, 985, 986, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1056, 1057, 1058, 1059, 1060, 1061, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1122, 1123, 1124, 1125, 1126, 1127, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1145, 1147, 1148, 1149, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1166, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1177, 1178, 1179, 1184, 1185, 1187, 1188, 1189, 1190, 1193, 1195, 1196, 1197, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1216, 1219, 1220, 1221, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1241, 1250, 1258], "dtype": [2, 15, 40, 48, 72, 73, 84, 90, 91, 107, 109, 111, 113, 114, 118, 119, 120, 121, 127, 128, 129, 132, 145, 146, 147, 148, 150, 156, 160, 188, 189, 191, 192, 208, 235, 259, 260, 261, 268, 277, 300, 315, 352, 353, 367, 368, 427, 435, 448, 484, 493, 514, 521, 523, 525, 526, 527, 572, 573, 579, 582, 583, 584, 585, 586, 588, 589, 590, 598, 622, 623, 651, 666, 668, 672, 677, 686, 688, 716, 720, 724, 725, 727, 728, 729, 730, 738, 741, 747, 756, 765, 783, 803, 804, 806, 807, 812, 830, 855, 875, 878, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 912, 920, 921, 922, 924, 929, 939, 940, 947, 948, 1002, 1006, 1007, 1031, 1033, 1037, 1040, 1047, 1049, 1051, 1056, 1057, 1060, 1069, 1091, 1097, 1098, 1125, 1144, 1151, 1175, 1176, 1204, 1220, 1229, 1231, 1232, 1233, 1237, 1250, 1259], "method": [2, 3, 4, 5, 9, 36, 39, 40, 41, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 62, 63, 64, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 88, 89, 108, 117, 118, 119, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 138, 145, 154, 157, 169, 174, 178, 181, 187, 189, 190, 191, 192, 197, 199, 205, 211, 212, 214, 219, 222, 228, 232, 236, 237, 238, 245, 251, 254, 266, 274, 281, 286, 292, 300, 308, 311, 312, 315, 357, 369, 370, 371, 372, 373, 413, 416, 430, 431, 438, 445, 450, 452, 458, 462, 466, 469, 474, 477, 486, 499, 509, 514, 522, 523, 524, 526, 527, 542, 544, 546, 548, 549, 550, 551, 554, 555, 558, 564, 565, 568, 570, 580, 582, 583, 584, 585, 586, 588, 589, 590, 596, 612, 623, 627, 628, 629, 630, 633, 638, 639, 645, 647, 648, 649, 650, 654, 660, 664, 665, 668, 669, 674, 676, 681, 696, 730, 739, 757, 758, 760, 761, 765, 766, 767, 770, 771, 772, 773, 774, 777, 787, 790, 792, 804, 805, 806, 807, 810, 816, 827, 836, 844, 846, 851, 858, 863, 869, 875, 884, 885, 930, 941, 942, 943, 944, 988, 991, 1013, 1014, 1029, 1035, 1041, 1062, 1075, 1085, 1090, 1098, 1099, 1118, 1119, 1128, 1134, 1144, 1146, 1149, 1165, 1176, 1180, 1181, 1182, 1183, 1186, 1191, 1192, 1198, 1207, 1213, 1222, 1223, 1233, 1240, 1242, 1244, 1246, 1250, 1251, 1255, 1256, 1257], "attribut": [2, 5, 48, 49, 50, 51, 62, 73, 145, 300, 757, 758, 760, 761, 766, 767, 770, 772, 773, 774, 875, 1242, 1244, 1246, 1250, 1251, 1255, 1256, 1257], "arg": [3, 4, 46, 47, 52, 53, 54, 55, 56, 57, 63, 64, 68, 71, 72, 74, 75, 76, 77, 78, 79, 177, 225, 261, 300, 563, 691, 719, 765, 799, 825, 875, 1099, 1231, 1232, 1250], "kwarg": [3, 4, 46, 47, 52, 53, 54, 55, 56, 57, 63, 64, 68, 71, 72, 74, 75, 76, 77, 78, 79, 120, 164, 177, 225, 261, 300, 563, 765, 799, 825, 875, 1232, 1250, 1258], "order": [5, 15, 40, 58, 59, 60, 61, 65, 67, 81, 87, 110, 120, 139, 141, 142, 159, 169, 177, 187, 188, 189, 190, 191, 192, 207, 224, 225, 226, 235, 239, 243, 249, 260, 264, 266, 270, 300, 325, 341, 344, 354, 379, 380, 441, 489, 504, 511, 517, 570, 579, 583, 584, 585, 586, 588, 590, 593, 594, 595, 605, 606, 637, 647, 648, 649, 650, 663, 675, 676, 678, 691, 755, 765, 776, 781, 792, 799, 802, 803, 804, 805, 806, 807, 811, 821, 830, 835, 840, 845, 846, 875, 894, 910, 913, 923, 925, 950, 951, 1017, 1048, 1065, 1080, 1087, 1093, 1119, 1125, 1141, 1143, 1147, 1159, 1190, 1217, 1235, 1236, 1238, 1250, 1259], "categoricalord": [5, 354, 923], "none": [5, 6, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 48, 49, 58, 59, 61, 63, 65, 66, 67, 68, 70, 81, 88, 91, 107, 109, 110, 111, 112, 113, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 157, 161, 165, 166, 169, 175, 176, 186, 188, 189, 191, 192, 193, 199, 203, 207, 208, 209, 211, 212, 214, 217, 219, 222, 223, 226, 235, 236, 239, 245, 246, 248, 249, 251, 256, 258, 261, 265, 266, 267, 268, 269, 270, 282, 300, 311, 313, 314, 315, 327, 328, 329, 335, 345, 357, 363, 364, 365, 368, 375, 379, 380, 386, 406, 409, 410, 424, 431, 432, 433, 434, 435, 438, 439, 440, 446, 453, 455, 458, 459, 468, 470, 471, 472, 478, 480, 481, 489, 494, 498, 504, 505, 506, 507, 508, 510, 516, 523, 525, 526, 527, 535, 538, 540, 545, 555, 556, 557, 560, 567, 570, 571, 574, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 593, 596, 597, 598, 599, 600, 604, 605, 609, 610, 613, 615, 616, 619, 621, 622, 623, 624, 625, 626, 629, 631, 632, 633, 639, 640, 642, 643, 644, 645, 646, 647, 648, 651, 652, 653, 655, 657, 660, 661, 662, 663, 672, 682, 683, 684, 685, 686, 688, 693, 695, 697, 699, 703, 709, 710, 711, 712, 713, 714, 716, 717, 724, 726, 727, 728, 729, 730, 732, 736, 741, 742, 743, 747, 749, 751, 752, 753, 755, 765, 784, 785, 787, 789, 792, 797, 798, 803, 804, 806, 807, 810, 811, 812, 814, 816, 817, 821, 824, 830, 834, 836, 837, 838, 839, 840, 846, 847, 848, 853, 858, 859, 863, 875, 878, 882, 883, 885, 892, 893, 897, 898, 904, 929, 930, 946, 947, 949, 950, 951, 957, 966, 967, 968, 973, 984, 985, 999, 1005, 1008, 1009, 1010, 1014, 1015, 1016, 1024, 1026, 1028, 1029, 1030, 1040, 1045, 1046, 1049, 1052, 1053, 1054, 1056, 1057, 1060, 1065, 1070, 1074, 1080, 1081, 1082, 1083, 1084, 1086, 1092, 1098, 1099, 1100, 1101, 1102, 1103, 1112, 1117, 1118, 1119, 1123, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1136, 1137, 1138, 1141, 1142, 1145, 1146, 1149, 1150, 1153, 1154, 1157, 1158, 1161, 1162, 1163, 1166, 1168, 1169, 1172, 1174, 1175, 1176, 1177, 1178, 1179, 1182, 1184, 1185, 1186, 1192, 1193, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1204, 1205, 1206, 1208, 1210, 1213, 1216, 1228, 1229, 1230, 1232, 1233, 1239, 1250, 1258], "physic": [5, 72, 91, 118, 119, 208, 300, 354, 672, 765, 782, 811, 812, 875, 923, 924, 1233, 1250], "A": [5, 18, 37, 40, 51, 58, 65, 68, 87, 88, 114, 118, 119, 120, 121, 132, 134, 139, 152, 180, 188, 207, 208, 213, 215, 220, 226, 252, 256, 268, 269, 270, 274, 275, 300, 307, 379, 380, 383, 413, 416, 430, 431, 438, 450, 452, 461, 465, 468, 470, 477, 516, 522, 525, 536, 554, 555, 576, 581, 582, 583, 584, 585, 586, 588, 589, 590, 610, 611, 612, 613, 618, 619, 620, 621, 624, 634, 635, 636, 660, 694, 714, 715, 719, 765, 803, 811, 812, 828, 848, 851, 852, 875, 878, 950, 951, 954, 988, 991, 1014, 1129, 1130, 1131, 1133, 1136, 1137, 1138, 1163, 1164, 1165, 1166, 1171, 1172, 1173, 1174, 1177, 1187, 1188, 1189, 1213, 1250, 1258], "encod": [5, 51, 71, 118, 119, 132, 258, 300, 347, 447, 614, 662, 765, 915, 1167], "set": [5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 17, 18, 20, 21, 22, 25, 30, 31, 32, 35, 37, 39, 40, 41, 42, 43, 44, 51, 58, 59, 60, 61, 81, 82, 108, 110, 113, 118, 119, 120, 123, 124, 126, 129, 130, 132, 135, 136, 137, 138, 139, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 154, 156, 163, 169, 179, 187, 188, 189, 190, 191, 192, 193, 205, 208, 212, 214, 215, 217, 219, 235, 239, 241, 248, 251, 252, 258, 260, 265, 266, 268, 269, 274, 300, 311, 313, 315, 357, 375, 427, 453, 464, 493, 504, 505, 506, 507, 508, 510, 514, 516, 525, 526, 527, 563, 567, 574, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 593, 599, 603, 604, 609, 629, 639, 640, 645, 646, 647, 648, 649, 650, 651, 652, 653, 657, 678, 682, 684, 688, 692, 709, 710, 712, 713, 724, 725, 726, 738, 741, 742, 743, 747, 752, 753, 755, 756, 765, 777, 786, 792, 794, 802, 803, 804, 805, 806, 807, 811, 812, 816, 817, 821, 830, 832, 834, 839, 846, 848, 851, 858, 863, 875, 882, 883, 925, 930, 946, 1002, 1018, 1024, 1038, 1069, 1080, 1081, 1082, 1083, 1084, 1086, 1090, 1092, 1098, 1099, 1117, 1123, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1136, 1137, 1138, 1141, 1142, 1146, 1153, 1157, 1158, 1162, 1182, 1192, 1193, 1198, 1199, 1200, 1201, 1204, 1205, 1206, 1210, 1231, 1238, 1250, 1259], "lexic": [5, 354, 878, 923, 925], "appear": [5, 40, 110, 300, 676, 765, 1236, 1250], "default": [5, 9, 12, 14, 15, 19, 32, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 58, 61, 81, 88, 89, 107, 109, 110, 111, 112, 113, 114, 118, 119, 121, 123, 124, 126, 127, 128, 129, 130, 132, 141, 143, 145, 146, 147, 148, 149, 150, 154, 166, 169, 172, 187, 188, 189, 190, 191, 192, 193, 205, 207, 208, 215, 217, 224, 226, 235, 236, 237, 238, 239, 245, 250, 252, 258, 266, 268, 269, 271, 276, 300, 310, 311, 313, 354, 375, 409, 410, 424, 429, 431, 432, 433, 434, 453, 493, 504, 509, 510, 514, 516, 518, 526, 535, 552, 553, 555, 560, 567, 570, 574, 579, 582, 583, 584, 585, 586, 588, 589, 590, 593, 596, 599, 608, 609, 618, 629, 633, 639, 640, 645, 646, 647, 648, 651, 652, 653, 655, 657, 678, 679, 682, 684, 688, 692, 696, 698, 709, 710, 711, 712, 713, 717, 720, 724, 725, 726, 727, 738, 741, 746, 747, 752, 753, 754, 756, 765, 786, 787, 792, 794, 802, 803, 804, 805, 806, 807, 811, 812, 821, 830, 834, 836, 841, 846, 848, 849, 854, 875, 882, 883, 923, 930, 946, 947, 984, 985, 999, 1005, 1007, 1008, 1009, 1010, 1024, 1069, 1080, 1085, 1086, 1090, 1092, 1098, 1108, 1109, 1113, 1117, 1119, 1123, 1141, 1149, 1153, 1161, 1162, 1163, 1171, 1174, 1182, 1186, 1192, 1193, 1198, 1199, 1200, 1201, 1204, 1205, 1206, 1208, 1210, 1238, 1239, 1250, 1259], "classmethod": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 447, 765, 790, 875], "activ": [6, 12, 13, 23, 24, 26, 27, 28, 29, 33, 34, 490, 619, 1066, 1172], "bool": [6, 12, 13, 14, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 37, 39, 40, 43, 45, 58, 59, 60, 61, 65, 81, 87, 88, 89, 90, 91, 107, 108, 112, 114, 118, 119, 120, 123, 124, 126, 128, 129, 130, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 156, 159, 160, 161, 162, 166, 171, 176, 177, 179, 180, 181, 185, 186, 187, 188, 189, 190, 191, 192, 196, 198, 200, 201, 202, 205, 207, 208, 215, 224, 226, 235, 236, 237, 238, 239, 243, 247, 249, 252, 256, 258, 260, 261, 264, 265, 266, 267, 269, 270, 272, 274, 283, 285, 287, 290, 300, 310, 311, 312, 313, 314, 315, 325, 328, 329, 332, 341, 344, 346, 347, 349, 350, 352, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 393, 409, 411, 424, 429, 430, 431, 432, 433, 434, 450, 452, 455, 459, 460, 461, 463, 464, 465, 467, 468, 470, 471, 472, 473, 475, 477, 480, 481, 485, 490, 493, 504, 511, 514, 517, 522, 523, 525, 527, 531, 532, 533, 534, 535, 538, 554, 555, 556, 558, 561, 562, 567, 570, 572, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 593, 595, 598, 603, 605, 606, 609, 610, 611, 613, 614, 616, 621, 633, 634, 635, 636, 641, 642, 644, 651, 652, 653, 655, 657, 663, 675, 678, 681, 682, 683, 684, 685, 686, 688, 691, 692, 696, 699, 700, 704, 709, 710, 711, 712, 713, 724, 725, 727, 730, 738, 741, 747, 752, 753, 755, 756, 765, 781, 783, 784, 786, 787, 794, 796, 798, 799, 802, 803, 804, 805, 806, 807, 811, 812, 816, 817, 821, 826, 830, 835, 838, 840, 845, 846, 847, 848, 851, 860, 862, 864, 867, 875, 878, 882, 883, 885, 894, 897, 898, 901, 910, 913, 915, 920, 922, 925, 929, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 964, 984, 986, 999, 1005, 1006, 1008, 1009, 1010, 1017, 1023, 1026, 1030, 1031, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1056, 1057, 1061, 1062, 1066, 1069, 1080, 1087, 1090, 1093, 1099, 1111, 1114, 1115, 1117, 1119, 1120, 1121, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1141, 1144, 1145, 1146, 1147, 1152, 1157, 1159, 1162, 1163, 1164, 1166, 1167, 1169, 1174, 1186, 1187, 1188, 1189, 1194, 1195, 1197, 1204, 1205, 1206, 1208, 1210, 1230, 1231, 1232, 1235, 1238, 1240, 1250, 1258], "decim": [6, 14, 15, 16, 32, 33, 37, 40, 58, 260, 300, 591, 654, 765, 875, 1139, 1207, 1250], "temporari": 6, "remov": [6, 9, 92, 118, 119, 132, 156, 167, 212, 214, 219, 251, 258, 300, 315, 424, 435, 524, 527, 547, 629, 639, 645, 646, 647, 648, 649, 650, 716, 765, 791, 875, 946, 985, 999, 1117, 1182, 1192, 1198, 1199, 1200, 1201, 1202, 1203, 1206, 1240, 1250], "onc": [6, 68, 118, 119, 123, 152, 211, 237, 239, 279, 300, 504, 525, 527, 593, 649, 650, 765, 782, 856, 875, 1080, 1099, 1141, 1202, 1203, 1250], "stabil": [6, 193, 300, 453, 765, 1024, 1250], "current": [6, 7, 8, 10, 11, 35, 67, 114, 120, 121, 130, 137, 161, 162, 207, 208, 300, 389, 410, 516, 560, 765, 777, 784, 785, 786, 811, 812, 875, 878, 929, 933, 952, 960, 985, 1113, 1250, 1258], "consid": [6, 88, 90, 91, 118, 119, 132, 138, 141, 142, 143, 144, 169, 171, 181, 204, 211, 217, 237, 266, 268, 269, 300, 315, 357, 374, 410, 455, 525, 527, 545, 582, 583, 584, 585, 586, 588, 589, 590, 700, 718, 761, 765, 787, 792, 808, 815, 821, 846, 848, 863, 875, 922, 925, 930, 945, 985, 1006, 1026, 1040, 1099, 1117, 1142, 1144, 1145, 1250], "beta": 6, "cfg": [7, 9, 22, 154], "previous": [7, 8], "save": [7, 8, 11, 188, 208, 235, 270, 300, 381, 389, 406, 410, 424, 579, 582, 583, 584, 585, 586, 588, 589, 590, 709, 710, 712, 713, 714, 752, 753, 761, 765, 777, 803, 812, 830, 875, 960, 981, 985, 999], "option": [7, 8, 9, 10, 11, 35, 39, 40, 49, 81, 118, 120, 122, 123, 124, 126, 130, 133, 134, 135, 137, 138, 140, 145, 146, 147, 148, 149, 150, 151, 188, 203, 208, 217, 256, 260, 265, 269, 300, 475, 580, 582, 583, 584, 585, 586, 588, 589, 590, 603, 611, 636, 640, 678, 727, 747, 755, 765, 777, 803, 811, 812, 821, 834, 848, 875, 878, 1049, 1053, 1128, 1130, 1131, 1132, 1133, 1134, 1136, 1137, 1138, 1157, 1164, 1189, 1193, 1228, 1238, 1250], "from": [7, 8, 9, 10, 11, 15, 21, 33, 37, 39, 40, 58, 65, 66, 67, 73, 81, 89, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 160, 166, 167, 172, 174, 179, 186, 188, 191, 205, 206, 207, 208, 209, 217, 226, 230, 235, 236, 238, 239, 241, 242, 258, 265, 266, 268, 269, 270, 276, 300, 303, 375, 376, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 431, 435, 447, 458, 475, 504, 516, 527, 552, 553, 555, 560, 563, 567, 569, 579, 581, 582, 583, 585, 588, 589, 590, 593, 606, 618, 619, 622, 623, 633, 646, 647, 648, 649, 650, 651, 652, 653, 657, 676, 689, 690, 693, 708, 709, 710, 711, 712, 713, 714, 741, 751, 752, 753, 761, 764, 765, 783, 790, 791, 796, 803, 806, 811, 812, 821, 828, 830, 832, 833, 846, 848, 853, 854, 875, 878, 946, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1007, 1013, 1049, 1053, 1080, 1092, 1108, 1109, 1110, 1113, 1117, 1129, 1141, 1171, 1172, 1175, 1176, 1186, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1210, 1241, 1250, 1258, 1259], "json": [7, 8, 10, 11, 43, 44, 127, 128, 134, 136, 300, 447, 540, 622, 623, 624, 662, 765, 777, 790, 834, 875, 1175, 1176, 1177, 1216], "produc": [7, 8, 147, 148, 150, 207, 300, 333, 486, 487, 535, 729, 811, 816, 817, 875, 902, 1062, 1063], "load_from_fil": [7, 10, 11], "file": [7, 8, 10, 11, 36, 37, 41, 42, 43, 44, 45, 58, 59, 60, 61, 117, 118, 119, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 174, 300, 540, 790, 834, 875, 1013, 1250], "path": [8, 11, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 58, 59, 60, 61, 117, 118, 119, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 300, 540, 595, 624, 765, 790, 834, 838, 875, 1147, 1177, 1250, 1259], "load": [8, 10, 11, 110, 112, 120, 122, 123, 129, 133, 134, 149, 151, 300, 765, 777, 808, 815, 875, 1259], "reset": [9, 154], "state": [9, 87, 88, 100, 700, 704, 777, 786, 787, 794, 796, 826, 838, 875], "note": [9, 15, 25, 39, 40, 65, 69, 70, 72, 81, 88, 90, 91, 107, 108, 109, 111, 113, 114, 118, 120, 121, 122, 123, 127, 128, 130, 133, 134, 138, 141, 143, 146, 148, 150, 152, 154, 156, 159, 164, 166, 175, 188, 189, 191, 192, 193, 203, 204, 205, 207, 208, 211, 222, 225, 226, 235, 236, 237, 238, 245, 257, 260, 264, 265, 269, 270, 274, 276, 277, 300, 357, 367, 368, 379, 380, 402, 403, 406, 410, 424, 453, 459, 468, 470, 474, 490, 493, 509, 514, 516, 527, 545, 546, 548, 549, 550, 551, 565, 574, 579, 582, 583, 584, 585, 586, 587, 588, 589, 590, 596, 603, 610, 618, 619, 620, 621, 625, 626, 634, 646, 647, 648, 651, 660, 665, 666, 674, 700, 709, 710, 712, 713, 714, 718, 727, 738, 740, 741, 752, 753, 755, 756, 761, 765, 776, 781, 787, 796, 797, 803, 804, 806, 807, 808, 812, 815, 828, 830, 836, 838, 840, 845, 848, 851, 854, 855, 875, 930, 939, 940, 947, 950, 951, 977, 978, 981, 999, 1023, 1024, 1066, 1069, 1085, 1090, 1099, 1123, 1135, 1142, 1145, 1149, 1152, 1157, 1163, 1171, 1172, 1173, 1174, 1178, 1179, 1187, 1199, 1200, 1201, 1204, 1213, 1220, 1231, 1250, 1254, 1258], "oper": [9, 39, 40, 72, 89, 91, 96, 97, 107, 109, 110, 111, 112, 113, 118, 120, 130, 157, 162, 174, 177, 180, 187, 190, 197, 198, 209, 211, 218, 222, 224, 225, 229, 233, 235, 238, 239, 245, 255, 260, 261, 265, 268, 278, 279, 300, 308, 309, 312, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 430, 431, 445, 450, 452, 474, 477, 504, 505, 506, 507, 508, 509, 516, 522, 539, 542, 544, 545, 546, 548, 549, 554, 555, 558, 564, 565, 572, 579, 593, 596, 664, 665, 674, 681, 682, 684, 694, 695, 699, 715, 755, 765, 777, 785, 796, 802, 805, 808, 811, 815, 821, 822, 830, 836, 856, 875, 933, 937, 938, 939, 940, 941, 942, 943, 944, 945, 1013, 1080, 1081, 1082, 1083, 1084, 1085, 1121, 1141, 1149, 1226, 1230, 1231, 1232, 1240, 1250], "environ": [9, 35, 130, 137, 149, 152], "ani": [9, 37, 39, 40, 45, 48, 58, 86, 107, 108, 109, 110, 111, 112, 113, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 130, 132, 133, 134, 135, 137, 145, 147, 148, 150, 154, 157, 164, 169, 174, 176, 177, 180, 203, 205, 206, 211, 215, 224, 225, 236, 237, 238, 252, 256, 257, 260, 261, 266, 268, 269, 277, 300, 308, 311, 312, 315, 352, 411, 430, 431, 440, 441, 445, 448, 450, 452, 464, 477, 484, 490, 522, 523, 525, 526, 527, 539, 542, 544, 548, 549, 554, 555, 558, 559, 563, 565, 574, 575, 580, 581, 594, 609, 611, 633, 647, 648, 649, 650, 651, 652, 653, 655, 657, 664, 665, 668, 674, 681, 682, 685, 686, 696, 697, 727, 730, 755, 765, 792, 798, 799, 825, 846, 848, 855, 875, 878, 882, 885, 986, 1013, 1016, 1020, 1038, 1052, 1060, 1066, 1098, 1099, 1123, 1124, 1128, 1129, 1142, 1143, 1146, 1162, 1164, 1186, 1204, 1205, 1206, 1208, 1210, 1222, 1230, 1231, 1232, 1250, 1258, 1259], "local": [9, 39, 120, 122, 133, 134, 137, 150, 300, 424, 561, 562, 765, 922, 924, 956, 957, 989, 999, 1114, 1115, 1250], "non": [9, 37, 39, 40, 49, 58, 81, 112, 139, 165, 189, 192, 206, 217, 235, 241, 242, 245, 265, 269, 274, 275, 300, 357, 363, 364, 459, 516, 526, 560, 574, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 612, 613, 619, 625, 660, 683, 685, 693, 694, 695, 697, 699, 703, 707, 714, 732, 736, 742, 743, 744, 747, 749, 765, 789, 804, 807, 821, 830, 832, 833, 836, 848, 851, 852, 875, 930, 947, 1030, 1092, 1113, 1123, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1136, 1137, 1138, 1149, 1165, 1166, 1172, 1178, 1213, 1231, 1250], "env": [9, 151], "back": [9, 81, 174, 261, 300, 559, 658, 765, 834, 875, 1013, 1211, 1232, 1250], "contain": [10, 37, 38, 39, 40, 58, 81, 86, 109, 112, 114, 120, 121, 122, 133, 134, 141, 142, 147, 159, 169, 188, 191, 206, 222, 226, 264, 269, 282, 300, 311, 313, 315, 349, 350, 464, 526, 527, 609, 616, 618, 620, 621, 624, 643, 644, 660, 682, 684, 699, 730, 765, 781, 792, 803, 806, 826, 845, 848, 859, 875, 878, 882, 883, 946, 1018, 1098, 1105, 1117, 1162, 1169, 1171, 1173, 1174, 1177, 1196, 1197, 1213, 1226, 1250], "save_to_fil": 10, "json_str": 10, "written": [11, 36, 37, 40, 41, 42, 43, 44, 45, 58, 59, 60, 61, 300, 834, 875], "leav": [11, 217, 300, 516, 821, 875], "directli": [11, 35, 67, 88, 120, 148, 150, 154, 238, 300, 432, 433, 434, 574, 741, 765, 787, 875, 1008, 1009, 1010, 1123, 1250, 1259], "json_fil": 11, "ascii": [12, 25, 611, 625, 626, 628, 636, 638, 660, 1164, 1178, 1179, 1181, 1189, 1191, 1213], "charact": [12, 14, 17, 25, 31, 32, 33, 37, 38, 58, 118, 119, 121, 132, 300, 406, 617, 619, 625, 626, 628, 629, 630, 631, 632, 638, 639, 641, 642, 645, 646, 647, 648, 649, 650, 660, 826, 875, 878, 981, 1170, 1172, 1178, 1179, 1181, 1182, 1183, 1184, 1185, 1191, 1192, 1194, 1195, 1198, 1199, 1200, 1201, 1213], "displai": [12, 15, 16, 17, 18, 22, 24, 28, 30, 40, 186, 300], "tabl": [12, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 38, 39, 40, 66, 67, 68, 70, 107, 114, 118, 119, 122, 123, 132, 133, 134, 207, 226, 255, 261, 268, 269, 300, 811, 848, 875, 1232, 1250, 1258], "outlin": 12, "fals": [12, 13, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 33, 35, 37, 39, 40, 43, 45, 58, 59, 60, 61, 81, 87, 88, 108, 112, 114, 118, 119, 120, 123, 124, 126, 128, 129, 130, 132, 135, 136, 137, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 156, 159, 160, 161, 162, 166, 171, 180, 185, 186, 187, 188, 189, 190, 191, 192, 196, 198, 200, 201, 202, 205, 207, 208, 209, 214, 215, 221, 222, 224, 226, 227, 235, 236, 237, 238, 239, 243, 247, 249, 252, 256, 258, 260, 261, 264, 265, 266, 269, 270, 272, 274, 283, 285, 287, 288, 290, 293, 300, 311, 312, 313, 315, 325, 328, 329, 332, 341, 344, 346, 349, 350, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 393, 409, 411, 424, 429, 430, 431, 432, 433, 434, 452, 455, 459, 460, 461, 463, 464, 465, 467, 468, 470, 471, 472, 473, 475, 477, 480, 481, 485, 490, 493, 504, 511, 514, 517, 522, 523, 525, 527, 531, 534, 536, 538, 554, 555, 556, 558, 561, 562, 567, 570, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 593, 595, 598, 603, 605, 606, 609, 610, 611, 613, 616, 621, 622, 633, 634, 635, 636, 641, 642, 644, 651, 652, 653, 655, 675, 678, 681, 682, 683, 684, 685, 688, 691, 692, 696, 699, 700, 704, 709, 710, 711, 712, 713, 724, 725, 727, 738, 741, 747, 752, 753, 755, 756, 765, 781, 783, 784, 785, 786, 787, 794, 796, 802, 803, 804, 805, 806, 807, 811, 812, 814, 816, 817, 826, 830, 835, 838, 840, 845, 846, 848, 851, 860, 862, 864, 865, 867, 870, 875, 878, 882, 883, 894, 897, 898, 901, 910, 913, 920, 922, 925, 928, 929, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 964, 984, 986, 999, 1005, 1006, 1008, 1009, 1010, 1017, 1023, 1030, 1031, 1032, 1034, 1036, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1053, 1056, 1057, 1061, 1066, 1069, 1080, 1087, 1090, 1093, 1105, 1111, 1114, 1115, 1117, 1119, 1120, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1141, 1144, 1147, 1152, 1157, 1159, 1162, 1163, 1164, 1166, 1169, 1174, 1175, 1186, 1187, 1188, 1189, 1194, 1195, 1197, 1204, 1205, 1206, 1208, 1231, 1232, 1235, 1238, 1240, 1241, 1250, 1258], "revert": [12, 14, 15], "utf8_full_condens": [12, 25, 114], "format": [12, 16, 20, 21, 25, 37, 40, 41, 42, 58, 117, 118, 119, 120, 132, 138, 173, 186, 205, 217, 237, 238, 257, 298, 300, 410, 413, 416, 538, 651, 652, 653, 657, 714, 795, 821, 834, 875, 988, 991, 1204, 1205, 1206, 1210, 1249], "style": [12, 25, 40, 120, 130, 226, 300], "abc": [12, 21, 23, 24, 25, 26, 27, 28, 29, 30, 308, 619, 634, 647, 765, 878, 1172, 1187], "xyz": [12, 21, 23, 24, 25, 26, 27, 28, 29, 30, 308, 613, 619, 765, 1166, 1172, 1228, 1250], "f64": [12, 14, 15, 16, 20, 23, 24, 26, 27, 28, 29, 30, 32, 62, 65, 81, 83, 85, 89, 108, 110, 138, 148, 161, 162, 164, 166, 167, 170, 175, 176, 180, 185, 186, 187, 188, 198, 199, 207, 208, 213, 214, 215, 216, 220, 226, 227, 228, 248, 249, 250, 252, 271, 274, 279, 283, 285, 287, 288, 289, 290, 292, 293, 300, 307, 310, 317, 318, 319, 320, 321, 322, 352, 355, 356, 360, 361, 362, 374, 375, 376, 379, 380, 411, 429, 430, 431, 432, 433, 434, 435, 436, 439, 440, 444, 445, 450, 452, 458, 468, 470, 471, 472, 474, 475, 477, 490, 501, 518, 519, 520, 522, 528, 529, 530, 541, 544, 546, 552, 553, 554, 555, 560, 564, 567, 568, 569, 570, 574, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 601, 602, 603, 607, 608, 670, 671, 674, 679, 689, 690, 693, 694, 696, 698, 715, 716, 730, 733, 734, 745, 746, 754, 761, 765, 784, 791, 797, 798, 802, 803, 810, 811, 812, 819, 820, 827, 840, 841, 849, 851, 853, 856, 860, 862, 864, 865, 866, 867, 869, 870, 875, 878, 886, 887, 888, 889, 890, 891, 926, 927, 934, 935, 936, 945, 946, 947, 950, 951, 986, 1008, 1009, 1010, 1011, 1015, 1019, 1026, 1029, 1066, 1077, 1094, 1095, 1096, 1113, 1117, 1119, 1123, 1129, 1131, 1132, 1134, 1135, 1136, 1138, 1139, 1140, 1155, 1156, 1160, 1224, 1225, 1237, 1250, 1259], "multi": [13, 40, 118, 119, 300, 435, 618, 765, 1171], "automat": [13, 67, 70, 107, 109, 110, 111, 113, 114, 118, 119, 120, 121, 123, 127, 128, 132, 136, 148, 150, 152, 241, 274, 300, 525, 526, 574, 646, 647, 648, 765, 832, 851, 875, 1098, 1123, 1199, 1200, 1201, 1250, 1258], "turn": [13, 58, 59, 60, 61, 87, 88, 118, 119, 132, 658, 786, 787, 794, 796, 816, 817, 826, 875, 1211], "struct": [13, 114, 222, 241, 263, 267, 274, 300, 375, 455, 516, 567, 577, 578, 620, 622, 642, 643, 678, 700, 701, 703, 704, 705, 729, 765, 832, 847, 851, 863, 875, 946, 1092, 1117, 1126, 1127, 1173, 1175, 1193, 1195, 1196, 1250], "v": [13, 14, 45, 67, 68, 172, 300, 594, 765, 1143, 1250], "v2": [13, 124, 135], "out": [13, 19, 58, 59, 60, 61, 114, 140, 235, 238, 300, 335, 347, 493, 494, 514, 610, 614, 621, 755, 830, 875, 904, 915, 1069, 1070, 1090, 1163, 1167, 1174], "separ": [14, 15, 29, 32, 37, 58, 116, 118, 119, 132, 224, 226, 258, 265, 267, 300, 315, 336, 491, 496, 527, 617, 695, 700, 701, 704, 705, 765, 847, 875, 905, 1067, 1072, 1170, 1219, 1227, 1250], "set_thousands_separ": 14, "thousand": [14, 32], "group": [14, 32, 40, 45, 61, 65, 119, 187, 188, 189, 190, 191, 192, 206, 222, 224, 226, 235, 238, 268, 270, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 300, 309, 374, 437, 443, 448, 451, 490, 525, 527, 535, 537, 559, 570, 578, 579, 605, 606, 610, 618, 619, 620, 621, 634, 678, 730, 765, 802, 803, 804, 805, 806, 807, 830, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 875, 878, 945, 1066, 1127, 1163, 1171, 1172, 1173, 1174, 1187, 1238, 1250], "9876": 14, "54321": 14, "1010101": 14, "123456": [14, 878], "78": 14, "tbl_cell_numeric_align": [14, 15, 32], "right": [14, 15, 20, 21, 23, 32, 40, 118, 119, 141, 142, 143, 144, 188, 189, 191, 192, 207, 208, 235, 269, 300, 375, 432, 433, 434, 459, 505, 506, 507, 508, 567, 579, 582, 583, 584, 585, 586, 588, 589, 590, 594, 603, 638, 693, 709, 710, 712, 713, 752, 753, 765, 803, 804, 806, 807, 811, 812, 830, 848, 875, 946, 1008, 1009, 1010, 1030, 1081, 1082, 1083, 1084, 1117, 1143, 1157, 1191, 1250], "thousands_separ": [14, 15, 32], "decimal_separ": [14, 32], "float_precis": [14, 15, 32, 37, 40, 58, 300, 875], "print": [14, 15, 16, 17, 18, 20, 21, 22, 24, 25, 30, 32, 33, 119, 140, 141, 143, 170, 186, 187, 206, 209, 259, 278, 300, 457, 538, 765, 786, 809, 875, 1038, 1229, 1250, 1259], "876": 14, "543": 14, "010": [14, 655, 1208], "101": [14, 32, 383, 655, 1208, 1259], "000": [14, 15, 32, 40, 300, 1259], "123": [14, 613, 619, 635, 660, 755, 878, 1166, 1172, 1188, 1213, 1228, 1250], "456": [14, 15, 383, 878, 954, 1228, 1250], "780": 14, "precis": [15, 16, 37, 40, 48, 49, 58, 120, 205, 237, 238, 257, 300, 382, 654, 875, 878, 953, 1207], "control": [15, 16, 40, 70, 88, 89, 146, 300, 574, 765, 787, 794, 875, 1123, 1250], "number": [15, 16, 17, 18, 19, 22, 30, 37, 38, 40, 45, 58, 61, 72, 81, 91, 101, 107, 109, 111, 113, 116, 118, 119, 121, 123, 127, 128, 129, 130, 132, 136, 137, 139, 146, 148, 149, 151, 152, 159, 161, 165, 172, 173, 175, 176, 186, 194, 205, 206, 209, 210, 221, 222, 239, 245, 246, 250, 253, 264, 268, 271, 282, 284, 294, 300, 326, 345, 351, 363, 374, 375, 377, 391, 394, 399, 401, 411, 425, 426, 428, 432, 433, 434, 438, 440, 446, 454, 468, 470, 478, 479, 488, 495, 498, 499, 504, 509, 513, 516, 563, 567, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 596, 597, 599, 608, 625, 626, 627, 630, 634, 642, 643, 654, 667, 673, 679, 696, 697, 698, 714, 722, 742, 743, 746, 750, 754, 765, 781, 784, 789, 795, 796, 797, 798, 808, 815, 826, 836, 837, 841, 843, 845, 849, 859, 861, 871, 875, 919, 929, 945, 946, 948, 962, 965, 974, 976, 986, 1000, 1001, 1003, 1007, 1008, 1009, 1010, 1014, 1016, 1025, 1037, 1054, 1055, 1064, 1071, 1074, 1075, 1080, 1085, 1089, 1092, 1105, 1106, 1117, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1136, 1137, 1138, 1139, 1140, 1141, 1149, 1150, 1153, 1161, 1178, 1179, 1180, 1183, 1187, 1195, 1196, 1207, 1221, 1234, 1239, 1250, 1259], "place": [15, 16, 37, 58, 159, 168, 174, 196, 197, 198, 226, 231, 233, 238, 246, 249, 264, 272, 300, 325, 336, 341, 496, 511, 597, 605, 765, 781, 837, 840, 845, 875, 884, 894, 905, 910, 1013, 1072, 1087, 1120, 1150, 1159, 1250], "float": [15, 16, 37, 40, 52, 53, 58, 123, 138, 141, 142, 143, 144, 145, 148, 150, 156, 166, 172, 175, 208, 228, 239, 246, 292, 300, 332, 356, 375, 379, 380, 411, 429, 430, 431, 432, 433, 434, 439, 444, 450, 452, 458, 461, 465, 468, 470, 471, 472, 477, 485, 504, 518, 522, 528, 541, 552, 553, 554, 555, 564, 567, 568, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 593, 674, 739, 741, 765, 797, 812, 827, 837, 838, 869, 875, 878, 901, 920, 927, 946, 947, 949, 950, 951, 967, 968, 986, 1005, 1007, 1008, 1009, 1010, 1015, 1019, 1026, 1037, 1053, 1061, 1062, 1080, 1094, 1108, 1109, 1116, 1117, 1118, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1136, 1137, 1138, 1139, 1141, 1143, 1145, 1146, 1157, 1161, 1220, 1231, 1239, 1250, 1259], "point": [15, 16, 40, 52, 53, 148, 150, 175, 188, 191, 209, 300, 356, 375, 379, 411, 439, 444, 468, 470, 504, 527, 591, 593, 765, 797, 803, 806, 816, 817, 828, 875, 927, 946, 950, 986, 1015, 1019, 1037, 1080, 1117, 1139, 1141, 1231, 1250], "standard": [15, 40, 250, 260, 300, 394, 433, 588, 603, 608, 624, 746, 761, 765, 841, 875, 965, 1009, 1157, 1161, 1177, 1250, 1259], "behaviour": [15, 81, 89, 169, 300, 610, 618, 619, 621, 634, 674, 765, 792, 875, 1163, 1171, 1172, 1174, 1187], "when": [15, 19, 22, 24, 28, 37, 40, 45, 48, 58, 61, 70, 72, 73, 90, 91, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 118, 119, 120, 121, 123, 124, 126, 129, 130, 132, 133, 135, 136, 138, 141, 142, 143, 144, 148, 150, 157, 159, 170, 172, 174, 176, 180, 188, 189, 191, 192, 207, 211, 225, 235, 236, 238, 241, 242, 245, 249, 258, 260, 264, 266, 269, 275, 300, 357, 432, 433, 434, 440, 509, 516, 526, 536, 563, 574, 578, 579, 596, 605, 606, 611, 625, 626, 636, 646, 647, 648, 651, 691, 700, 704, 718, 765, 781, 798, 803, 804, 806, 807, 811, 816, 817, 830, 832, 833, 836, 840, 845, 846, 848, 852, 875, 930, 1007, 1008, 1009, 1010, 1013, 1016, 1085, 1098, 1123, 1127, 1142, 1145, 1149, 1164, 1178, 1179, 1189, 1199, 1200, 1201, 1204, 1227, 1250], "larger": [15, 58, 59, 60, 61, 696, 786, 875], "should": [15, 38, 40, 58, 59, 60, 61, 89, 107, 109, 111, 113, 122, 127, 128, 130, 132, 136, 138, 145, 146, 150, 159, 167, 205, 208, 211, 236, 237, 238, 257, 258, 264, 267, 286, 300, 309, 354, 374, 427, 435, 468, 470, 490, 527, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 594, 603, 678, 714, 716, 727, 730, 742, 743, 755, 765, 781, 791, 796, 811, 812, 817, 834, 838, 840, 845, 847, 875, 878, 923, 945, 1002, 1066, 1099, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1136, 1137, 1138, 1143, 1157, 1238, 1250], "ensur": [15, 40, 121, 147, 148, 150, 187, 190, 224, 236, 300, 459, 525, 765, 802, 805, 816, 817, 875, 878, 1231, 1250], "awar": [15, 205, 237, 238, 257, 300, 611, 636, 796, 875, 1164, 1189, 1206], "both": [15, 30, 37, 58, 72, 90, 91, 188, 189, 191, 192, 207, 208, 218, 235, 236, 269, 300, 314, 357, 375, 435, 459, 567, 579, 582, 583, 584, 585, 586, 588, 589, 590, 709, 710, 712, 713, 752, 753, 761, 765, 776, 803, 804, 806, 807, 811, 812, 822, 830, 848, 875, 930, 1030, 1040, 1250], "limit": [15, 16, 61, 120, 121, 132, 176, 300, 345, 358, 359, 440, 446, 765, 798, 808, 875, 931, 932, 1016, 1250], "represent": [15, 43, 44, 259, 300, 354, 387, 391, 394, 395, 397, 399, 401, 404, 407, 408, 411, 425, 426, 428, 672, 765, 794, 814, 875, 923, 924, 958, 962, 964, 965, 969, 971, 974, 976, 979, 982, 983, 986, 1000, 1001, 1003, 1229, 1233, 1250], "look": [15, 188, 300, 346, 516, 525, 765, 803, 875, 914], "appli": [15, 25, 37, 40, 58, 65, 89, 132, 145, 148, 150, 180, 211, 225, 286, 300, 385, 386, 387, 391, 393, 394, 395, 397, 399, 401, 404, 407, 408, 411, 414, 425, 426, 428, 433, 434, 523, 525, 527, 563, 580, 582, 583, 585, 589, 634, 651, 652, 653, 657, 700, 701, 704, 705, 718, 728, 729, 730, 740, 755, 765, 808, 815, 816, 817, 825, 863, 875, 930, 956, 957, 958, 962, 964, 965, 969, 971, 974, 976, 979, 982, 983, 986, 989, 1000, 1001, 1003, 1009, 1010, 1099, 1128, 1130, 1131, 1133, 1137, 1187, 1204, 1205, 1206, 1210, 1250], "float64": [15, 37, 40, 58, 110, 118, 148, 170, 172, 180, 240, 261, 274, 300, 317, 318, 319, 320, 321, 322, 352, 360, 361, 362, 376, 411, 435, 468, 470, 569, 601, 602, 670, 671, 716, 738, 741, 756, 765, 793, 831, 851, 875, 878, 986, 1232, 1237, 1250], "doe": [15, 37, 39, 58, 81, 89, 101, 107, 109, 110, 111, 113, 114, 118, 119, 120, 122, 123, 127, 128, 132, 133, 136, 138, 162, 174, 193, 206, 207, 236, 237, 238, 266, 274, 277, 300, 303, 427, 453, 516, 526, 647, 648, 676, 761, 765, 785, 796, 811, 817, 846, 851, 855, 875, 933, 1002, 1013, 1023, 1024, 1098, 1152, 1240, 1250, 1254], "cover": 15, "nativ": [15, 118, 120, 123, 124, 126, 130, 146, 205, 211, 237, 238, 257, 286, 300, 527, 730, 765, 771, 863, 1099, 1250, 1259], "level": [15, 40, 45, 61, 132, 135, 136, 137, 148, 180, 211, 222, 300, 441, 765, 808, 815, 875], "larg": [15, 16, 19, 81, 120], "maximum": [15, 31, 37, 58, 118, 119, 132, 138, 146, 147, 148, 150, 186, 188, 212, 213, 300, 330, 482, 528, 552, 561, 570, 731, 732, 765, 803, 818, 875, 899, 966, 1058, 1100, 1108, 1114, 1119, 1250], "import": [15, 21, 33, 36, 37, 39, 40, 41, 42, 45, 48, 81, 107, 108, 111, 112, 118, 121, 132, 138, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 160, 166, 167, 169, 186, 188, 206, 208, 217, 224, 226, 258, 260, 261, 268, 270, 300, 303, 376, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 393, 394, 395, 397, 399, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 441, 581, 582, 583, 585, 588, 589, 590, 689, 690, 709, 710, 712, 713, 714, 752, 753, 761, 765, 777, 783, 787, 790, 791, 792, 803, 812, 817, 821, 834, 875, 934, 936, 952, 953, 954, 955, 956, 957, 958, 960, 961, 962, 964, 965, 966, 967, 968, 969, 971, 973, 974, 976, 977, 978, 979, 981, 982, 983, 984, 985, 986, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1034, 1039, 1043, 1044, 1049, 1129, 1155, 1224, 1250, 1254, 1259], "pi": [15, 376, 765, 934, 936, 1155, 1224, 1250], "e": [15, 36, 37, 39, 41, 42, 45, 58, 108, 117, 118, 119, 123, 124, 125, 126, 127, 128, 129, 130, 131, 135, 138, 186, 194, 204, 253, 255, 260, 268, 300, 308, 315, 429, 435, 459, 518, 527, 532, 533, 535, 536, 537, 538, 539, 598, 603, 621, 647, 648, 716, 730, 755, 765, 790, 814, 828, 875, 878, 1005, 1006, 1030, 1144, 1157, 1174, 1231, 1250, 1259], "const": 15, "15": [15, 40, 140, 147, 188, 198, 211, 235, 300, 374, 377, 403, 410, 424, 563, 579, 589, 623, 701, 752, 765, 803, 830, 875, 945, 948, 985, 999, 1176, 1250], "141592653589793": 15, "718281828459045": [15, 429, 518, 765, 1005, 1094, 1250], "align": [15, 20, 21, 40, 81, 89, 300], "numer": [15, 21, 37, 40, 58, 160, 167, 208, 217, 226, 268, 300, 308, 357, 445, 459, 520, 542, 544, 564, 573, 598, 620, 660, 664, 674, 765, 777, 783, 791, 812, 821, 875, 878, 930, 947, 1006, 1030, 1047, 1144, 1151, 1173, 1213, 1231, 1250, 1259], "cleanli": [15, 186, 300], "line": [15, 25, 40, 118, 119, 123, 132, 186, 200, 202, 300, 303, 618, 1171], "up": [15, 40, 73, 118, 119, 121, 132, 205, 208, 237, 238, 257, 300, 315, 356, 527, 765, 811, 812, 817, 875, 878, 927, 1250], "xx": [15, 82, 84, 147, 150, 878], "yy": [15, 82, 84, 147, 150, 878], "11111111": 15, "44444444444": 15, "100000": [15, 32], "987654321": 15, "23456789": 15, "11": [15, 21, 45, 61, 140, 148, 235, 300, 310, 402, 403, 406, 410, 424, 458, 560, 570, 579, 581, 589, 604, 681, 748, 753, 765, 786, 787, 808, 815, 826, 830, 843, 875, 878, 981, 985, 999, 1099, 1129, 1250], "111": 15, "100": [15, 22, 32, 40, 110, 113, 118, 119, 127, 132, 136, 245, 300, 574, 596, 611, 622, 623, 636, 654, 713, 765, 836, 875, 1095, 1123, 1130, 1131, 1133, 1149, 1164, 1175, 1176, 1189, 1207, 1250, 1259], "988": 15, "44": [15, 218, 300, 378, 765, 822, 875], "444": 15, "23": [15, 140, 188, 235, 300, 383, 387, 391, 407, 410, 426, 579, 582, 583, 585, 588, 589, 590, 711, 714, 751, 752, 753, 765, 803, 830, 875, 878, 954, 962, 1259], "789": [15, 878], "fmt": [16, 457, 719, 765, 809, 875], "floatfmt": 16, "mix": [16, 947, 1206, 1250], "how": [16, 39, 40, 81, 89, 110, 113, 121, 130, 137, 169, 207, 226, 268, 269, 300, 333, 354, 377, 409, 410, 424, 458, 486, 487, 488, 559, 573, 587, 622, 623, 651, 653, 711, 755, 765, 792, 811, 848, 875, 902, 923, 948, 984, 985, 999, 1062, 1063, 1064, 1135, 1175, 1176, 1204, 1206, 1250], "full": [16, 48, 81, 86, 89, 118, 119, 122, 132, 133, 134, 138, 188, 189, 191, 192, 235, 300, 579, 651, 652, 653, 657, 765, 803, 804, 806, 807, 816, 817, 830, 875, 878, 1204, 1205, 1206, 1210, 1259], "scientif": 16, "notat": [16, 40, 300], "small": [16, 121, 147, 209, 300, 410, 796, 875, 1259], "2304980958725870923": 16, "1e6": 16, "1e": [16, 141, 142, 143, 144], "230498": 16, "0000e": 16, "230498095872587": 16, "1000000": [16, 997], "00000001": [16, 681, 765], "plai": [17, 695], "sam": 17, "As": [17, 72, 90, 91, 107, 109, 110, 111, 113, 123, 127, 128, 136, 300, 516, 755, 875], "time": [17, 39, 48, 50, 65, 70, 86, 87, 88, 130, 132, 174, 188, 189, 191, 192, 208, 235, 270, 300, 332, 351, 381, 382, 383, 384, 385, 389, 390, 406, 409, 410, 413, 415, 416, 424, 427, 484, 485, 516, 578, 579, 582, 583, 584, 585, 586, 588, 589, 590, 599, 651, 653, 657, 672, 673, 694, 695, 709, 710, 711, 712, 713, 714, 720, 752, 753, 765, 786, 787, 803, 804, 806, 807, 812, 826, 830, 875, 878, 901, 919, 952, 953, 954, 955, 960, 961, 981, 984, 985, 988, 990, 991, 999, 1002, 1013, 1060, 1061, 1062, 1127, 1153, 1204, 1206, 1210, 1233, 1234, 1250, 1259], "goe": 17, "By": [17, 19, 35, 81, 118, 119, 132, 188, 207, 208, 235, 245, 250, 269, 270, 271, 300, 406, 410, 424, 509, 579, 582, 583, 584, 585, 586, 588, 589, 590, 596, 608, 679, 696, 698, 709, 710, 712, 713, 714, 727, 746, 752, 753, 754, 765, 786, 803, 811, 812, 830, 836, 841, 849, 875, 981, 985, 999, 1085, 1149, 1161, 1231, 1239, 1250], "begin": [17, 40, 300, 432, 433, 434, 618, 765, 1008, 1009, 1010, 1171, 1250], "beauti": 17, "friendship": 17, "len_byt": [17, 626, 627, 1179, 1180], "len": [17, 40, 146, 148, 206, 226, 277, 286, 300, 363, 499, 527, 535, 537, 697, 724, 765, 855, 863, 875, 1075, 1250], "u32": [17, 65, 120, 158, 160, 165, 223, 276, 277, 282, 291, 293, 300, 309, 316, 323, 324, 325, 326, 327, 330, 331, 333, 363, 364, 455, 478, 482, 483, 487, 498, 545, 557, 570, 578, 582, 583, 585, 588, 589, 590, 594, 613, 621, 625, 626, 672, 676, 682, 687, 691, 692, 697, 699, 724, 737, 765, 780, 783, 789, 824, 854, 855, 859, 868, 870, 875, 894, 895, 896, 899, 900, 902, 920, 924, 1026, 1058, 1059, 1063, 1074, 1119, 1127, 1166, 1174, 1178, 1179, 1233, 1236, 1238, 1250], "37": [17, 589, 765], "beaut": 17, "48": [17, 235, 300, 579, 765, 830, 875], "fmt_str_length": [17, 710, 713], "50": [17, 32, 40, 166, 174, 186, 300, 357, 410, 424, 710, 765, 930, 947, 999, 1250], "element": [18, 19, 30, 147, 150, 159, 165, 203, 226, 236, 250, 264, 271, 300, 315, 317, 318, 319, 320, 321, 322, 333, 351, 355, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 379, 380, 436, 437, 441, 453, 464, 478, 486, 487, 489, 490, 491, 498, 499, 505, 506, 507, 508, 519, 520, 527, 559, 560, 570, 573, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 594, 600, 601, 602, 607, 608, 642, 643, 654, 670, 671, 673, 679, 696, 698, 742, 743, 746, 754, 765, 781, 789, 840, 841, 845, 849, 875, 885, 886, 887, 888, 889, 890, 891, 902, 919, 926, 929, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 950, 951, 1011, 1012, 1017, 1025, 1038, 1052, 1054, 1055, 1062, 1063, 1065, 1066, 1067, 1074, 1075, 1081, 1082, 1083, 1084, 1095, 1096, 1099, 1113, 1119, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1143, 1154, 1155, 1156, 1160, 1161, 1195, 1196, 1207, 1221, 1224, 1225, 1229, 1234, 1235, 1239, 1250], "empti": [18, 36, 37, 58, 97, 110, 118, 119, 123, 129, 132, 161, 162, 188, 201, 217, 300, 727, 744, 784, 785, 803, 821, 875, 878, 929, 933, 1033, 1250], "alwai": [18, 37, 39, 58, 65, 118, 147, 187, 190, 211, 286, 300, 535, 651, 709, 755, 817, 875, 1099, 1204, 1250, 1258, 1259], "neg": [18, 49, 118, 119, 124, 126, 130, 139, 188, 189, 191, 192, 194, 210, 235, 245, 246, 248, 253, 277, 300, 509, 510, 563, 579, 596, 597, 604, 640, 765, 803, 804, 806, 807, 830, 836, 837, 839, 854, 855, 875, 1025, 1055, 1085, 1086, 1149, 1150, 1158, 1193, 1221, 1250], "result": [18, 37, 43, 44, 45, 58, 59, 60, 61, 81, 89, 111, 113, 120, 121, 122, 123, 132, 135, 137, 138, 150, 174, 188, 191, 193, 207, 222, 226, 235, 238, 245, 246, 261, 270, 277, 279, 300, 410, 413, 416, 424, 432, 433, 434, 438, 453, 475, 515, 516, 525, 527, 559, 567, 574, 575, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 595, 596, 597, 641, 642, 653, 674, 699, 700, 701, 704, 705, 709, 710, 711, 712, 713, 714, 729, 738, 741, 742, 743, 756, 765, 782, 786, 803, 804, 806, 807, 811, 816, 817, 826, 830, 834, 836, 837, 855, 856, 875, 884, 946, 985, 988, 991, 999, 1008, 1009, 1010, 1013, 1024, 1053, 1091, 1099, 1117, 1123, 1124, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1136, 1137, 1138, 1147, 1149, 1150, 1194, 1195, 1206, 1231, 1250, 1258, 1259], "being": [18, 88, 118, 119, 120, 132, 138, 160, 173, 258, 268, 269, 300, 315, 374, 410, 455, 582, 583, 584, 585, 586, 588, 589, 590, 715, 765, 783, 787, 795, 796, 848, 875, 925, 945, 985, 1026, 1117, 1250, 1259], "content": [18, 599, 765, 1153, 1250], "final": [18, 40, 81, 137, 300, 432, 433, 434, 765, 796, 875, 1008, 1009, 1010, 1250], "item": [18, 89, 119, 186, 236, 239, 300, 332, 335, 336, 377, 437, 485, 488, 494, 496, 504, 593, 643, 765, 901, 904, 905, 948, 1012, 1061, 1064, 1070, 1072, 1080, 1141, 1196, 1250], "num": [18, 40, 263, 300, 459, 765, 1030, 1250], "fmt_table_cell_list_len": 18, "10": [18, 21, 22, 32, 36, 37, 39, 40, 41, 42, 45, 61, 65, 81, 89, 114, 121, 132, 140, 148, 150, 162, 174, 185, 186, 188, 194, 196, 198, 199, 204, 221, 225, 226, 227, 231, 233, 235, 241, 253, 274, 279, 283, 285, 287, 288, 289, 290, 291, 292, 293, 300, 310, 314, 323, 324, 325, 327, 357, 365, 368, 377, 381, 383, 385, 386, 389, 391, 395, 397, 399, 402, 403, 404, 409, 410, 411, 414, 424, 427, 453, 454, 458, 464, 474, 479, 488, 495, 510, 513, 519, 535, 537, 546, 557, 560, 563, 574, 579, 604, 655, 667, 681, 693, 700, 709, 712, 715, 718, 720, 722, 727, 729, 750, 753, 765, 786, 787, 803, 808, 810, 815, 825, 826, 830, 832, 842, 843, 851, 856, 860, 862, 864, 865, 866, 867, 868, 869, 870, 875, 878, 930, 948, 952, 954, 960, 984, 999, 1002, 1005, 1025, 1038, 1055, 1064, 1071, 1086, 1089, 1095, 1099, 1113, 1123, 1142, 1145, 1208, 1221, 1250, 1259], "size": [19, 45, 61, 118, 119, 120, 146, 147, 148, 150, 152, 172, 268, 300, 575, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 688, 724, 725, 742, 743, 765, 786, 875, 1007, 1124, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1250, 1259], "overwrit": [19, 38, 39, 107, 109, 110, 111, 113, 118, 119, 127, 128, 132, 136, 156, 269, 300, 310, 765, 796, 875], "chunk": [19, 61, 116, 118, 119, 130, 132, 135, 136, 137, 148, 150, 174, 206, 221, 300, 314, 571, 765, 875, 884, 928, 1013, 1022, 1105, 1120, 1226, 1250], "stream": [19, 41, 42, 58, 59, 60, 61, 87, 88, 126, 159, 187, 190, 207, 264, 266, 300, 525, 765, 781, 786, 787, 794, 796, 802, 805, 811, 816, 817, 821, 826, 838, 840, 845, 846, 875], "engin": [19, 38, 120, 121, 123, 152, 187, 190, 207, 211, 266, 286, 300, 525, 765, 802, 805, 811, 816, 817, 821, 846, 863, 875, 1099, 1250], "determin": [19, 37, 40, 58, 79, 81, 89, 110, 113, 118, 119, 120, 123, 129, 130, 132, 137, 139, 157, 180, 188, 191, 205, 206, 211, 226, 235, 265, 270, 300, 354, 393, 409, 410, 424, 455, 516, 526, 535, 567, 573, 574, 582, 583, 584, 585, 586, 588, 589, 590, 603, 611, 622, 623, 651, 653, 654, 711, 738, 741, 756, 765, 803, 806, 830, 875, 923, 964, 984, 985, 999, 1026, 1092, 1098, 1117, 1123, 1157, 1164, 1175, 1176, 1204, 1206, 1207, 1250], "schema": [19, 33, 36, 38, 39, 65, 82, 83, 84, 89, 102, 103, 105, 107, 109, 110, 111, 113, 118, 119, 120, 121, 125, 127, 128, 130, 131, 132, 136, 137, 146, 148, 157, 161, 162, 170, 172, 206, 211, 218, 222, 260, 300, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 386, 515, 516, 535, 622, 623, 681, 747, 765, 784, 785, 793, 816, 817, 822, 834, 858, 863, 875, 878, 911, 933, 1175, 1176, 1250], "thread": [19, 37, 58, 88, 116, 118, 119, 121, 152, 300, 315, 490, 527, 765, 787, 875, 1066], "pool": [19, 88, 152, 787, 875], "For": [19, 39, 40, 118, 119, 121, 122, 123, 132, 133, 134, 169, 174, 207, 208, 235, 286, 300, 303, 432, 433, 434, 516, 527, 536, 572, 603, 610, 618, 619, 620, 621, 634, 700, 704, 714, 718, 719, 761, 765, 792, 812, 830, 863, 875, 1008, 1009, 1010, 1013, 1040, 1121, 1157, 1163, 1171, 1172, 1173, 1174, 1187, 1231, 1250, 1254], "some": [19, 35, 40, 72, 91, 110, 118, 119, 120, 123, 132, 156, 169, 300, 761, 792, 875, 1038, 1250, 1259], "dataset": [19, 45, 51, 118, 119, 130, 132, 138, 207, 300, 475, 765, 777, 811, 816, 817, 875, 1053, 1250], "esp": 19, "have": [19, 35, 39, 40, 48, 72, 81, 91, 108, 117, 118, 119, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 148, 150, 174, 205, 207, 229, 235, 237, 238, 257, 277, 300, 374, 432, 433, 434, 527, 536, 570, 574, 579, 620, 765, 790, 811, 821, 830, 838, 854, 855, 875, 878, 945, 947, 1008, 1009, 1010, 1013, 1023, 1119, 1123, 1206, 1250, 1259], "too": [19, 578, 765, 796, 875], "optimist": 19, "lead": [19, 45, 114, 138, 188, 189, 191, 192, 215, 235, 245, 252, 300, 448, 451, 509, 525, 527, 579, 595, 596, 629, 645, 646, 648, 668, 696, 765, 803, 804, 806, 807, 816, 817, 830, 836, 858, 863, 875, 1085, 1099, 1147, 1149, 1182, 1198, 1199, 1201, 1250], "memori": [19, 61, 89, 107, 108, 111, 112, 113, 118, 119, 120, 123, 124, 130, 132, 135, 136, 137, 156, 174, 211, 238, 247, 286, 300, 559, 571, 598, 765, 786, 875, 1013, 1099, 1120, 1151, 1152, 1250], "error": [19, 39, 88, 99, 118, 119, 132, 160, 226, 236, 300, 310, 336, 347, 352, 474, 493, 496, 514, 546, 610, 614, 618, 620, 621, 622, 624, 651, 652, 653, 657, 765, 783, 787, 858, 863, 875, 905, 915, 920, 1069, 1072, 1090, 1163, 1167, 1171, 1173, 1174, 1175, 1177, 1204, 1205, 1206, 1210, 1250], "row": [19, 25, 30, 37, 38, 40, 43, 45, 58, 61, 81, 82, 84, 89, 98, 101, 106, 110, 111, 113, 114, 118, 119, 120, 123, 124, 126, 127, 130, 132, 135, 136, 137, 138, 141, 142, 146, 148, 157, 159, 161, 169, 174, 177, 180, 182, 186, 187, 188, 190, 193, 194, 200, 202, 203, 205, 206, 207, 208, 209, 210, 211, 217, 222, 238, 239, 248, 253, 254, 257, 259, 264, 266, 268, 269, 276, 277, 282, 284, 286, 294, 300, 326, 437, 449, 454, 479, 491, 516, 559, 560, 575, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 604, 606, 617, 622, 623, 667, 669, 688, 691, 697, 699, 704, 705, 718, 722, 724, 725, 740, 742, 743, 750, 755, 765, 781, 784, 786, 792, 796, 799, 800, 801, 803, 808, 811, 812, 813, 815, 817, 821, 839, 843, 844, 845, 846, 848, 854, 855, 859, 861, 863, 871, 875, 1012, 1013, 1021, 1025, 1067, 1113, 1124, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1158, 1170, 1175, 1176, 1221, 1223, 1250, 1259], "per": [19, 37, 40, 58, 146, 148, 159, 186, 222, 223, 242, 249, 264, 275, 289, 291, 292, 300, 315, 335, 490, 493, 494, 514, 525, 527, 606, 678, 691, 765, 781, 833, 840, 845, 852, 866, 868, 869, 875, 904, 1066, 1069, 1070, 1090, 1238, 1250], "everi": [19, 37, 58, 118, 119, 132, 182, 188, 191, 254, 257, 270, 300, 328, 329, 330, 331, 335, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 410, 424, 437, 449, 482, 483, 488, 491, 494, 495, 505, 510, 513, 578, 617, 669, 700, 701, 704, 705, 765, 796, 801, 803, 806, 844, 875, 897, 898, 899, 900, 904, 937, 938, 939, 940, 941, 942, 943, 944, 945, 985, 999, 1012, 1021, 1023, 1058, 1059, 1064, 1067, 1070, 1071, 1081, 1086, 1089, 1127, 1170, 1223, 1250], "process": [19, 37, 58, 59, 60, 61, 118, 119, 120, 132, 152, 300, 786, 875], "liter": [20, 21, 25, 39, 120, 123, 149, 150, 151, 241, 242, 245, 269, 274, 275, 300, 310, 346, 357, 383, 430, 431, 438, 445, 450, 452, 459, 477, 522, 526, 542, 544, 554, 555, 564, 574, 610, 613, 621, 634, 635, 664, 674, 683, 685, 693, 694, 695, 703, 707, 708, 711, 727, 732, 736, 744, 747, 749, 751, 765, 798, 832, 833, 836, 848, 851, 852, 875, 878, 914, 930, 954, 1014, 1030, 1123, 1142, 1145, 1149, 1163, 1166, 1174, 1187, 1188, 1250], "left": [20, 21, 40, 67, 81, 141, 142, 143, 144, 188, 189, 191, 192, 207, 208, 235, 269, 300, 375, 432, 433, 434, 458, 459, 567, 579, 582, 583, 584, 585, 586, 588, 589, 590, 594, 628, 672, 693, 700, 701, 704, 705, 709, 710, 712, 713, 718, 740, 752, 753, 755, 765, 803, 804, 806, 807, 811, 812, 830, 848, 875, 946, 1008, 1009, 1010, 1030, 1117, 1143, 1181, 1233, 1250], "center": [20, 21, 40, 300, 432, 433, 434, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 765, 1008, 1009, 1010, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1136, 1137, 1138, 1250], "cell": [20, 21, 40, 300], "valueerror": [20, 25], "recognis": [20, 21, 25, 145], "column_abc": 20, "column_xyz": 20, "keyerror": 21, "datetim": [21, 37, 40, 58, 81, 114, 123, 148, 160, 166, 186, 188, 189, 191, 192, 206, 208, 235, 270, 300, 303, 332, 381, 382, 383, 384, 385, 387, 389, 390, 391, 393, 394, 395, 397, 399, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 485, 579, 582, 583, 584, 585, 586, 588, 589, 590, 651, 653, 672, 709, 710, 712, 713, 714, 720, 727, 752, 753, 765, 783, 803, 804, 806, 807, 812, 830, 875, 878, 901, 952, 953, 954, 955, 956, 958, 960, 961, 962, 964, 965, 966, 967, 968, 969, 971, 973, 974, 976, 977, 978, 979, 981, 982, 983, 984, 985, 986, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1049, 1061, 1062, 1108, 1109, 1146, 1204, 1206, 1233, 1250], "date": [21, 40, 48, 81, 118, 119, 121, 123, 129, 132, 138, 148, 160, 166, 186, 188, 189, 191, 192, 206, 208, 235, 300, 303, 332, 382, 383, 384, 387, 390, 393, 394, 401, 402, 403, 406, 407, 408, 409, 410, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 485, 579, 582, 583, 584, 585, 586, 588, 589, 590, 651, 652, 672, 709, 710, 712, 713, 720, 727, 751, 765, 783, 803, 804, 806, 807, 812, 830, 875, 878, 901, 953, 954, 955, 958, 961, 962, 964, 965, 966, 968, 969, 973, 974, 976, 977, 978, 979, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1049, 1061, 1062, 1108, 1109, 1146, 1204, 1205, 1233, 1250], "333": [21, 592, 765, 1140, 1250], "mno": [21, 25], "2023": [21, 40, 114, 140, 206, 300, 383, 714, 727, 878, 954], "29": [21, 148, 381, 402, 952, 977], "2001": [21, 382, 387, 390, 393, 401, 406, 407, 408, 410, 415, 424, 425, 426, 427, 582, 583, 585, 588, 589, 590, 651, 765, 878, 953, 958, 961, 962, 964, 966, 967, 968, 969, 971, 973, 974, 976, 979, 981, 982, 983, 985, 990, 999, 1000, 1001, 1002, 1003, 1204], "null": [21, 37, 39, 58, 67, 81, 89, 110, 118, 119, 128, 132, 136, 138, 156, 159, 161, 165, 166, 169, 171, 176, 180, 181, 199, 207, 214, 215, 216, 223, 226, 228, 245, 246, 249, 250, 251, 252, 256, 261, 264, 267, 269, 271, 274, 282, 300, 311, 313, 314, 315, 325, 328, 329, 335, 341, 345, 347, 357, 363, 364, 365, 368, 377, 379, 380, 406, 417, 418, 419, 420, 421, 422, 423, 431, 432, 433, 434, 435, 438, 439, 440, 446, 458, 468, 470, 471, 472, 478, 480, 481, 488, 489, 492, 493, 494, 497, 498, 505, 506, 507, 508, 509, 511, 514, 516, 527, 545, 555, 556, 557, 560, 571, 577, 578, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 596, 597, 598, 600, 605, 609, 610, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 624, 625, 626, 631, 632, 633, 640, 642, 643, 644, 655, 660, 661, 662, 663, 672, 682, 683, 684, 685, 693, 694, 695, 697, 699, 703, 716, 727, 732, 736, 742, 743, 747, 749, 755, 765, 781, 784, 789, 792, 798, 810, 811, 824, 834, 836, 837, 840, 845, 847, 848, 851, 853, 859, 875, 882, 883, 885, 894, 897, 898, 904, 910, 915, 929, 930, 948, 950, 951, 992, 993, 994, 995, 996, 997, 998, 1006, 1008, 1009, 1010, 1014, 1016, 1023, 1029, 1045, 1046, 1054, 1056, 1057, 1060, 1064, 1065, 1068, 1069, 1070, 1073, 1074, 1082, 1084, 1085, 1087, 1090, 1092, 1099, 1112, 1113, 1126, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1144, 1149, 1150, 1154, 1162, 1163, 1165, 1166, 1167, 1168, 1169, 1171, 1172, 1173, 1174, 1175, 1177, 1178, 1179, 1184, 1185, 1186, 1193, 1195, 1196, 1197, 1208, 1213, 1229, 1231, 1232, 1233, 1240, 1250, 1258, 1259], "07": [21, 118, 383, 409, 410, 424, 651, 709, 712, 720, 878, 954, 984, 1204], "05": [21, 138, 141, 142, 143, 144, 148, 160, 208, 270, 300, 383, 384, 385, 386, 391, 395, 397, 399, 402, 403, 404, 409, 411, 413, 414, 416, 417, 709, 712, 783, 812, 875, 878, 954, 955, 956, 957, 984, 985, 988, 989, 991, 992, 999], "visibl": [22, 172, 300, 1007, 1250], "eg": [22, 30, 40, 89, 121, 154, 300, 410, 651, 653, 674, 765, 1023, 1204, 1206, 1250], "low": [22, 120, 152, 567, 765, 1117, 1250], "rang": [22, 40, 120, 121, 166, 172, 188, 206, 300, 316, 376, 387, 401, 407, 408, 410, 424, 425, 458, 688, 694, 708, 709, 710, 711, 712, 713, 724, 725, 751, 752, 753, 765, 803, 875, 947, 958, 976, 982, 983, 985, 999, 1000, 1007, 1113, 1250], "98": [22, 198, 300, 351, 448, 451, 605, 654, 673, 765, 1207], "99": [22, 40, 175, 176, 198, 201, 269, 300, 309, 351, 438, 440, 448, 451, 605, 673, 755, 765, 797, 798, 848, 875, 1005, 1014, 1250], "tbl_col": 22, "95": [22, 309, 765], "96": [22, 309, 765], "97": [22, 198, 300, 309, 765], "move": [23, 238, 300, 432, 433, 434, 582, 583, 585, 589, 765, 1008, 1009, 1010, 1130, 1131, 1133, 1137, 1250], "inlin": [23, 238, 300, 610, 618, 619, 621, 634, 1163, 1171, 1172, 1174, 1187], "parenthes": 23, "inform": [24, 28, 38, 86, 122, 130, 133, 134, 137, 141, 143, 164, 166, 300, 303, 475, 603, 610, 618, 619, 621, 634, 765, 826, 875, 924, 1053, 1157, 1163, 1171, 1172, 1174, 1187, 1250, 1254], "below": [24, 39, 122, 133, 134, 169, 188, 226, 300, 440, 709, 710, 712, 713, 752, 753, 755, 761, 765, 792, 803, 875], "ascii_ful": 25, "ascii_full_condens": 25, "ascii_no_bord": 25, "ascii_borders_onli": 25, "ascii_borders_only_condens": 25, "ascii_horizontal_onli": 25, "ascii_markdown": 25, "utf8_ful": [25, 81, 114], "utf8_no_bord": 25, "utf8_borders_onli": 25, "utf8_horizontal_onli": 25, "noth": [25, 618, 624, 1171, 1177], "rounded_corn": 25, "border": 25, "includ": [25, 35, 37, 39, 40, 58, 86, 120, 122, 133, 134, 148, 159, 166, 172, 224, 238, 264, 265, 268, 269, 300, 375, 411, 455, 459, 567, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 641, 642, 646, 647, 700, 704, 742, 743, 765, 781, 845, 848, 875, 878, 946, 947, 986, 1007, 1026, 1030, 1117, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1194, 1195, 1199, 1240, 1250], "divid": [25, 375, 410, 424, 432, 433, 434, 475, 567, 765, 946, 985, 999, 1008, 1009, 1010, 1053, 1117, 1250], "same": [25, 39, 40, 69, 72, 81, 87, 88, 89, 90, 91, 124, 132, 141, 142, 143, 144, 146, 154, 177, 187, 207, 211, 226, 238, 249, 266, 274, 275, 279, 286, 300, 307, 314, 343, 379, 380, 441, 448, 451, 515, 531, 534, 559, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 606, 625, 663, 765, 786, 787, 799, 802, 811, 816, 817, 840, 846, 851, 852, 856, 875, 880, 885, 912, 946, 950, 951, 954, 1091, 1099, 1117, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1136, 1137, 1138, 1178, 1241, 1250], "dens": [25, 186, 300, 570, 765, 1119, 1250], "space": [25, 188, 300, 803, 875], "horizont": [25, 89, 180, 196, 212, 213, 214, 215, 219, 220, 251, 252, 268, 300, 683, 685, 694, 695, 700, 701, 703, 704, 705, 707, 715, 718, 732, 736, 740, 749], "markdown": 25, "compat": [25, 40, 45, 61, 300, 610, 612, 613, 618, 619, 620, 621, 634, 635, 875, 878, 1163, 1165, 1166, 1171, 1172, 1173, 1174, 1187, 1188], "utf8": [25, 118, 119, 132], "No": [25, 658, 1211], "round": [25, 40, 83, 114, 120, 300, 356, 362, 444, 592, 670, 765, 927, 1019, 1140, 1250], "corner": [25, 40, 114, 300], "op": [25, 150, 300, 573, 765, 875, 1206, 1250], "one": [25, 37, 38, 40, 58, 70, 81, 98, 107, 109, 110, 111, 112, 113, 118, 119, 123, 127, 128, 129, 132, 149, 150, 151, 154, 176, 177, 186, 187, 188, 189, 191, 192, 205, 217, 226, 235, 236, 237, 243, 245, 260, 263, 280, 300, 309, 375, 440, 441, 448, 451, 509, 516, 520, 578, 579, 596, 605, 618, 619, 620, 636, 730, 745, 755, 761, 765, 798, 799, 802, 803, 804, 806, 807, 821, 830, 835, 836, 853, 857, 875, 884, 946, 1016, 1049, 1085, 1092, 1096, 1117, 1127, 1149, 1171, 1172, 1173, 1189, 1214, 1250, 1254], "more": [25, 40, 43, 45, 61, 70, 81, 89, 90, 91, 106, 107, 108, 109, 110, 111, 112, 113, 120, 121, 122, 123, 127, 128, 129, 130, 133, 134, 141, 143, 148, 150, 154, 164, 166, 177, 204, 205, 209, 211, 217, 222, 236, 237, 239, 260, 266, 286, 300, 303, 312, 315, 344, 441, 475, 504, 517, 520, 525, 527, 558, 593, 603, 619, 625, 651, 652, 653, 675, 687, 697, 717, 723, 726, 733, 734, 737, 745, 755, 765, 821, 846, 875, 878, 885, 913, 924, 947, 1049, 1053, 1080, 1093, 1099, 1141, 1157, 1172, 1178, 1204, 1205, 1206, 1235, 1250, 1254, 1259], "semigraph": 25, "box": [25, 211, 300], "draw": [25, 30, 147, 1259], "found": [25, 37, 40, 58, 67, 93, 103, 105, 110, 114, 170, 300, 594, 621, 624, 649, 650, 651, 653, 765, 875, 1143, 1174, 1177, 1202, 1203, 1204, 1206, 1250, 1258], "unicod": 25, "block": [25, 88, 187, 190, 266, 300, 755, 787, 802, 805, 828, 846, 854, 855, 863, 875, 1142, 1145, 1250], "http": [25, 40, 41, 42, 108, 120, 121, 156, 164, 300, 618, 620, 1171, 1173], "en": [25, 40, 300], "wikipedia": 25, "org": [25, 41, 42, 108, 120, 121, 156, 164, 300], "wiki": 25, "drawing_charact": 25, "box_draw": 25, "tbl_format": 25, "tbl_hide_column_data_typ": 25, "tbl_hide_dataframe_shap": 25, "hide": [26, 27, 28, 29, 40, 300], "etc": [26, 39, 40, 118, 122, 124, 126, 133, 134, 135, 300, 765, 878, 1142, 1145, 1250], "between": [29, 89, 145, 146, 148, 150, 164, 228, 292, 300, 336, 352, 377, 378, 459, 488, 496, 505, 506, 507, 508, 560, 567, 568, 586, 609, 689, 690, 696, 698, 739, 742, 743, 765, 827, 869, 875, 905, 920, 924, 948, 949, 1030, 1064, 1072, 1081, 1082, 1083, 1084, 1113, 1117, 1118, 1134, 1162, 1250], "set_tbl_column_data_type_inlin": 29, "max": [30, 40, 45, 61, 65, 152, 166, 176, 187, 213, 226, 235, 300, 358, 365, 370, 440, 516, 525, 559, 570, 574, 579, 582, 595, 643, 732, 745, 765, 798, 802, 830, 875, 931, 937, 941, 947, 1016, 1092, 1119, 1130, 1147, 1196, 1250], "tbl_row": 30, "also": [32, 37, 40, 58, 70, 72, 110, 120, 123, 129, 132, 146, 147, 148, 149, 150, 154, 170, 187, 188, 189, 191, 192, 218, 222, 235, 237, 241, 249, 269, 274, 277, 300, 365, 368, 406, 409, 441, 459, 527, 570, 574, 582, 583, 584, 585, 586, 588, 589, 590, 606, 646, 647, 700, 701, 704, 705, 709, 718, 720, 740, 755, 764, 765, 771, 802, 803, 804, 806, 807, 822, 830, 832, 840, 848, 851, 853, 855, 875, 878, 984, 1030, 1119, 1123, 1165, 1166, 1199, 1250, 1254], "char": [32, 619, 1172], "omit": [32, 110, 114, 146, 148, 150, 154, 222, 238, 300, 724, 752, 753, 878], "set_decimal_separ": 32, "x": [32, 67, 68, 73, 81, 89, 108, 114, 118, 119, 121, 132, 146, 148, 156, 172, 196, 200, 202, 207, 217, 226, 237, 238, 265, 268, 300, 303, 308, 310, 312, 332, 336, 364, 376, 430, 431, 445, 450, 452, 453, 477, 484, 496, 520, 522, 524, 525, 527, 542, 544, 545, 547, 548, 549, 550, 551, 554, 555, 558, 564, 565, 573, 574, 578, 600, 603, 642, 664, 665, 672, 674, 681, 683, 685, 689, 690, 700, 701, 703, 718, 727, 729, 732, 736, 740, 749, 755, 765, 811, 817, 821, 839, 875, 878, 905, 924, 1016, 1051, 1099, 1123, 1154, 1157, 1195, 1233, 1250, 1258], "1234567": 32, "987654": [32, 878], "10101": 32, "y": [32, 73, 81, 89, 108, 114, 146, 148, 156, 172, 200, 202, 207, 217, 226, 237, 238, 265, 268, 300, 303, 308, 310, 312, 332, 336, 413, 416, 430, 431, 450, 452, 477, 484, 496, 522, 524, 527, 545, 547, 548, 549, 550, 551, 554, 555, 558, 565, 573, 574, 578, 651, 652, 653, 665, 674, 681, 683, 685, 689, 690, 703, 714, 727, 732, 736, 749, 765, 811, 821, 839, 875, 878, 905, 924, 988, 991, 1123, 1204, 1205, 1206, 1250], "1234": [32, 592, 765, 1140, 1250], "7654321": 32, "234": 32, "567": 32, "987": 32, "654": 32, "00": [32, 40, 148, 188, 208, 270, 300, 381, 382, 384, 389, 402, 403, 406, 409, 410, 413, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 582, 583, 585, 588, 589, 590, 651, 653, 657, 712, 713, 714, 752, 753, 765, 803, 812, 875, 878, 952, 953, 955, 956, 957, 960, 961, 962, 968, 969, 974, 977, 978, 979, 981, 984, 985, 989, 990, 992, 993, 994, 995, 996, 997, 998, 999, 1002, 1204, 1206, 1210], "321": [32, 1259], "strip": [33, 629, 639, 646, 647, 648, 649, 650, 1182, 1192, 1199, 1200, 1201], "trail": [33, 186, 300, 639, 645, 646, 647, 1192, 1198, 1199, 1200], "zero": [33, 40, 107, 108, 117, 118, 119, 124, 126, 130, 147, 156, 176, 205, 236, 255, 261, 300, 440, 516, 520, 594, 603, 660, 674, 765, 784, 798, 875, 929, 1016, 1092, 1157, 1213, 1226, 1231, 1232, 1250], "enabl": [33, 34, 72, 90, 91, 141, 142, 143, 144, 153, 241, 274, 300, 311, 313, 574, 595, 611, 636, 678, 761, 765, 786, 832, 851, 875, 882, 883, 1123, 1147, 1164, 1189, 1238, 1250], "d": [33, 36, 37, 39, 40, 41, 42, 45, 110, 138, 186, 188, 193, 194, 198, 207, 253, 255, 268, 272, 283, 285, 287, 288, 289, 290, 291, 292, 293, 300, 308, 310, 364, 390, 413, 416, 459, 563, 598, 613, 619, 642, 651, 652, 653, 693, 714, 720, 765, 803, 811, 860, 862, 864, 865, 866, 867, 868, 869, 870, 875, 924, 961, 988, 991, 1030, 1060, 1166, 1172, 1195, 1204, 1205, 1206, 1250], "01": [33, 81, 148, 160, 166, 186, 188, 235, 270, 300, 381, 382, 383, 384, 385, 386, 390, 391, 394, 395, 397, 399, 401, 402, 403, 404, 406, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 579, 582, 583, 585, 588, 589, 590, 651, 652, 653, 657, 709, 710, 712, 713, 714, 765, 783, 803, 830, 875, 878, 953, 954, 955, 956, 957, 961, 962, 968, 969, 974, 977, 978, 979, 981, 984, 985, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1002, 1204, 1205, 1206, 1210], "6789": 33, "scale": [33, 49, 172, 300, 527, 563, 654, 765, 1007, 1207, 1250], "trim_decimal_zero": 33, "01000": 33, "67890": 33, "addit": [34, 39, 40, 110, 122, 123, 133, 134, 146, 169, 173, 187, 190, 224, 241, 242, 243, 249, 267, 274, 275, 279, 300, 308, 389, 435, 438, 559, 606, 610, 618, 619, 621, 634, 691, 693, 694, 695, 716, 744, 747, 765, 795, 802, 805, 832, 833, 835, 840, 847, 851, 852, 856, 875, 952, 960, 1014, 1163, 1171, 1172, 1174, 1187, 1250, 1254], "verbos": [34, 141, 143, 154, 619, 1172], "debug": [34, 786, 796, 816, 817, 875, 1259], "log": [34, 83, 351, 429, 520, 544, 564, 673, 765, 919, 1005, 1234, 1250], "do_polars_oper": 34, "if_set": 35, "env_onli": 35, "dict": [35, 39, 40, 45, 68, 82, 84, 86, 107, 109, 110, 111, 112, 113, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 148, 179, 205, 224, 230, 236, 237, 238, 240, 256, 257, 265, 300, 526, 578, 765, 828, 831, 875, 1018, 1098, 1250], "show": [35, 40, 69, 166, 169, 186, 209, 223, 300, 455, 765, 792, 826, 838, 875, 1026, 1250], "variabl": [35, 62, 67, 130, 137, 149, 152, 217, 258, 300, 821, 875, 1227, 1250, 1258], "chang": [35, 81, 88, 118, 119, 120, 138, 268, 269, 270, 276, 300, 315, 374, 375, 377, 410, 455, 526, 527, 560, 567, 578, 582, 583, 584, 585, 586, 588, 589, 590, 765, 787, 848, 854, 875, 924, 925, 945, 946, 985, 1026, 1098, 1113, 1117, 1127, 1152, 1250], "restrict": [35, 643, 1196], "dictionari": [35, 40, 73, 107, 109, 110, 111, 113, 118, 119, 120, 121, 125, 127, 128, 131, 132, 136, 205, 224, 236, 237, 238, 256, 257, 300, 526, 765, 875, 1018, 1098, 1250], "those": [35, 40, 118, 123, 238, 269, 300, 570, 618, 730, 765, 848, 875, 878, 1119, 1171, 1250], "been": [35, 40, 156, 157, 178, 181, 189, 190, 191, 192, 197, 232, 254, 281, 300, 315, 369, 370, 371, 372, 373, 462, 466, 469, 474, 486, 499, 514, 523, 524, 526, 527, 565, 570, 580, 582, 583, 584, 585, 586, 588, 589, 590, 612, 623, 627, 628, 629, 630, 633, 638, 639, 645, 665, 668, 669, 686, 706, 707, 728, 765, 804, 805, 806, 807, 816, 844, 858, 875, 885, 941, 942, 943, 944, 1035, 1041, 1062, 1075, 1090, 1098, 1119, 1128, 1144, 1146, 1165, 1176, 1180, 1181, 1182, 1183, 1186, 1191, 1192, 1198, 1222, 1223, 1250], "set_fmt_float": 35, "via": [35, 117, 118, 119, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 205, 237, 300, 315, 527, 620, 765, 790, 875, 1173], "set_stat": 35, "all_stat": 35, "binaryio": [36, 41, 42, 117, 118, 123, 124, 126, 129, 300], "bytesio": [36, 37, 40, 41, 42, 45, 117, 118, 119, 123, 124, 125, 126, 127, 128, 129, 130, 131, 300, 790, 875], "compress": [36, 41, 42, 45, 59, 61, 300, 875], "avrocompress": [36, 300], "uncompress": [36, 41, 42, 45, 61, 124, 135, 300, 875], "write": [36, 37, 38, 39, 40, 41, 42, 43, 45, 58, 59, 60, 61, 119, 124, 154, 300, 357, 540, 765, 814, 838, 875, 930, 1250], "apach": [36, 41, 42, 45, 117, 120, 121, 134, 300, 777], "avro": [36, 117, 300, 777], "writeabl": [36, 37, 41, 42, 43, 44, 45, 300], "like": [36, 37, 39, 41, 42, 43, 44, 45, 88, 108, 117, 118, 119, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 188, 200, 202, 207, 260, 300, 381, 490, 539, 570, 618, 647, 648, 678, 761, 765, 787, 790, 803, 875, 952, 1066, 1119, 1171, 1238, 1250], "object": [36, 37, 39, 40, 41, 42, 43, 44, 45, 70, 73, 89, 108, 109, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 146, 148, 150, 156, 187, 188, 190, 191, 208, 209, 235, 238, 260, 261, 300, 709, 710, 712, 713, 727, 752, 753, 777, 790, 803, 804, 806, 807, 812, 830, 875, 878, 1226, 1250], "snappi": [36, 45, 61, 300, 875], "deflat": [36, 300], "pathlib": [36, 37, 41, 42, 45, 132, 300], "foo": [36, 37, 39, 41, 42, 43, 44, 45, 69, 160, 163, 164, 167, 168, 169, 170, 171, 174, 177, 180, 183, 184, 185, 193, 194, 195, 196, 198, 199, 201, 207, 211, 212, 213, 214, 215, 216, 219, 220, 223, 226, 228, 230, 231, 233, 236, 239, 240, 241, 244, 248, 250, 251, 252, 253, 255, 257, 258, 259, 260, 261, 262, 265, 266, 267, 271, 272, 273, 278, 300, 353, 375, 406, 449, 454, 457, 479, 531, 534, 535, 536, 537, 538, 539, 567, 575, 609, 613, 615, 617, 619, 620, 637, 641, 643, 646, 647, 648, 649, 650, 656, 659, 667, 687, 696, 697, 698, 717, 721, 722, 723, 726, 731, 733, 734, 735, 737, 739, 744, 746, 750, 754, 755, 761, 765, 783, 788, 791, 792, 793, 799, 809, 810, 811, 824, 828, 831, 832, 846, 847, 850, 853, 875, 878, 921, 946, 981, 1072, 1117, 1124, 1166, 1168, 1170, 1172, 1173, 1190, 1196, 1202, 1203, 1209, 1212, 1250], "bar": [36, 37, 39, 41, 42, 43, 44, 45, 69, 160, 163, 164, 167, 168, 169, 170, 171, 174, 177, 180, 183, 184, 185, 194, 196, 198, 199, 201, 207, 211, 212, 213, 214, 215, 216, 219, 220, 223, 226, 228, 230, 231, 233, 236, 239, 240, 241, 248, 250, 251, 252, 253, 255, 257, 258, 259, 260, 261, 262, 266, 267, 271, 272, 278, 300, 353, 457, 531, 532, 533, 534, 535, 536, 537, 538, 539, 603, 613, 615, 617, 619, 620, 637, 641, 643, 649, 650, 687, 696, 697, 698, 717, 722, 723, 726, 731, 733, 734, 735, 737, 744, 746, 750, 754, 755, 761, 765, 783, 788, 791, 792, 793, 799, 809, 810, 811, 824, 828, 831, 832, 846, 847, 850, 875, 878, 921, 1072, 1157, 1166, 1168, 1170, 1172, 1173, 1190, 1196, 1202, 1203, 1250], "ham": [36, 37, 39, 41, 42, 45, 160, 163, 164, 167, 168, 169, 170, 171, 177, 184, 193, 194, 196, 207, 212, 214, 216, 219, 223, 228, 230, 233, 236, 239, 240, 241, 248, 250, 251, 253, 258, 259, 260, 261, 262, 266, 271, 272, 300, 353, 538, 783, 788, 791, 792, 793, 799, 811, 824, 828, 831, 832, 846, 853, 875, 921], "dirpath": [36, 37, 41, 42, 45, 132, 300], "new_fil": [36, 37, 41, 42, 45, 300], "textiowrapp": [37, 300], "include_bom": [37, 58, 300, 875], "include_head": [37, 40, 58, 119, 265, 300, 875], "line_termin": [37, 58, 300, 875], "quote_char": [37, 58, 118, 119, 132, 300, 875], "batch_siz": [37, 58, 118, 119, 120, 136, 138, 300, 875], "1024": [37, 45, 58, 61, 118, 119, 120, 136, 300, 875], "datetime_format": [37, 58, 300, 875], "date_format": [37, 58, 300, 875], "time_format": [37, 58, 300, 875], "null_valu": [37, 58, 118, 119, 132, 300, 875], "quote_styl": [37, 58, 300, 875], "csvquotestyl": [37, 58, 300, 875], "comma": [37, 300], "csv": [37, 58, 59, 60, 61, 118, 119, 123, 132, 300, 777, 875], "If": [37, 38, 39, 40, 41, 42, 43, 44, 45, 58, 61, 65, 72, 86, 88, 89, 107, 108, 109, 110, 111, 112, 113, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 132, 133, 135, 136, 137, 138, 141, 142, 143, 144, 149, 156, 157, 159, 169, 174, 186, 188, 189, 191, 192, 194, 203, 204, 205, 208, 210, 211, 215, 222, 224, 226, 235, 237, 238, 239, 245, 248, 252, 253, 257, 258, 260, 264, 265, 266, 268, 269, 278, 300, 311, 313, 315, 383, 402, 403, 413, 416, 441, 455, 475, 504, 509, 510, 516, 525, 527, 538, 559, 567, 570, 572, 574, 575, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 593, 594, 596, 599, 603, 604, 609, 619, 620, 621, 622, 623, 629, 639, 640, 641, 642, 643, 645, 646, 647, 648, 651, 652, 653, 657, 660, 678, 682, 684, 686, 688, 692, 696, 699, 700, 709, 710, 712, 713, 714, 717, 718, 724, 725, 726, 727, 730, 738, 741, 742, 743, 747, 752, 753, 755, 756, 765, 781, 786, 787, 792, 794, 803, 804, 806, 807, 811, 812, 817, 821, 828, 830, 834, 836, 839, 845, 846, 848, 858, 863, 875, 878, 882, 883, 885, 930, 946, 954, 977, 978, 988, 991, 1013, 1023, 1025, 1026, 1052, 1053, 1055, 1080, 1085, 1086, 1092, 1099, 1117, 1119, 1121, 1123, 1124, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1141, 1143, 1147, 1149, 1153, 1157, 1158, 1162, 1172, 1173, 1174, 1175, 1176, 1182, 1192, 1193, 1194, 1195, 1196, 1198, 1199, 1200, 1201, 1204, 1205, 1206, 1210, 1213, 1221, 1226, 1231, 1238, 1240, 1250, 1258], "instead": [37, 43, 44, 65, 69, 81, 88, 89, 118, 119, 120, 123, 129, 130, 132, 138, 148, 186, 188, 204, 205, 211, 222, 224, 236, 237, 238, 241, 242, 245, 246, 261, 274, 275, 276, 278, 300, 303, 325, 358, 359, 375, 386, 388, 392, 396, 398, 400, 405, 409, 412, 424, 435, 509, 525, 567, 596, 597, 625, 626, 629, 639, 645, 646, 647, 648, 649, 650, 651, 653, 660, 680, 688, 692, 697, 709, 710, 711, 712, 713, 714, 717, 724, 725, 726, 738, 741, 747, 752, 753, 756, 765, 787, 797, 803, 832, 833, 834, 836, 837, 851, 852, 854, 875, 878, 894, 931, 932, 946, 957, 959, 963, 970, 972, 975, 980, 984, 987, 999, 1031, 1037, 1040, 1047, 1049, 1051, 1085, 1117, 1142, 1145, 1149, 1150, 1178, 1179, 1182, 1192, 1198, 1199, 1200, 1201, 1204, 1206, 1213, 1232, 1250, 1254, 1258], "whether": [37, 58, 111, 113, 150, 153, 159, 171, 181, 204, 243, 264, 300, 311, 313, 328, 329, 393, 411, 480, 481, 595, 765, 781, 816, 817, 835, 840, 845, 875, 878, 882, 883, 897, 898, 922, 925, 964, 986, 1006, 1056, 1057, 1144, 1250, 1258], "utf": [37, 58, 71, 300, 875], "bom": [37, 58, 300, 875], "header": [37, 40, 45, 58, 61, 114, 118, 119, 123, 132, 170, 226, 265, 300, 875], "field": [37, 39, 58, 73, 103, 105, 110, 260, 267, 300, 516, 577, 619, 620, 622, 642, 643, 663, 700, 701, 704, 705, 729, 747, 765, 847, 875, 946, 1092, 1117, 1126, 1173, 1193, 1195, 1196, 1217, 1219, 1250], "symbol": [37, 58, 118, 119, 132, 300, 765, 875], "end": [37, 40, 58, 118, 119, 130, 132, 188, 300, 346, 349, 350, 381, 410, 435, 510, 610, 616, 619, 631, 640, 644, 646, 647, 650, 688, 709, 710, 712, 713, 716, 724, 725, 752, 753, 755, 765, 803, 808, 815, 826, 875, 878, 917, 952, 985, 1086, 1169, 1172, 1184, 1193, 1197, 1199, 1200], "byte": [37, 45, 58, 61, 118, 119, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 172, 300, 625, 627, 875, 1007, 1178, 1180, 1250], "quot": [37, 38, 58, 118, 119, 121, 132, 300, 875], "specifi": [37, 40, 58, 81, 93, 103, 105, 123, 129, 148, 159, 160, 172, 173, 176, 187, 188, 189, 190, 191, 192, 207, 224, 235, 236, 238, 241, 242, 243, 245, 249, 264, 267, 274, 275, 279, 300, 357, 432, 433, 434, 435, 440, 559, 573, 574, 582, 583, 584, 585, 586, 588, 589, 590, 596, 606, 691, 693, 694, 695, 709, 710, 712, 713, 716, 744, 747, 752, 753, 765, 781, 783, 795, 798, 802, 803, 804, 805, 806, 807, 811, 830, 832, 833, 835, 836, 840, 845, 847, 851, 852, 856, 875, 930, 1007, 1008, 1009, 1010, 1016, 1123, 1149, 1250], "defin": [37, 40, 48, 58, 120, 145, 146, 148, 157, 160, 169, 173, 188, 189, 191, 192, 211, 222, 225, 235, 269, 281, 286, 300, 315, 459, 493, 514, 527, 563, 567, 578, 579, 582, 583, 584, 585, 586, 588, 589, 590, 686, 709, 710, 712, 713, 727, 730, 747, 752, 753, 765, 783, 792, 795, 803, 804, 806, 807, 825, 830, 848, 858, 863, 875, 878, 885, 1030, 1069, 1099, 1117, 1127, 1250], "chrono": [37, 58, 300, 413, 416, 651, 652, 653, 657, 875, 988, 991, 1204, 1205, 1206, 1210], "rust": [37, 45, 58, 100, 120, 124, 126, 130, 211, 286, 300, 620, 875, 1099, 1173, 1250], "crate": [37, 58, 300, 610, 612, 613, 618, 619, 620, 621, 634, 635, 651, 652, 653, 657, 875, 878, 1163, 1165, 1166, 1171, 1172, 1173, 1174, 1187, 1188, 1204, 1205, 1206, 1210], "fraction": [37, 58, 141, 142, 143, 144, 239, 300, 411, 504, 560, 593, 651, 653, 765, 875, 986, 1080, 1113, 1141, 1204, 1206, 1250], "second": [37, 58, 141, 142, 143, 144, 147, 188, 208, 235, 270, 300, 391, 395, 397, 399, 404, 406, 410, 423, 424, 579, 582, 583, 584, 585, 586, 588, 589, 590, 651, 653, 709, 710, 711, 712, 713, 714, 751, 752, 753, 755, 765, 803, 812, 830, 875, 878, 981, 985, 998, 999, 1204, 1206, 1259], "infer": [37, 58, 73, 107, 109, 110, 111, 112, 113, 118, 119, 120, 123, 127, 128, 130, 132, 136, 137, 157, 211, 300, 424, 575, 622, 623, 651, 652, 653, 654, 657, 741, 765, 875, 985, 999, 1124, 1175, 1176, 1204, 1205, 1206, 1207, 1210, 1250], "timeunit": [37, 48, 50, 58, 300, 382, 383, 415, 427, 653, 709, 710, 711, 712, 713, 714, 875, 878, 953, 954, 990, 1002, 1206], "frame": [37, 38, 40, 58, 65, 66, 67, 68, 69, 70, 81, 88, 89, 110, 119, 123, 129, 141, 142, 148, 160, 161, 205, 206, 211, 218, 222, 225, 236, 237, 238, 261, 268, 269, 300, 783, 784, 822, 825, 848, 875, 878, 929, 1250, 1258, 1259], "repres": [37, 40, 58, 63, 79, 107, 109, 111, 112, 113, 120, 123, 250, 271, 278, 300, 468, 470, 525, 608, 679, 682, 696, 698, 714, 716, 727, 729, 730, 742, 743, 746, 754, 761, 765, 841, 849, 875, 1142, 1146, 1161, 1239, 1250], "necessari": [37, 58, 72, 91, 123, 260, 300, 875], "non_numer": [37, 58, 300, 875], "never": [37, 58, 120, 166, 207, 236, 300, 811, 875], "strategi": [37, 58, 81, 89, 118, 145, 146, 147, 148, 150, 176, 188, 191, 207, 208, 221, 269, 300, 315, 440, 516, 527, 765, 798, 803, 806, 811, 812, 848, 875, 1016, 1092, 1250], "put": [37, 58, 300, 875], "around": [37, 58, 300, 875], "thei": [37, 40, 58, 72, 88, 89, 90, 91, 110, 132, 154, 209, 238, 300, 636, 647, 648, 765, 787, 875, 878], "record": [37, 42, 58, 126, 138, 208, 260, 300, 812, 875], "termin": [37, 58, 300, 875], "indistinguish": [37, 58, 300, 875], "even": [37, 58, 118, 300, 563, 567, 765, 875, 1117, 1250], "invalid": [37, 58, 118, 119, 132, 300, 622, 624, 655, 674, 765, 875, 1175, 1177, 1208], "g": [37, 58, 117, 118, 119, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 138, 156, 204, 260, 268, 300, 308, 315, 435, 527, 598, 716, 765, 790, 828, 875, 1006, 1144, 1231, 1250, 1259], "pars": [37, 58, 65, 118, 119, 121, 123, 128, 132, 135, 136, 159, 187, 190, 241, 242, 245, 249, 264, 274, 275, 279, 300, 357, 459, 526, 559, 574, 606, 622, 623, 633, 654, 655, 683, 685, 691, 693, 694, 695, 703, 707, 720, 732, 736, 744, 745, 747, 749, 755, 765, 781, 802, 805, 832, 833, 836, 840, 845, 851, 852, 856, 875, 930, 1030, 1123, 1149, 1175, 1176, 1186, 1206, 1207, 1208, 1250], "valid": [37, 40, 48, 51, 58, 65, 120, 124, 126, 130, 150, 154, 172, 207, 300, 374, 610, 612, 613, 618, 619, 620, 621, 624, 634, 635, 755, 765, 811, 875, 878, 945, 1007, 1023, 1163, 1165, 1166, 1171, 1172, 1173, 1174, 1177, 1187, 1188, 1250], "integ": [37, 40, 54, 55, 56, 57, 58, 75, 76, 77, 78, 139, 146, 148, 149, 151, 169, 188, 235, 258, 300, 312, 356, 411, 444, 445, 558, 567, 572, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 633, 655, 681, 688, 720, 724, 725, 741, 765, 792, 803, 830, 875, 878, 927, 986, 1019, 1040, 1117, 1121, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1142, 1146, 1186, 1208, 1250, 1258, 1259], "aren": [37, 58, 300, 875], "t": [37, 39, 58, 67, 68, 89, 118, 123, 129, 132, 188, 211, 225, 266, 268, 300, 315, 374, 381, 389, 409, 429, 432, 433, 434, 490, 527, 559, 563, 618, 621, 648, 651, 653, 755, 765, 803, 825, 846, 875, 878, 945, 984, 1005, 1006, 1008, 1009, 1010, 1066, 1099, 1144, 1171, 1174, 1200, 1201, 1204, 1206, 1231, 1240, 1250], "strictli": [37, 58, 72, 91, 300, 796, 875], "table_nam": [38, 40, 300], "connect": [38, 118, 120, 121, 124, 126, 130, 135, 137, 138, 300, 778], "if_table_exist": [38, 300], "dbwritemod": [38, 300], "fail": [38, 39, 108, 122, 124, 128, 130, 133, 136, 137, 141, 142, 156, 266, 300, 326, 414, 516, 651, 652, 653, 657, 765, 846, 875, 1099, 1204, 1205, 1206, 1210, 1250], "dbwriteengin": [38, 300], "sqlalchemi": [38, 120, 140, 300], "databas": [38, 120, 121, 300, 777], "qualifi": [38, 300], "creat": [38, 40, 72, 91, 107, 111, 113, 118, 119, 120, 121, 124, 126, 130, 133, 134, 146, 147, 148, 149, 150, 151, 161, 162, 188, 189, 192, 223, 226, 235, 270, 274, 277, 300, 383, 410, 424, 516, 571, 579, 582, 583, 585, 588, 589, 590, 640, 694, 708, 709, 710, 711, 712, 713, 714, 751, 752, 753, 761, 765, 784, 785, 794, 803, 804, 807, 830, 851, 855, 875, 929, 933, 946, 954, 985, 999, 1110, 1117, 1120, 1193, 1231, 1250, 1258, 1259], "append": [38, 39, 148, 174, 207, 208, 300, 571, 755, 765, 811, 812, 875, 1013, 1250], "your": [38, 40, 72, 81, 91, 118, 119, 120, 121, 123, 138, 205, 211, 237, 238, 241, 257, 274, 279, 286, 300, 315, 527, 620, 651, 652, 653, 660, 730, 765, 808, 815, 817, 832, 851, 856, 863, 875, 1099, 1173, 1204, 1205, 1206, 1213, 1250, 1259], "special": [38, 118, 119, 121, 132, 277, 300, 581, 619, 765, 855, 875, 885, 1099, 1129, 1172, 1250], "uri": [38, 39, 120, 121, 122, 133, 134, 300], "postgresql": [38, 120, 121, 300, 559, 765], "user": [38, 120, 121, 157, 211, 225, 281, 286, 300, 315, 525, 527, 563, 595, 686, 730, 765, 825, 858, 863, 875, 885, 1099, 1147, 1250], "pass": [38, 39, 40, 45, 68, 81, 109, 120, 121, 123, 130, 132, 137, 138, 141, 143, 146, 148, 150, 159, 164, 167, 187, 188, 191, 194, 210, 224, 225, 235, 241, 245, 249, 253, 264, 270, 274, 278, 279, 300, 303, 315, 390, 406, 409, 438, 457, 509, 526, 527, 559, 563, 574, 579, 582, 583, 584, 585, 586, 588, 589, 590, 596, 606, 646, 647, 648, 682, 691, 699, 709, 720, 747, 755, 761, 765, 781, 791, 802, 803, 804, 806, 807, 809, 816, 817, 825, 830, 832, 836, 838, 840, 845, 851, 856, 863, 875, 885, 961, 984, 1014, 1025, 1055, 1085, 1098, 1099, 1123, 1149, 1199, 1200, 1201, 1221, 1250, 1254], "server": [38, 120, 121, 300], "port": [38, 118, 120, 121, 124, 126, 135, 300], "sqlite": [38, 120, 300], "db": [38, 121, 300], "replac": [38, 39, 118, 119, 132, 175, 176, 232, 233, 265, 274, 275, 300, 383, 409, 525, 526, 635, 636, 765, 797, 851, 852, 875, 954, 984, 1098, 1142, 1145, 1146, 1188, 1189, 1250], "insert": [38, 118, 119, 124, 126, 130, 132, 135, 136, 137, 197, 198, 231, 265, 267, 300, 594, 609, 660, 765, 847, 875, 1143, 1162, 1213, 1250], "mode": [38, 39, 58, 59, 60, 61, 65, 141, 143, 226, 300, 619, 738, 741, 756, 765, 786, 875, 1172, 1250, 1258], "new": [38, 39, 40, 123, 132, 154, 182, 196, 197, 198, 211, 222, 223, 230, 231, 254, 265, 267, 268, 269, 274, 275, 300, 310, 383, 437, 449, 458, 524, 547, 574, 578, 634, 635, 642, 643, 661, 663, 669, 761, 765, 777, 801, 828, 844, 847, 848, 851, 852, 858, 863, 875, 881, 954, 1012, 1021, 1110, 1122, 1123, 1127, 1187, 1188, 1195, 1196, 1214, 1217, 1223, 1228, 1250, 1258], "alreadi": [38, 39, 300, 374, 490, 678, 765, 945, 1066, 1238, 1250], "adbc": [38, 120, 121, 300], "affect": [38, 141, 142, 143, 144, 300], "driver": [38, 120, 121, 300], "provid": [38, 40, 68, 118, 119, 121, 122, 130, 132, 133, 134, 137, 148, 150, 177, 203, 300, 347, 348, 435, 455, 516, 525, 527, 614, 615, 618, 622, 624, 647, 648, 649, 650, 717, 720, 747, 765, 777, 799, 875, 915, 916, 1026, 1052, 1099, 1167, 1168, 1171, 1175, 1177, 1250, 1258, 1259], "otherwis": [38, 86, 120, 123, 147, 152, 211, 218, 238, 241, 286, 300, 347, 357, 375, 432, 433, 434, 516, 527, 535, 563, 567, 572, 583, 584, 585, 586, 588, 590, 610, 614, 621, 682, 730, 755, 765, 822, 832, 863, 875, 915, 930, 946, 1008, 1009, 1010, 1092, 1099, 1117, 1121, 1142, 1145, 1163, 1167, 1174, 1250], "deltalak": [39, 122, 133, 140, 300], "deltat": [39, 300], "ignor": [39, 147, 148, 150, 214, 215, 251, 252, 269, 300, 311, 313, 377, 409, 432, 433, 434, 488, 552, 553, 609, 682, 684, 765, 882, 883, 948, 984, 1008, 1009, 1010, 1064, 1108, 1109, 1162, 1250], "merg": [39, 218, 300, 822, 875], "overwrite_schema": [39, 300], "storage_opt": [39, 118, 122, 124, 126, 130, 133, 134, 135, 137, 300], "delta_write_opt": [39, 300], "delta_merge_opt": [39, 300], "tablemerg": [39, 300], "delta": [39, 50, 122, 133, 250, 271, 300, 588, 590, 608, 679, 696, 698, 742, 743, 746, 754, 765, 777, 841, 849, 875, 1136, 1138, 1161, 1239, 1250], "handl": [39, 89, 114, 118, 119, 132, 138, 300, 377, 488, 660, 765, 786, 875, 948, 1064, 1213, 1250], "throw": [39, 160, 300, 352, 622, 624, 765, 783, 875, 920, 1175, 1177, 1250], "add": [39, 40, 119, 174, 188, 191, 211, 274, 275, 276, 277, 300, 375, 548, 549, 565, 567, 665, 714, 718, 755, 765, 803, 806, 811, 851, 852, 853, 854, 855, 875, 1013, 1250], "anyth": [39, 236, 300], "updat": [39, 166, 300, 875], "extra": [39, 45, 61, 118, 119, 122, 123, 124, 126, 132, 133, 134, 135, 174, 188, 300, 765, 803, 875, 1013, 1250], "storag": [39, 118, 122, 124, 126, 130, 133, 134, 135, 137, 300], "backend": [39, 120, 121, 122, 133, 134, 300], "cloud": [39, 120, 122, 130, 133, 134, 137, 138, 300], "configur": [39, 122, 133, 134, 154, 300], "authent": [39, 122, 133, 134, 300], "see": [39, 40, 41, 42, 48, 120, 121, 122, 123, 130, 133, 134, 137, 141, 142, 143, 144, 148, 150, 164, 188, 207, 225, 226, 300, 303, 357, 440, 475, 525, 603, 610, 618, 619, 621, 634, 709, 710, 712, 713, 740, 752, 753, 761, 765, 786, 803, 875, 878, 924, 930, 1053, 1157, 1163, 1171, 1172, 1174, 1187, 1250, 1254, 1259], "here": [39, 40, 45, 107, 109, 110, 111, 113, 120, 121, 122, 127, 128, 130, 133, 134, 136, 137, 146, 148, 150, 300, 527, 620, 624, 765, 875, 1177], "gc": [39, 122, 133, 134, 300], "azur": [39, 122, 130, 133, 134, 137, 300], "keyword": [39, 68, 122, 130, 133, 164, 225, 236, 241, 242, 274, 275, 279, 300, 441, 563, 744, 747, 755, 765, 825, 832, 833, 851, 852, 856, 875, 1250], "argument": [39, 45, 91, 118, 122, 130, 132, 133, 164, 167, 173, 187, 188, 189, 190, 191, 192, 212, 214, 219, 224, 225, 226, 235, 241, 242, 243, 249, 251, 261, 267, 270, 274, 275, 279, 300, 410, 424, 435, 441, 459, 559, 563, 579, 582, 583, 584, 585, 586, 588, 589, 590, 606, 646, 647, 648, 682, 689, 690, 691, 693, 694, 695, 697, 699, 716, 744, 747, 755, 765, 791, 795, 802, 803, 804, 805, 806, 807, 825, 830, 832, 833, 835, 840, 847, 851, 852, 856, 875, 985, 999, 1030, 1199, 1200, 1201, 1232, 1250], "while": [39, 88, 119, 122, 123, 133, 148, 150, 154, 205, 217, 265, 269, 300, 626, 787, 821, 848, 875, 1023, 1179, 1250], "lake": [39, 122, 133, 300, 777], "typeerror": [39, 300], "unsupport": [39, 300], "arrowinvaliderror": [39, 300], "could": [39, 79, 94, 160, 300, 352, 700, 704, 714, 718, 765, 783, 792, 875, 920, 1023, 1250], "primit": [39, 300, 464, 765, 1231, 1250], "tablenotfounderror": [39, 300], "doesn": [39, 118, 132, 188, 300, 429, 765, 803, 875, 1005, 1240, 1250], "action": [39, 300], "trigger": [39, 261, 300, 765, 1232, 1250], "categor": [39, 51, 72, 90, 91, 141, 142, 143, 144, 207, 258, 300, 353, 354, 375, 567, 574, 672, 765, 878, 921, 922, 923, 924, 925, 946, 1117, 1123, 1233, 1250], "protocol": [39, 108, 121, 156, 300], "nullabl": [39, 300], "To": [39, 88, 175, 212, 214, 219, 251, 300, 357, 379, 380, 440, 610, 618, 619, 621, 634, 647, 648, 649, 650, 658, 765, 797, 875, 930, 950, 951, 1023, 1163, 1171, 1172, 1174, 1187, 1211, 1231, 1250], "pyarrow": [39, 45, 107, 112, 118, 121, 122, 124, 126, 130, 133, 138, 140, 255, 260, 261, 300, 778, 1226, 1230, 1231, 1232, 1250], "ha": [39, 40, 81, 88, 120, 123, 132, 156, 157, 178, 181, 188, 189, 190, 191, 192, 197, 232, 235, 254, 270, 276, 281, 300, 315, 351, 369, 370, 371, 372, 373, 374, 462, 466, 469, 474, 486, 499, 514, 523, 524, 525, 526, 536, 565, 579, 580, 582, 583, 584, 585, 586, 588, 589, 590, 612, 623, 627, 628, 629, 630, 633, 638, 639, 645, 665, 668, 669, 673, 686, 706, 707, 717, 726, 728, 761, 765, 787, 803, 804, 805, 806, 807, 816, 830, 844, 854, 858, 863, 875, 885, 919, 929, 941, 942, 943, 944, 945, 947, 1023, 1035, 1037, 1041, 1062, 1075, 1090, 1098, 1128, 1144, 1146, 1165, 1176, 1180, 1181, 1182, 1183, 1186, 1191, 1192, 1198, 1222, 1223, 1234, 1250], "last": [39, 141, 142, 143, 144, 159, 194, 208, 210, 226, 238, 249, 253, 264, 266, 294, 300, 325, 335, 341, 374, 387, 402, 407, 425, 466, 467, 474, 494, 511, 513, 516, 546, 548, 549, 550, 551, 565, 605, 643, 665, 667, 750, 765, 781, 812, 840, 843, 845, 846, 871, 875, 878, 894, 904, 910, 945, 958, 977, 982, 1000, 1025, 1041, 1042, 1055, 1070, 1087, 1089, 1196, 1221, 1250], "filesystem": [39, 122, 133, 134, 300], "table_path": [39, 122, 133, 134, 300], "match": [39, 40, 48, 89, 101, 107, 109, 110, 111, 113, 127, 128, 136, 141, 142, 143, 144, 176, 207, 208, 236, 269, 300, 533, 574, 587, 610, 611, 612, 613, 616, 618, 619, 621, 622, 624, 634, 635, 636, 644, 651, 652, 653, 755, 765, 798, 811, 812, 848, 875, 878, 1040, 1049, 1123, 1135, 1163, 1164, 1165, 1166, 1169, 1171, 1172, 1174, 1175, 1177, 1187, 1188, 1189, 1197, 1204, 1205, 1206, 1250], "version": [39, 86, 91, 122, 123, 133, 140, 156, 157, 178, 181, 188, 189, 190, 191, 192, 193, 197, 212, 214, 219, 232, 246, 251, 254, 276, 281, 300, 315, 358, 359, 369, 370, 371, 372, 373, 386, 388, 392, 396, 398, 400, 402, 403, 405, 409, 412, 424, 427, 453, 462, 466, 469, 474, 486, 499, 514, 523, 524, 526, 565, 580, 597, 611, 612, 623, 627, 628, 629, 630, 633, 638, 639, 645, 651, 653, 665, 668, 669, 680, 686, 706, 707, 709, 711, 728, 740, 765, 803, 804, 805, 806, 807, 816, 837, 844, 854, 858, 875, 885, 931, 932, 941, 942, 943, 944, 946, 957, 959, 963, 970, 972, 975, 977, 978, 980, 984, 985, 987, 999, 1002, 1024, 1031, 1035, 1037, 1040, 1041, 1047, 1049, 1051, 1062, 1075, 1090, 1098, 1117, 1128, 1144, 1146, 1150, 1164, 1165, 1176, 1180, 1181, 1182, 1183, 1186, 1191, 1192, 1198, 1204, 1206, 1222, 1223, 1240, 1250], "old": [39, 230, 300, 574, 765, 828, 875, 1123, 1250], "existing_table_path": [39, 300], "store": [39, 118, 130, 134, 174, 205, 237, 300, 353, 921, 1013, 1250], "bucket": [39, 122, 133, 134, 137, 300, 410, 424, 455, 765, 985, 999, 1026, 1250], "prefix": [39, 154, 300, 310, 350, 524, 547, 549, 550, 551, 644, 648, 649, 660, 665, 765, 878, 918, 1197, 1202, 1213], "aws_region": [39, 133, 137, 300], "the_aws_region": [39, 300], "aws_access_key_id": [39, 122, 133, 137, 300], "the_aws_access_key_id": [39, 122, 133, 134, 300], "aws_secret_access_kei": [39, 122, 133, 137, 300], "the_aws_secret_access_kei": [39, 122, 133, 134, 300], "pa": [39, 107, 138, 300], "check": [39, 48, 118, 119, 132, 141, 142, 143, 144, 153, 171, 181, 188, 189, 191, 192, 201, 203, 207, 235, 300, 332, 346, 349, 350, 459, 464, 485, 579, 610, 616, 621, 644, 765, 803, 804, 806, 807, 811, 816, 817, 830, 875, 901, 914, 917, 918, 1006, 1031, 1033, 1037, 1038, 1040, 1047, 1048, 1049, 1051, 1052, 1061, 1144, 1163, 1169, 1174, 1197, 1250], "doc": [39, 41, 42, 121, 141, 143, 164, 300], "evolut": [39, 300], "yet": [39, 300], "packag": [39, 120, 123, 300], "therefor": [39, 172, 300, 527, 755, 765, 1007, 1250], "effect": [39, 40, 180, 188, 191, 260, 300, 389, 527, 709, 710, 765, 803, 806, 854, 855, 875, 952, 960], "predic": [39, 58, 59, 60, 61, 87, 88, 132, 135, 136, 137, 138, 177, 203, 236, 300, 441, 680, 718, 755, 765, 786, 787, 794, 796, 799, 816, 817, 826, 828, 838, 854, 855, 875, 1017, 1142, 1145, 1250], "source_alia": [39, 300], "target_alia": [39, 300], "when_matched_update_al": [39, 300], "when_not_matched_insert_al": [39, 300], "execut": [39, 66, 67, 69, 72, 89, 120, 209, 300, 490, 678, 765, 782, 816, 817, 826, 875, 1066, 1238, 1250, 1258], "workbook": [40, 123, 300], "worksheet": [40, 123, 129, 300], "posit": [40, 167, 173, 187, 190, 224, 241, 242, 243, 245, 249, 267, 274, 275, 279, 300, 432, 433, 434, 435, 509, 559, 567, 596, 606, 620, 621, 633, 655, 689, 690, 691, 693, 694, 695, 716, 744, 747, 765, 791, 795, 802, 805, 832, 833, 835, 836, 840, 847, 851, 852, 856, 875, 1008, 1009, 1010, 1085, 1117, 1149, 1173, 1186, 1208, 1250], "tupl": [40, 121, 123, 129, 157, 205, 211, 224, 236, 237, 238, 244, 278, 300, 575, 765, 826, 838, 875, 878, 1124, 1250], "a1": [40, 82, 84, 300], "table_styl": [40, 300], "column_format": [40, 300], "columnformatdict": [40, 300], "dtype_format": [40, 300], "oneormoredatatyp": [40, 146, 300, 1049, 1250], "conditional_format": [40, 300], "conditionalformatdict": [40, 300], "header_format": [40, 300], "column_tot": [40, 300], "columntotalsdefinit": [40, 300], "column_width": [40, 300], "columnwidthsdefinit": [40, 300], "row_tot": [40, 300], "rowtotalsdefinit": [40, 300], "row_height": [40, 300], "sparklin": [40, 300], "sequenc": [40, 73, 81, 107, 109, 110, 111, 113, 118, 119, 120, 123, 127, 128, 129, 132, 136, 146, 147, 148, 159, 166, 173, 174, 207, 208, 217, 222, 224, 225, 226, 238, 249, 258, 264, 268, 269, 270, 300, 375, 464, 516, 523, 525, 563, 567, 574, 606, 649, 650, 663, 686, 691, 700, 701, 704, 705, 718, 720, 728, 729, 730, 740, 745, 765, 781, 795, 811, 812, 821, 825, 840, 845, 848, 875, 946, 947, 1013, 1092, 1117, 1123, 1146, 1217, 1250], "formula": [40, 300, 429, 765, 1005, 1250], "autofilt": [40, 300], "autofit": [40, 300], "hidden_column": [40, 300], "selectortyp": [40, 300, 878], "hide_gridlin": [40, 300], "sheet_zoom": [40, 300], "freeze_pan": [40, 300], "excel": [40, 123, 300], "open": [40, 117, 118, 119, 123, 124, 125, 126, 127, 128, 129, 130, 131, 135, 137, 300, 790, 875], "xlsxwriter": [40, 140, 300], "close": [40, 120, 188, 189, 191, 192, 235, 300, 375, 459, 520, 567, 579, 582, 583, 584, 585, 586, 588, 589, 590, 603, 709, 710, 712, 713, 752, 753, 765, 803, 804, 806, 807, 830, 875, 946, 1030, 1117, 1157, 1250], "xlsx": [40, 123, 300], "work": [40, 49, 51, 119, 138, 231, 242, 275, 300, 311, 313, 315, 344, 356, 357, 435, 444, 490, 517, 525, 527, 559, 578, 625, 626, 675, 765, 833, 852, 875, 878, 882, 883, 913, 927, 930, 1019, 1066, 1093, 1178, 1179, 1235, 1250], "directori": [40, 45, 130, 300], "sheet1": [40, 300], "medium": [40, 300], "kei": [40, 81, 86, 89, 130, 134, 137, 188, 205, 207, 208, 218, 224, 226, 230, 234, 237, 238, 269, 278, 300, 441, 527, 574, 747, 765, 796, 803, 811, 812, 822, 828, 829, 848, 875, 1123, 1250], "follow": [40, 45, 86, 118, 119, 122, 132, 133, 134, 141, 188, 208, 211, 225, 235, 270, 300, 406, 410, 424, 525, 563, 570, 579, 582, 583, 584, 585, 586, 587, 588, 589, 590, 663, 674, 709, 710, 712, 713, 730, 752, 753, 755, 757, 758, 760, 765, 766, 767, 770, 772, 773, 774, 803, 812, 825, 830, 875, 981, 985, 999, 1119, 1142, 1145, 1242, 1244, 1246, 1250, 1251, 1255, 1256, 1257, 1259], "first_column": [40, 300], "last_column": [40, 300], "banded_column": [40, 300], "banded_row": [40, 300], "sheet": [40, 123, 129, 300], "chart": [40, 300, 826, 875], "subsequ": [40, 70, 229, 261, 300, 516, 755, 794, 875], "colnam": [40, 132, 148, 170, 300, 793, 875], "given": [40, 65, 66, 81, 107, 109, 110, 111, 113, 118, 119, 120, 121, 123, 124, 126, 127, 128, 129, 130, 132, 136, 137, 143, 144, 145, 146, 148, 149, 150, 151, 157, 159, 172, 173, 175, 188, 189, 191, 192, 203, 211, 224, 225, 235, 236, 238, 245, 246, 249, 264, 269, 300, 332, 357, 381, 384, 413, 415, 416, 429, 455, 459, 485, 509, 516, 518, 527, 559, 563, 570, 573, 575, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 594, 596, 597, 619, 620, 631, 632, 651, 653, 660, 663, 686, 716, 728, 729, 730, 741, 742, 743, 765, 781, 795, 803, 804, 806, 807, 816, 817, 825, 830, 836, 837, 840, 845, 848, 858, 863, 875, 878, 885, 901, 930, 952, 955, 988, 990, 991, 1005, 1007, 1026, 1030, 1052, 1061, 1085, 1092, 1094, 1097, 1099, 1110, 1119, 1124, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1143, 1149, 1150, 1172, 1173, 1184, 1185, 1204, 1206, 1213, 1237, 1241, 1250, 1258, 1259], "dd": [40, 300], "mm": [40, 300], "yyyi": [40, 300], "overridden": [40, 107, 109, 111, 113, 127, 128, 152, 300, 875], "basi": [40, 148, 300], "param": [40, 107, 109, 110, 111, 113, 118, 119, 127, 128, 132, 147, 148, 150, 236, 300, 875], "It": [40, 72, 91, 166, 218, 225, 277, 286, 300, 535, 578, 761, 765, 816, 817, 822, 855, 863, 875, 1142, 1145, 1250], "float_dtyp": [40, 300], "simplifi": [40, 58, 59, 60, 61, 87, 88, 300, 786, 787, 794, 796, 826, 838, 875], "uniform": [40, 300, 567, 765, 1117, 1250], "condit": [40, 169, 177, 236, 300, 441, 616, 644, 692, 718, 755, 765, 792, 799, 875], "suppli": [40, 107, 109, 110, 111, 113, 120, 127, 128, 136, 177, 236, 300, 441, 563, 765, 799, 875], "typenam": [40, 300], "3_color_scal": [40, 300], "data_bar": [40, 300], "make": [40, 73, 89, 107, 112, 118, 119, 124, 126, 130, 135, 218, 222, 229, 270, 300, 433, 434, 455, 550, 551, 559, 573, 642, 765, 822, 875, 1009, 1010, 1026, 1195, 1250, 1259], "icon": [40, 300], "multipl": [40, 68, 87, 88, 89, 118, 119, 123, 129, 132, 135, 136, 137, 146, 150, 159, 167, 172, 174, 177, 187, 188, 196, 206, 224, 226, 238, 241, 243, 249, 264, 269, 274, 279, 300, 493, 514, 532, 536, 543, 544, 559, 574, 575, 578, 582, 583, 584, 585, 586, 588, 589, 590, 606, 691, 697, 704, 705, 718, 728, 729, 731, 735, 740, 745, 748, 755, 761, 765, 781, 786, 787, 791, 799, 802, 803, 832, 835, 840, 845, 848, 851, 856, 863, 875, 884, 1007, 1013, 1069, 1090, 1104, 1123, 1124, 1250], "singl": [40, 66, 81, 88, 89, 118, 119, 120, 121, 123, 130, 132, 137, 146, 160, 167, 168, 169, 174, 183, 193, 203, 207, 211, 224, 236, 238, 249, 278, 300, 315, 333, 357, 406, 448, 451, 453, 486, 487, 493, 514, 525, 527, 571, 574, 575, 606, 609, 680, 686, 691, 694, 695, 725, 729, 730, 745, 753, 765, 783, 786, 791, 792, 811, 840, 875, 902, 930, 981, 1013, 1024, 1062, 1063, 1069, 1120, 1123, 1124, 1162, 1226, 1250], "across": [40, 81, 121, 193, 213, 215, 220, 252, 300, 453, 683, 685, 700, 701, 703, 707, 732, 736, 749, 765, 1024, 1250], "heatmap": [40, 300], "min": [40, 45, 61, 166, 176, 220, 226, 235, 300, 359, 366, 371, 440, 559, 570, 579, 585, 736, 744, 765, 798, 830, 875, 932, 938, 942, 947, 1016, 1119, 1133, 1250, 1259], "entir": [40, 300, 786, 875], "made": [40, 120, 300, 1231, 1250], "abov": [40, 141, 226, 300, 755], "than": [40, 58, 59, 60, 61, 106, 111, 113, 118, 119, 120, 123, 129, 132, 138, 148, 150, 161, 187, 190, 205, 208, 211, 224, 236, 237, 239, 268, 286, 300, 450, 452, 477, 504, 522, 525, 527, 538, 567, 578, 593, 603, 625, 631, 632, 643, 660, 696, 709, 730, 765, 786, 802, 805, 812, 863, 875, 1080, 1099, 1117, 1127, 1141, 1157, 1178, 1184, 1185, 1196, 1213, 1250, 1259], "bold": [40, 300], "font_color": [40, 300], "702963": [40, 300], "total": [40, 172, 282, 300, 388, 392, 396, 398, 400, 405, 412, 417, 418, 419, 420, 421, 422, 423, 478, 498, 765, 859, 959, 963, 970, 972, 975, 980, 987, 992, 993, 994, 995, 996, 997, 998, 1007, 1054, 1074, 1250], "export": [40, 205, 206, 237, 238, 257, 260, 300, 761], "associ": [40, 66, 68, 81, 121, 147, 238, 300], "sum": [40, 65, 172, 180, 187, 188, 203, 226, 235, 252, 279, 300, 367, 368, 373, 429, 441, 516, 527, 535, 537, 538, 539, 574, 579, 589, 680, 682, 700, 702, 703, 704, 706, 707, 718, 730, 740, 749, 765, 786, 787, 790, 794, 796, 802, 803, 824, 826, 830, 834, 838, 856, 875, 878, 939, 940, 944, 1005, 1007, 1137, 1250], "must": [40, 108, 109, 122, 133, 134, 138, 166, 173, 188, 189, 191, 192, 208, 218, 235, 236, 300, 375, 516, 525, 567, 574, 579, 582, 583, 584, 585, 586, 588, 589, 590, 755, 765, 795, 803, 804, 806, 807, 812, 816, 817, 822, 830, 875, 946, 947, 1117, 1123, 1250], "funcnam": [40, 300], "averag": [40, 300, 432, 433, 434, 570, 765, 1008, 1009, 1010, 1119, 1250], "count_num": [40, 300], "count": [40, 65, 138, 158, 166, 188, 208, 222, 223, 235, 265, 270, 276, 291, 300, 316, 333, 364, 369, 406, 455, 478, 486, 487, 498, 527, 545, 557, 579, 582, 583, 584, 585, 586, 588, 589, 590, 612, 613, 676, 678, 687, 699, 737, 765, 780, 803, 812, 824, 830, 854, 868, 875, 902, 947, 981, 1026, 1054, 1062, 1063, 1074, 1106, 1112, 1165, 1166, 1236, 1238, 1250], "std_dev": [40, 300], "var": [40, 151, 300, 590, 765, 875, 1250], "pixel": [40, 300], "unit": [40, 48, 50, 141, 142, 143, 144, 148, 150, 172, 300, 382, 383, 390, 415, 427, 521, 536, 651, 653, 677, 709, 710, 711, 712, 713, 714, 720, 765, 826, 875, 878, 953, 954, 961, 990, 1002, 1007, 1097, 1204, 1206, 1237, 1250, 1259], "hand": [40, 118, 119, 132, 300, 505, 506, 507, 508, 1081, 1082, 1083, 1084], "side": [40, 188, 189, 191, 192, 235, 300, 459, 505, 506, 507, 508, 579, 582, 583, 584, 585, 586, 588, 589, 590, 594, 709, 710, 712, 713, 752, 753, 765, 803, 804, 806, 807, 830, 875, 1030, 1081, 1082, 1083, 1084, 1143, 1250], "call": [40, 69, 72, 91, 119, 120, 141, 142, 143, 144, 148, 150, 154, 187, 188, 191, 209, 211, 235, 299, 300, 315, 365, 368, 474, 527, 546, 548, 549, 550, 551, 565, 599, 665, 697, 761, 765, 778, 802, 803, 804, 806, 807, 830, 874, 875, 878, 885, 1099, 1153, 1250], "ad": [40, 110, 123, 188, 191, 265, 269, 274, 275, 300, 314, 438, 700, 701, 704, 705, 765, 803, 806, 848, 851, 852, 875, 946, 1014, 1117, 1250], "wise": [40, 81, 120, 180, 300, 317, 318, 319, 320, 321, 322, 360, 361, 362, 436, 519, 600, 601, 602, 670, 671, 704, 705, 718, 740, 765, 886, 887, 888, 889, 890, 891, 934, 935, 936, 1011, 1095, 1096, 1154, 1155, 1156, 1224, 1225, 1250], "particip": [40, 300], "distinct": [40, 150, 224, 278, 300, 344, 462, 463, 466, 467, 517, 570, 578, 714, 765, 913, 1035, 1036, 1041, 1042, 1093, 1119, 1127, 1250, 1259], "referenc": [40, 300, 663], "differ": [40, 118, 138, 141, 143, 174, 188, 193, 205, 235, 237, 238, 257, 265, 300, 377, 387, 406, 407, 409, 425, 431, 453, 488, 505, 507, 516, 527, 552, 553, 555, 574, 651, 676, 717, 720, 726, 765, 794, 803, 830, 875, 878, 924, 948, 958, 981, 982, 984, 1000, 1006, 1013, 1024, 1064, 1081, 1083, 1099, 1108, 1109, 1123, 1144, 1204, 1250], "row_index": [40, 300], "height": [40, 169, 300], "intersect": [40, 300, 506, 878, 1082], "bodi": [40, 300], "start": [40, 117, 118, 119, 120, 121, 124, 126, 129, 130, 132, 135, 136, 137, 152, 182, 187, 188, 190, 191, 209, 248, 254, 270, 276, 277, 300, 346, 349, 350, 387, 401, 407, 410, 424, 425, 435, 449, 510, 582, 583, 585, 588, 589, 590, 604, 610, 616, 619, 632, 640, 644, 646, 648, 649, 660, 669, 688, 700, 704, 709, 710, 712, 713, 716, 718, 724, 725, 752, 753, 755, 765, 801, 802, 803, 805, 806, 826, 839, 844, 854, 855, 875, 878, 918, 953, 955, 958, 961, 962, 969, 971, 974, 976, 979, 982, 985, 990, 999, 1000, 1021, 1086, 1158, 1169, 1172, 1185, 1193, 1197, 1199, 1201, 1213, 1223, 1250, 1259], "unless": [40, 81, 109, 261, 300, 646, 647, 741, 875, 1199, 1232, 1240, 1250], "marker": [40, 300], "compliant": [40, 300], "case": [40, 72, 81, 88, 107, 109, 110, 111, 113, 120, 127, 128, 136, 137, 152, 157, 174, 188, 189, 191, 192, 205, 211, 235, 237, 238, 257, 300, 381, 524, 525, 535, 536, 547, 579, 610, 611, 619, 621, 634, 636, 765, 787, 803, 804, 806, 807, 830, 875, 878, 952, 1013, 1163, 1164, 1172, 1174, 1187, 1189, 1250], "three": [40, 263, 300, 375, 567, 594, 765, 946, 1092, 1117, 1250], "avail": [40, 116, 120, 121, 122, 133, 134, 146, 154, 226, 299, 300, 570, 757, 758, 760, 764, 765, 766, 767, 770, 771, 772, 773, 774, 777, 778, 796, 874, 875, 878, 947, 1119, 1242, 1244, 1246, 1250, 1251, 1255, 1256, 1257], "insert_befor": [40, 300], "insert_aft": [40, 300], "respect": [40, 300, 611, 636, 878, 1164, 1189], "direct": [40, 121, 130, 134, 137, 141, 245, 268, 300, 509, 596, 765, 836, 875, 1085, 1149, 1250], "far": [40, 300], "strongli": [40, 152, 211, 236, 286, 300, 527, 765, 1099, 1250], "advis": [40, 72, 91, 209, 300], "structur": [40, 97, 102, 104, 174, 225, 238, 260, 300, 563, 765, 825, 875, 1013, 1250], "wherev": [40, 211, 286, 300, 527, 765, 1099, 1250], "possibl": [40, 118, 159, 187, 190, 205, 211, 237, 264, 266, 286, 300, 521, 527, 535, 581, 643, 677, 765, 781, 802, 805, 840, 845, 846, 875, 1099, 1129, 1196, 1250], "simpl": [40, 150, 222, 300], "colx": [40, 70, 300, 550, 551, 878, 1259], "coli": [40, 300, 550, 551, 878, 1259], "after": [40, 70, 89, 110, 117, 118, 119, 124, 126, 130, 132, 135, 136, 137, 174, 267, 299, 300, 435, 526, 559, 570, 660, 765, 847, 875, 1013, 1098, 1119, 1213, 1250], "befor": [40, 118, 120, 123, 132, 138, 141, 142, 143, 144, 152, 154, 174, 188, 191, 208, 267, 300, 367, 368, 374, 525, 526, 559, 560, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 660, 666, 742, 743, 765, 803, 806, 809, 812, 847, 875, 939, 940, 945, 1013, 1098, 1113, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1213, 1220, 1250], "most": [40, 67, 107, 118, 119, 121, 132, 141, 142, 143, 144, 300, 536, 543, 560, 643, 765, 1104, 1113, 1196, 1250, 1258], "mandatori": [40, 300], "return_dtyp": [40, 157, 211, 300, 315, 523, 525, 526, 527, 574, 686, 728, 729, 730, 765, 885, 1098, 1099, 1123, 1250], "latter": [40, 174, 300, 1013, 1250], "appropri": [40, 138, 260, 300, 570, 765, 1119, 1250], "pure": [40, 300, 1231, 1250], "actual": [40, 110, 148, 150, 238, 300, 1152, 1250], "indic": [40, 117, 118, 119, 120, 124, 126, 130, 132, 137, 145, 146, 150, 188, 189, 191, 192, 235, 238, 243, 245, 258, 300, 326, 448, 455, 460, 461, 462, 463, 465, 466, 467, 468, 470, 471, 472, 493, 509, 514, 531, 532, 533, 534, 579, 582, 583, 584, 585, 586, 588, 589, 590, 594, 596, 600, 668, 691, 692, 765, 803, 804, 806, 807, 830, 835, 836, 875, 878, 1020, 1026, 1034, 1035, 1036, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1069, 1085, 1090, 1142, 1143, 1146, 1149, 1154, 1222, 1227, 1250, 1259], "calcul": [40, 81, 188, 250, 271, 300, 377, 432, 433, 434, 475, 488, 505, 521, 587, 603, 608, 677, 679, 696, 698, 742, 743, 746, 754, 765, 803, 841, 849, 875, 948, 1008, 1009, 1010, 1053, 1064, 1081, 1135, 1157, 1161, 1239, 1250], "individu": [40, 61, 148, 154, 235, 260, 300, 527, 619, 765, 786, 830, 875, 928, 1172, 1250], "gridlin": [40, 300], "zoom": [40, 300], "freez": [40, 300], "pane": [40, 300], "top": [40, 264, 300, 845, 875], "index": [40, 108, 112, 115, 118, 119, 124, 126, 130, 132, 135, 136, 137, 140, 156, 178, 182, 184, 188, 189, 191, 192, 197, 198, 203, 205, 208, 226, 232, 233, 235, 236, 237, 245, 248, 254, 260, 262, 269, 270, 276, 277, 300, 309, 323, 324, 325, 327, 330, 331, 335, 406, 448, 449, 451, 482, 483, 493, 494, 509, 510, 514, 516, 579, 582, 583, 584, 585, 586, 588, 589, 590, 594, 596, 604, 610, 618, 621, 640, 668, 669, 724, 765, 801, 803, 804, 806, 807, 812, 830, 836, 839, 844, 848, 854, 855, 875, 892, 893, 894, 895, 896, 899, 900, 904, 981, 1020, 1021, 1052, 1058, 1059, 1069, 1070, 1085, 1086, 1090, 1092, 1110, 1142, 1143, 1146, 1149, 1158, 1171, 1174, 1193, 1222, 1223, 1250], "thu": [40, 174, 300, 696, 1013, 1250], "altern": [40, 300, 761], "a2": [40, 82, 84, 300], "occur": [40, 87, 88, 300, 333, 486, 487, 543, 570, 765, 786, 787, 794, 796, 826, 838, 875, 902, 1062, 1063, 1104, 1119, 1250], "equival": [40, 107, 109, 110, 111, 113, 122, 127, 128, 136, 188, 203, 222, 300, 308, 312, 430, 431, 445, 450, 452, 477, 522, 542, 544, 554, 555, 558, 564, 626, 664, 674, 681, 717, 726, 765, 803, 875, 1052, 1179, 1209, 1211, 1212, 1250], "top_row": [40, 300], "top_col": [40, 300], "base": [40, 46, 99, 169, 177, 188, 189, 191, 192, 235, 300, 381, 389, 429, 432, 433, 434, 441, 455, 518, 519, 567, 574, 579, 633, 655, 765, 792, 799, 803, 804, 806, 807, 830, 875, 878, 952, 960, 1005, 1008, 1009, 1010, 1026, 1094, 1095, 1117, 1123, 1186, 1208, 1241, 1250, 1259], "scroll": [40, 300], "region": [40, 134, 300], "initit": [40, 300], "5th": [40, 300], "properti": [40, 156, 163, 170, 179, 195, 240, 244, 273, 277, 300, 788, 793, 831, 850, 855, 875, 878, 1250, 1259], "readthedoc": [40, 300], "io": [40, 118, 125, 130, 131, 134, 300, 790, 834, 875], "html": [40, 41, 42, 108, 120, 156, 164, 300], "definit": [40, 146, 300, 475, 765, 1053, 1250], "take": [40, 123, 129, 148, 154, 180, 182, 188, 191, 215, 218, 225, 226, 254, 260, 300, 406, 441, 448, 449, 493, 606, 669, 709, 710, 715, 717, 726, 765, 801, 803, 806, 822, 844, 875, 981, 1020, 1021, 1069, 1223, 1241, 1250], "care": [40, 300, 315, 527, 595, 765, 1147, 1250], "rel": [40, 121, 122, 133, 134, 141, 142, 143, 144, 300, 406, 432, 433, 434, 584, 586, 588, 590, 765, 981, 1008, 1009, 1010, 1250], "working_with_conditional_format": [40, 300], "similarli": [40, 110, 188, 208, 235, 270, 300, 406, 410, 424, 579, 582, 583, 584, 585, 586, 588, 589, 590, 709, 710, 712, 713, 752, 753, 765, 803, 812, 830, 875, 981, 985, 999], "well": [40, 118, 119, 120, 132, 226, 300, 459, 765, 1030, 1250], "adjac": [40, 300], "two": [40, 70, 72, 90, 91, 109, 111, 113, 121, 180, 217, 218, 226, 263, 280, 286, 300, 309, 378, 383, 448, 451, 516, 567, 605, 689, 690, 696, 698, 742, 743, 765, 821, 822, 857, 863, 875, 949, 954, 1092, 1117, 1250], "help": [40, 141, 142, 143, 144, 300, 303, 796, 875, 1250, 1254], "where": [40, 65, 81, 120, 121, 147, 169, 174, 188, 205, 217, 237, 250, 269, 271, 300, 326, 426, 429, 431, 555, 573, 594, 603, 606, 608, 636, 679, 692, 696, 698, 742, 743, 746, 754, 755, 765, 792, 803, 821, 841, 848, 849, 875, 895, 1001, 1005, 1013, 1143, 1157, 1161, 1189, 1239, 1241, 1250, 1258], "working_with_sparklin": [40, 300], "inject": [40, 81, 300], "locat": [40, 174, 232, 233, 262, 267, 300, 594, 765, 847, 875, 1013, 1020, 1142, 1143, 1146, 1222, 1250], "syntax": [40, 177, 211, 222, 300, 610, 618, 619, 621, 634, 724, 761, 799, 838, 875, 1163, 1171, 1172, 1174, 1187, 1250], "correctli": [40, 123, 300, 525, 765], "microsoft": [40, 300], "com": [40, 121, 300, 432, 433, 434, 618, 619, 620, 765, 1008, 1009, 1010, 1171, 1172, 1173, 1250], "u": [40, 48, 50, 68, 137, 300, 382, 383, 390, 415, 427, 651, 653, 709, 710, 711, 712, 713, 714, 720, 878, 953, 954, 961, 990, 1002, 1204, 1206], "offic": [40, 300], "f5ed2452": [40, 300], "2337": [40, 300], "4f71": [40, 300], "bed3": [40, 300], "c8ae6d2b276": [40, 300], "instanti": [40, 120, 241, 274, 300, 832, 851, 875], "basic": [40, 300, 1259], "random": [40, 41, 139, 146, 148, 150, 193, 239, 300, 453, 504, 570, 593, 599, 678, 765, 777, 1024, 1080, 1119, 1141, 1153, 1238, 1250], "dtm": [40, 300, 383, 878, 954], "500": [40, 269, 300, 385, 386, 391, 395, 397, 399, 404, 411, 414, 796, 848, 875, 969, 971, 979, 1130, 1131, 1133, 1250], "val": [40, 234, 300, 527, 563, 672, 755, 765, 829, 875], "10_000": [40, 300], "20_000": [40, 300], "30_000": [40, 300], "increas": [40, 81, 118, 130, 137, 300, 374, 578, 765, 945, 1127, 1250], "b4": [40, 300], "light": [40, 300], "twice": [40, 123, 300], "titl": [40, 65, 300], "explicit": [40, 120, 132, 146, 269, 300, 740, 848, 875], "integr": [40, 300, 1259], "multi_fram": [40, 300], "wb": [40, 300], "coordin": [40, 300], "advanc": [40, 123, 226, 300, 516, 1092, 1259], "min_color": [40, 300], "76933c": [40, 300], "mid_color": [40, 300], "c4d79b": [40, 300], "max_color": [40, 300], "ebf1d": [40, 300], "data_bar_2010": [40, 300], "bar_color": [40, 300], "9bbb59": [40, 300], "bar_negative_color_sam": [40, 300], "bar_negative_border_color_sam": [40, 300], "white": [40, 300], "w": [40, 67, 68, 188, 191, 238, 300, 613, 618, 620, 683, 685, 803, 806, 875, 878, 1166, 1171, 1173, 1200], "get_worksheet_by_nam": [40, 300], "fmt_titl": [40, 300], "add_format": [40, 300], "4f6228": [40, 300], "font_siz": [40, 300], "12": [40, 81, 114, 118, 147, 148, 188, 204, 208, 235, 246, 270, 300, 310, 358, 359, 367, 381, 383, 387, 401, 402, 403, 406, 407, 408, 410, 424, 425, 426, 458, 474, 524, 560, 565, 569, 579, 589, 597, 598, 613, 628, 638, 654, 665, 701, 708, 709, 710, 711, 712, 713, 729, 752, 753, 765, 803, 808, 812, 815, 830, 837, 838, 843, 875, 878, 931, 932, 952, 954, 976, 985, 999, 1099, 1139, 1150, 1166, 1181, 1191, 1207, 1250, 1259], "ital": [40, 300], "customis": [40, 300], "trend": [40, 300], "win_loss": [40, 300], "subtl": [40, 300], "tone": [40, 300], "hidden": [40, 300], "id": [40, 89, 118, 134, 265, 277, 286, 300, 578, 634, 635, 676, 765, 855, 863, 875, 1127, 1236, 1250, 1259], "q1": [40, 300], "55": [40, 83, 300], "20": [40, 118, 148, 174, 196, 198, 218, 225, 227, 231, 233, 300, 323, 324, 325, 377, 385, 386, 391, 395, 397, 399, 404, 410, 411, 414, 424, 427, 453, 458, 563, 582, 583, 585, 588, 589, 590, 680, 720, 727, 752, 765, 822, 825, 875, 878, 948, 957, 985, 999, 1002, 1011, 1250], "35": [40, 300, 377, 765, 948, 1250], "q2": [40, 300], "30": [40, 174, 188, 196, 225, 231, 233, 256, 274, 300, 323, 324, 325, 377, 383, 385, 386, 391, 395, 397, 399, 401, 402, 404, 408, 409, 410, 411, 414, 417, 424, 425, 453, 598, 727, 752, 765, 803, 825, 851, 875, 878, 948, 954, 977, 984, 985, 992, 999, 1250, 1259], "60": [40, 174, 300, 391, 397, 399, 411, 423, 589, 651, 765, 982, 986, 998, 1204], "q3": [40, 300], "40": [40, 140, 174, 225, 300, 410, 424, 453, 654, 765, 825, 875, 965, 999, 1207], "80": [40, 300], "q4": [40, 300], "75": [40, 166, 300, 312, 558, 567, 582, 583, 584, 585, 588, 589, 590, 730, 765, 947, 1026, 1117, 1250, 1259], "account": [40, 114, 121, 134, 300, 406, 432, 433, 434, 765, 981, 1008, 1009, 1010, 1250], "flavour": [40, 120, 300], "integer_dtyp": [40, 241, 300, 832, 875, 878], "0_": [40, 300], "just": [40, 132, 217, 300, 821, 875], "unifi": [40, 300, 878], "2_color_scal": [40, 300], "95b3d7": [40, 300], "ffffff": [40, 300], "standardis": [40, 300], "z": [40, 67, 73, 89, 114, 146, 148, 172, 200, 202, 207, 217, 237, 238, 265, 268, 300, 308, 310, 312, 453, 484, 524, 527, 547, 548, 549, 550, 551, 558, 565, 573, 574, 611, 619, 636, 651, 653, 665, 683, 685, 703, 732, 736, 741, 749, 765, 811, 821, 839, 875, 878, 1016, 1123, 1164, 1172, 1189, 1204, 1206, 1250, 1258], "score": [40, 300], "conjunct": [40, 90, 123, 129, 300, 724], "a123": [40, 300], "b345": [40, 300], "c567": [40, 300], "d789": [40, 300], "e101": [40, 300], "45": [40, 140, 235, 300, 383, 410, 424, 579, 589, 613, 619, 662, 689, 690, 727, 752, 765, 830, 875, 878, 954, 985, 999, 1166, 1172, 1216, 1259], "85": [40, 300, 1259], "font": [40, 300], "consola": [40, 300], "stdev": [40, 300], "ipccompress": [41, 42, 300], "arrow": [41, 42, 59, 107, 120, 121, 124, 126, 135, 205, 237, 238, 255, 257, 300, 875, 1226, 1231, 1250], "ipc": [41, 42, 59, 124, 125, 126, 135, 138, 300, 777, 875], "binari": [41, 120, 123, 300, 346, 348, 349, 350, 878, 914, 917, 918], "feather": [41, 124, 135, 300, 777], "access": [41, 82, 83, 84, 85, 130, 134, 137, 156, 205, 236, 237, 300, 620, 853, 875, 1173, 1259], "python": [41, 42, 64, 108, 118, 119, 120, 140, 141, 143, 156, 205, 211, 237, 238, 257, 286, 300, 315, 383, 523, 525, 527, 620, 709, 710, 712, 713, 752, 753, 755, 765, 771, 863, 885, 954, 966, 967, 968, 973, 1099, 1173, 1230, 1250], "lz4": [41, 42, 45, 59, 61, 300, 875], "zstd": [41, 42, 45, 59, 61, 300, 875], "batch": [42, 116, 119, 120, 126, 136, 138, 300, 786, 816, 817, 875], "iobas": [43, 44, 127, 128, 300, 540, 790, 834, 875], "pretti": [43, 300], "row_ori": [43, 300], "serial": [43, 44, 300, 790, 875], "orient": [43, 82, 84, 111, 113, 300, 875], "slower": [43, 111, 113, 123, 187, 190, 211, 224, 270, 286, 300, 527, 730, 765, 802, 805, 863, 875, 1099, 1250], "common": [43, 81, 87, 88, 89, 269, 300, 524, 547, 765, 771, 786, 787, 794, 796, 826, 838, 848, 875], "write_ndjson": [43, 300], "bit_set": [43, 300, 834, 875], "newlin": [44, 128, 136, 300], "delimit": [44, 58, 128, 136, 226, 258, 300, 609, 875, 1162, 1227, 1250], "parquetcompress": [45, 300], "compression_level": [45, 61, 300, 875], "statist": [45, 61, 118, 119, 130, 137, 166, 300, 433, 434, 475, 582, 583, 584, 585, 586, 587, 588, 589, 590, 603, 765, 875, 947, 1009, 1010, 1053, 1135, 1157, 1250], "row_group_s": [45, 61, 300, 875], "data_page_s": [45, 300], "use_pyarrow": [45, 118, 124, 126, 130, 260, 300, 1230, 1231, 1250], "pyarrow_opt": [45, 122, 130, 133, 300], "parquet": [45, 61, 130, 131, 137, 300, 777, 875], "gzip": [45, 61, 300, 875], "lzo": [45, 61, 300, 875], "brotli": [45, 61, 300, 875], "choos": [45, 59, 61, 188, 226, 300, 803, 875], "good": [45, 59, 61, 205, 300, 875], "perform": [45, 59, 61, 81, 97, 108, 118, 119, 120, 124, 130, 132, 135, 136, 137, 156, 159, 187, 188, 189, 190, 191, 192, 208, 211, 212, 214, 219, 229, 235, 238, 251, 264, 286, 300, 315, 516, 525, 527, 559, 579, 611, 625, 626, 636, 651, 652, 653, 765, 781, 803, 804, 806, 807, 812, 830, 840, 845, 854, 855, 875, 1099, 1164, 1178, 1179, 1189, 1204, 1205, 1206, 1250], "fast": [45, 59, 61, 149, 151, 300, 438, 595, 765, 875, 1014, 1147, 1250, 1259], "decompress": [45, 59, 61, 300, 875], "backward": [45, 61, 176, 208, 300, 345, 403, 440, 765, 798, 812, 875, 978, 1016, 1250], "guarante": [45, 61, 118, 119, 166, 193, 266, 300, 453, 765, 796, 846, 875, 1023, 1024, 1250], "deal": [45, 61, 205, 300, 311, 313, 409, 410, 424, 570, 651, 653, 682, 684, 711, 765, 875, 882, 883, 984, 985, 999, 1119, 1204, 1206, 1250], "older": [45, 61, 300, 875], "reader": [45, 61, 116, 118, 119, 124, 126, 130, 300, 778, 875], "higher": [45, 61, 228, 292, 300, 568, 586, 739, 765, 827, 869, 875, 1118, 1134, 1250], "mean": [45, 61, 118, 119, 124, 130, 132, 166, 176, 187, 188, 208, 215, 226, 235, 270, 279, 300, 406, 410, 424, 437, 440, 579, 582, 583, 584, 585, 586, 588, 589, 590, 603, 609, 618, 709, 710, 712, 713, 714, 752, 753, 755, 765, 798, 802, 803, 812, 816, 817, 830, 856, 875, 947, 981, 985, 999, 1012, 1016, 1023, 1131, 1157, 1162, 1171, 1250], "smaller": [45, 61, 172, 300, 796, 875, 1007, 1250], "disk": [45, 58, 59, 60, 61, 124, 300, 838, 875], "22": [45, 61, 147, 300, 387, 407, 410, 424, 426, 427, 581, 582, 583, 585, 588, 589, 590, 651, 765, 875, 878, 985, 999, 1002, 1129, 1204, 1250, 1259], "comput": [45, 61, 87, 89, 94, 172, 187, 208, 261, 266, 279, 292, 300, 307, 317, 318, 319, 320, 321, 322, 338, 339, 342, 355, 360, 361, 362, 365, 366, 367, 368, 369, 370, 371, 372, 373, 378, 429, 436, 475, 500, 501, 502, 505, 506, 507, 508, 518, 519, 520, 543, 559, 560, 566, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 600, 601, 602, 603, 607, 670, 671, 678, 683, 685, 689, 690, 691, 696, 698, 715, 742, 743, 755, 765, 786, 802, 809, 811, 812, 846, 853, 856, 869, 875, 880, 886, 887, 888, 889, 890, 891, 907, 908, 911, 926, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 949, 1005, 1007, 1011, 1053, 1076, 1077, 1078, 1081, 1082, 1083, 1084, 1094, 1095, 1096, 1104, 1113, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1154, 1155, 1156, 1157, 1160, 1224, 1225, 1232, 1238, 1250], "512": [45, 120, 205, 300, 564, 765, 1113, 1250], "page": [45, 61, 124, 130, 135, 137, 300, 765, 777, 875, 1250], "implement": [45, 108, 120, 156, 193, 211, 286, 300, 303, 453, 474, 527, 546, 548, 549, 550, 551, 565, 665, 730, 765, 863, 1024, 1099, 1142, 1145, 1250, 1254], "At": [45, 300], "moment": [45, 164, 300, 475, 603, 765, 1053, 1157, 1250], "write_t": [45, 300], "partition_col": [45, 121, 300], "write_to_dataset": [45, 300], "similar": [45, 152, 180, 208, 245, 300, 413, 416, 509, 559, 596, 755, 765, 796, 812, 836, 875, 988, 991, 1085, 1149, 1250], "spark": [45, 300], "partit": [45, 121, 122, 130, 133, 137, 138, 206, 224, 300], "we": [45, 117, 118, 119, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 166, 188, 208, 235, 270, 300, 406, 410, 424, 455, 490, 516, 525, 527, 579, 582, 583, 584, 585, 586, 588, 589, 590, 620, 633, 655, 709, 710, 712, 713, 727, 752, 753, 755, 765, 790, 803, 812, 816, 817, 830, 875, 885, 981, 985, 999, 1026, 1066, 1099, 1173, 1186, 1208, 1250], "use_pyarrow_write_to_dataset": [45, 300], "first": [45, 81, 118, 119, 123, 124, 126, 127, 130, 132, 136, 141, 142, 143, 144, 147, 157, 186, 188, 191, 194, 208, 210, 211, 221, 225, 226, 253, 258, 259, 265, 266, 270, 277, 284, 300, 325, 327, 335, 374, 377, 403, 406, 410, 427, 454, 462, 463, 479, 488, 490, 494, 495, 516, 526, 536, 563, 594, 606, 610, 618, 621, 622, 624, 634, 635, 693, 700, 718, 722, 755, 765, 786, 803, 806, 808, 812, 815, 825, 846, 853, 855, 861, 875, 878, 894, 904, 945, 947, 948, 978, 981, 985, 1002, 1025, 1035, 1036, 1055, 1064, 1066, 1070, 1071, 1092, 1098, 1143, 1171, 1173, 1174, 1175, 1177, 1187, 1188, 1221, 1229, 1250, 1259], "watermark": [45, 300], "partitioned_object": [45, 300], "calendar": [47, 48, 188, 208, 235, 270, 300, 394, 406, 410, 424, 428, 579, 582, 583, 584, 585, 586, 588, 589, 590, 709, 710, 712, 713, 714, 752, 753, 765, 803, 812, 830, 875, 965, 981, 985, 999, 1003], "time_unit": [48, 50, 382, 383, 390, 415, 427, 653, 709, 710, 711, 712, 713, 714, 720, 878, 953, 954, 961, 990, 1002, 1206], "time_zon": [48, 384, 386, 409, 653, 709, 710, 711, 712, 713, 878, 952, 955, 960, 984, 1206], "timezon": [48, 386, 878], "m": [48, 50, 68, 207, 300, 381, 382, 383, 389, 390, 413, 415, 416, 427, 618, 651, 652, 653, 657, 709, 710, 711, 712, 713, 714, 720, 811, 875, 878, 952, 953, 954, 960, 961, 988, 990, 991, 1002, 1171, 1204, 1205, 1206, 1210], "zone": [48, 381, 384, 409, 653, 709, 710, 711, 712, 713, 878, 952, 955, 984, 1206], "zoneinfo": [48, 878], "run": [48, 58, 59, 60, 61, 87, 88, 149, 151, 187, 190, 209, 211, 226, 242, 266, 275, 286, 300, 315, 374, 490, 525, 527, 577, 578, 626, 744, 765, 786, 787, 794, 796, 802, 805, 816, 817, 821, 826, 833, 838, 846, 852, 875, 878, 945, 1066, 1099, 1126, 1127, 1179, 1250, 1258, 1259], "available_timezon": [48, 878], "128": [49, 83, 1113, 1250], "bit": [49, 52, 53, 54, 55, 56, 57, 75, 76, 77, 78, 572, 610, 765, 1121, 1163, 1250], "experiment": [49, 51, 88, 138, 268, 269, 300, 374, 410, 455, 527, 582, 583, 584, 585, 586, 588, 589, 590, 765, 787, 848, 875, 925, 945, 985, 1026, 1117, 1250], "progress": [49, 51], "expect": [49, 51, 98, 101, 106, 118, 120, 132, 516, 527, 727, 765, 814, 816, 817, 875], "categori": [51, 72, 91, 258, 300, 353, 354, 375, 455, 567, 765, 921, 923, 946, 1026, 1117, 1250], "iter": [51, 87, 88, 89, 107, 120, 149, 151, 159, 167, 177, 187, 188, 189, 190, 191, 192, 204, 205, 206, 235, 236, 237, 238, 241, 242, 243, 249, 264, 265, 274, 275, 278, 279, 300, 374, 441, 559, 606, 683, 685, 691, 693, 694, 695, 703, 707, 732, 736, 744, 747, 749, 755, 761, 765, 781, 791, 799, 802, 803, 804, 805, 806, 807, 830, 832, 833, 835, 840, 845, 851, 852, 856, 875, 945, 1142, 1250, 1259], "32": [52, 55, 76, 83, 203, 235, 300, 544, 579, 598, 765, 830, 875, 949, 982, 1113, 1134, 1250], "sign": [54, 55, 56, 57, 406, 572, 660, 765, 878, 981, 1040, 1121, 1213, 1250], "maintain_ord": [58, 59, 60, 61, 159, 187, 190, 224, 226, 264, 266, 270, 280, 283, 285, 287, 288, 289, 290, 291, 292, 293, 300, 309, 344, 448, 451, 517, 527, 675, 765, 781, 787, 794, 796, 802, 805, 826, 838, 840, 845, 846, 857, 860, 862, 864, 865, 866, 867, 868, 869, 870, 875, 913, 1093, 1235, 1250], "type_coercion": [58, 59, 60, 61, 87, 88, 786, 787, 794, 796, 826, 838, 875], "predicate_pushdown": [58, 59, 60, 61, 87, 88, 786, 787, 794, 796, 816, 817, 826, 838, 875], "projection_pushdown": [58, 59, 60, 61, 87, 88, 786, 787, 794, 796, 816, 817, 826, 838, 875], "simplify_express": [58, 59, 60, 61, 87, 88, 786, 787, 794, 796, 826, 838, 875], "slice_pushdown": [58, 59, 60, 61, 87, 88, 786, 787, 794, 796, 816, 817, 826, 838, 875], "no_optim": [58, 59, 60, 61, 87, 88, 786, 787, 796, 816, 817, 826, 875], "evalu": [58, 59, 60, 61, 175, 177, 208, 300, 312, 326, 328, 329, 374, 441, 457, 480, 481, 516, 558, 682, 684, 688, 692, 709, 710, 712, 713, 715, 724, 725, 738, 741, 747, 752, 753, 755, 756, 765, 786, 799, 809, 811, 812, 875, 895, 897, 898, 945, 1056, 1057, 1241, 1250], "queri": [58, 59, 60, 61, 65, 67, 87, 88, 120, 121, 124, 132, 135, 136, 137, 174, 209, 225, 300, 525, 527, 624, 765, 786, 787, 794, 796, 808, 815, 826, 838, 854, 855, 858, 863, 875, 1013, 1099, 1177, 1250, 1258], "ram": [58, 59, 60, 61, 875], "maintain": [58, 59, 60, 61, 159, 264, 300, 344, 517, 594, 675, 765, 781, 840, 845, 875, 913, 1093, 1143, 1235, 1250], "slightli": [58, 59, 60, 61, 123, 875], "faster": [58, 59, 60, 61, 120, 174, 260, 268, 300, 315, 527, 676, 765, 875, 885, 1013, 1099, 1250], "coercion": [58, 59, 60, 61, 87, 88, 573, 765, 786, 787, 794, 796, 826, 838, 875], "optim": [58, 59, 60, 61, 87, 88, 130, 132, 135, 136, 137, 205, 209, 225, 229, 237, 266, 300, 786, 787, 794, 796, 816, 817, 826, 838, 846, 854, 855, 863, 875, 926, 1142, 1250], "pushdown": [58, 59, 60, 61, 87, 88, 786, 787, 794, 796, 816, 817, 826, 828, 838, 854, 855, 875, 1142, 1145, 1250], "project": [58, 59, 60, 61, 87, 88, 132, 134, 135, 136, 137, 315, 605, 606, 765, 786, 787, 794, 796, 816, 817, 826, 828, 834, 838, 875], "slice": [58, 59, 60, 61, 82, 87, 88, 172, 194, 206, 253, 300, 495, 513, 527, 535, 537, 580, 582, 583, 584, 585, 586, 588, 589, 590, 765, 786, 787, 794, 796, 816, 817, 826, 838, 875, 1007, 1025, 1071, 1089, 1128, 1130, 1131, 1132, 1133, 1134, 1136, 1137, 1138, 1221, 1250], "off": [58, 59, 60, 61, 87, 88, 118, 119, 132, 786, 787, 794, 796, 816, 817, 826, 875], "certain": [58, 59, 60, 61, 88, 96, 122, 133, 197, 198, 270, 300, 647, 648, 786, 787, 826, 875, 1250], "lf": [58, 59, 60, 61, 780, 781, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 808, 809, 810, 811, 813, 814, 815, 817, 818, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 831, 832, 834, 836, 838, 839, 840, 841, 842, 843, 845, 846, 848, 849, 850, 851, 853, 854, 855, 859, 875, 1258, 1259], "scan_csv": [58, 59, 60, 61, 118, 119, 875], "my_larger_than_ram_fil": [58, 59, 60, 61, 875], "ndjson": [60, 875], "data_pagesize_limit": [61, 875], "reduc": [61, 118, 119, 130, 132, 135, 136, 137, 287, 288, 290, 293, 598, 701, 718, 765, 864, 865, 867, 870, 875, 1101, 1116, 1151, 1220, 1250], "pressur": [61, 118, 119, 130, 132, 136, 137, 598, 765, 875, 1151, 1250], "improv": [61, 124, 135, 525, 765, 875], "speed": [61, 315, 527, 765, 875, 1259], "integer_list": 62, "float_list": 62, "wrap": [64, 114, 459, 765], "arbitrari": [64, 148, 878], "eager": [65, 66, 67, 68, 69, 70, 188, 226, 268, 300, 382, 384, 387, 390, 402, 403, 406, 407, 409, 410, 415, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 582, 583, 585, 588, 589, 590, 688, 692, 709, 710, 712, 713, 720, 724, 725, 738, 741, 747, 752, 753, 756, 764, 765, 803, 817, 875, 952, 953, 955, 958, 960, 961, 962, 968, 969, 971, 974, 976, 977, 978, 979, 981, 982, 983, 984, 985, 990, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1258], "against": [65, 118, 120, 490, 621, 875, 1066, 1174, 1258, 1259], "eagerli": [65, 516], "unset": [65, 147, 409, 516, 984], "init": [65, 154], "eager_execut": [65, 1258], "itself": [65, 146, 300, 303, 527, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 742, 743, 765, 814, 875, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1250, 1254, 1258], "impact": [65, 188, 191, 300, 803, 806, 875, 1258], "declar": [65, 107, 109, 110, 111, 113, 120, 127, 128, 136, 300, 875], "godfath": 65, "1972": 65, "6_000_000": 65, "134_821_952": 65, "dark": 65, "knight": 65, "2008": 65, "185_000_000": 65, "533_316_061": 65, "schindler": 65, "1993": 65, "22_000_000": 65, "96_067_179": 65, "pulp": 65, "fiction": 65, "1994": 65, "8_000_000": 65, "107_930_000": 65, "shawshank": 65, "redempt": 65, "25_000_000": 65, "28_341_469": 65, "release_year": 65, "budget": 65, "gross": 65, "imdb_scor": 65, "ctx": [65, 66, 67, 68, 69, 70], "film": 65, "1990": [65, 118], "BY": [65, 67], "desc": [65, 67], "AS": [65, 745, 1258], "decad": 65, "total_gross": 65, "n_film": 65, "2000": [65, 393, 402, 403, 406, 878, 964, 977, 978, 981, 986], "533316061": 65, "232338648": 65, "1970": [65, 138], "134821952": 65, "register_glob": [66, 68, 70, 1258], "register_mani": [66, 67, 70], "unregist": [66, 67, 68, 1258], "frame_data": [66, 69], "collect": [66, 67, 70, 84, 87, 88, 132, 133, 134, 138, 148, 150, 169, 209, 226, 255, 266, 267, 300, 435, 464, 527, 694, 716, 720, 747, 765, 780, 781, 783, 787, 789, 790, 791, 792, 795, 796, 797, 798, 799, 800, 801, 802, 803, 808, 810, 811, 812, 813, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 832, 834, 836, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 851, 853, 854, 855, 856, 857, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 875, 878, 1038, 1250, 1258, 1259], "global": [67, 72, 90, 91, 139, 148, 153, 260, 300, 574, 765, 922, 924, 1123, 1250, 1258], "scope": [67, 70, 154, 776, 878, 1258], "map": [67, 68, 73, 109, 110, 118, 119, 120, 121, 124, 125, 130, 131, 132, 135, 160, 170, 179, 205, 211, 230, 236, 237, 238, 256, 300, 310, 410, 424, 524, 525, 526, 527, 546, 559, 574, 678, 729, 765, 783, 793, 828, 875, 878, 947, 985, 999, 1098, 1099, 1123, 1238, 1250, 1258], "recent": [67, 141, 142, 143, 144, 560, 765, 1113, 1250, 1258], "df1": [67, 69, 70, 81, 89, 141, 142, 171, 174, 218, 261, 272, 300, 822, 875], "df2": [67, 69, 70, 81, 89, 141, 142, 171, 174, 261, 272, 300], "join": [67, 72, 81, 87, 88, 89, 91, 177, 208, 269, 300, 441, 458, 559, 765, 786, 787, 794, 796, 799, 812, 826, 838, 848, 853, 875], "named_fram": [68, 1258], "lf1": [68, 70], "o": [68, 124, 135, 351, 374, 617, 673, 765, 919, 945, 1170, 1199, 1234, 1250], "lf2": [68, 70, 875], "p": [68, 83, 225, 300, 563, 747, 765, 825, 875, 1174], "q": [68, 238, 300, 747], "r": [68, 118, 119, 132, 563, 613, 617, 618, 619, 620, 634, 765, 878, 1166, 1170, 1171, 1172, 1173, 1187], "lf3": [68, 875], "lf4": [68, 875], "either": [68, 73, 148, 203, 207, 208, 209, 212, 214, 219, 224, 235, 236, 251, 260, 300, 567, 574, 579, 651, 682, 691, 747, 765, 811, 812, 814, 830, 875, 878, 1117, 1123, 1204, 1250, 1259], "tbl1": [68, 70], "tbl2": [68, 70], "tbl3": 68, "tbl4": 68, "statement": [69, 755], "hello_world": 69, "baz": [69, 198, 199, 226, 267, 300, 620, 641, 643, 717, 726, 761, 810, 847, 875, 878, 1173, 1196], "hello_data": 69, "foo_bar": [69, 531, 534, 641, 727], "registr": [70, 777], "lifetim": [70, 154, 776], "context": [70, 72, 90, 91, 152, 222, 300, 309, 315, 441, 490, 525, 527, 535, 605, 606, 678, 686, 697, 699, 717, 720, 726, 730, 741, 744, 764, 765, 776, 777, 853, 875, 1066, 1238, 1250, 1258], "manag": [70, 72, 90, 91, 776, 777, 1258], "often": [70, 121, 154, 188, 189, 191, 192, 235, 300, 333, 486, 487, 573, 579, 765, 803, 804, 806, 807, 830, 875, 902, 1062, 1063], "want": [70, 88, 110, 174, 211, 222, 300, 441, 525, 527, 578, 582, 583, 584, 585, 586, 588, 589, 590, 611, 625, 636, 700, 709, 718, 738, 741, 756, 765, 787, 808, 815, 875, 878, 1013, 1099, 1127, 1164, 1178, 1189, 1250], "df0": [70, 218, 300, 822, 875], "exit": [70, 72, 90, 154, 1258], "construct": [70, 72, 90, 91, 107, 109, 110, 111, 112, 113, 120, 300, 447, 738, 741, 756, 761, 765, 790, 875, 922, 1250], "persist": 70, "through": [70, 108, 120, 761, 878, 1250], "tbl0": 70, "remain": [70, 118, 119, 132, 169, 172, 177, 300, 379, 380, 441, 489, 574, 642, 643, 765, 792, 799, 816, 817, 875, 950, 951, 1007, 1017, 1065, 1123, 1195, 1196, 1250], "text": [70, 120, 625, 626, 634, 635, 637, 745, 1178, 1179, 1190, 1259], "misc": 70, "testing1234": 70, "test1": 70, "test2": 70, "test3": 70, "disabl": [72, 90, 91, 205, 300, 786, 875], "cach": [72, 87, 88, 90, 91, 124, 132, 135, 137, 141, 142, 143, 144, 153, 574, 582, 583, 584, 585, 586, 588, 589, 590, 651, 652, 653, 657, 765, 776, 786, 787, 794, 796, 826, 838, 875, 922, 1123, 1204, 1205, 1206, 1210, 1250], "under": [72, 82, 83, 84, 85, 90, 91, 757, 758, 760, 761, 766, 767, 770, 772, 773, 774, 1242, 1244, 1246, 1251, 1255, 1256, 1257], "equal": [72, 91, 118, 119, 120, 132, 141, 142, 143, 144, 159, 181, 188, 191, 208, 218, 264, 300, 375, 424, 430, 431, 450, 477, 516, 555, 567, 573, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 631, 632, 660, 742, 743, 755, 761, 765, 781, 803, 806, 812, 822, 840, 845, 875, 946, 985, 1092, 1117, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1136, 1137, 1138, 1144, 1184, 1185, 1213, 1250, 1259], "concaten": [72, 89, 90, 91, 180, 225, 300, 563, 609, 694, 695, 765, 825, 875, 928, 1105, 1162, 1250], "introduc": [72, 91, 651, 652, 653, 1204, 1205, 1206], "overhead": [72, 91, 132, 135, 136, 137], "amount": [72, 91, 315, 527, 714, 765], "depend": [72, 86, 91, 120, 140, 330, 331, 482, 483, 527, 535, 567, 570, 714, 717, 720, 726, 765, 899, 900, 1058, 1059, 1117, 1119, 1250, 1259], "nest": [72, 114, 130, 172, 300, 777, 1007, 1250, 1258, 1259], "clear": [72, 90, 162, 300, 785, 875, 933, 1250], "outermost": 72, "s1": [72, 90, 91, 143, 144, 180, 300, 1006, 1052, 1060, 1092, 1232, 1241, 1250], "color": [72, 90, 91, 286, 346, 348, 349, 350, 678, 765, 863, 1238, 1250], "red": [72, 90, 91, 286, 678, 765, 863, 1238, 1250], "green": [72, 90, 91, 286, 678, 765, 863, 1238, 1250], "blue": [72, 90, 91, 346, 348, 349, 350, 678, 765, 1238, 1250], "concat": [72, 90, 91, 119, 928, 1105, 1250], "cat": [72, 90, 91, 375, 567, 610, 613, 656, 659, 672, 695, 760, 765, 878, 946, 1026, 1117, 1163, 1166, 1209, 1212, 1246, 1250], "decor": [72, 82, 83, 84, 85, 148, 150, 211, 300, 527, 765, 776, 777, 1099, 1250], "dure": [72, 118, 119, 132, 154, 174, 300, 1013, 1250], "afterward": [72, 755], "construct_categor": 72, "schemadict": [73, 107, 109, 110, 111, 112, 113, 118, 120, 121, 123, 129, 132, 300, 747, 816, 817, 858, 863, 875], "composit": [73, 147, 1259], "initi": [73, 154, 700, 704, 718, 755], "dai": [74, 188, 191, 206, 208, 235, 270, 300, 402, 403, 406, 407, 410, 413, 416, 417, 424, 426, 579, 582, 583, 584, 585, 586, 588, 589, 590, 708, 709, 710, 711, 712, 713, 714, 752, 753, 765, 803, 806, 812, 830, 875, 878, 977, 978, 981, 982, 985, 988, 991, 992, 999, 1001], "unsign": [75, 76, 77, 78, 572, 765, 878, 1040, 1121, 1250], "static": [79, 858, 863], "frametyp": [81, 1258], "joinstrategi": [81, 207, 300, 811, 875], "outer": [81, 89, 207, 269, 300, 811, 848, 875], "descend": [81, 159, 243, 249, 264, 300, 325, 341, 511, 570, 595, 605, 606, 678, 691, 765, 781, 835, 840, 845, 875, 894, 910, 1048, 1087, 1119, 1147, 1159, 1238, 1250], "fill": [81, 89, 161, 175, 176, 245, 246, 268, 300, 345, 365, 368, 439, 440, 446, 458, 582, 583, 585, 589, 596, 597, 628, 638, 719, 738, 741, 756, 765, 797, 798, 836, 837, 853, 875, 1015, 1016, 1029, 1110, 1130, 1131, 1133, 1136, 1137, 1138, 1149, 1150, 1181, 1191, 1250], "sort": [81, 82, 141, 142, 147, 159, 188, 189, 191, 192, 208, 218, 225, 226, 235, 243, 264, 270, 284, 294, 300, 325, 354, 441, 527, 559, 579, 582, 583, 584, 585, 586, 588, 589, 590, 595, 606, 678, 680, 691, 730, 765, 781, 794, 803, 804, 806, 807, 812, 822, 825, 826, 830, 835, 838, 845, 861, 871, 875, 878, 894, 923, 1048, 1147, 1235, 1238, 1250, 1259], "origin": [81, 118, 119, 132, 169, 177, 266, 300, 379, 380, 409, 410, 424, 441, 474, 489, 526, 546, 559, 572, 573, 574, 575, 612, 613, 618, 624, 689, 690, 765, 792, 799, 846, 875, 946, 950, 951, 984, 985, 999, 1017, 1065, 1098, 1117, 1123, 1124, 1165, 1166, 1171, 1177, 1250], "In": [81, 88, 120, 122, 133, 134, 137, 148, 150, 154, 172, 174, 188, 189, 191, 192, 211, 222, 235, 260, 300, 525, 527, 579, 709, 765, 787, 803, 804, 806, 807, 830, 875, 1007, 1013, 1120, 1250], "duplic": [81, 95, 200, 207, 208, 266, 269, 300, 310, 460, 474, 546, 567, 765, 811, 812, 846, 848, 875, 1032, 1117, 1250], "suitabl": [81, 89, 120, 146, 211, 300, 527, 594, 765, 1099, 1143, 1250, 1259], "get": [81, 88, 115, 125, 131, 138, 152, 159, 163, 170, 179, 183, 185, 188, 189, 191, 192, 194, 195, 200, 202, 203, 210, 213, 220, 221, 226, 235, 236, 240, 244, 248, 253, 264, 273, 284, 294, 300, 309, 323, 324, 325, 327, 334, 337, 344, 353, 365, 366, 367, 368, 369, 370, 371, 372, 373, 390, 442, 448, 454, 473, 476, 479, 492, 497, 517, 528, 529, 530, 535, 537, 541, 552, 553, 561, 562, 568, 577, 578, 579, 604, 608, 666, 667, 675, 679, 717, 722, 726, 730, 731, 732, 733, 734, 735, 736, 746, 750, 754, 765, 781, 786, 787, 788, 793, 800, 803, 804, 806, 807, 808, 813, 815, 830, 831, 839, 843, 845, 850, 861, 871, 875, 892, 893, 894, 895, 896, 903, 906, 913, 921, 928, 937, 938, 939, 940, 941, 942, 943, 944, 961, 1004, 1018, 1022, 1025, 1030, 1032, 1050, 1055, 1068, 1073, 1093, 1100, 1102, 1103, 1105, 1107, 1108, 1109, 1114, 1115, 1118, 1126, 1127, 1158, 1161, 1221, 1226, 1227, 1235, 1239, 1240, 1250], "speedup": [81, 205, 211, 300, 527, 765, 1099, 1250], "receiv": [81, 120, 132, 211, 225, 286, 300, 527, 563, 765, 825, 875, 1259], "now": [81, 235, 300, 424, 830, 875, 985, 999, 1206], "One": [81, 166, 222, 226, 300, 312, 558, 687, 697, 717, 723, 726, 733, 734, 737, 745, 765, 878, 947, 1250], "whose": [81, 208, 226, 300, 435, 716, 765, 812, 875, 878], "uniqu": [81, 145, 146, 147, 150, 158, 202, 207, 222, 226, 238, 291, 300, 316, 327, 375, 473, 545, 567, 651, 652, 653, 657, 676, 678, 687, 737, 765, 780, 811, 868, 875, 896, 946, 947, 1050, 1106, 1117, 1204, 1205, 1206, 1210, 1236, 1238, 1250], "post": 81, "constrain": [81, 169, 300, 792, 875], "newli": 81, "boolean": [81, 159, 177, 180, 209, 249, 264, 300, 311, 312, 313, 328, 329, 332, 346, 349, 350, 393, 441, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 480, 481, 485, 556, 558, 561, 562, 606, 622, 680, 681, 691, 692, 747, 755, 765, 781, 785, 799, 814, 840, 845, 875, 878, 882, 883, 895, 897, 898, 901, 914, 916, 964, 1017, 1030, 1031, 1032, 1034, 1035, 1036, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1050, 1056, 1057, 1061, 1111, 1114, 1115, 1145, 1163, 1231, 1241, 1250], "know": [81, 120, 226, 300, 516, 525, 765, 1240, 1250], "2022": [81, 160, 166, 186, 300, 383, 410, 424, 651, 709, 710, 712, 713, 714, 720, 783, 875, 878, 954, 965, 985, 999, 1204], "df3": [81, 300], "set_tbl_format": 81, "09": [81, 118, 148, 235, 300, 383, 402, 403, 579, 654, 709, 753, 765, 830, 875, 878, 1207], "02": [81, 160, 186, 188, 235, 270, 300, 382, 383, 390, 402, 403, 406, 409, 415, 418, 421, 423, 427, 579, 582, 583, 585, 588, 589, 590, 591, 651, 652, 653, 657, 709, 710, 712, 713, 714, 765, 783, 803, 830, 875, 878, 953, 954, 956, 957, 961, 962, 968, 969, 974, 977, 978, 979, 984, 985, 989, 990, 993, 996, 998, 999, 1092, 1204, 1205, 1206, 1210], "03": [81, 114, 118, 160, 188, 235, 270, 300, 382, 383, 384, 390, 402, 403, 406, 409, 410, 413, 415, 416, 417, 418, 421, 423, 424, 427, 579, 582, 583, 585, 588, 589, 590, 652, 657, 709, 710, 712, 713, 714, 765, 783, 803, 830, 875, 953, 954, 955, 961, 962, 968, 969, 977, 978, 979, 984, 985, 988, 990, 991, 992, 993, 996, 998, 1205, 1210], "af1": 81, "af2": 81, "af3": 81, "keep": [81, 118, 119, 132, 266, 269, 270, 300, 474, 526, 539, 547, 574, 693, 765, 846, 848, 875, 1098, 1123, 1250], "easili": [81, 120, 241, 274, 279, 300, 747, 832, 851, 856, 875], "dot": [81, 765, 838, 875, 1250], "product": [81, 164, 207, 300, 367, 372, 378, 765, 796, 811, 875, 939, 943, 949, 1250], "fill_nul": [81, 175, 300, 765, 797, 853, 875, 1250], "sum_horizont": [81, 251, 300, 748], "167": 81, "47": 81, "callabl": [82, 83, 84, 85, 132, 157, 180, 211, 225, 281, 286, 300, 315, 516, 523, 524, 525, 527, 547, 563, 580, 581, 686, 700, 701, 704, 705, 718, 728, 729, 730, 740, 765, 816, 817, 825, 858, 863, 875, 885, 1092, 1099, 1128, 1129, 1250], "by_first_letter_of_column_nam": 82, "f": [82, 119, 186, 206, 255, 265, 268, 300, 308, 516, 598, 617, 651, 653, 686, 694, 728, 765, 1092, 1170, 1204, 1206], "fromkei": [82, 84], "by_first_letter_of_column_valu": 82, "starts_with": [82, 346, 349, 610, 616, 878, 1169], "to_seri": [82, 183, 300, 651, 692, 741, 1204], "xy": [82, 84], "yz": [82, 84], "b1": [82, 84], "b2": [82, 84], "pow_n": 83, "powersofn": 83, "next": [83, 188, 208, 235, 270, 300, 345, 406, 410, 424, 570, 579, 582, 583, 584, 585, 586, 588, 589, 590, 709, 710, 712, 713, 752, 753, 765, 803, 812, 830, 875, 981, 985, 999, 1119, 1250], "ceil": [83, 765, 1250], "previou": [83, 154, 548, 549, 560, 565, 663, 665, 765, 1113, 1250], "floor": [83, 765, 1250], "nearest": [83, 208, 228, 292, 300, 356, 444, 458, 568, 586, 739, 765, 812, 827, 869, 875, 927, 1019, 1029, 1118, 1134, 1250], "24": [83, 152, 172, 188, 208, 211, 235, 270, 300, 367, 374, 387, 406, 407, 410, 418, 424, 426, 544, 579, 582, 583, 584, 585, 586, 588, 589, 590, 709, 710, 712, 713, 714, 752, 753, 765, 803, 812, 830, 875, 945, 981, 985, 993, 999, 1052, 1250], "001": [83, 660, 714, 994, 995, 997, 1213], "next_pow2": 83, "prev_pow2": 83, "nearest_pow2": 83, "split_by_column_dtyp": 84, "collect_al": [84, 88, 786, 787, 875], "31": [85, 148, 383, 387, 402, 406, 417, 651, 708, 711, 720, 727, 878, 952, 954, 958, 977, 992, 1204, 1259], "42": [85, 193, 218, 235, 300, 579, 765, 822, 830, 875, 1024, 1250], "961": 85, "1764": 85, "4160": 85, "build": [86, 108, 878, 1259], "wa": [86, 141, 224, 278, 300, 574, 636, 765, 1123, 1189, 1250], "compil": [86, 330, 331, 482, 483, 899, 900, 1058, 1059], "gate": 86, "info": [86, 122, 133, 134, 140, 300, 303, 1250, 1254], "host": [86, 118, 124, 126, 135, 137], "git": 86, "lazy_fram": [87, 88], "comm_subplan_elim": [87, 88, 786, 787, 794, 796, 826, 838, 875], "comm_subexpr_elim": [87, 88, 786, 787, 794, 796, 826, 838, 875], "graph": [87, 209, 300, 786, 809, 853, 875], "parallel": [87, 89, 116, 121, 130, 137, 188, 191, 208, 209, 225, 242, 275, 300, 374, 490, 678, 755, 765, 777, 803, 806, 811, 812, 833, 852, 863, 875, 945, 1066, 1238, 1250], "threadpool": [87, 152], "Will": [87, 88, 786, 787, 794, 796, 826, 838, 875, 1250], "try": [87, 88, 102, 104, 118, 119, 124, 130, 132, 135, 137, 786, 787, 794, 796, 826, 838, 875], "branch": [87, 88, 786, 787, 794, 796, 826, 838, 875], "subplan": [87, 88, 786, 787, 794, 796, 826, 838, 875], "union": [87, 88, 89, 508, 786, 787, 794, 796, 826, 838, 875, 878, 1084], "subexpress": [87, 88, 786, 787, 794, 796, 826, 838, 875], "reus": [87, 88, 786, 787, 794, 796, 826, 838, 875], "part": [87, 88, 107, 123, 148, 619, 642, 643, 787, 794, 796, 826, 838, 853, 875, 1172, 1195, 1196], "fashion": [87, 88, 207, 300, 787, 794, 796, 826, 838, 875], "alpha": [87, 88, 315, 432, 433, 434, 765, 786, 787, 794, 796, 826, 838, 875, 1008, 1009, 1010, 1250], "gevent": [88, 140, 787, 875], "await": [88, 787, 875], "_geventdataframeresult": [88, 787, 875], "asynchron": [88, 787, 875], "them": [88, 107, 109, 110, 111, 113, 121, 127, 128, 129, 130, 132, 136, 137, 173, 174, 188, 208, 218, 235, 270, 300, 336, 459, 496, 552, 553, 559, 579, 694, 709, 710, 712, 713, 752, 753, 765, 787, 795, 803, 812, 822, 830, 875, 878, 905, 1013, 1072, 1108, 1109, 1250], "schedul": [88, 787, 875], "insid": [88, 787, 875], "almost": [88, 211, 286, 300, 651, 652, 653, 787, 875, 1099, 1204, 1205, 1206, 1250], "instantli": [88, 787, 875], "asyncio": [88, 787, 875], "releas": [88, 315, 527, 765, 787, 875, 1259], "greenlet": [88, 787, 875], "task": [88, 787, 875], "wrapper": [88, 787, 875], "event": [88, 787, 875], "asyncresult": [88, 787, 875], "timeout": [88, 787, 875], "break": [88, 138, 268, 269, 300, 315, 374, 375, 410, 455, 582, 583, 584, 585, 586, 588, 589, 590, 765, 787, 848, 875, 925, 945, 946, 985, 1026, 1117, 1250], "collect_async": [88, 875], "set_except": [88, 787, 875], "futur": [88, 156, 166, 212, 214, 219, 251, 300, 709, 787, 875, 1240, 1250], "rerais": [88, 787, 875], "polarstyp": 89, "concatmethod": 89, "vertic": [89, 174, 212, 214, 219, 251, 268, 272, 300, 609, 1162], "rechunk": [89, 107, 112, 118, 119, 124, 126, 130, 132, 135, 136, 137, 174, 300, 765, 928, 1013, 1105, 1250], "combin": [89, 102, 104, 177, 188, 193, 208, 235, 270, 300, 312, 326, 424, 558, 574, 579, 629, 639, 645, 646, 647, 648, 709, 710, 712, 713, 752, 753, 755, 765, 803, 812, 830, 838, 875, 985, 999, 1123, 1182, 1192, 1198, 1199, 1200, 1201, 1250], "vertical_relax": 89, "diagon": [89, 265, 300], "diagonal_relax": 89, "vstack": [89, 174, 300], "addition": [89, 236, 300], "coerc": [89, 573, 765], "supertyp": [89, 176, 300, 314, 765, 798, 875], "mismatch": [89, 102, 128, 136, 141, 143], "find": [89, 178, 184, 300, 594, 610, 611, 765, 1143, 1164, 1250], "miss": [89, 118, 119, 132, 175, 300, 345, 432, 433, 434, 446, 468, 470, 516, 765, 797, 875, 1008, 1009, 1010, 1240, 1250], "stack": [89, 196, 272, 300], "don": [89, 188, 211, 266, 268, 300, 315, 374, 490, 527, 559, 765, 803, 846, 875, 878, 945, 1006, 1066, 1099, 1144, 1240, 1250], "auto": [89, 107, 109, 110, 111, 113, 127, 128, 130, 136, 137, 265, 300, 424, 875, 985, 999, 1259], "logic": [89, 211, 286, 300, 303, 311, 313, 527, 672, 682, 684, 730, 765, 790, 811, 834, 863, 875, 882, 883, 1099, 1233, 1250, 1254], "align_fram": 89, "pattern": [89, 118, 119, 132, 135, 136, 137, 205, 300, 533, 610, 611, 612, 613, 618, 619, 620, 621, 634, 635, 636, 863, 878, 1142, 1145, 1163, 1164, 1165, 1166, 1171, 1172, 1173, 1174, 1187, 1188, 1189, 1250], "collis": 89, "need": [89, 114, 118, 119, 121, 188, 189, 191, 192, 235, 238, 247, 260, 300, 516, 579, 598, 654, 714, 738, 741, 756, 765, 803, 804, 806, 807, 830, 875, 1151, 1207, 1250, 1259], "sure": [89, 107, 112, 118, 119, 124, 126, 130, 188, 189, 191, 192, 229, 235, 300, 579, 765, 803, 804, 806, 807, 830, 875], "contigu": [89, 107, 112, 118, 119, 124, 126, 130, 132, 135, 136, 137, 229, 300], "relev": 89, "df_h1": 89, "l1": 89, "l2": 89, "df_h2": 89, "r1": 89, "r2": 89, "r3": 89, "df_d1": 89, "df_d2": 89, "df_a1": 89, "df_a2": 89, "df_a3": 89, "enable_string_cach": 90, "stringcach": [90, 91, 207, 300, 777, 922, 924], "reliabl": [90, 91], "wai": [90, 91, 107, 109, 110, 111, 113, 127, 128, 136, 187, 206, 225, 249, 279, 300, 559, 563, 606, 618, 697, 761, 765, 802, 825, 840, 856, 863, 875, 1171], "until": [90, 209, 300, 631, 632, 660, 1184, 1185, 1213], "deprec": [91, 92, 157, 178, 181, 188, 189, 190, 191, 192, 197, 212, 214, 219, 232, 246, 251, 254, 276, 281, 300, 315, 358, 359, 369, 370, 371, 372, 373, 386, 388, 392, 396, 398, 400, 405, 409, 412, 424, 427, 462, 466, 469, 474, 486, 499, 514, 523, 524, 526, 565, 580, 597, 612, 623, 627, 628, 629, 630, 633, 638, 639, 645, 651, 653, 665, 668, 669, 680, 686, 697, 706, 707, 709, 711, 728, 765, 803, 804, 805, 806, 807, 816, 837, 844, 854, 858, 875, 885, 931, 932, 941, 942, 943, 944, 946, 957, 959, 963, 970, 972, 975, 980, 984, 985, 987, 999, 1002, 1031, 1035, 1037, 1040, 1041, 1047, 1049, 1051, 1062, 1075, 1090, 1098, 1117, 1128, 1144, 1146, 1150, 1165, 1176, 1180, 1181, 1182, 1183, 1186, 1191, 1192, 1198, 1204, 1206, 1222, 1223, 1240, 1250], "sinc": [91, 122, 133, 157, 159, 178, 181, 188, 189, 190, 191, 192, 197, 212, 214, 219, 232, 246, 251, 254, 264, 276, 281, 300, 315, 358, 359, 369, 370, 371, 372, 373, 386, 388, 390, 392, 396, 398, 400, 405, 409, 412, 424, 427, 462, 466, 469, 474, 486, 499, 514, 523, 524, 526, 565, 580, 597, 612, 623, 627, 628, 629, 630, 633, 638, 639, 645, 651, 653, 665, 668, 669, 680, 686, 706, 707, 709, 711, 720, 728, 765, 781, 803, 804, 805, 806, 807, 816, 837, 840, 844, 845, 854, 858, 875, 885, 931, 932, 941, 942, 943, 944, 946, 957, 959, 961, 963, 970, 972, 975, 980, 984, 985, 987, 999, 1002, 1031, 1035, 1037, 1040, 1041, 1047, 1049, 1051, 1062, 1075, 1090, 1098, 1117, 1128, 1144, 1146, 1150, 1165, 1176, 1180, 1181, 1182, 1183, 1186, 1191, 1192, 1198, 1204, 1206, 1222, 1223, 1240, 1250], "19": [91, 123, 140, 157, 178, 181, 188, 189, 190, 191, 192, 197, 208, 212, 214, 219, 232, 235, 246, 251, 254, 281, 300, 315, 358, 359, 369, 370, 371, 372, 373, 388, 392, 396, 398, 400, 405, 409, 410, 412, 424, 462, 466, 469, 474, 486, 499, 514, 523, 524, 526, 565, 579, 580, 582, 583, 585, 597, 612, 623, 627, 628, 629, 630, 633, 638, 639, 645, 651, 653, 654, 665, 668, 669, 686, 706, 707, 709, 711, 728, 765, 803, 804, 805, 806, 807, 812, 816, 830, 837, 844, 858, 875, 885, 931, 932, 941, 942, 943, 944, 946, 959, 963, 970, 972, 975, 980, 984, 985, 987, 999, 1031, 1035, 1037, 1040, 1041, 1047, 1049, 1051, 1062, 1075, 1090, 1098, 1117, 1128, 1144, 1146, 1150, 1165, 1176, 1180, 1181, 1182, 1183, 1186, 1191, 1192, 1198, 1204, 1206, 1207, 1222, 1223, 1240, 1250], "longer": [91, 118, 132], "accept": [91, 117, 118, 119, 122, 124, 126, 130, 159, 167, 187, 190, 241, 242, 245, 249, 264, 274, 275, 279, 300, 308, 357, 435, 459, 526, 559, 574, 606, 681, 683, 685, 691, 693, 694, 695, 703, 707, 716, 732, 736, 744, 747, 749, 755, 765, 781, 791, 802, 805, 832, 833, 836, 840, 845, 851, 852, 856, 875, 930, 1030, 1123, 1149, 1250], "disable_string_cach": 91, "finish": [94, 174, 300, 1013, 1250], "least": [98, 148, 560, 618, 620, 765, 1113, 1171, 1173, 1250], "unexpect": [100, 300, 525, 527, 765, 1099, 1250], "caus": [100, 108, 118, 119, 132, 141, 156, 174, 300, 525, 765, 1013, 1250], "panic": 100, "incompat": 104, "arrai": [107, 111, 118, 119, 130, 172, 255, 260, 261, 300, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 358, 359, 365, 366, 367, 368, 369, 370, 371, 372, 373, 484, 500, 501, 502, 503, 512, 515, 519, 525, 582, 583, 585, 589, 595, 715, 765, 875, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 931, 932, 937, 938, 939, 940, 941, 942, 943, 944, 949, 1007, 1060, 1076, 1077, 1078, 1079, 1087, 1088, 1091, 1095, 1096, 1130, 1131, 1133, 1136, 1137, 1138, 1147, 1152, 1226, 1231, 1232, 1240, 1250], "chunkedarrai": [107, 221, 300], "recordbatch": [107, 206, 300], "schemadefinit": [107, 109, 110, 111, 113, 127, 128, 136, 300, 875], "schema_overrid": [107, 109, 110, 111, 112, 113, 120, 121, 123, 127, 128, 129, 206, 260, 300, 875, 878, 913], "copi": [107, 108, 156, 161, 162, 206, 255, 261, 274, 300, 438, 765, 784, 785, 851, 875, 929, 933, 1014, 1226, 1231, 1232, 1250], "closest": 107, "pair": [107, 109, 110, 111, 113, 127, 128, 136, 147, 230, 300, 828, 875, 1259], "sever": [107, 109, 110, 111, 113, 127, 128, 136, 300, 875, 1259], "form": [107, 109, 110, 111, 113, 127, 128, 136, 205, 237, 268, 300, 560, 765, 875, 1113, 1250], "dimens": [107, 109, 111, 113, 127, 128, 136, 300, 575, 765, 875, 1124, 1250], "supportsinterchang": 108, "allow_copi": [108, 156], "interchang": [108, 156], "__dataframe__": 108, "convers": [108, 123, 156, 205, 206, 237, 238, 257, 260, 261, 300, 651, 652, 653, 657, 777, 1023, 1204, 1205, 1206, 1210, 1230, 1231, 1232, 1250], "detail": [108, 120, 121, 141, 143, 156, 300, 875, 1259], "latest": [108, 122, 133, 156, 409, 410, 424, 446, 536, 651, 653, 711, 765, 984, 985, 999, 1204, 1206], "from_panda": 108, "from_arrow": 108, "effici": [108, 120, 123, 204, 206, 300, 525, 765], "convert": [108, 112, 122, 123, 129, 133, 156, 256, 257, 258, 259, 260, 263, 300, 343, 376, 384, 413, 416, 515, 516, 524, 525, 547, 569, 620, 633, 651, 652, 653, 654, 655, 657, 662, 765, 875, 912, 924, 955, 988, 991, 1091, 1092, 1173, 1186, 1204, 1205, 1206, 1207, 1208, 1210, 1216, 1219, 1229, 1230, 1231, 1232, 1240, 1250], "panda": [108, 112, 140, 188, 261, 300, 402, 403, 672, 765, 803, 875, 977, 978, 1232, 1233, 1250], "pd": [108, 112, 672, 765, 1232, 1233, 1250], "df_pd": 108, "dfi": [108, 156], "clone": [109, 110, 111, 112, 113, 161, 260, 261, 300, 784, 875, 929, 1230, 1231, 1232, 1240, 1250], "dimension": [109, 111, 113, 260, 300, 875, 1250], "infer_schema_length": [110, 113, 118, 119, 123, 127, 132, 136, 300, 622, 623, 875, 1175, 1176], "NOT": [110, 204, 300, 516, 534, 1258], "typic": [110, 120, 137, 211, 300, 389, 878, 960, 1099, 1250], "clearer": 110, "partial": [110, 118, 132, 300, 875], "mani": [110, 113, 120, 121, 174, 300, 622, 623, 636, 1013, 1175, 1176, 1189, 1250], "scan": [110, 113, 118, 119, 132, 133, 134, 135, 136, 137, 138, 188, 189, 191, 192, 235, 300, 579, 765, 796, 803, 804, 806, 807, 808, 815, 830, 875], "slow": [110, 113, 118, 119, 132, 315, 374, 527, 581, 765, 863, 945, 1129, 1250], "present": [110, 148, 464, 526, 647, 648, 765, 796, 875, 1098, 1240, 1250], "np": [111, 177, 260, 300, 448, 668, 765, 799, 875, 1020, 1034, 1039, 1043, 1044, 1142, 1143, 1222, 1250], "ndarrai": [111, 177, 260, 300, 448, 668, 765, 799, 875, 1020, 1142, 1143, 1146, 1222, 1231, 1250], "numpi": [111, 140, 164, 205, 237, 238, 257, 260, 261, 300, 525, 552, 553, 581, 765, 875, 1034, 1039, 1043, 1044, 1108, 1109, 1129, 1231, 1232, 1240, 1250], "columnar": [111, 113, 205, 237, 300], "interpret": [111, 113, 118, 119, 132, 300, 875], "yield": [111, 113, 118, 119, 120, 132, 172, 174, 265, 300, 525, 559, 765, 875, 1007, 1013, 1250], "conclus": [111, 113, 300, 875], "nan_to_nul": [112, 300, 875, 1250], "include_index": 112, "instal": [112, 118, 119, 121, 124, 126, 164, 260, 261, 300, 838, 875, 1232, 1250], "nan": [112, 148, 156, 175, 261, 300, 379, 380, 430, 431, 439, 450, 452, 458, 468, 470, 471, 472, 477, 522, 528, 541, 552, 553, 554, 555, 581, 674, 696, 765, 797, 875, 887, 891, 950, 951, 1015, 1043, 1044, 1108, 1109, 1129, 1231, 1232, 1250, 1259], "pd_df": 112, "pd_seri": 112, "tbl": [114, 116, 119], "reconstruct": 114, "repr": [114, 148, 150], "trim": 114, "whitespac": [114, 629, 639, 645, 646, 647, 648, 1182, 1192, 1198, 1199, 1200, 1201], "prompt": 114, "extract": [114, 385, 387, 388, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 404, 405, 407, 408, 411, 412, 414, 417, 418, 419, 420, 421, 422, 423, 425, 426, 428, 563, 619, 620, 622, 623, 624, 642, 765, 956, 957, 958, 959, 962, 963, 965, 969, 970, 971, 972, 974, 975, 976, 979, 980, 982, 983, 986, 987, 989, 992, 993, 994, 995, 996, 997, 998, 1000, 1001, 1003, 1172, 1173, 1175, 1176, 1177], "to_init_repr": [114, 300, 1250], "truncat": [114, 118, 132, 186, 188, 191, 205, 237, 238, 257, 300, 803, 806, 826, 875], "identifi": [114, 217, 224, 266, 278, 300, 821, 846, 875], "compound": [114, 238, 300, 878], "neither": [114, 123, 129, 239, 300, 516, 1092], "source_ac": 114, "source_cha": 114, "ident": [114, 161, 162, 300, 413, 577, 578, 765, 784, 785, 875, 929, 933, 988, 1126, 1127, 1250], "timestamp": [114, 188, 191, 300, 409, 410, 424, 720, 803, 806, 875, 984, 985, 999], "tor_id": 114, "nnel_id": 114, "\u03bc": [114, 148, 188, 205, 208, 235, 237, 238, 257, 270, 300, 381, 382, 383, 384, 385, 386, 389, 391, 395, 397, 399, 402, 403, 404, 406, 409, 410, 411, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 579, 582, 583, 585, 588, 589, 590, 651, 653, 712, 713, 714, 720, 765, 803, 812, 830, 875, 878, 952, 953, 954, 955, 956, 957, 960, 961, 962, 968, 969, 974, 977, 978, 979, 981, 984, 985, 989, 990, 992, 993, 994, 995, 996, 997, 998, 999, 1002, 1204, 1206], "asia": [114, 878, 956, 957, 989], "tokyo": [114, 878], "123456780": 114, "9876543210": 114, "56": [114, 670, 765], "59": [114, 147, 383, 399, 411, 711, 751, 752, 753, 878, 954, 974, 986], "663053": 114, "jst": [114, 878], "803065983": 114, "2055938745": 114, "38": [114, 148], "18": [114, 218, 235, 300, 368, 410, 424, 427, 458, 474, 546, 579, 583, 585, 765, 822, 826, 830, 875, 878, 1002, 1206], "050545": 114, "source_actor_id": 114, "source_channel_id": 114, "to_list": [114, 235, 300, 1163, 1174, 1250], "uint32": [115, 140, 160, 172, 277, 300, 325, 330, 331, 363, 448, 451, 478, 482, 483, 498, 573, 612, 613, 625, 626, 668, 672, 697, 724, 765, 783, 855, 875, 878, 895, 899, 900, 920, 1006, 1007, 1040, 1058, 1059, 1074, 1144, 1165, 1166, 1178, 1179, 1233, 1250], "regular": [115, 205, 236, 237, 270, 277, 300, 435, 610, 612, 613, 618, 619, 620, 621, 634, 635, 716, 765, 855, 875, 878, 1163, 1165, 1166, 1171, 1172, 1173, 1174, 1187, 1188], "uint64": [115, 193, 277, 300, 330, 331, 453, 482, 483, 572, 765, 855, 875, 899, 900, 1024, 1058, 1059, 1121, 1250], "bigidx": 115, "read": [116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 174, 300, 447, 525, 755, 765, 790, 796, 875, 1013, 1250], "over": [116, 118, 119, 120, 122, 132, 148, 157, 174, 204, 205, 206, 211, 236, 237, 238, 265, 278, 281, 286, 300, 315, 374, 440, 524, 525, 527, 535, 537, 538, 539, 547, 570, 582, 583, 584, 585, 586, 588, 589, 590, 686, 700, 701, 704, 705, 718, 728, 729, 730, 740, 765, 858, 863, 878, 885, 945, 1013, 1099, 1130, 1131, 1133, 1137, 1250], "fetch": [116, 132, 209, 300, 784, 786, 808, 815, 875], "ideal": 116, "read_csv_batch": [116, 778], "tpch": [116, 119], "tables_scale_100": [116, 119], "lineitem": [116, 119, 121], "try_parse_d": [116, 118, 119, 132], "n_row": [117, 118, 119, 124, 126, 130, 132, 135, 136, 137, 206, 300, 796, 875], "handler": [117, 118, 119, 123, 124, 125, 126, 127, 128, 129, 130, 131, 790, 875], "builtin": [117, 118, 119, 123, 124, 125, 126, 127, 128, 129, 130, 131, 790, 875], "stop": [117, 118, 119, 124, 126, 130, 132, 135, 136, 137, 582, 583, 585, 588, 589, 590, 765, 953, 955, 961, 962, 969, 971, 974, 979, 985, 990], "textio": 118, "has_head": [118, 119, 123, 132], "new_column": [118, 119, 123, 132, 231, 232, 300], "comment_prefix": [118, 119, 132], "skip_row": [118, 119, 132], "missing_utf8_is_empty_str": [118, 119, 132], "ignore_error": [118, 119, 128, 132, 136], "n_thread": [118, 119], "8192": 118, "csvencod": [118, 119, 132], "low_memori": [118, 119, 130, 132, 136, 137], "skip_rows_after_head": [118, 119, 132], "row_index_nam": [118, 119, 124, 126, 130, 132, 135, 136, 137], "row_index_offset": [118, 119, 124, 126, 130, 132, 135, 136, 137], "sample_s": [118, 119], "eol_char": [118, 119, 132], "raise_if_empti": [118, 119, 123, 129, 132], "truncate_ragged_lin": [118, 132], "fsspec": [118, 119, 124, 126, 130, 133, 134, 135, 137, 140], "remot": [118, 119, 124, 126], "autogener": [118, 119, 132], "column_x": [118, 119, 132], "enumer": [118, 119, 132, 206, 300], "shorter": [118, 119, 132, 516, 724], "comment": [118, 119, 132], "instanc": [118, 119, 130, 132, 137, 148, 150, 154, 160, 174, 180, 300, 352, 536, 582, 583, 584, 585, 586, 588, 589, 590, 700, 704, 718, 761, 765, 783, 817, 854, 855, 875, 920, 1013, 1250], "escap": [118, 119, 121, 132], "complet": [118, 120, 132, 1231, 1250], "wherea": [118, 120, 132, 235, 300, 410, 424, 552, 553, 579, 765, 808, 815, 830, 875, 985, 999, 1108, 1109, 1250], "would": [118, 119, 132, 325, 335, 494, 525, 527, 535, 570, 691, 765, 894, 904, 1070, 1119, 1231, 1250], "prefer": [118, 119, 122, 132, 151, 174, 205, 211, 236, 237, 286, 300, 435, 527, 765, 875, 1013, 1099, 1250, 1259], "treat": [118, 119, 132, 610, 613, 621, 634, 635, 755, 1163, 1166, 1174, 1187, 1188], "10000": [118, 206, 300], "might": [118, 119, 132, 152, 159, 260, 264, 300, 315, 527, 676, 765, 781, 840, 845, 875, 1232, 1250], "issu": [118, 119, 123, 132, 367, 368, 666, 765, 939, 940, 1220, 1250], "iso8601": [118, 119, 132], "succe": [118, 119, 132], "cpu": [118, 119], "system": [118, 119], "wrongli": 118, "done": [118, 119, 132, 138, 154, 158, 160, 208, 300, 314, 316, 352, 559, 765, 780, 783, 812, 875, 920, 1250], "buffer": [118, 119, 120, 172, 205, 300, 1007, 1250], "modifi": [118, 119, 132, 152, 154, 174, 196, 204, 205, 272, 300, 326, 409, 427, 610, 618, 619, 621, 634, 765, 884, 984, 1002, 1013, 1163, 1171, 1172, 1174, 1187, 1209, 1211, 1212, 1250], "upper": [118, 119, 120, 172, 188, 191, 300, 357, 358, 455, 459, 516, 677, 688, 709, 710, 712, 713, 752, 753, 765, 803, 806, 875, 930, 931, 1007, 1026, 1030, 1097, 1237, 1250], "bound": [118, 119, 172, 188, 191, 300, 335, 357, 358, 359, 459, 493, 494, 514, 516, 521, 677, 688, 709, 710, 712, 713, 752, 753, 765, 803, 806, 875, 904, 930, 931, 932, 1007, 1030, 1069, 1070, 1090, 1097, 1237, 1250], "lossi": [118, 119, 132], "decod": [118, 119, 622], "expens": [118, 119, 130, 132, 136, 137, 149, 151, 188, 189, 191, 192, 205, 211, 235, 236, 237, 238, 265, 266, 300, 315, 527, 579, 765, 803, 804, 806, 807, 830, 846, 875, 1013, 1099, 1250, 1259], "aggreg": [118, 119, 130, 180, 187, 188, 190, 191, 212, 214, 216, 219, 222, 226, 227, 228, 235, 250, 251, 268, 271, 279, 280, 283, 285, 300, 309, 441, 456, 523, 525, 527, 559, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 682, 683, 684, 685, 700, 701, 702, 703, 704, 705, 706, 707, 718, 723, 731, 732, 735, 736, 740, 748, 749, 765, 803, 804, 806, 807, 817, 818, 819, 820, 823, 824, 827, 830, 841, 842, 849, 856, 857, 860, 862, 875, 1027, 1128, 1129, 1130, 1131, 1133, 1136, 1137, 1138, 1250], "parser": 118, "regard": [118, 696], "sens": [118, 124, 126, 135, 218, 270, 300, 559, 765, 822, 875], "particular": [118, 124, 126, 135, 172, 300, 1007, 1250], "usernam": [118, 121, 124, 126, 135], "password": [118, 121, 124, 126, 135], "skip": [118, 119, 123, 130, 132, 137, 268, 300, 885, 1099, 1250], "offset": [118, 119, 123, 124, 126, 130, 132, 135, 136, 137, 182, 188, 189, 191, 192, 235, 248, 254, 270, 276, 277, 300, 381, 389, 402, 403, 406, 410, 424, 449, 510, 579, 604, 640, 669, 765, 801, 803, 804, 806, 807, 830, 839, 844, 854, 855, 875, 952, 960, 977, 978, 981, 985, 999, 1021, 1086, 1158, 1193, 1206, 1223, 1250], "sampl": [118, 119, 286, 300, 603, 765, 863, 1157, 1250], "estim": [118, 119, 158, 172, 300, 316, 433, 434, 475, 687, 765, 780, 875, 1007, 1009, 1010, 1053, 1250], "alloc": [118, 119, 172, 229, 300, 765, 1007, 1250], "encount": [118, 119, 132, 188, 191, 300, 552, 553, 622, 624, 696, 700, 718, 765, 803, 806, 875, 1108, 1109, 1175, 1177, 1250], "window": [118, 119, 132, 188, 189, 191, 192, 235, 300, 374, 410, 424, 432, 433, 434, 525, 527, 559, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 694, 742, 743, 765, 803, 804, 806, 807, 830, 875, 945, 985, 999, 1008, 1009, 1010, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1250], "rn": [118, 119, 132], "go": [118, 119, 132, 260, 300, 616, 1169], "nodataerror": [118, 119, 123, 129, 132, 777], "lazili": [118, 119, 132, 133, 134, 135, 136, 137, 787, 875], "glob": [118, 119, 132, 135, 136, 137], "continu": [118, 130, 375, 567, 603, 765, 946, 1117, 1157, 1250], "benchmark": [118, 130], "demonstr": 118, "birthdai": 118, "alic": 118, "1995": 118, "bob": [118, 218, 300, 822, 875], "charli": 118, "2002": [118, 393, 406, 964, 981, 1003], "08": [118, 141, 142, 143, 144, 148, 235, 300, 383, 402, 403, 410, 579, 651, 712, 714, 765, 830, 875, 878, 985, 999, 1204], "50000": 119, "batchedcsvread": [119, 777], "upon": 119, "creation": 119, "gather": [119, 182, 254, 300, 449, 514, 668, 669, 765, 801, 844, 875, 1021, 1090, 1222, 1223, 1250], "next_batch": 119, "big": 119, "interest": [119, 413, 416, 988, 991], "seen_group": 119, "big_fil": 119, "df_current_batch": 119, "partition_df": 119, "partition_bi": [119, 206, 300], "as_dict": [119, 224, 300], "fh": 119, "write_csv": [119, 132, 300], "els": [119, 755], "connectionorcursor": 120, "iter_batch": 120, "execute_opt": 120, "cursor": 120, "client": 120, "odbc": 120, "establish": 120, "resultset": 120, "manner": 120, "veri": [120, 205, 265, 300, 527, 765, 863], "poor": 120, "trip": 120, "still": [120, 121], "intern": [120, 139, 205, 300], "exact": [120, 146, 148, 150, 247, 300, 316, 649, 650, 651, 652, 653, 674, 765, 1204, 1205, 1206], "incom": 120, "read_arrow_batches_from_odbc": 120, "read_database_uri": 120, "wide": [120, 186, 217, 268, 300, 821, 875], "snowflak": [120, 121], "variou": [120, 300, 765, 875, 878, 1250], "facil": 120, "initialis": [120, 154, 875, 1258], "flight": 120, "flightsql": 120, "flight_sql": 120, "about": [120, 603, 610, 618, 619, 621, 634, 765, 1157, 1163, 1171, 1172, 1174, 1187, 1250, 1259], "notabl": 120, "dremio": 120, "influxdb": 120, "notic": [120, 300, 875, 1250], "dbapi2": 120, "connectorx": [120, 121, 140], "optimis": [120, 211, 238, 286, 300, 875, 1099, 1145, 1250, 1259], "translat": 120, "conn": 120, "url": [120, 121, 130, 137, 618, 620, 1171, 1173], "test_data": 120, "user_conn": 120, "normalised_scor": 120, "uint8": [120, 145, 147, 160, 259, 260, 268, 300, 367, 368, 574, 666, 681, 765, 783, 875, 878, 939, 940, 1123, 1220, 1250, 1259], "parameteris": 120, "metric": 120, "alchemy_conn": 120, "qmark": 120, "variad": 120, "1000": [120, 123, 172, 259, 277, 300, 316, 765, 855, 875, 994, 1095, 1229, 1250, 1259], "localhost": 120, "5432": 120, "uid": 120, "usr": 120, "pwd": 120, "max_text_s": 120, "max_binary_s": 120, "do_someth": 120, "partition_on": 121, "partition_rang": 121, "partition_num": 121, "dbreadengin": 121, "raw": 121, "warehous": 121, "role": 121, "caller": [121, 218, 300, 516, 817, 822, 858, 863, 875], "respons": [121, 218, 300, 822, 875], "come": [121, 188, 300, 402, 403, 475, 516, 765, 778, 803, 874, 875, 977, 978, 1053, 1250], "transfer": 121, "document": [121, 123, 300, 303, 413, 416, 624, 651, 652, 653, 657, 761, 924, 988, 991, 1177, 1204, 1205, 1206, 1210, 1250, 1254], "redshift": 121, "mysql": 121, "mariadb": 121, "clickhous": 121, "oracl": 121, "bigqueri": 121, "pleas": [121, 188, 300, 303, 697, 709, 714, 803, 875, 1250, 1254], "github": 121, "sfu": 121, "connector": 121, "destin": 121, "develop": [121, 148, 150], "read_databas": 121, "usual": [121, 381, 952], "urllib": 121, "quote_plu": 121, "word": [121, 647, 648], "3f": [121, 651, 653, 1204, 1206], "20word": 121, "explicitli": [121, 146, 148, 154, 747, 776], "test_tabl": 121, "compani": 121, "testdb": 121, "public": [121, 300, 765, 777, 875, 1250], "myrol": 121, "delta_table_opt": [122, 133], "root": [122, 133, 355, 474, 524, 537, 546, 547, 548, 549, 550, 551, 565, 607, 665, 764, 765, 926, 1160, 1250], "absolut": [122, 133, 134, 141, 142, 143, 144, 307, 432, 433, 434, 765, 880, 1008, 1009, 1010, 1250], "avoid": [122, 237, 300, 310, 765], "year": [122, 133, 188, 208, 235, 270, 300, 393, 394, 406, 407, 410, 424, 425, 579, 582, 583, 584, 585, 586, 588, 589, 590, 708, 709, 710, 711, 712, 713, 752, 753, 765, 803, 812, 830, 875, 964, 965, 981, 982, 985, 999, 1000], "2021": [122, 133, 160, 166, 186, 188, 270, 300, 651, 727, 783, 803, 875, 878, 956, 957, 965, 989, 1049, 1204, 1250], "aw": [122, 130, 133, 137], "googl": [122, 133, 134], "service_account": [122, 133], "service_account_json_absolute_path": [122, 133], "az": [122, 133, 134], "adl": [122, 133, 134], "abf": [122, 133, 134], "azure_storage_account_nam": [122, 133, 134], "azure_storage_account_kei": [122, 133, 134], "without_fil": [122, 133, 134], "track": [122, 133, 134, 211, 300, 516, 1258], "sheet_id": [123, 129], "sheet_nam": [123, 129], "xlsx2csv": [123, 140], "openpyxl": [123, 140], "pyxlsb": [123, 140], "xlsx2csv_option": 123, "read_csv_opt": 123, "spreadsheet": [123, 129, 226, 300, 777], "xlsb": 123, "sheetnam": [123, 129], "nor": [123, 129, 239, 300], "fastest": 123, "read_csv": [123, 132], "refin": 123, "significantli": [123, 211, 286, 300, 1099, 1250, 1259], "potenti": [123, 132, 135, 136, 205, 236, 238, 300, 546], "unabl": 123, "julian": 123, "skip_empty_lin": 123, "influenc": [123, 796, 817, 875], "pipelin": 123, "correct": [123, 129, 433, 434, 475, 583, 584, 585, 586, 587, 588, 590, 603, 765, 816, 817, 875, 1009, 1010, 1053, 1135, 1157, 1250], "known": [123, 148, 516, 582, 583, 584, 585, 586, 588, 589, 590, 765, 858, 863, 1092], "better": [123, 211, 260, 286, 300, 527, 626, 765, 863, 1142, 1145, 1179, 1250], "detect": 123, "memory_map": [124, 130, 135], "greatli": [124, 135], "repeat": [124, 135, 571, 573, 738, 756, 765], "That": [124, 816, 817, 875], "filenam": 124, "my_fil": 124, "write_ipc": [124, 300], "read_ndjson": 127, "becaus": [128, 136, 172, 188, 191, 209, 211, 268, 286, 300, 490, 803, 806, 863, 875, 885, 1007, 1066, 1099, 1250], "openoffic": 129, "od": 129, "parallelstrategi": [130, 137], "use_statist": [130, 137], "hive_partit": [130, 137], "retri": [130, 137], "row_group": [130, 137], "hive": [130, 137], "prune": [130, 137, 817, 875], "gcp": [130, 134, 137], "stabl": [130, 159, 164, 166, 193, 239, 264, 300, 453, 520, 765, 781, 821, 840, 845, 875, 1024, 1250], "read_tabl": 130, "scan_parquet": [130, 138], "scan_pyarrow_dataset": [130, 137], "contribut": [130, 584, 586, 588, 590, 765], "with_column_nam": 132, "push": [132, 135, 136, 137, 138], "down": [132, 135, 136, 137, 138, 444, 765, 1019, 1250], "therebi": [132, 135, 136], "realloc": [132, 135, 136, 174, 300, 1013, 1250], "headerless": 132, "my_long_fil": 132, "thing": [132, 139], "less": [132, 208, 300, 477, 522, 525, 643, 765, 812, 875, 1196, 1259], "breezah": 132, "languag": [132, 188, 208, 235, 270, 300, 406, 410, 424, 579, 582, 583, 584, 585, 586, 588, 589, 590, 709, 710, 712, 713, 752, 753, 765, 803, 812, 830, 875, 981, 985, 999], "hard": [132, 816, 817, 875], "mydf": 132, "lambda": [132, 157, 180, 211, 225, 226, 286, 300, 315, 432, 433, 434, 516, 523, 524, 525, 527, 547, 700, 701, 718, 729, 730, 740, 765, 816, 817, 825, 863, 875, 885, 1008, 1009, 1010, 1092, 1099, 1250], "lower": [132, 188, 191, 228, 292, 300, 357, 359, 459, 521, 524, 547, 568, 572, 586, 688, 709, 710, 712, 713, 739, 752, 753, 765, 803, 806, 827, 869, 875, 930, 932, 1030, 1097, 1118, 1121, 1134, 1237, 1250], "simpli": [132, 559, 700, 718, 765], "idx": [132, 188, 206, 277, 300, 335, 516, 803, 855, 875, 1092, 1174], "uint16": [132, 367, 368, 666, 765, 878, 939, 940, 1220, 1250], "u16": [132, 148, 1259], "eu": [133, 134], "central": [133, 134, 475, 603, 765, 1053, 1157, 1250], "iceberg": [134, 777], "pyiceberg": [134, 140], "metadata": [134, 188, 189, 191, 192, 235, 300, 579, 765, 803, 804, 806, 807, 830, 875], "secret": [134, 137], "adlf": 134, "my": [134, 138, 658, 1211], "oauth": 134, "token": 134, "ya29": 134, "dr": 134, "afm": 134, "py": 134, "impl": 134, "fsspecfileio": 134, "give": [135, 136, 217, 266, 300, 390, 475, 573, 674, 765, 777, 821, 846, 875, 961, 1053, 1250], "read_parquet": 137, "east": 137, "allow_pyarrow_filt": 138, "comparison": 138, "dset": 138, "folder": 138, "04": [138, 160, 188, 270, 300, 383, 384, 402, 403, 409, 410, 413, 416, 417, 418, 421, 423, 427, 582, 583, 585, 588, 589, 590, 651, 712, 714, 765, 783, 803, 875, 878, 955, 969, 974, 977, 978, 979, 984, 988, 991, 992, 993, 996, 998, 1002, 1204], "seed": [139, 193, 239, 300, 453, 504, 570, 593, 599, 765, 1024, 1080, 1119, 1141, 1153, 1250], "shuffl": [139, 239, 286, 300, 504, 593, 765, 863, 1080, 1141, 1250], "stdout": [140, 154, 186, 300, 538], "platform": 140, "maco": 140, "14": [140, 148, 178, 197, 211, 212, 214, 219, 232, 251, 254, 283, 285, 287, 288, 289, 290, 291, 292, 293, 300, 369, 370, 371, 372, 373, 381, 385, 386, 391, 395, 397, 399, 404, 411, 414, 458, 514, 570, 633, 668, 669, 706, 707, 752, 765, 860, 862, 864, 865, 866, 867, 868, 869, 870, 878, 941, 942, 943, 944, 952, 985, 1031, 1051, 1090, 1146, 1186, 1222, 1223, 1240, 1250], "arm64": 140, "arm": 140, "64bit": [140, 572, 765, 1121, 1250], "main": [140, 787, 875], "oct": 140, "13": [140, 148, 161, 162, 175, 176, 185, 198, 209, 221, 235, 274, 283, 285, 287, 288, 289, 290, 291, 292, 293, 300, 310, 385, 386, 388, 391, 392, 395, 396, 397, 398, 399, 400, 404, 405, 411, 412, 414, 535, 537, 579, 654, 694, 700, 703, 718, 749, 754, 765, 784, 785, 797, 798, 814, 830, 851, 860, 862, 864, 865, 866, 867, 868, 869, 870, 875, 959, 963, 970, 972, 975, 980, 985, 987, 999, 1000, 1037, 1040, 1047, 1049, 1099, 1207, 1250], "54": [140, 436, 765, 1259], "clang": 140, "1500": [140, 149], "adbc_driver_manag": 140, "cloudpickl": 140, "hvplot": [140, 300, 303, 1250, 1254], "matplotlib": [140, 826, 838, 875], "26": [140, 389, 425, 960], "pydant": 140, "check_row_ord": [141, 142], "check_column_ord": [141, 142], "check_dtyp": [141, 142, 143, 144], "check_exact": [141, 142, 143, 144], "rtol": [141, 142, 143, 144], "atol": [141, 142, 143, 144], "categorical_as_str": [141, 142, 143, 144], "assert": [141, 142, 143, 144, 146, 148, 150, 235, 300, 777, 878], "assertionerror": [141, 142, 143, 144], "compar": [141, 142, 143, 144, 171, 181, 300, 430, 431, 450, 452, 477, 522, 554, 555, 765, 924, 1006, 1144, 1250], "unsort": [141, 142], "exactli": [141, 142, 143, 144, 147, 148, 150, 642, 643, 649, 650, 714, 1152, 1195, 1196, 1202, 1203, 1250], "toler": [141, 142, 143, 144, 208, 300, 812, 875], "inexact": [141, 142, 143, 144], "share": [141, 142, 143, 144, 172, 300, 765, 1007, 1250], "assert_series_equ": [141, 144, 1006, 1250, 1259], "assert_frame_not_equ": [141, 144], "pytest": [141, 143], "worthwhil": [141, 143], "shorten": [141, 143], "traceback": [141, 142, 143, 144], "tb": [141, 143, 172, 300, 1007, 1250], "short": [141, 143], "tend": [141, 143], "unhelpfulli": [141, 143], "assert_frame_equ": [142, 143, 171, 300, 1259], "assert_series_not_equ": [142, 143], "check_nam": [143, 144], "searchstrategi": [145, 147, 148, 150], "null_prob": [145, 148, 150], "percentag": [145, 148, 150, 560, 765, 1113, 1250], "chanc": [145, 148, 150, 1259], "independ": [145, 146, 148, 150], "flag": [145, 300, 595, 610, 618, 619, 621, 634, 765, 794, 816, 817, 875, 1147, 1163, 1171, 1172, 1174, 1187, 1250], "hypothesi": [145, 146, 147, 148, 149, 150, 1259], "sampled_from": [145, 1259], "unique_small_int": 145, "ccy": [145, 1259], "gbp": [145, 1259], "eur": [145, 166, 186, 300, 1259], "jpy": [145, 1259], "min_col": [146, 148], "max_col": [146, 148], "standalon": [146, 148, 878], "mincol": 146, "assign": [146, 188, 300, 516, 559, 570, 642, 643, 765, 803, 875, 1092, 1119, 1195, 1196, 1250], "minimum": [146, 147, 148, 150, 180, 219, 220, 300, 432, 433, 434, 541, 553, 562, 570, 735, 736, 765, 823, 875, 973, 1008, 1009, 1010, 1109, 1115, 1119, 1250, 1259], "especi": [146, 578, 765, 796, 875, 1127, 1250], "test_unique_xyz": 146, "assert_someth": 146, "punctuat": 146, "test_special_char_colname_init": 146, "inner_dtyp": [147, 150], "select_from": [147, 150], "min_siz": [147, 148, 150, 1259], "max_siz": [147, 148, 150, 1259], "anoth": [147, 171, 181, 187, 300, 374, 382, 493, 514, 531, 534, 574, 621, 765, 802, 853, 875, 945, 953, 1006, 1013, 1069, 1123, 1144, 1174, 1250], "randomli": 147, "innermost": 147, "2x": 147, "lst": 147, "11330": 147, "24030": 147, "116": 147, "zz": [147, 150], "uint8_pair": [147, 1259], "uint": [147, 1259], "zip": [147, 1259], "131": 147, "176": 147, "149": [147, 1259], "include_col": 148, "allow_infin": [148, 150], "allowed_dtyp": [148, 150, 1259], "excluded_dtyp": [148, 150], "describ": [148, 186, 300, 1250], "desir": [148, 427, 516, 1002, 1092], "n_chunk": [148, 150, 300, 884, 1013, 1250], "randomis": 148, "onto": 148, "pct": 148, "preced": [148, 878], "disallow": [148, 150], "inf": [148, 150, 322, 375, 455, 461, 465, 567, 674, 765, 891, 936, 946, 1026, 1034, 1039, 1097, 1113, 1117, 1237, 1250], "exclud": [148, 150, 188, 300, 365, 368, 459, 765, 803, 875, 1030, 1049, 1250], "usag": [148, 150, 247, 300, 878, 1152, 1250], "deploi": [148, 150], "characterist": [148, 150], "concret": [148, 150], "test_repr": 148, "isinst": [148, 150, 300], "0x11f561580": 148, "0565": 148, "34715": 148, "5844": 148, "33": [148, 218, 300, 591, 765, 822, 875, 1134, 1250], "076854": 148, "3382": 148, "17": [148, 279, 581, 591, 720, 752, 765, 856, 934, 936, 985, 1129, 1250, 1259], "48662": 148, "7540": 148, "836271": 148, "4063": 148, "06": [148, 160, 270, 300, 383, 401, 408, 409, 410, 411, 424, 425, 783, 875, 878, 984, 985, 999], "39092": 148, "1889": 148, "41": [148, 589, 765, 1259], "874455": 148, "15836": 148, "1755e": 148, "575050513": 148, "profil": [149, 151, 786, 875], "balanc": [149, 151, 1259], "set_environ": 149, "polars_hypothesis_profil": [149, 151], "constructor": 150, "max_data_s": 150, "normal": [150, 188, 300, 429, 475, 603, 765, 803, 875, 1005, 1053, 1157, 1250], "test_repr_is_valid_str": 150, "experi": 150, "create_list_strategi": [150, 1259], "polars_max_thread": 152, "behind": 152, "lock": 152, "reason": [152, 516, 525, 765], "temporarili": [152, 154, 188, 189, 191, 192, 235, 300, 579, 765, 803, 804, 806, 807, 830, 875], "pyspark": 152, "udf": [152, 157, 211, 225, 281, 286, 300, 315, 527, 563, 686, 730, 765, 825, 858, 863, 875, 885, 1099, 1250], "recommend": [152, 205, 225, 300, 878], "easi": [154, 1259], "restor": 154, "restore_default": 154, "relat": [154, 878], "set_tbl_row": 154, "whatev": 154, "were": [154, 212, 214, 219, 251, 300, 574, 761, 765, 1123, 1250], "enter": 154, "advantag": [154, 225, 300], "set_": 154, "set_verbos": 154, "do_various_th": 154, "cleaner": 154, "breviti": 154, "vein": 154, "durat": [154, 208, 270, 300, 381, 388, 389, 392, 396, 398, 400, 405, 412, 417, 418, 419, 420, 421, 422, 423, 427, 672, 709, 710, 712, 713, 752, 753, 765, 812, 875, 878, 952, 959, 960, 963, 970, 972, 975, 980, 987, 992, 993, 994, 995, 996, 997, 998, 1002, 1233, 1250], "set_ascii_t": 154, "write_ascii_frame_to_stdout": 154, "sy": 154, "nan_as_nul": 156, "polarsdatafram": 156, "notimplementederror": 156, "num_row": 156, "get_column": [156, 262, 300], "dtypekind": 156, "inference_s": [157, 211, 300], "256": [157, 211, 300, 1113, 1250], "map_row": [157, 300], "tri": [157, 211, 300], "approxim": [158, 300, 316, 687, 765, 780, 875, 1259], "hyperloglog": [158, 300, 316, 687, 765, 780, 875], "algorithm": [158, 300, 316, 611, 636, 687, 765, 780, 875, 1164, 1189], "cardin": [158, 300, 316, 687, 765, 780, 875], "k": [159, 238, 264, 265, 300, 351, 364, 475, 673, 765, 781, 845, 875, 919, 1053, 1234, 1250], "intoexpr": [159, 187, 188, 189, 190, 191, 192, 235, 241, 242, 245, 249, 264, 274, 275, 279, 300, 314, 333, 346, 349, 350, 455, 459, 486, 487, 505, 506, 507, 508, 559, 574, 594, 596, 597, 606, 611, 636, 641, 642, 643, 649, 650, 683, 685, 691, 693, 694, 695, 696, 698, 700, 703, 704, 707, 711, 718, 732, 736, 741, 744, 747, 749, 765, 781, 802, 803, 804, 805, 806, 807, 830, 832, 833, 836, 840, 845, 851, 852, 856, 875, 902, 914, 917, 918, 1030, 1063, 1123, 1149, 1194, 1195, 1196, 1202, 1203, 1250], "nulls_last": [159, 249, 264, 300, 325, 341, 511, 605, 765, 781, 840, 845, 875, 894, 910, 1087, 1250], "smallest": [159, 264, 300, 351, 765, 781, 845, 875, 919, 1250], "largest": [159, 264, 300, 673, 765, 781, 845, 875, 1234, 1250], "bottom": [159, 300, 781, 875], "wors": [159, 264, 300, 781, 840, 845, 875], "search": [159, 208, 264, 300, 516, 611, 636, 781, 812, 840, 845, 875, 1164, 1189], "top_k": [159, 300, 351, 765, 781, 875, 919, 1250], "columnnameorselector": [160, 167, 169, 217, 224, 226, 238, 258, 266, 267, 268, 300, 783, 791, 792, 821, 846, 847, 875], "strict": [160, 300, 347, 352, 610, 614, 621, 633, 651, 652, 653, 655, 657, 765, 783, 875, 915, 920, 1006, 1144, 1163, 1167, 1174, 1186, 1204, 1205, 1206, 1208, 1210, 1250], "due": [160, 188, 208, 235, 238, 270, 300, 310, 352, 389, 406, 410, 424, 474, 546, 548, 549, 550, 551, 565, 579, 582, 583, 584, 585, 586, 588, 589, 590, 665, 709, 710, 712, 713, 752, 753, 765, 783, 803, 812, 830, 875, 920, 960, 981, 985, 999, 1250], "overflow": [160, 300, 352, 367, 368, 633, 655, 666, 765, 783, 875, 920, 939, 940, 1186, 1208, 1220, 1250], "2020": [160, 166, 186, 235, 300, 303, 384, 389, 409, 413, 416, 417, 418, 419, 420, 421, 422, 423, 579, 651, 652, 653, 765, 783, 830, 875, 878, 955, 960, 984, 988, 991, 992, 993, 994, 995, 996, 997, 998, 1204, 1205, 1206], "u8": [160, 258, 259, 268, 300, 574, 681, 765, 783, 875, 878, 1123, 1227, 1250, 1259], "to_dict": [160, 300, 783, 875], "as_seri": [160, 256, 300, 783, 875, 946, 1117, 1250], "tempor": [160, 188, 189, 191, 192, 205, 235, 237, 238, 257, 300, 357, 459, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 765, 777, 783, 803, 804, 806, 807, 830, 875, 878, 930, 1030, 1049, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1136, 1137, 1138, 1250], "greater": [161, 208, 300, 450, 452, 603, 631, 632, 643, 660, 765, 812, 875, 1157, 1184, 1185, 1196, 1213, 1250], "cheap": [161, 162, 242, 275, 300, 784, 785, 833, 852, 875, 929, 933, 1250], "deepcopi": [161, 300, 784, 875, 929, 1250], "appl": [163, 196, 207, 230, 233, 256, 282, 283, 285, 287, 288, 289, 290, 291, 292, 293, 300, 576, 616, 644, 765, 811, 828, 859, 860, 862, 864, 865, 866, 867, 868, 869, 870, 875, 1169, 1197], "banana": [163, 256, 283, 285, 287, 288, 289, 290, 291, 292, 293, 300, 576, 616, 644, 765, 860, 862, 864, 865, 866, 867, 868, 869, 870], "orang": [163, 282, 283, 285, 287, 288, 290, 292, 293, 300, 859, 860, 862, 864, 865, 867, 869, 870], "pairwis": [164, 300], "pearson": [164, 300, 475, 603, 696, 765, 1053, 1157, 1250], "correl": [164, 300, 696, 742], "coeffici": [164, 300, 603, 765, 1157, 1250], "corrcoef": [164, 300], "percentil": [166, 300, 947, 1250], "summari": [166, 300, 947, 1250], "deem": [166, 300], "glimps": [166, 194, 300], "median": [166, 226, 300, 440, 584, 765, 853, 875, 947, 1132, 1250], "str2": [166, 300], "usd": [166, 186, 300, 1259], "null_count": [166, 169, 300, 374, 765, 875, 945, 947, 1023, 1250], "266667": [166, 300], "std": [166, 300, 588, 765, 875, 947, 1136, 1250], "101514": [166, 300], "707107": [166, 300, 433, 588, 765, 1009, 1250], "subset": [169, 222, 266, 300, 792, 846, 875], "preserv": [169, 177, 187, 190, 207, 211, 260, 261, 300, 379, 380, 441, 489, 600, 765, 792, 799, 811, 875, 950, 951, 1017, 1065, 1154, 1232, 1250], "behavior": [169, 300, 493, 514, 526, 717, 726, 765, 792, 875, 946, 1069, 1090, 1098, 1117, 1250], "all_horizont": [169, 300, 682, 792, 875], "is_nul": [169, 300, 765, 792, 875, 1250], "null_equ": [171, 181, 300, 1006, 1144, 1250], "sizeunit": [172, 300, 1007, 1250], "heap": [172, 300, 765, 1007, 1250], "its": [172, 300, 383, 410, 424, 606, 755, 765, 924, 954, 985, 999, 1007, 1250], "bitmap": [172, 300, 1007, 1250], "structarrai": [172, 300, 1007, 1250], "constant": [172, 235, 300, 381, 438, 765, 830, 875, 952, 1007, 1014, 1250], "unchang": [172, 300, 526, 574, 672, 765, 816, 817, 858, 863, 875, 1007, 1098, 1123, 1233, 1250], "capac": [172, 247, 300, 1007, 1152, 1250], "ffi": [172, 300, 1007, 1250], "kb": [172, 300, 1007, 1250], "mb": [172, 300, 1007, 1250], "gb": [172, 300, 1007, 1250], "revers": [172, 300, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 524, 547, 548, 549, 565, 665, 699, 765, 875, 937, 938, 939, 940, 941, 942, 943, 944, 1250], "1_000_000": [172, 300, 1007, 1250], "25888898": [172, 300], "689577102661133": [172, 300], "more_column": [173, 243, 267, 300, 435, 716, 765, 795, 835, 847, 875], "long": [173, 217, 268, 300, 795, 821, 875], "letter": [173, 284, 294, 300, 435, 611, 619, 636, 716, 765, 795, 861, 871, 875, 878, 1164, 1172, 1189], "onlin": [174, 300, 1013, 1250], "rerun": [174, 300, 1013, 1250], "conveni": [174, 300, 884, 1013, 1250], "Not": [175, 300, 468, 470, 765, 797, 875], "fillnullstrategi": [176, 300, 440, 765, 798, 875, 1016, 1250], "matches_supertyp": [176, 300, 798, 875], "forward": [176, 208, 245, 300, 402, 440, 446, 509, 596, 765, 798, 812, 836, 875, 977, 1016, 1085, 1149, 1250], "consecut": [176, 300, 345, 440, 446, 609, 765, 798, 875, 1016, 1162, 1250], "fill_nan": [176, 300, 765, 875, 1250], "intoexprcolumn": [177, 300, 332, 335, 336, 351, 357, 358, 359, 441, 485, 496, 504, 509, 560, 564, 593, 596, 618, 640, 646, 647, 648, 673, 688, 709, 710, 712, 713, 724, 725, 752, 753, 755, 765, 799, 836, 875, 901, 904, 905, 919, 930, 931, 932, 1061, 1072, 1080, 1085, 1113, 1171, 1193, 1199, 1200, 1201, 1234, 1250], "constraint": [177, 300, 441, 474, 546, 548, 549, 550, 551, 565, 665, 755, 765, 799, 875], "behav": [177, 300, 441, 527, 647, 648, 765, 799, 875], "eq": [177, 300, 431, 441, 765, 799, 875, 1250], "implicitli": [177, 300, 441, 755, 765, 799, 875], "is_in": [177, 300, 765, 1250], "get_column_index": [178, 300], "reduct": [180, 300], "supercast": [180, 300], "parent": [180, 300], "rule": [180, 300, 611, 636, 1164, 1189], "arithmet": [180, 300], "zip_with": [180, 300, 1250], "foo11": [180, 300], "bar22": [180, 300], "nth": [182, 254, 300, 449, 643, 669, 765, 801, 844, 875, 1021, 1196, 1223, 1250], "th": [182, 254, 300, 449, 505, 603, 669, 765, 801, 844, 875, 1021, 1081, 1157, 1223, 1250], "retriev": [183, 300, 330, 331, 482, 483, 661, 899, 900, 1058, 1059, 1214], "max_items_per_column": [186, 300], "max_colname_length": [186, 300], "return_as_str": [186, 300, 538], "preview": [186, 300], "few": [186, 300], "exce": [186, 300], "ellipsi": [186, 300], "head": [186, 210, 253, 300, 314, 479, 765, 815, 875, 1055, 1221, 1250], "tail": [186, 194, 300, 314, 603, 765, 875, 1025, 1157, 1250], "more_bi": [187, 190, 224, 249, 300, 606, 765, 802, 805, 840, 875], "groupbi": [187, 226, 300, 315, 527, 686, 730, 765, 875], "consist": [187, 190, 224, 300, 651, 802, 805, 875, 884, 1013, 1204, 1250], "regardless": [187, 190, 300, 624, 755, 1177], "agg": [187, 188, 191, 226, 235, 300, 309, 441, 443, 448, 451, 525, 527, 605, 606, 680, 730, 765, 786, 787, 794, 796, 802, 803, 804, 806, 807, 826, 830, 834, 838, 875, 878], "Or": [187, 188, 208, 235, 249, 270, 279, 300, 559, 579, 606, 709, 710, 712, 713, 752, 753, 755, 765, 802, 803, 812, 830, 840, 856, 875], "index_column": [188, 189, 191, 192, 235, 300, 579, 765, 803, 804, 806, 807, 830, 875], "timedelta": [188, 189, 191, 192, 208, 235, 270, 300, 406, 410, 424, 579, 582, 583, 584, 585, 586, 588, 589, 590, 709, 710, 712, 713, 752, 753, 765, 803, 804, 806, 807, 812, 830, 875, 878, 966, 973, 981, 985, 999, 1108, 1109, 1250], "period": [188, 189, 191, 192, 235, 300, 410, 424, 432, 433, 434, 560, 579, 709, 710, 712, 713, 752, 753, 765, 803, 804, 806, 807, 830, 875, 985, 999, 1008, 1009, 1010, 1113, 1250], "include_boundari": [188, 191, 300, 803, 806, 875], "closedinterv": [188, 189, 191, 192, 235, 300, 459, 579, 582, 583, 584, 585, 586, 588, 589, 590, 709, 710, 712, 713, 752, 753, 765, 803, 804, 806, 807, 830, 875, 1030, 1250], "label": [188, 300, 375, 567, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 765, 803, 826, 875, 946, 1117, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1136, 1137, 1138, 1250], "start_bi": [188, 191, 300, 803, 806, 875], "startbi": [188, 191, 300, 803, 806, 875], "check_sort": [188, 189, 191, 192, 235, 300, 579, 765, 803, 804, 806, 807, 830, 875], "dynamicgroupbi": [188, 191, 300], "member": [188, 300, 803, 875, 1038, 1250], "descript": [188, 300, 803, 875], "ascend": [188, 189, 191, 192, 235, 300, 579, 583, 584, 585, 586, 588, 590, 765, 803, 804, 806, 807, 830, 875], "dynam": [188, 191, 300, 516, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 765, 803, 806, 875, 1092, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1136, 1137, 1138, 1250], "matter": [188, 189, 191, 192, 205, 235, 237, 238, 257, 300, 579, 647, 648, 765, 803, 804, 806, 807, 830, 875], "interv": [188, 189, 191, 192, 235, 270, 300, 375, 410, 424, 455, 459, 567, 579, 582, 583, 584, 585, 586, 588, 589, 590, 709, 710, 712, 713, 752, 753, 765, 803, 804, 806, 807, 830, 875, 946, 958, 961, 962, 969, 971, 974, 976, 979, 982, 983, 985, 990, 999, 1000, 1026, 1030, 1117, 1250], "_lower_boundari": [188, 300, 803, 875], "_upper_boundari": [188, 300, 803, 875], "harder": [188, 191, 300, 803, 806, 875], "inclus": [188, 189, 191, 192, 235, 300, 459, 579, 582, 583, 584, 585, 586, 588, 589, 590, 641, 642, 688, 709, 710, 712, 713, 724, 725, 752, 753, 765, 803, 804, 806, 807, 830, 875, 1030, 1194, 1195, 1250], "datapoint": [188, 191, 300, 803, 806, 875], "boundari": [188, 300, 357, 358, 359, 455, 765, 803, 875, 930, 931, 932, 1026, 1250], "mondai": [188, 191, 300, 424, 426, 803, 806, 875, 999, 1001], "tuesdai": [188, 191, 300, 803, 806, 875], "wednesdai": [188, 191, 300, 413, 416, 803, 806, 875, 988, 991], "thursdai": [188, 191, 300, 803, 806, 875], "fridai": [188, 191, 300, 413, 416, 803, 806, 875, 988, 991], "saturdai": [188, 191, 300, 803, 806, 875], "sundai": [188, 191, 300, 413, 416, 426, 803, 806, 875, 988, 991, 1001], "earliest": [188, 191, 300, 409, 410, 424, 651, 653, 711, 803, 806, 875, 984, 985, 999, 1204, 1206], "weekli": [188, 191, 300, 424, 803, 806, 875, 999], "week": [188, 191, 208, 235, 270, 300, 406, 410, 424, 426, 579, 582, 583, 584, 585, 586, 588, 589, 590, 709, 710, 712, 713, 714, 752, 753, 765, 803, 806, 812, 830, 875, 878, 981, 985, 999, 1001], "sorted": [188, 189, 191, 192, 235, 300, 579, 765, 803, 804, 806, 807, 830, 875], "verifi": [188, 189, 191, 192, 235, 300, 579, 765, 803, 804, 806, 807, 830, 875], "incorrectli": [188, 189, 191, 192, 235, 300, 516, 579, 765, 803, 804, 806, 807, 830, 875], "incorrect": [188, 189, 191, 192, 235, 300, 427, 525, 579, 595, 765, 803, 804, 806, 807, 830, 858, 863, 875, 1002, 1147, 1250], "roll": [188, 189, 192, 300, 402, 403, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 694, 742, 743, 765, 803, 804, 807, 875, 977, 978, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1250], "re": [188, 204, 260, 300, 402, 403, 413, 416, 803, 875, 977, 978, 988, 991, 1258], "1d": [188, 208, 235, 270, 300, 382, 406, 410, 418, 421, 424, 427, 579, 582, 583, 584, 585, 586, 588, 589, 590, 709, 710, 712, 713, 714, 727, 752, 753, 765, 803, 812, 830, 875, 878, 953, 961, 968, 981, 985, 990, 993, 996, 999], "set_index": [188, 300, 803, 875], "resampl": [188, 300, 803, 875], "reset_index": [188, 300, 803, 875], "though": [188, 300, 761, 803, 875], "unlik": [188, 300, 803, 875], "evenli": [188, 300, 803, 875], "upsampl": [188, 300, 803, 875], "1n": [188, 208, 235, 270, 300, 406, 410, 424, 579, 582, 583, 584, 585, 586, 588, 589, 590, 709, 710, 712, 713, 752, 753, 765, 803, 812, 830, 875, 981, 985, 999], "nanosecond": [188, 208, 235, 270, 300, 406, 410, 411, 422, 424, 579, 582, 583, 584, 585, 586, 588, 589, 590, 709, 710, 712, 713, 714, 752, 753, 765, 803, 812, 830, 875, 981, 985, 986, 997, 999], "1u": [188, 208, 235, 270, 300, 406, 410, 424, 579, 582, 583, 584, 585, 586, 588, 589, 590, 709, 710, 712, 713, 752, 753, 765, 803, 812, 830, 875, 981, 985, 999], "microsecond": [188, 205, 208, 235, 237, 238, 257, 270, 300, 406, 410, 419, 424, 579, 582, 583, 584, 585, 586, 588, 589, 590, 709, 710, 711, 712, 713, 714, 751, 752, 753, 765, 803, 812, 826, 830, 875, 878, 981, 985, 994, 999], "1m": [188, 208, 235, 270, 300, 406, 410, 423, 424, 579, 582, 583, 584, 585, 586, 588, 589, 590, 709, 710, 712, 713, 752, 753, 765, 803, 812, 830, 875, 981, 985, 994, 995, 997, 998, 999], "millisecond": [188, 208, 235, 270, 300, 391, 399, 406, 410, 420, 424, 579, 582, 583, 584, 585, 586, 588, 589, 590, 709, 710, 712, 713, 714, 752, 753, 765, 803, 812, 830, 875, 878, 981, 985, 995, 999], "minut": [188, 208, 235, 270, 300, 391, 395, 397, 404, 406, 410, 411, 421, 424, 579, 582, 583, 584, 585, 586, 588, 589, 590, 709, 710, 711, 712, 713, 714, 751, 752, 753, 765, 803, 812, 830, 875, 878, 981, 985, 996, 999], "1h": [188, 208, 235, 270, 300, 389, 406, 410, 424, 579, 582, 583, 584, 585, 586, 588, 589, 590, 709, 710, 712, 713, 752, 753, 765, 803, 812, 830, 875, 960, 962, 981, 985, 999], "hour": [188, 208, 235, 270, 300, 395, 397, 399, 404, 406, 410, 411, 418, 424, 579, 582, 583, 584, 585, 586, 588, 589, 590, 709, 710, 711, 712, 713, 714, 751, 752, 753, 765, 803, 812, 830, 875, 878, 981, 985, 993, 999], "1w": [188, 208, 235, 270, 300, 406, 410, 424, 579, 582, 583, 584, 585, 586, 588, 589, 590, 709, 710, 712, 713, 752, 753, 765, 803, 812, 830, 875, 981, 985, 999], "1mo": [188, 208, 235, 270, 300, 384, 402, 403, 406, 409, 410, 417, 424, 579, 582, 583, 584, 585, 586, 588, 589, 590, 709, 710, 712, 713, 752, 753, 765, 803, 812, 830, 875, 955, 976, 977, 978, 981, 982, 983, 984, 985, 992, 999, 1000], "month": [188, 208, 235, 270, 300, 387, 402, 403, 406, 410, 413, 416, 424, 579, 582, 583, 584, 585, 586, 588, 589, 590, 708, 709, 710, 711, 712, 713, 714, 752, 753, 765, 803, 812, 830, 875, 958, 977, 978, 981, 985, 988, 991, 999], "1q": [188, 208, 235, 270, 300, 406, 410, 424, 579, 582, 583, 584, 585, 586, 588, 589, 590, 709, 710, 712, 713, 752, 753, 765, 803, 812, 830, 875, 981, 985, 999], "quarter": [188, 208, 235, 270, 300, 406, 410, 424, 579, 582, 583, 584, 585, 586, 588, 589, 590, 709, 710, 712, 713, 752, 753, 765, 803, 812, 830, 875, 981, 985, 999], "1y": [188, 208, 235, 270, 300, 406, 410, 424, 579, 582, 583, 584, 585, 586, 588, 589, 590, 709, 710, 712, 713, 752, 753, 765, 803, 812, 830, 875, 981, 985, 999], "1i": [188, 208, 235, 270, 300, 406, 579, 582, 583, 584, 585, 586, 588, 589, 590, 765, 803, 812, 830, 875, 981], "3d12h4m25": [188, 208, 235, 270, 300, 410, 424, 579, 709, 710, 712, 713, 752, 753, 765, 803, 812, 830, 875, 985, 999], "correspond": [188, 208, 235, 260, 270, 300, 394, 406, 410, 424, 527, 570, 579, 582, 583, 584, 585, 586, 588, 589, 590, 709, 710, 712, 713, 752, 753, 765, 786, 803, 812, 830, 875, 965, 981, 985, 999, 1119, 1250], "daylight": [188, 208, 235, 270, 300, 381, 389, 406, 410, 424, 579, 582, 583, 584, 585, 586, 588, 589, 590, 709, 710, 712, 713, 714, 752, 753, 765, 803, 812, 830, 875, 960, 981, 985, 999], "10i": [188, 235, 300, 579, 765, 803, 830, 875], "datetime_rang": [188, 300, 382, 384, 402, 403, 406, 409, 410, 417, 418, 419, 420, 421, 422, 423, 424, 427, 582, 583, 585, 588, 589, 590, 709, 765, 803, 875, 952, 953, 955, 960, 961, 962, 968, 969, 971, 974, 977, 978, 979, 981, 984, 985, 990, 992, 993, 994, 995, 996, 997, 998, 999], "30m": [188, 300, 410, 424, 803, 875, 985, 999], "lower_bound": [188, 300, 357, 359, 459, 765, 803, 875, 930, 932, 1030, 1237, 1250], "upper_bound": [188, 300, 357, 358, 459, 516, 765, 803, 875, 930, 931, 1030, 1097, 1250], "bys": [188, 300, 803, 875], "int_rang": [188, 268, 277, 286, 300, 688, 803, 817, 855, 863, 875], "2i": [188, 300, 803, 875], "3i": [188, 300, 803, 875], "a_agg_list": [188, 300, 803, 875], "rollinggroupbi": [189, 192, 235, 300], "group_bi": [190, 222, 226, 299, 300, 309, 441, 443, 448, 451, 525, 527, 605, 606, 680, 730, 765, 786, 787, 794, 796, 805, 826, 838, 874, 875, 878], "group_by_dynam": [191, 235, 300, 806, 830, 875], "_lower_bound": [191, 300, 806, 875], "_upper_bound": [191, 300, 806, 875], "seed_1": [193, 300, 453, 765, 1024, 1250], "seed_2": [193, 300, 453, 765, 1024, 1250], "seed_3": [193, 300, 453, 765, 1024, 1250], "hash": [193, 300, 765, 1250], "Its": [193, 300, 453, 765, 1024, 1250], "u64": [193, 277, 300, 453, 572, 765, 826, 855, 875, 1024, 1250], "10783150408545073287": [193, 300], "1438741209321515184": [193, 300], "10047419486152048166": [193, 300], "2047317070637311557": [193, 300], "ab": [194, 210, 253, 274, 300, 661, 663, 765, 851, 875, 1025, 1055, 1221, 1250], "grown": [196, 300], "insert_column": [197, 300], "intermedi": [199, 300, 810, 875, 1259], "linear": [199, 228, 292, 300, 458, 484, 530, 568, 586, 694, 695, 739, 765, 810, 827, 869, 875, 1029, 1060, 1118, 1134, 1250], "666667": [199, 271, 288, 300, 432, 733, 765, 810, 849, 865, 875, 1008, 1250], "333333": [199, 300, 474, 546, 765, 810, 875, 1113, 1138, 1250], "mask": [200, 202, 300, 347, 460, 462, 463, 466, 467, 473, 561, 562, 610, 614, 621, 765, 915, 1017, 1023, 1030, 1032, 1035, 1036, 1041, 1042, 1050, 1114, 1115, 1145, 1163, 1167, 1174, 1241, 1250], "visual": [200, 202, 300], "scalar": [203, 211, 236, 300, 594, 686, 727, 730, 765, 1052, 1143, 1250], "With": [203, 245, 300, 509, 582, 583, 584, 585, 586, 588, 589, 590, 596, 765, 836, 875, 1052, 1085, 1149, 1250], "buffer_s": [205, 300], "fit": [205, 247, 268, 300, 598, 741, 765, 1151, 1152, 1250], "signific": [205, 211, 300, 315, 527, 592, 765, 1099, 1140, 1250], "4x": [205, 300], "materialis": [205, 206, 236, 237, 300], "rows_by_kei": [205, 237, 300], "iter_row": [206, 236, 237, 238, 300], "17_500": [206, 300], "klmnoopqrstuvwxyz": [206, 300], "__name__": [206, 300], "7500": [206, 300], "15_000": [206, 300], "record_batch": [206, 300], "to_arrow": [206, 300, 1250], "to_batch": [206, 300], "date32": [206, 300], "large_str": [206, 255, 261, 300], "15000": [206, 300], "2500": [206, 300], "left_on": [207, 208, 269, 300, 811, 812, 848, 875], "right_on": [207, 208, 269, 300, 811, 812, 848, 875], "suffix": [207, 208, 241, 274, 279, 300, 310, 349, 468, 470, 471, 472, 524, 547, 548, 550, 551, 559, 565, 576, 616, 647, 650, 765, 811, 812, 832, 851, 853, 856, 875, 878, 917, 1169, 1203], "_right": [207, 208, 300, 811, 812, 875], "joinvalid": [207, 300, 811, 875], "join_nul": [207, 300, 811, 875], "semi": [207, 300, 811, 875], "anti": [207, 300, 811, 863, 875, 1142, 1145, 1250], "cross": [207, 300, 811, 875], "outer_coalesc": [207, 300, 811, 875], "coalesc": [207, 269, 300, 651, 811, 848, 875, 1204], "cartisian": [207, 300, 811, 875], "many_to_mani": [207, 300, 811, 875], "one_to_on": [207, 300, 811, 875], "one_to_mani": [207, 300, 811, 875], "many_to_on": [207, 300, 811, 875], "join_asof": [207, 300, 811, 875], "other_df": [207, 300], "ham_right": [207, 300, 811, 875], "by_left": [208, 300, 812, 875], "by_right": [208, 300, 812, 875], "asofjoinstrategi": [208, 300, 812, 875], "allow_parallel": [208, 300, 811, 812, 875], "force_parallel": [208, 300, 811, 812, 875], "asof": [208, 300, 812, 875], "rather": [208, 300, 525, 538, 567, 578, 660, 765, 812, 875, 1117, 1127, 1213, 1250], "asof_join": [208, 300], "distanc": [208, 300, 455, 765, 812, 875, 1026, 1250], "plan": [208, 209, 300, 782, 786, 790, 794, 811, 812, 834, 838, 875], "forc": [208, 211, 286, 300, 516, 811, 812, 863, 875, 1099, 1250], "gdp": [208, 300, 812, 875], "2016": [208, 300, 812, 875], "2017": [208, 300, 812, 875], "2018": [208, 300, 409, 812, 875, 984], "2019": [208, 300, 812, 875], "jan": [208, 300, 812, 875], "1st": [208, 300, 812, 875], "4164": [208, 300, 812, 875], "4411": [208, 300, 812, 875], "4566": [208, 300, 812, 875], "4696": [208, 300, 812, 875], "set_sort": [208, 235, 270, 300, 579, 765, 812, 830, 875, 1250], "popul": [208, 300, 812, 875], "12th": [208, 300, 812, 875], "82": [208, 300, 812, 875], "66": [208, 269, 300, 589, 681, 765, 812, 848, 875, 1134, 1250], "83": [208, 300, 812, 875], "52": [208, 274, 300, 425, 591, 765, 812, 851, 875], "request": [209, 300], "describe_plan": [209, 300], "unoptim": [209, 300], "describe_optimized_plan": [209, 300], "show_graph": [209, 300, 875], "un": [209, 300], "graphviz": [209, 300, 838, 875], "much": [211, 268, 286, 300, 374, 493, 514, 527, 625, 626, 730, 765, 863, 945, 1069, 1090, 1099, 1178, 1179, 1250], "intens": [211, 286, 300, 559, 765, 1099, 1250], "materi": [211, 238, 286, 300, 786, 826, 863, 875, 878, 1099, 1250], "parallelis": [211, 286, 300, 1099, 1250], "achiev": [211, 286, 300, 527, 626, 765, 946, 1099, 1117, 1179, 1250], "best": [211, 286, 300, 527, 765, 1099, 1250], "black": [211, 300, 346, 348, 349, 350], "arbitrarili": [211, 300], "rearrang": [211, 300], "transform": [211, 300, 525, 656, 658, 659, 765], "lru_cach": [211, 300, 527, 765, 1099, 1250], "column_1": [211, 265, 300], "axi": [212, 214, 217, 219, 251, 300, 689, 690, 821, 875], "max_horizont": [212, 300, 731], "null_strategi": [214, 251, 300], "nullstrategi": [214, 251, 300], "mean_horizont": [214, 300], "propag": [214, 251, 300, 431, 552, 553, 555, 609, 765, 1108, 1109, 1162, 1250], "spam": [214, 300, 619, 1172], "ignore_nul": [215, 252, 300, 311, 313, 432, 433, 434, 609, 682, 684, 765, 882, 883, 1008, 1009, 1010, 1162, 1240, 1250], "id_var": [217, 300, 821, 875], "value_var": [217, 300, 821, 875], "variable_nam": [217, 300, 821, 875], "value_nam": [217, 300, 821, 875], "unpivot": [217, 300, 821, 875], "massag": [217, 300, 821, 875], "measur": [217, 300, 821, 875], "steve": [218, 300, 822, 875], "elis": [218, 300, 822, 875], "ag": [218, 300, 822, 875], "anna": [218, 300, 822, 875], "megan": [218, 300, 822, 875], "thoma": [218, 300, 822, 875], "21": [218, 251, 300, 582, 583, 585, 588, 589, 590, 720, 765, 822, 875, 878], "min_horizont": [219, 300, 735, 744], "what": [222, 300, 303, 525, 611, 636, 765, 1164, 1189, 1240, 1250, 1254], "pack": [222, 300], "expr_unique_subset": [222, 300], "df_nuniqu": [222, 300], "df_agg_nuniqu": [222, 300], "include_kei": [224, 238, 300], "offer": [225, 300, 563, 765, 825, 875], "fulli": [225, 239, 300], "cast_str_to_int": [225, 300, 825, 875], "col_nam": [225, 300, 755, 825, 875], "tdf": [225, 300, 825, 875], "aggregate_funct": [226, 300], "pivotagg": [226, 300], "sort_column": [226, 300], "section": [226, 300, 610, 618, 619, 621, 634, 709, 710, 712, 713, 752, 753, 1163, 1171, 1172, 1174, 1187], "predefin": [226, 300], "predict": [226, 229, 270, 300], "transpos": [226, 300], "discoveri": [226, 300], "col1": [226, 300, 875, 1259], "col2": [226, 300, 875, 1259], "col3": [226, 300, 1259], "tanh": [226, 300, 765, 1250], "998347": [226, 300], "964028": [226, 300], "999954": [226, 300], "unique_column_valu": [226, 300], "interpol": [228, 292, 300, 440, 530, 568, 586, 739, 765, 827, 869, 875, 1118, 1134, 1250], "rollinginterpolationmethod": [228, 292, 300, 568, 586, 739, 765, 827, 869, 875, 1118, 1134, 1250], "midpoint": [228, 292, 300, 568, 586, 739, 765, 827, 869, 875, 1118, 1134, 1250], "replace_column": [232, 300], "t_0": [235, 300, 579, 582, 583, 584, 585, 586, 588, 589, 590, 765, 830, 875], "t_1": [235, 300, 579, 582, 583, 584, 585, 586, 588, 589, 590, 765, 830, 875], "t_n": [235, 300, 579, 582, 583, 584, 585, 586, 588, 589, 590, 765, 830, 875], "43": [235, 300, 368, 579, 589, 765, 830, 875], "strptime": [235, 300, 409, 579, 765, 830, 875, 984], "2d": [235, 260, 300, 406, 579, 727, 765, 830, 875, 952, 958], "sum_a": [235, 300, 579, 765, 830, 875], "min_a": [235, 300, 579, 765, 830, 875], "max_a": [235, 300, 579, 765, 830, 875], "by_pred": [236, 300], "accord": [236, 300, 526, 567, 709, 710, 712, 713, 752, 753, 765, 965, 1117, 1250], "mutual": [236, 300], "exclus": [236, 300, 681, 688, 724, 725, 765], "clariti": [236, 300], "toomanyrowsreturnederror": [236, 300, 777], "norowsreturnederror": [236, 300, 777], "inherit": [236, 300], "rowserror": [236, 300, 777], "high": [238, 300, 567, 765, 1117, 1250], "cost": [238, 300], "reoconstruct": [238, 300], "defaultdict": [238, 300], "assum": [238, 300, 816, 817, 858, 863, 875], "with_replac": [239, 300, 504, 593, 765, 1080, 1141, 1250], "ordereddict": [240, 300, 747, 831, 875], "named_expr": [241, 242, 274, 275, 300, 744, 747, 832, 833, 851, 852, 875], "threshold": [241, 300, 832, 875], "set_auto_structifi": [241, 274, 300, 832, 851, 875], "auto_structifi": [241, 274, 300, 832, 851, 875], "is_odd": [241, 300, 832, 875], "_is_odd": [241, 300, 832, 875], "sequenti": [242, 275, 300, 833, 852, 875], "fill_valu": [245, 246, 268, 300, 596, 597, 765, 836, 837, 875, 1149, 1150, 1250], "opposit": [245, 300, 509, 596, 765, 836, 875, 1085, 1149, 1250], "lag": [245, 300, 509, 596, 694, 765, 836, 875, 1085, 1149, 1250], "shift": [246, 300, 377, 488, 560, 597, 694, 765, 837, 875, 948, 1064, 1113, 1150, 1250], "shrink": [247, 300, 598, 765, 1151, 1152, 1250], "hold": [247, 300], "ddof": [250, 271, 300, 588, 590, 608, 679, 696, 698, 742, 743, 746, 754, 765, 841, 849, 875, 1136, 1138, 1161, 1239, 1250], "deviat": [250, 300, 433, 588, 608, 746, 765, 841, 875, 1009, 1161, 1250], "degre": [250, 271, 300, 569, 588, 590, 608, 679, 690, 696, 698, 742, 743, 746, 754, 765, 841, 849, 875, 1136, 1138, 1161, 1239, 1250], "freedom": [250, 271, 300, 588, 590, 608, 679, 696, 698, 742, 743, 746, 754, 765, 841, 849, 875, 1136, 1138, 1161, 1239, 1250], "divisor": [250, 271, 300, 588, 590, 608, 679, 696, 698, 742, 743, 746, 754, 765, 841, 849, 875, 1136, 1138, 1161, 1239, 1250], "816497": [250, 300], "gather_everi": [254, 300, 669, 765, 844, 875, 1223, 1250], "mostli": [255, 300, 441, 765], "categoricaltyp": [255, 300], "fruit": [256, 300, 576, 616, 644, 765, 1169, 1197], "car": [256, 300, 576, 765], "beetl": [256, 300, 576, 765], "audi": [256, 300, 576, 765], "28": [256, 300, 308, 409, 427, 765, 984, 1002, 1259], "300": [256, 300, 557, 765, 1130, 1131, 1133, 1250], "drop_first": [258, 300], "dummi": [258, 300, 1227, 1250], "foo_1": [258, 300], "foo_2": [258, 300], "bar_3": [258, 300], "bar_4": [258, 300], "ham_a": [258, 300], "ham_b": [258, 300], "instantiat": [259, 300, 1229, 1250], "from_repr": [259, 300, 1229, 1250], "df_from_str_repr": [259, 300], "eval": [259, 300, 715, 1229, 1250], "indexord": [260, 300], "fortran": [260, 300], "downstream": [260, 300, 595, 765, 1147, 1250], "applic": [260, 300, 527, 582, 583, 584, 585, 586, 588, 589, 590, 765], "prevent": [260, 300, 310, 367, 368, 474, 546, 666, 765, 875, 939, 940, 1220, 1250], "reshap": [260, 300, 491, 765, 1067, 1250], "ll": [260, 300], "u1": [260, 300], "f4": [260, 300], "view": [260, 300, 527, 765, 1231, 1250], "recarrai": [260, 300], "rec": [260, 300], "use_pyarrow_extension_arrai": [261, 300, 1232, 1250], "extens": [261, 300, 1232, 1250], "sent": [261, 300, 1231, 1232, 1250], "pandas_df1": [261, 300], "pandas_df2": [261, 300], "pandas_df2_pa": [261, 300], "na": [261, 300, 644, 1232, 1250], "four": [263, 300], "five": [263, 300, 1259], "bottom_k": [264, 300, 673, 765, 845, 875, 1234, 1250], "header_nam": [265, 300], "column_nam": [265, 300], "perhap": [265, 300], "column_2": [265, 300], "name_gener": [265, 300], "base_nam": [265, 300], "my_column_": [265, 300], "my_column_0": [265, 300], "my_column_1": [265, 300], "my_column_2": [265, 300], "j": [265, 300], "new_id": [265, 300], "uniquekeepstrategi": [266, 300, 846, 875], "kept": [266, 300, 846, 875], "decompos": [267, 300, 847, 875], "t_a": [267, 300, 847, 875], "t_b": [267, 300, 847, 875], "t_c": [267, 300, 847, 875], "t_d": [267, 300, 847, 875], "womp": [267, 300, 847, 875], "t_": [267, 300, 847, 875], "t_struct": [267, 300, 847, 875], "step": [268, 300, 688, 724, 725], "unstackdirect": [268, 300], "pivot": [268, 300], "phase": [268, 300], "subject": [268, 300], "ascii_uppercas": [268, 300], "h": [268, 300, 308, 413, 416, 598, 651, 653, 657, 765, 1204, 1206, 1210], "x_0": [268, 300, 432, 433, 434, 765, 1008, 1009, 1010, 1250], "x_1": [268, 300], "y_0": [268, 300, 432, 433, 434, 765, 1008, 1009, 1010, 1250], "y_1": [268, 300], "z_0": [268, 300], "z_1": [268, 300], "include_nul": [269, 300, 848, 875], "implicit": [269, 300, 848, 875], "syntact": [269, 300, 574, 682, 684, 687, 697, 699, 702, 716, 717, 721, 722, 723, 726, 731, 733, 734, 735, 737, 738, 739, 744, 746, 748, 750, 754, 756, 765, 848, 875, 1123, 1160, 1250], "sugar": [269, 300, 574, 682, 684, 687, 697, 699, 702, 716, 717, 721, 722, 723, 726, 731, 733, 734, 735, 737, 738, 739, 744, 746, 748, 750, 754, 756, 765, 848, 875, 1123, 1160, 1250], "400": [269, 300, 419, 420, 422, 848, 875, 1130, 1131, 1133, 1250], "600": [269, 300, 419, 420, 422, 848, 875, 878], "700": [269, 300, 848, 875], "new_df": [269, 300, 848, 875], "time_column": [270, 300], "frequenc": [270, 300], "date_rang": [270, 300, 387, 390, 407, 415, 426, 958, 976, 982, 983, 1000, 1001], "forward_fil": [270, 300, 365, 368, 765], "varianc": [271, 300, 434, 475, 590, 679, 754, 765, 849, 875, 1010, 1053, 1138, 1239, 1250], "grow": [272, 300], "not_": [274, 300, 469, 765, 851, 875, 1250], "not_c": [274, 300, 851, 875], "diff": [274, 300, 417, 418, 419, 420, 421, 422, 423, 505, 765, 851, 875, 992, 993, 994, 995, 996, 997, 998, 1081, 1250], "_diff": [274, 300, 851, 875], "row_nr": [276, 300, 854, 875], "1001": [277, 300, 855, 875], "1002": [277, 300, 855, 875], "named_agg": [279, 856], "_sum": [279, 856], "_mean_squar": [279, 856], "b_sum": [279, 856], "c_mean_squar": [279, 856], "sub": [281, 286, 330, 331, 332, 334, 335, 336, 337, 338, 339, 342, 765, 899, 900, 901, 903, 904, 905, 906, 907, 908, 911], "map_group": [281, 686, 858], "toward": [282, 478, 498, 699, 765, 859, 1054, 1074, 1250], "nr": [284, 294, 861, 871], "triangl": [286, 863], "group_df": [286, 863], "maxim": [287, 323, 765, 864, 892, 1250], "833333": [288, 865], "minim": [290, 324, 331, 483, 598, 606, 765, 867, 893, 900, 1059, 1103, 1151, 1250], "overview": [300, 765, 777, 875, 1250, 1259], "frameinittyp": [300, 875], "entri": [300, 875, 1258], "mydatafram": 300, "df4": 300, "df5": 300, "df6": 300, "approx_n_uniqu": [300, 765, 875], "corr": 300, "drop_in_plac": 300, "drop_nul": [300, 379, 765, 875, 950, 1250], "estimated_s": [300, 1250], "explod": [300, 443, 559, 575, 765, 875, 1124, 1250], "find_idx_by_nam": 300, "fold": [300, 536, 693, 700, 701, 704, 705, 740], "frame_equ": 300, "group_by_rol": [300, 875], "groupby_dynam": [300, 875], "groupby_rol": [300, 875], "hash_row": 300, "hstack": 300, "insert_at_idx": 300, "is_dupl": [300, 765, 1250], "is_empti": [300, 1250], "is_uniqu": [300, 765, 1250], "iter_column": 300, "iter_slic": 300, "melt": [300, 875], "merge_sort": [300, 875], "n_uniqu": [300, 316, 765, 1250], "pipe": [300, 765, 875], "plot": [300, 826, 838, 875, 1250], "defer": [300, 303, 1250, 1254], "galleri": [300, 303, 1250, 1254], "scatter": [300, 303, 1146, 1250], "speci": [300, 303], "setosa": [300, 303], "versicolor": [300, 303], "stock_1": [300, 303], "stock_2": [300, 303], "quantil": [300, 567, 586, 765, 875, 1117, 1134, 1250], "replace_at_idx": 300, "select_seq": [300, 875], "shift_and_fil": [300, 765, 875, 1250], "shrink_to_fit": [300, 1250], "take_everi": [300, 765, 875, 1250], "to_dummi": [300, 1250], "to_numpi": [300, 525, 765, 1250], "to_panda": [300, 1250], "to_struct": [300, 619], "unnest": [300, 375, 567, 577, 619, 620, 642, 643, 663, 765, 875, 946, 1092, 1117, 1126, 1195, 1196, 1250], "unstack": 300, "with_columns_seq": [300, 875], "with_row_count": [300, 875], "write_avro": 300, "write_databas": 300, "write_delta": 300, "write_excel": 300, "write_ipc_stream": 300, "write_json": 300, "write_parquet": 300, "cum_prod": [308, 372, 765, 943, 1250], "ghi": [308, 619, 765, 878, 1172], "94": [309, 765], "to_uppercas": [310, 550, 620, 765], "confus": [311, 468, 470, 636, 765], "kleen": [311, 313, 682, 684, 765, 882, 883, 1250], "bitwis": [312, 558, 681, 682, 683, 684, 685, 765], "upcast": [314, 765], "skip_nul": [315, 527, 765, 885, 1099, 1250], "pass_nam": [315, 527, 765], "mapelementsstrategi": [315, 527, 765], "thread_loc": [315, 527, 765], "map_el": [315, 525, 681, 765, 885, 1250], "unknown": [315, 527, 618, 727, 765, 1171], "stage": [315, 765], "code": [315, 346, 348, 349, 350, 527, 595, 765, 796, 814, 875, 1147, 1250], "gil": [315, 527, 765], "approx": [316, 765], "1005": [316, 765], "invers": [317, 318, 319, 320, 321, 322, 765, 886, 887, 888, 889, 890, 891, 1250], "cosin": [317, 318, 360, 361, 525, 765, 886, 887, 934, 935, 1250], "570796": [317, 319, 765, 886, 888, 1250], "hyperbol": [318, 320, 322, 361, 602, 671, 765, 887, 889, 891, 935, 1156, 1225, 1250], "sine": [319, 320, 525, 601, 602, 765, 888, 889, 1155, 1156, 1250], "881374": [320, 765, 889, 1250], "tangent": [321, 322, 670, 671, 765, 890, 891, 1224, 1225, 1250], "785398": [321, 689, 690, 765, 890, 1250], "arg_wher": [326, 765], "subarrai": [328, 329, 897, 898], "membership": [332, 485, 901, 1061], "number_of_two": [333, 487], "sublist": [335, 482, 483, 485, 488, 492, 493, 494, 495, 496, 497, 505, 510, 513, 514, 516, 904, 1038, 1058, 1059, 1061, 1064, 1068, 1069, 1070, 1071, 1072, 1073, 1081, 1086, 1089, 1090, 1092, 1250], "x_y": [336, 496], "i8": [343, 387, 391, 395, 397, 399, 401, 404, 407, 408, 411, 425, 426, 515, 598, 738, 741, 756, 765, 912, 948, 958, 962, 974, 976, 983, 986, 1000, 1001, 1091, 1125, 1237, 1250], "seen": [345, 446, 765], "substr": [346, 349, 350, 610, 616, 621, 634, 635, 641, 642, 643, 644, 878, 914, 917, 918, 1163, 1169, 1174, 1187, 1188, 1194, 1195, 1196, 1197], "ends_with": [346, 350, 610, 644, 878, 1197], "yellow": [346, 348, 349, 350], "x00": [346, 348, 349, 350], "xff": [346, 348, 349, 350], "contains_with_lit": 346, "contains_with_expr": 346, "transferencod": [347, 348, 614, 615, 915, 916, 1167, 1168], "hex": [347, 348, 614, 615, 655, 915, 916, 1167, 1168, 1208], "base64": [347, 348, 614, 615, 915, 916, 1167, 1168], "code_encoded_hex": 348, "000000": 348, "ffff00": 348, "0000ff": 348, "anywher": [349, 350, 651, 652, 653, 1204, 1205, 1206], "ends_with_lit": 349, "ends_with_expr": 349, "starts_with_lit": 350, "starts_with_expr": 350, "complex": [351, 374, 673, 765, 919, 945, 1234, 1250], "frac": [351, 432, 433, 434, 603, 673, 765, 919, 1008, 1009, 1010, 1157, 1234, 1250], "to_fram": [353, 390, 410, 415, 424, 651, 946, 1117, 1142, 1145, 1195, 1196, 1204, 1250], "259921": [355, 765, 926, 1250], "587401": [355, 765], "numericliter": [357, 358, 359, 765, 930, 931, 932, 1250], "temporalliter": [357, 358, 359, 765, 930, 931, 932, 967, 968, 1250], "outsid": [357, 765, 930, 1250], "clip": [358, 359, 765, 931, 932, 1250], "543081": [361, 765, 935, 1250], "cotang": [362, 765, 936, 1250], "cumul": [364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 699, 700, 701, 702, 703, 704, 705, 706, 707, 765, 937, 938, 939, 940, 941, 942, 943, 944, 1250], "cum_count_revers": [364, 765], "cum_max_revers": [365, 765], "cum_max_all_fil": [365, 765], "cum_min_revers": [366, 765], "cum_prod_revers": [367, 765], "cum_sum_revers": [368, 765], "value_cum_sum": [368, 765], "value_cum_sum_all_fil": [368, 765], "cum_count": [369, 765, 1250], "cum_max": [370, 765, 941, 1250], "cum_min": [371, 765, 942, 1250], "cum_sum": [373, 457, 664, 703, 706, 765, 809, 875, 944, 1052, 1250], "min_period": [374, 432, 433, 434, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 742, 743, 765, 945, 1008, 1009, 1010, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1136, 1137, 1138, 1250], "slide": [374, 765, 945, 1250], "slot": [374, 377, 488, 765, 945, 948, 1064, 1250], "realli": [374, 611, 636, 765, 945, 1164, 1189, 1250], "visit": [374, 765, 945, 1250], "left_clos": [375, 567, 765, 946, 1117, 1250], "include_break": [375, 567, 765, 946, 1117, 1250], "bin": [375, 455, 567, 655, 681, 758, 765, 946, 1026, 1117, 1208, 1244, 1250], "discret": [375, 377, 429, 455, 488, 505, 567, 765, 946, 948, 1005, 1026, 1064, 1081, 1117, 1250], "plu": [375, 520, 765, 946, 1096, 1117, 1250], "endpoint": [375, 567, 582, 583, 584, 585, 586, 588, 589, 590, 765, 946, 1117, 1250], "observ": [375, 432, 433, 434, 567, 765, 946, 1008, 1009, 1010, 1117, 1250], "fall": [375, 567, 765, 946, 1117, 1250], "qcut": [375, 765, 946, 1250], "breakpoint": [375, 455, 567, 765, 946, 1026, 1117, 1250], "brk": [375, 567, 765], "foo_bin": [375, 567, 765], "radian": [376, 689, 765], "720": [376, 569, 765], "540": [376, 569, 765], "360": [376, 569, 765], "180": [376, 569, 765], "null_behavior": [377, 488, 765, 948, 1064, 1250], "nullbehavior": [377, 488, 765, 948, 1064, 1250], "drop_nan": [380, 765, 951, 1250], "utc": [381, 384, 386, 389, 409, 651, 653, 878, 952, 955, 960, 984, 1204, 1206], "vari": [381, 952, 1259], "rare": [381, 952], "countri": [381, 952], "switch": [381, 952], "samoa": [381, 952], "apia": [381, 952], "did": [381, 952], "2011": [381, 952], "dst_offset": [381, 952], "2012": [381, 952], "replace_time_zon": [381, 386, 389, 956, 957, 989], "pacif": [381, 952], "11h": [381, 952], "13h": [381, 952], "lose": [382, 953], "time_unit_m": [382, 953], "time_unit_n": [382, 953], "naiv": [383, 954, 1206], "compon": [383, 411, 651, 653, 714, 954, 986, 1204, 1206], "resolv": 383, "tm": [383, 878], "456000": [383, 954], "101000": 383, "d1": 383, "d2": 383, "d3": 383, "europ": [384, 389, 409, 955, 960, 984], "london": [384, 389, 409, 955, 960, 984], "gmt": [384, 389, 409, 955, 960, 984], "bst": [384, 389, 409, 955, 960, 984], "1978": [385, 386, 391, 394, 395, 397, 399, 404, 411, 414, 428], "2024": [385, 386, 391, 395, 397, 399, 404, 411, 414, 714, 878], "500_000": [385, 386, 391, 395, 397, 399, 404, 411, 414], "2065": [385, 386, 391, 395, 397, 399, 404, 411, 414], "60_000": [385, 386, 391, 395, 397, 399, 404, 411, 414], "060": [385, 386, 391, 395, 397, 399, 404, 411, 414], "weekdai": [387, 407], "ordinal_dai": [387, 426], "day_of_month": [387, 407, 426], "day_of_year": [387, 407, 426], "356": [387, 407, 426], "357": [387, 407, 426], "358": [387, 407, 426], "359": [387, 407, 426], "total_dai": [388, 959], "base_utc_offset": [389, 960], "0m": [389, 960], "epochtimeunit": [390, 720, 961], "unix": [390, 720, 961], "epoch_n": [390, 961], "epoch_": [390, 961], "978307200000000": [390, 415, 961, 990], "978307200": [390, 961], "978393600000000": [390, 415, 961, 990], "978393600": [390, 961], "978480000000000": [390, 415, 961, 990], "978480000": [390, 961], "total_hour": [392, 963], "leap": [393, 406, 964, 981], "iso": [394, 425, 426, 965, 1000, 1001], "1977": [394, 428], "1979": [394, 428], "calendar_year": [394, 428], "1976": [394, 428], "500000": [395, 969], "60000": 395, "total_microsecond": [396, 970], "total_millisecond": [398, 972], "total_minut": [400, 975], "think": [402, 403, 977, 978], "vectoris": [402, 403, 977, 978], "tseri": [402, 403, 977, 978], "monthend": [402, 977], "rollforward": [402, 977], "monthbegin": [403, 978], "rollback": [403, 978], "500000000": [404, 979], "60000000": 404, "total_nanosecond": [405, 980], "minu": [406, 981], "dictat": [406, 765, 981], "2005": [406, 981], "date_plus_1i": [406, 981], "1y2mo": [406, 981], "date_min": 406, "1998": [406, 981], "1999": [406, 878, 981], "2003": [406, 720, 981], "2004": [406, 981], "2006": [406, 981], "new_dat": 406, "ordin": [407, 570, 765, 982, 1119, 1250], "366": [407, 982], "use_earliest": [409, 424, 651, 653, 711, 984, 999, 1204, 1206], "ambigu": [409, 410, 424, 651, 653, 711, 984, 985, 999, 1204, 1206], "convert_time_zon": [409, 984], "london_timezon": [409, 984], "amsterdam": [409, 984], "london_to_amsterdam": [409, 984], "cet": [409, 984], "cest": [409, 984], "ts_local": [409, 984], "brussel": [409, 984], "half": [410, 432, 433, 434, 765, 985, 1008, 1009, 1010, 1250], "localis": [410, 424, 985, 999], "dst": [410, 424, 985, 999], "cst": [410, 424, 985, 999], "cdt": [410, 424, 985, 999], "225": [410, 424], "10m": [410, 424, 985, 999], "milli": [411, 986], "micro": [411, 986], "total_second": [412, 987], "to_str": [413, 988], "datetime_str": [413, 416], "day_nam": [413, 416], "month_nam": [413, 416], "march": [413, 416, 988, 991], "april": [413, 416, 988, 991], "timestamp_n": [415, 990], "timestamp_m": 415, "978307200000": 415, "978393600000": 415, "978480000000": 415, "strftime": [416, 991], "days_diff": 417, "hours_diff": 418, "200m": [419, 420, 422], "milliseconds_diff": [419, 420, 422], "200": [419, 420, 422, 574, 765, 1123, 1130, 1131, 1133, 1250], "200000": [419, 817, 875], "800": [419, 420, 422], "minutes_diff": 421, "1440": [421, 996], "200000000": 422, "seconds_diff": 423, "safe": [424, 572, 765, 985, 999, 1121, 1206, 1231, 1250], "truncate_str": 424, "truncate_td": 424, "53": [425, 1000], "time_unit_u": 427, "32971": [427, 1002], "32974": [427, 1002], "32976": [427, 1002], "iso_year": 428, "pk": [429, 765, 1005, 1250], "probabl": [429, 567, 765, 1005, 1117, 1250], "459148": [429, 765], "754888": [429, 765], "span": [432, 433, 434, 765, 1008, 1009, 1010, 1250], "half_lif": [432, 433, 434, 765, 1008, 1009, 1010, 1250], "adjust": [432, 433, 434, 603, 765, 1008, 1009, 1010, 1157, 1250], "exponenti": [432, 433, 434, 436, 564, 765, 1008, 1009, 1010, 1011, 1250], "weight": [432, 433, 434, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 603, 765, 1008, 1009, 1010, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1136, 1137, 1138, 1157, 1250], "decai": [432, 433, 434, 765, 1008, 1009, 1010, 1250], "term": [432, 433, 434, 765, 1008, 1009, 1010, 1250], "mass": [432, 433, 434, 765, 1008, 1009, 1010, 1250], "gamma": [432, 433, 434, 765, 1008, 1009, 1010, 1250], "foral": [432, 433, 434, 765, 1008, 1009, 1010, 1250], "geq": [432, 433, 434, 765, 1008, 1009, 1010, 1250], "theta": [432, 433, 434, 765, 1008, 1009, 1010, 1250], "life": [432, 433, 434, 765, 1008, 1009, 1010, 1250], "exp": [432, 433, 434, 765, 1008, 1009, 1010, 1250], "ln": [432, 433, 434, 765, 1008, 1009, 1010, 1250], "smooth": [432, 433, 434, 765, 1008, 1009, 1010, 1250], "factor": [432, 433, 434, 672, 765, 1008, 1009, 1010, 1233, 1250], "leq": [432, 433, 434, 765, 1008, 1009, 1010, 1250], "imbal": [432, 433, 434, 765, 1008, 1009, 1010, 1250], "ew": [432, 433, 434, 765, 1008, 1009, 1010, 1250], "w_i": [432, 433, 434, 765, 1008, 1009, 1010, 1250], "recurs": [432, 433, 434, 765, 1008, 1009, 1010, 1250], "y_t": [432, 433, 434, 765, 1008, 1009, 1010, 1250], "y_": [432, 433, 434, 765, 1008, 1009, 1010, 1250], "x_t": [432, 433, 434, 765, 1008, 1009, 1010, 1250], "x_2": [432, 433, 434, 765, 1008, 1009, 1010, 1250], "428571": [432, 765, 1008, 1250], "bia": [433, 434, 475, 587, 603, 765, 1009, 1010, 1053, 1135, 1157, 1250], "unbias": [433, 434, 765, 1009, 1010, 1250], "963624": [433, 765, 1009, 1250], "928571": [434, 765, 1010, 1250], "wildcard": [435, 700, 701, 704, 705, 718, 740, 765], "regex": [435, 533, 610, 612, 613, 616, 618, 619, 620, 621, 634, 635, 644, 716, 765, 878, 1163, 1165, 1166, 1169, 1171, 1172, 1173, 1174, 1187, 1188, 1197], "aa": [435, 610, 621, 716, 765, 1163, 1174], "ba": [435, 644, 716, 765, 878], "cc": [435, 716, 765], "718282": [436, 765, 1011, 1250], "389056": [436, 765, 1011, 1250], "59815": [436, 765], "expand": [437, 532, 533, 573, 765, 878, 1012, 1250], "pythonliter": [438, 765, 1014, 1100, 1101, 1102, 1103, 1142, 1250], "extrem": [438, 581, 765, 1014, 1129, 1250], "group_col": [441, 680, 765], "g1": [441, 680, 765], "g2": [441, 680, 765], "lt": [441, 680, 765, 1250], "gte": [441, 680, 765], "n_1": [441, 765], "n_2": [441, 765], "n_3": [441, 765], "exprlistnamespac": [443, 765], "divis": [445, 674, 765], "truediv": [445, 765], "9774092659964970114": [453, 765], "13614470193936745724": [453, 765], "1101441246220388612": [453, 765], "11638928888656214026": [453, 765], "13382926553367784577": [453, 765], "bin_count": [455, 765, 1026, 1250], "include_categori": [455, 765, 1026, 1250], "include_breakpoint": [455, 765, 1026, 1250], "occurr": [455, 462, 463, 466, 467, 678, 765, 1026, 1035, 1036, 1041, 1042, 1238, 1250], "interpolationmethod": [458, 765, 1029, 1250], "regrid": [458, 765], "grid": [458, 765], "df_original_grid": [458, 765], "grid_point": [458, 765], "df_new_grid": [458, 765], "conflat": [459, 765], "finit": [461, 674, 696, 765, 1034, 1250], "is_first_distinct": [462, 765, 1035, 1250], "optional_memb": [464, 765, 1038, 1250], "infinit": [465, 674, 765, 1039, 1250], "is_last_distinct": [466, 765, 1041, 1250], "_isnan": [468, 765], "b_isnan": [468, 765], "negat": [469, 556, 765, 1111, 1250], "_is_not_nan": [470, 765], "b_is_not_nan": [470, 765], "_not_nul": [471, 765], "a_not_nul": [471, 765], "b_not_nul": [471, 765], "_isnul": [472, 765], "a_isnul": [472, 765], "b_isnul": [472, 765], "chain": [474, 546, 548, 549, 550, 551, 565, 665, 755, 765], "undo": [474, 539, 546, 548, 549, 565, 665, 765], "fisher": [475, 603, 765, 1053, 1157, 1250], "fourth": [475, 765, 1053, 1250], "subtract": [475, 664, 765, 1053, 1250], "distribut": [475, 603, 765, 1053, 1157, 1250], "elimin": [475, 765, 1053, 1250], "bias": [475, 603, 765, 1053, 1157, 1250], "scipi": [475, 603, 765, 1053, 1157, 1250, 1254], "stat": [475, 603, 765, 1053, 1157, 1250], "153061": [475, 765], "blindli": [490, 1066], "worth": [490, 1066], "enough": [490, 603, 765, 1066, 1157, 1250], "rank": [490, 696, 715, 765, 1066, 1250], "concat_list": [490, 715], "exprnamespac": 491, "flat": [491, 575, 765, 1067, 1124, 1250], "null_on_oob": [493, 514, 1069, 1090], "cheaper": [493, 514, 1069, 1090], "symmetr": [507, 1083], "sdiff": 507, "taken": [510, 640, 1086, 1193], "n_field_strategi": [516, 1092], "tostructstrategi": [516, 1092], "first_non_nul": [516, 1092], "max_width": [516, 1092], "field_0": [516, 1092], "field_1": [516, 1092], "field_n": [516, 1092], "pre": [516, 527, 567, 738, 741, 756, 765, 1117, 1250], "obtain": 516, "ok": 516, "longest": 516, "n0": 516, "n1": 516, "logarithm": [518, 519, 520, 765, 1094, 1095, 1096, 1250], "584963": [518, 765], "30103": [519, 765], "60206": [519, 765], "natur": [520, 765, 1096, 1250], "693147": [520, 765, 1094, 1096, 1250], "098612": [520, 765, 1094, 1096, 1250], "386294": [520, 765, 1096, 1250], "lowest": [521, 765], "9223372036854775808": [521, 765], "agg_list": [523, 525, 765], "map_batch": [523, 728, 765, 816, 875], "keep_nam": [524, 765], "a_revers": [524, 547, 549, 576, 665, 765], "b_revers": [524, 547, 549, 576, 665, 765], "rstrip": [524, 547, 765], "_revers": [524, 547, 549, 576, 665, 765], "is_elementwis": [525, 765], "whole": [525, 605, 606, 618, 765, 863, 875, 1171], "elementwis": [525, 580, 581, 582, 583, 585, 589, 765, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1136, 1137, 1138, 1250], "third": [525, 765], "parti": [525, 765], "book": [525, 765], "invok": [525, 765], "bug": [525, 527, 765, 816, 817, 858, 863, 875, 1099, 1250], "argmax": [525, 765], "remap": [526, 765, 1098, 1250], "lookup": [526, 761, 765, 1098, 1250], "discourag": [527, 765], "loop": [527, 765], "a_times_2": [527, 765], "tip": [527, 765], "again": [527, 765], "exprmetanamespac": [531, 534], "foo_bar2": [531, 534], "raise_if_undetermin": 535, "computeerror": [535, 633, 655, 777, 1186, 1208], "e_filt": [535, 537], "e_sum_ov": [535, 537], "e_sum_slic": [535, 537], "tree": 538, "modulu": [542, 765], "xlog2": [544, 564, 765], "purpos": [545, 765, 786, 796, 875], "x_uniqu": [545, 765], "y_uniqu": [545, 765], "reverse_": [548, 565, 765], "reverse_a": [548, 565, 765], "reverse_b": [548, 565, 765], "lowercas": [550, 656, 1209], "uppercas": [551, 659, 1212], "to_lowercas": 551, "poison": [552, 553, 765, 1108, 1109, 1250], "nanmax": [552, 553, 765, 1108, 1109, 1250], "inequ": [554, 765], "ne": [555, 765, 1250], "350": [557, 765, 1131, 1250], "650": [557, 765], "850": [557, 765], "more_expr": [559, 691, 693, 694, 695, 765], "mapping_strategi": [559, 765], "windowmappingstrategi": [559, 765], "group_to_row": [559, 765], "outcom": [559, 765], "group_dtyp": [559, 765], "warn": [559, 582, 583, 584, 585, 586, 588, 589, 590, 765], "flatten": [559, 765], "_max": [559, 765], "c_max": [559, 765], "_min": [559, 765], "c_min": [559, 765], "percent": [560, 765, 1113, 1250], "090909": [560, 765], "peak": [561, 562, 765, 1114, 1115, 1250], "extract_numb": [563, 765], "digit": [563, 591, 592, 619, 765, 1139, 1140, 1166, 1172, 1250, 1259], "scale_negative_even": [563, 765], "expon": [564, 765, 1250], "allow_dupl": [567, 765, 1117, 1250], "duplicateerror": [567, 765, 777, 1117, 1250], "happen": [567, 765, 1117, 1250], "cut": [567, 765, 1117, 1250], "566371": [569, 765], "424778": [569, 765], "283185": [569, 765], "141593": [569, 765, 886, 1250], "rankmethod": [570, 765, 1119, 1250], "ti": [570, 765, 1119, 1250], "competit": [570, 765, 1119, 1250], "highest": [570, 677, 696, 765, 875, 1119, 1250], "immedi": [570, 688, 692, 709, 710, 712, 713, 724, 725, 738, 741, 747, 752, 753, 756, 765, 1119, 1250], "nodefault": [574, 765, 1123, 1250], "_nodefault": [574, 765, 1123, 1250], "no_default": [574, 765, 1123, 1250], "fruits_revers": [576, 765], "cars_revers": [576, 765], "rle_id": [577, 765, 1126, 1250], "rle": [578, 765, 1127, 1250], "a_r": [578, 765], "ab_r": [578, 765], "window_s": [580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 742, 743, 765, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1250], "rolling_map": [580, 765, 1128, 1250], "multipli": [580, 581, 582, 583, 585, 588, 589, 590, 765, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1136, 1137, 1138, 1250], "rolling_sum": [581, 765, 1129, 1250], "nansum": [581, 765, 1129, 1250], "warn_if_unsort": [582, 583, 584, 585, 586, 588, 589, 590, 765], "travers": [582, 583, 585, 589, 765, 1130, 1131, 1133, 1136, 1137, 1138, 1250], "vector": [582, 583, 585, 589, 765, 1130, 1131, 1133, 1136, 1137, 1138, 1250], "5h": [582, 583, 584, 585, 586, 588, 589, 590, 765], "df_tempor": [582, 583, 585, 588, 589, 590, 765], "closur": [582, 583, 588, 589, 590, 765], "rolling_row_max": [582, 765], "2h": [582, 583, 585, 588, 589, 590, 765], "rolling_row_mean": [583, 765], "rolling_row_min": [585, 765], "625": [586, 765], "skew": [587, 765, 1135, 1250], "381802": [587, 765, 1135, 1250], "47033": [587, 765, 1135, 1250], "38180177416060584": [587, 765, 1135, 1250], "47033046033698594": [587, 765, 1135, 1250], "433013": [588, 765, 841, 875], "rolling_row_std": [588, 765], "rolling_row_sum": [589, 765], "39": [589, 720, 765], "57": [589, 765, 1139, 1250, 1259], "63": [589, 765], "69": [589, 765], "1875": [590, 765, 849, 875], "rolling_row_var": [590, 765], "figur": [592, 765, 838, 875, 1140, 1250], "01234": [592, 765, 1140, 1250], "012": [592, 765, 1140, 1250], "1200": [592, 765, 1140, 1250], "searchsortedsid": [594, 765, 1143, 1250], "leftmost": [594, 765, 1143, 1250], "rightmost": [594, 765, 1143, 1250], "six": [594, 765], "extrema": [598, 765, 1151, 1250], "112": [598, 765, 1259], "129": [598, 765], "8589934592": [598, 765], "1073741824": [598, 765], "175201": [602, 765, 1156, 1250], "unimod": [603, 765, 1157, 1250], "skewtest": [603, 765, 1157, 1250], "speak": [603, 765, 1157, 1250], "g_1": [603, 765, 1157, 1250], "m_3": [603, 765, 1157, 1250], "m_2": [603, 765, 1157, 1250], "m_i": [603, 765, 1157, 1250], "sum_": [603, 765, 1157, 1250], "texttt": [603, 765, 1157, 1250], "k_3": [603, 765, 1157, 1250], "k_2": [603, 765, 1157, 1250], "sqrt": [603, 689, 690, 765, 1157, 1250], "343622": [603, 765], "value1": [606, 765], "value2": [606, 765], "attain": [606, 765], "414214": [607, 765, 1160, 1250], "sensit": [610, 619, 621, 634, 1163, 1172, 1174, 1187], "ilmsuxu": [610, 618, 619, 621, 634, 1163, 1171, 1172, 1174, 1187], "default_match": [610, 621], "insensitive_match": [610, 621], "crab": [610, 621, 1163, 1174], "dog": [610, 656, 659, 695, 1163, 1209, 1212], "rab": [610, 637, 1163, 1190], "ascii_case_insensit": [611, 636, 1164, 1189], "aho": [611, 636, 1164, 1189], "corasick": [611, 636, 1164, 1189], "insensit": [611, 619, 634, 636, 878, 1163, 1164, 1172, 1174, 1187, 1189], "set_fmt_str_length": [611, 636, 1164, 1189], "lyric": [611, 636, 1164, 1189], "everybodi": [611, 636, 1164, 1189], "tell": [611, 636, 1164, 1189], "me": [611, 636, 1164, 1189], "feel": [611, 636, 1164, 1189], "love": [611, 636, 1164, 1189], "tonight": [611, 636, 1164, 1189], "success": [612, 613, 619, 1165, 1166, 1172], "overlap": [612, 613, 619, 1165, 1166, 1172], "bla": [613, 619, 1166, 1172], "asd": [613, 619, 1166, 1172], "678": [613, 619, 1166, 1172], "910t": [613, 619, 1166, 1172], "count_digit": 613, "dbc": [613, 1166], "3xy": [613, 1166], "1zy3": [613, 1166], "strings_hex": 615, "666f6f": [615, 1168], "626172": [615, 1168], "mango": [616, 644, 1169, 1197], "has_suffix": 616, "le": [616, 765, 1250], "nu": 616, "group_index": [618, 1171], "captur": [618, 620, 1171, 1173], "nthose": [618, 1171], "nodd": [618, 1171], "nthe": [618, 1171], "odd": 618, "vote": [618, 620, 1171, 1173], "ballon_dor": [618, 620, 1171, 1173], "404": [618, 620, 1171, 1173], "ref": [618, 620, 1171, 1173], "candid": [618, 620, 1171, 1173], "messi": [618, 620, 1171, 1173], "ronaldo": [618, 1171], "haystack": [619, 1172], "email": [619, 1172], "real": [619, 1172], "some_account": [619, 1172], "somewher": [619, 1172], "net": [619, 1172], "jkl": [619, 1172], "uvw": [619, 1172], "co": [619, 765, 1172, 1250], "uk": [619, 1172], "address": 619, "xi": [619, 1172], "quantifi": [619, 1172], "email_part": [619, 1172], "extracted_nr": 619, "910": [619, 1172], "unnam": [620, 1173], "weghorst": [620, 1173], "candi": 620, "lobster": [621, 1174], "crustaceon": [621, 1174], "pat": [621, 1174], "bc": [621, 635, 748, 1174, 1188], "aeiuo": [621, 1174], "find_pat": 621, "json_path_match": [622, 1175], "jsonpath": [622, 624, 1175, 1177], "json_decod": [623, 1176], "json_path": [624, 1177], "json_val": [624, 1177], "len_char": [625, 630, 1178, 1183], "_o": [625, 626, 1178, 1179], "caf\u00e9": [625, 626, 1178, 1179], "345": [625, 626, 1178, 1179], "\u6771\u4eac": [625, 626, 1178, 1179], "n_byte": [625, 626], "n_char": [625, 626], "fill_char": [628, 631, 632, 638, 1181, 1184, 1185, 1191], "justifi": [628, 638, 1181, 1191], "pad_end": [628, 632, 1181, 1185], "strip_chars_start": [629, 647, 649, 1182], "pad": [631, 632, 660, 1184, 1185, 1213], "reach": [631, 632, 660, 1184, 1185, 1213], "pad_start": [631, 638, 660, 1184, 1191, 1213], "cow": [631, 632, 1184, 1185], "monkei": [631, 632, 1184, 1185], "hippopotamu": [631, 632, 1184, 1185], "zfill": [632, 681, 765, 1185], "radix": [633, 655, 1186, 1208], "parseerror": [633, 655, 1186, 1208], "becom": 633, "to_integ": [633, 1186], "silent": [633, 655, 1186, 1208], "replace_al": [634, 1187], "citi": 634, "philadelphia": 634, "season": 634, "spring": 634, "summer": 634, "autumn": 634, "winter": 634, "weather": [634, 1187], "raini": [634, 1187], "sunni": [634, 1187], "cloudi": 634, "snowi": 634, "foggi": [634, 1187], "123abc": [634, 1187], "abc456": [634, 1187], "abcabc": [635, 1188], "123a123": [635, 1188], "replace_with": [636, 1189], "broadcast": [636, 878, 1189], "removes_pronoun": 636, "man": [637, 1190], "ana": [637, 1190], "oof": [637, 1190], "anan": [637, 1190], "am": [637, 1190], "strip_chars_end": [639, 648, 650, 1192], "subslic": [640, 1193], "pear": [640, 1193], "papaya": [640, 1193], "dragonfruit": [640, 1193], "s_slice": 640, "ear": [640, 1193], "aya": [640, 1193], "uit": [640, 1193], "ya": [640, 1193], "onf": [640, 1193], "foo_bar_baz": 641, "split_inclus": 641, "foo_": [641, 719], "bar_": 641, "a_1": [642, 1195, 1227, 1250], "d_4": [642, 1195], "rename_field": [642, 643, 946, 1117, 1195, 1196, 1250], "first_part": [642, 643, 1195, 1196], "second_part": [642, 643, 1195, 1196], "remaind": [643, 1196], "app": [644, 1197], "has_prefix": 644, "strip_char": [645, 1198], "nworld": 646, "foo_strip": 646, "ow": 646, "hell": [646, 1199], "rld": [646, 648, 1201], "strip_suffix": [647, 649], "foo_strip_end": 647, "oldw": 647, "he": 647, "abcdeff": 647, "fed": 647, "strip_prefix": [648, 650], "tworld": [648, 1199, 1201], "foo_strip_start": 648, "wod": [648, 1201], "aabcdef": 648, "cba": 648, "foobar": [649, 650, 1202, 1203], "foofoobar": [649, 1202], "foobarbar": [650, 1203], "polarstemporaltyp": [651, 1204], "penalti": [651, 652, 653, 1204, 1205, 1206], "clean": [651, 652, 653, 1204, 1205, 1206], "beforehand": [651, 652, 653, 1204, 1205, 1206], "certainli": [651, 652, 653, 1204, 1205, 1206], "00z": [651, 653, 1204, 1206], "sun": [651, 1204], "jul": [651, 1204], "34": [651, 1204], "inference_length": [654, 1207], "3420": [654, 1207], "120134": [654, 1207], "3212": [654, 1207], "90": [654, 1207], "143": [654, 1207, 1259], "numbers_decim": 654, "110": [655, 1208], "fa1e": [655, 1208], "ff00": [655, 1208], "cafe": [655, 1208], "64030": [655, 1208], "65280": [655, 1208], "51966": [655, 1208], "variant": [656, 658, 659, 1040, 1250], "foo_low": 656, "titlecas": [658, 1211], "sing": [658, 1211], "welcom": [658, 1211], "THERE": [658, 1211], "NO": [658, 878, 1211], "foo_titl": 658, "There": [658, 1211], "foo_upp": 659, "999999": [660, 711, 751, 752, 753, 878, 1213], "0123": [660, 1213], "cd": [661, 663], "struct_col": [661, 663], "www": 663, "xxx": 663, "yyi": 663, "zzz": 663, "obvious": 663, "structfieldnotfounderror": [663, 777], "761594": [671, 765, 1225, 1250], "replic": [672, 765, 1233, 1250], "vals_phys": [672, 765], "floordiv": [674, 765], "ieee": [674, 765], "754": [674, 765], "mathemat": [674, 715, 765], "undefin": [674, 765], "On": [674, 765], "operand": [674, 765], "infin": [674, 765], "value_count": [676, 765, 1250], "9223372036854775807": [677, 765], "binary_str": [681, 765], "250": [681, 765, 1131, 1250, 1259], "bin_x": [681, 765], "bin_i": [681, 765], "xor_xi": [681, 765], "bin_xor_xi": [681, 765], "00001010": [681, 765], "00001011": [681, 765], "00001000": [681, 765], "00000010": [681, 765], "11111010": [681, 765], "00000011": [681, 765], "249": [681, 765], "11111001": [681, 765], "01000010": [681, 765], "00000100": [681, 765], "70": [681, 765], "01000110": [681, 765], "AND": [682, 683, 878, 1231, 1250], "OR": [684, 685, 799, 875, 878], "any_horizont": 684, "returns_scalar": [686, 730, 765], "polarsintegertyp": [688, 724, 725], "arctan": [689, 690, 765, 1250], "angl": [689, 690], "plane": [689, 690], "rai": [689, 690], "tworoottwo": [689, 690], "arctan2d": 689, "atan2d": [689, 690], "atan2": [689, 690], "135": [689, 690], "356194": [689, 690], "arctan2": 690, "arg_tru": [692, 765, 1250], "mimic": 694, "a_lag_": 694, "a_rol": 694, "swim": 695, "walk": 695, "full_sent": 695, "correlationmethod": 696, "propagate_nan": 696, "spearman": 696, "544705": 696, "func": 697, "covari": [698, 743, 765], "acc": [700, 701, 704, 705, 718, 740], "include_init": [700, 704], "accumul": [700, 701, 704, 705, 718, 740], "fn": [700, 701, 704, 705, 718, 740], "new_valu": [700, 701, 704, 705, 718, 740], "cum_reduc": 700, "cumsum_horizont": 702, "cum_sum_horizont": 707, "granular": 709, "finer": 709, "permut": 709, "1985": [709, 712], "america": 712, "new_york": 712, "est": 712, "contrast": 714, "offset_bi": 714, "sometim": [714, 764], "tbl_width_char": 714, "120": 714, "add_week": 714, "add_dai": 714, "add_second": 714, "add_milli": 714, "add_hour": 714, "002": [714, 994, 995, 997], "add_calendar_dai": 714, "add_calendar_month": 714, "mo": 714, "add_calendar_year": 714, "a_b_doubl": 715, "f_string": 719, "placehold": 719, "hello_": 719, "_world": 719, "_bar_": 719, "foo_a_bar_1": 719, "foo_b_bar_2": 719, "foo_c_bar_3": 719, "epoch": 720, "timestep": 720, "1666683077": 720, "1666683099": 720, "12345": [720, 927, 1019, 1139, 1250], "12346": 720, "agg_group": [721, 765], "allow_object": 727, "valueexcept": 727, "test_func": 729, "list_of_seri": 730, "my_custom_aggreg": 730, "understood": 730, "power": [745, 1250], "a_a": 745, "a_txt": 745, "605551": 746, "605551275463989": 746, "my_struct": 747, "elif": 755, "pick": 755, "met": 755, "own": [755, 1259], "isn": 755, "arr": [757, 1231, 1242, 1250], "technic": 761, "further": [761, 1232, 1250], "columnfactori": 761, "more_nam": 761, "__call__": 761, "helper": 761, "__getattr__": 761, "idiomat": [761, 863], "quick": [761, 947, 1250, 1259], "prototyp": 761, "keystrok": 761, "drawback": 761, "readabl": 761, "modul": [764, 878, 1259], "and_": 765, "arcco": [765, 1250], "arccosh": [765, 1250], "arcsin": [765, 1250], "arcsinh": [765, 1250], "arctanh": [765, 1250], "arg_max": [765, 1250], "arg_min": [765, 1250], "arg_sort": [765, 1250], "arg_uniqu": [765, 1250], "backward_fil": 765, "cbrt": [765, 1250], "clip_max": [765, 1250], "clip_min": [765, 1250], "cosh": [765, 1250], "cot": [765, 1250], "cumcount": 765, "cummax": [765, 1250], "cummin": [765, 1250], "cumprod": [765, 1250], "cumsum": [765, 1250], "cumulative_ev": [765, 1250], "entropi": [765, 1250], "eq_miss": [765, 1250], "ewm_mean": [765, 1250], "ewm_std": [765, 1250], "ewm_var": [765, 1250], "extend_const": [765, 1250], "from_json": 765, "ge": [765, 1250], "gt": [765, 1250], "hist": [765, 1250, 1254], "implod": [765, 1250], "inspect": [765, 875], "is_between": [765, 1250], "is_finit": [765, 1250], "is_first": [765, 1250], "is_infinit": [765, 1250], "is_last": [765, 1250], "is_nan": [765, 1250], "is_not": 765, "is_not_nan": [765, 1250], "is_not_nul": [765, 1250], "kurtosi": [765, 1250], "log10": [765, 1250], "log1p": [765, 1250], "map_alia": 765, "map_dict": [765, 1250], "mod": 765, "mul": 765, "nan_max": [765, 1250], "nan_min": [765, 1250], "ne_miss": [765, 1250], "or_": 765, "pct_chang": [765, 1250], "peak_max": [765, 1250], "peak_min": [765, 1250], "pow": [765, 1250], "register_plugin": 765, "lib": [765, 1226, 1250], "input_wildcard_expans": 765, "cast_to_supertyp": 765, "pass_name_to_appli": 765, "changes_length": 765, "plugin": 765, "highli": 765, "unsaf": 765, "unstabl": 765, "serializ": 765, "ran": 765, "reinterpret": [765, 1250], "repeat_bi": 765, "rolling_appli": [765, 1250], "rolling_max": [765, 1250], "rolling_mean": [765, 1250], "rolling_median": [765, 1250], "rolling_min": [765, 1250], "rolling_quantil": [765, 1250], "rolling_skew": [765, 1250], "rolling_std": [765, 1250], "rolling_var": [765, 1250], "round_sig_fig": [765, 1250], "search_sort": [765, 1250], "shrink_dtyp": [765, 1250], "sin": [765, 1250], "sinh": [765, 1250], "sort_bi": 765, "tan": [765, 1250], "to_phys": [765, 924, 1250], "unique_count": [765, 1250], "xor": 765, "expos": 777, "miscellan": 777, "arrowerror": 777, "columnnotfounderror": 777, "invalidoperationerror": 777, "polarserror": 777, "polarspanicerror": 777, "schemaerror": 777, "schemafieldnotfounderror": 777, "shapeerror": 777, "parametr": 777, "build_info": 777, "get_index_typ": 777, "show_vers": 777, "threadpool_s": 777, "sqlcontext": [777, 1258], "hit": [782, 875], "node": [782, 786, 809, 816, 817, 821, 826, 828, 875], "background": [786, 875], "_eager": [786, 875], "inprocessqueri": [786, 875], "explain": [786, 875], "cancel": [786, 875], "set_streaming_chunk_s": [786, 875], "collect_all_async": [787, 875], "async": [787, 875], "stringio": [790, 834, 875], "snippet": [792, 875], "Be": [796, 875], "fewer": [796, 875], "suscept": [796, 875], "lazygroupbi": [802, 803, 804, 805, 806, 807, 830, 875], "other_lf": [811, 875], "validate_output_schema": [816, 817, 875], "streamabl": [816, 817, 821, 875], "past": [816, 817, 875], "paramount": [816, 817, 875], "elig": [816, 817, 875], "invari": [817, 875], "upheld": [817, 875], "100_000": [817, 875], "199998": [817, 875], "199996": [817, 875], "199994": [817, 875], "199992": [817, 875], "show_plot": [826, 875], "truncate_nod": [826, 875], "figsiz": [826, 838, 875], "gantt": [826, 875], "group_by_partit": [826, 875], "470": [826, 875], "475": [826, 875], "1964": [826, 875], "swap": [828, 875], "dynamic_group_bi": [830, 875], "deseri": [834, 875], "dataframescan": [834, 875], "output_schema": [834, 875], "run_parallel": [834, 875], "duplicate_check": [834, 875], "later": [834, 875], "output_path": [838, 875], "raw_output": [838, 875], "290994": [841, 875], "118034": [841, 875], "new_lf": [848, 875], "extern": [853, 875], "lf_other": [853, 875], "afoo": [853, 875], "cfoo": [853, 875], "train_lf": [853, 875], "feature_0": [853, 875], "feature_1": [853, 875], "test_lf": [853, 875], "_train": [853, 875], "feature_0_train": [853, 875], "opaqu": 863, "my_column": 863, "struct_seri": 863, "lf5": 875, "lf6": 875, "sink_csv": 875, "sink_ipc": 875, "sink_ndjson": 875, "sink_parquet": 875, "with_context": 875, "intuit": 878, "emploi": 878, "complement": 878, "plenti": 878, "cde": 878, "fgg": 878, "jjk": 878, "lmn": 878, "opp": 878, "qqr": 878, "by_dtyp": 878, "as_expr": 878, "dispatch": 878, "1_234_500": 878, "5_000_555": 878, "1234500": 878, "5000555": 878, "by_nam": 878, "2010": 878, "4_500_000": 878, "4500000": 878, "3265500": 878, "zap": 878, "2031": 878, "tstamp_tokyo": 878, "123465": 878, "tstamp_utc": 878, "999000": 878, "2025": 878, "666000": 878, "tstamp": 878, "600000": 878, "123000": 878, "999": [878, 1259], "666": 878, "td1": 878, "987000": 878, "td2": 878, "456789": [878, 986], "td3": 878, "2m": [878, 974], "456m": 878, "7d": 878, "456789\u00b5": 878, "18d": 878, "999999\u00b5": 878, "23h": 878, "987m": 878, "14d": 878, "16h": 878, "39m": 878, "21d": 878, "456001\u00b5": 878, "expand_selector": 878, "colz": [878, 1259], "everyth": 878, "signed_integ": 878, "unsigned_integ": 878, "is_selector": 878, "obj": 878, "include_categor": 878, "2345": 878, "3456": 878, "292432": [887, 1250], "549306": [891, 1250], "innter": 904, "set_ord": 925, "44225": [926, 1250], "56789": [927, 1019, 1139, 1250], "901234": [927, 1019, 1139, 1250], "1232e": [934, 936, 1250], "1656e15": [936, 1250], "break_point_label": [946, 1117, 1250], "break_point": [946, 1026, 1117, 1250], "category_label": [946, 1117, 1250], "581139": [947, 1250], "arraylik": [949, 1250], "ser": [956, 957, 989], "kathmandu": [956, 957, 989], "0545": [956, 957, 989], "500m": [969, 971, 979], "date_minus_1y_2mon": 981, "165": [985, 999], "round_str": 985, "round_td": 985, "111110": 986, "765431": 986, "11111": 986, "timestamp_u": 990, "978307200000000000": 990, "978393600000000000": 990, "978480000000000000": 990, "005": [1005, 1250], "06293300616044681": [1005, 1250], "65": [1005, 1250], "8568409950394724": [1005, 1250], "4000000": [1007, 1250], "814697265625": [1007, 1250], "085537": [1011, 1250], "bitmask": [1023, 1250], "absenc": [1023, 1250], "presenc": [1023, 1231, 1250], "confirm": [1023, 1250], "10734580197236529959": [1024, 1250], "3022416320763508302": [1024, 1250], "13756996518000038261": [1024, 1250], "is_signed_integ": [1040, 1250], "is_unsigned_integ": [1040, 1250], "field_2": 1092, "n00": 1092, "n01": 1092, "n02": 1092, "2147483648": [1097, 1250], "166667": [1113, 1250], "142857": [1113, 1250], "150": [1131, 1250], "450": [1131, 1250], "dev": [1136, 1250], "527525": [1136, 1250], "frequent": [1142, 1145, 1250], "2246e": [1155, 1224, 1250], "34776706224699483": [1157, 1250], "732051": [1160, 1250], "idx_rx": 1174, "idx_lit": 1174, "orld": 1200, "tur": 1211, "6331e16": [1224, 1250], "int64arrai": [1226, 1250], "a_2": [1227, 1250], "a_3": [1227, 1250], "s_from_str_repr": [1229, 1250], "zero_copy_onli": [1231, 1250], "writabl": [1231, 1250], "immut": [1231, 1250], "127": [1237, 1250], "seriesview": [1240, 1250], "dtype_if_empti": 1250, "position": 1250, "scenario": 1250, "chunk_length": 1250, "get_chunk": 1250, "has_valid": 1250, "is_boolean": 1250, "is_float": 1250, "is_integ": 1250, "is_numer": [1250, 1259], "is_sort": 1250, "is_tempor": 1250, "is_utf8": 1250, "new_from_index": 1250, "histogram": [1250, 1254], "kde": [1250, 1254], "series_equ": 1250, "set_at_idx": 1250, "two_a": 1258, "__enter__": 1258, "__exit__": 1258, "exc_typ": 1258, "baseexcept": 1258, "exc_val": 1258, "exc_tb": 1258, "tracebacktyp": 1258, "primari": 1259, "guid": 1259, "machin": 1259, "xdist": 1259, "hardwar": 1259, "setup": 1259, "sec": 1259, "numeric_dtyp": 1259, "null_probabililti": 1259, "test_numer": 1259, "col0": 1259, "col4": 1259, "29096": 1259, "485": 1259, "2147483647": 1259, "8257e14": 1259, "7508": 1259, "37338": 1259, "7264": 1259, "16996": 1259, "121": 1259, "361": 1259, "63204": 1259, "1443e235": 1259, "conform": 1259, "ascii_lett": 1259, "id_char": 1259, "alphabet": 1259, "price": 1259, "min_valu": 1259, "max_valu": 1259, "test_price_calcul": 1259, "a101": 1259, "8nin": 1259, "qhoo": 1259, "714": 1259, "544": 1259, "i0e0": 1259, "0000": 1259, "test_miscellan": 1259, "235": 1259, "87": 1259, "186": 1259, "174": 1259, "179": 1259, "213": 1259, "221": 1259, "86": 1259, "255": 1259}, "objects": {"polars": [[2, 0, 1, "", "Array"], [3, 0, 1, "", "Binary"], [4, 0, 1, "", "Boolean"], [5, 0, 1, "", "Categorical"], [46, 0, 1, "", "DataType"], [47, 0, 1, "", "Date"], [48, 0, 1, "", "Datetime"], [49, 0, 1, "", "Decimal"], [50, 0, 1, "", "Duration"], [51, 0, 1, "", "Enum"], [52, 0, 1, "", "Float32"], [53, 0, 1, "", "Float64"], [54, 0, 1, "", "Int16"], [55, 0, 1, "", "Int32"], [56, 0, 1, "", "Int64"], [57, 0, 1, "", "Int8"], [62, 0, 1, "", "List"], [63, 0, 1, "", "Null"], [64, 0, 1, "", "Object"], [1258, 0, 1, "", "SQLContext"], [71, 0, 1, "", "String"], [72, 0, 1, "", "StringCache"], [73, 0, 1, "", "Struct"], [74, 0, 1, "", "Time"], [75, 0, 1, "", "UInt16"], [76, 0, 1, "", "UInt32"], [77, 0, 1, "", "UInt64"], [78, 0, 1, "", "UInt8"], [79, 0, 1, "", "Unknown"], [80, 3, 1, "", "Utf8"], [81, 4, 1, "", "align_frames"], [682, 4, 1, "", "all"], [683, 4, 1, "", "all_horizontal"], [684, 4, 1, "", "any"], [685, 4, 1, "", "any_horizontal"], [686, 4, 1, "", "apply"], [687, 4, 1, "", "approx_n_unique"], [688, 4, 1, "", "arange"], [689, 4, 1, "", "arctan2"], [690, 4, 1, "", "arctan2d"], [691, 4, 1, "", "arg_sort_by"], [692, 4, 1, "", "arg_where"], [86, 4, 1, "", "build_info"], [693, 4, 1, "", "coalesce"], [87, 4, 1, "", "collect_all"], [88, 4, 1, "", "collect_all_async"], [89, 4, 1, "", "concat"], [694, 4, 1, "", "concat_list"], [695, 4, 1, "", "concat_str"], [696, 4, 1, "", "corr"], [697, 4, 1, "", "count"], [698, 4, 1, "", "cov"], [699, 4, 1, "", "cum_count"], [700, 4, 1, "", "cum_fold"], [701, 4, 1, "", "cum_reduce"], [702, 4, 1, "", "cum_sum"], [703, 4, 1, "", "cum_sum_horizontal"], [704, 4, 1, "", "cumfold"], [705, 4, 1, "", "cumreduce"], [706, 4, 1, "", "cumsum"], [707, 4, 1, "", "cumsum_horizontal"], [708, 4, 1, "", "date"], [709, 4, 1, "", "date_range"], [710, 4, 1, "", "date_ranges"], [711, 4, 1, "", "datetime"], [712, 4, 1, "", "datetime_range"], [713, 4, 1, "", "datetime_ranges"], [90, 4, 1, "", "disable_string_cache"], [714, 4, 1, "", "duration"], [715, 4, 1, "", "element"], [91, 4, 1, "", "enable_string_cache"], [716, 4, 1, "", "exclude"], [717, 4, 1, "", "first"], [718, 4, 1, "", "fold"], [719, 4, 1, "", "format"], [107, 4, 1, "", "from_arrow"], [108, 4, 1, "", "from_dataframe"], [109, 4, 1, "", "from_dict"], [110, 4, 1, "", "from_dicts"], [720, 4, 1, "", "from_epoch"], [111, 4, 1, "", "from_numpy"], [112, 4, 1, "", "from_pandas"], [113, 4, 1, "", "from_records"], [114, 4, 1, "", "from_repr"], [115, 4, 1, "", "get_index_type"], [721, 4, 1, "", "groups"], [722, 4, 1, "", "head"], [723, 4, 1, "", "implode"], [724, 4, 1, "", "int_range"], [725, 4, 1, "", "int_ranges"], [726, 4, 1, "", "last"], [727, 4, 1, "", "lit"], [728, 4, 1, "", "map"], [729, 4, 1, "", "map_batches"], [730, 4, 1, "", "map_groups"], [731, 4, 1, "", "max"], [732, 4, 1, "", "max_horizontal"], [733, 4, 1, "", "mean"], [734, 4, 1, "", "median"], [735, 4, 1, "", "min"], [736, 4, 1, "", "min_horizontal"], [737, 4, 1, "", "n_unique"], [738, 4, 1, "", "ones"], [739, 4, 1, "", "quantile"], [117, 4, 1, "", "read_avro"], [118, 4, 1, "", "read_csv"], [119, 4, 1, "", "read_csv_batched"], [120, 4, 1, "", "read_database"], [121, 4, 1, "", "read_database_uri"], [122, 4, 1, "", "read_delta"], [123, 4, 1, "", "read_excel"], [124, 4, 1, "", "read_ipc"], [125, 4, 1, "", "read_ipc_schema"], [126, 4, 1, "", "read_ipc_stream"], [127, 4, 1, "", "read_json"], [128, 4, 1, "", "read_ndjson"], [129, 4, 1, "", "read_ods"], [130, 4, 1, "", "read_parquet"], [131, 4, 1, "", "read_parquet_schema"], [740, 4, 1, "", "reduce"], [741, 4, 1, "", "repeat"], [742, 4, 1, "", "rolling_corr"], [743, 4, 1, "", "rolling_cov"], [132, 4, 1, "", "scan_csv"], [133, 4, 1, "", "scan_delta"], [134, 4, 1, "", "scan_iceberg"], [135, 4, 1, "", "scan_ipc"], [136, 4, 1, "", "scan_ndjson"], [137, 4, 1, "", "scan_parquet"], [138, 4, 1, "", "scan_pyarrow_dataset"], [744, 4, 1, "", "select"], [878, 6, 0, "-", "selectors"], [139, 4, 1, "", "set_random_seed"], [140, 4, 1, "", "show_versions"], [745, 4, 1, "", "sql_expr"], [746, 4, 1, "", "std"], [747, 4, 1, "", "struct"], [748, 4, 1, "", "sum"], [749, 4, 1, "", "sum_horizontal"], [750, 4, 1, "", "tail"], [152, 4, 1, "", "threadpool_size"], [751, 4, 1, "", "time"], [752, 4, 1, "", "time_range"], [753, 4, 1, "", "time_ranges"], [153, 4, 1, "", "using_string_cache"], [754, 4, 1, "", "var"], [755, 4, 1, "", "when"], [756, 4, 1, "", "zeros"]], "polars.Array": [[2, 1, 1, "", "__init__"]], "polars.Binary": [[3, 1, 1, "", "__init__"]], "polars.Boolean": [[4, 1, 1, "", "__init__"]], "polars.Categorical": [[5, 1, 1, "", "__init__"]], "polars.Config": [[6, 1, 1, "", "activate_decimals"], [7, 1, 1, "", "load"], [8, 1, 1, "", "load_from_file"], [9, 1, 1, "", "restore_defaults"], [10, 1, 1, "", "save"], [11, 1, 1, "", "save_to_file"], [12, 1, 1, "", "set_ascii_tables"], [13, 1, 1, "", "set_auto_structify"], [14, 1, 1, "", "set_decimal_separator"], [15, 1, 1, "", "set_float_precision"], [16, 1, 1, "", "set_fmt_float"], [17, 1, 1, "", "set_fmt_str_lengths"], [18, 1, 1, "", "set_fmt_table_cell_list_len"], [19, 1, 1, "", "set_streaming_chunk_size"], [20, 1, 1, "", "set_tbl_cell_alignment"], [21, 1, 1, "", "set_tbl_cell_numeric_alignment"], [22, 1, 1, "", "set_tbl_cols"], [23, 1, 1, "", "set_tbl_column_data_type_inline"], [24, 1, 1, "", "set_tbl_dataframe_shape_below"], [25, 1, 1, "", "set_tbl_formatting"], [26, 1, 1, "", "set_tbl_hide_column_data_types"], [27, 1, 1, "", "set_tbl_hide_column_names"], [28, 1, 1, "", "set_tbl_hide_dataframe_shape"], [29, 1, 1, "", "set_tbl_hide_dtype_separator"], [30, 1, 1, "", "set_tbl_rows"], [31, 1, 1, "", "set_tbl_width_chars"], [32, 1, 1, "", "set_thousands_separator"], [33, 1, 1, "", "set_trim_decimal_zeros"], [34, 1, 1, "", "set_verbose"], [35, 1, 1, "", "state"]], "polars.DataFrame": [[156, 1, 1, "", "__dataframe__"], [157, 1, 1, "", "apply"], [158, 1, 1, "", "approx_n_unique"], [159, 1, 1, "", "bottom_k"], [160, 1, 1, "", "cast"], [161, 1, 1, "", "clear"], [162, 1, 1, "", "clone"], [163, 2, 1, "", "columns"], [164, 1, 1, "", "corr"], [165, 1, 1, "", "count"], [166, 1, 1, "", "describe"], [167, 1, 1, "", "drop"], [168, 1, 1, "", "drop_in_place"], [169, 1, 1, "", "drop_nulls"], [170, 2, 1, "", "dtypes"], [171, 1, 1, "", "equals"], [172, 1, 1, "", "estimated_size"], [173, 1, 1, "", "explode"], [174, 1, 1, "", "extend"], [175, 1, 1, "", "fill_nan"], [176, 1, 1, "", "fill_null"], [177, 1, 1, "", "filter"], [178, 1, 1, "", "find_idx_by_name"], [179, 2, 1, "", "flags"], [180, 1, 1, "", "fold"], [181, 1, 1, "", "frame_equal"], [182, 1, 1, "", "gather_every"], [183, 1, 1, "", "get_column"], [184, 1, 1, "", "get_column_index"], [185, 1, 1, "", "get_columns"], [186, 1, 1, "", "glimpse"], [187, 1, 1, "", "group_by"], [188, 1, 1, "", "group_by_dynamic"], [189, 1, 1, "", "group_by_rolling"], [190, 1, 1, "", "groupby"], [191, 1, 1, "", "groupby_dynamic"], [192, 1, 1, "", "groupby_rolling"], [193, 1, 1, "", "hash_rows"], [194, 1, 1, "", "head"], [195, 2, 1, "", "height"], [196, 1, 1, "", "hstack"], [197, 1, 1, "", "insert_at_idx"], [198, 1, 1, "", "insert_column"], [199, 1, 1, "", "interpolate"], [200, 1, 1, "", "is_duplicated"], [201, 1, 1, "", "is_empty"], [202, 1, 1, "", "is_unique"], [203, 1, 1, "", "item"], [204, 1, 1, "", "iter_columns"], [205, 1, 1, "", "iter_rows"], [206, 1, 1, "", "iter_slices"], [207, 1, 1, "", "join"], [208, 1, 1, "", "join_asof"], [209, 1, 1, "", "lazy"], [210, 1, 1, "", "limit"], [211, 1, 1, "", "map_rows"], [212, 1, 1, "", "max"], [213, 1, 1, "", "max_horizontal"], [214, 1, 1, "", "mean"], [215, 1, 1, "", "mean_horizontal"], [216, 1, 1, "", "median"], [217, 1, 1, "", "melt"], [218, 1, 1, "", "merge_sorted"], [219, 1, 1, "", "min"], [220, 1, 1, "", "min_horizontal"], [221, 1, 1, "", "n_chunks"], [222, 1, 1, "", "n_unique"], [223, 1, 1, "", "null_count"], [224, 1, 1, "", "partition_by"], [225, 1, 1, "", "pipe"], [226, 1, 1, "", "pivot"], [227, 1, 1, "", "product"], [228, 1, 1, "", "quantile"], [229, 1, 1, "", "rechunk"], [230, 1, 1, "", "rename"], [231, 1, 1, "", "replace"], [232, 1, 1, "", "replace_at_idx"], [233, 1, 1, "", "replace_column"], [234, 1, 1, "", "reverse"], [235, 1, 1, "", "rolling"], [236, 1, 1, "", "row"], [237, 1, 1, "", "rows"], [238, 1, 1, "", "rows_by_key"], [239, 1, 1, "", "sample"], [240, 2, 1, "", "schema"], [241, 1, 1, "", "select"], [242, 1, 1, "", "select_seq"], [243, 1, 1, "", "set_sorted"], [244, 2, 1, "", "shape"], [245, 1, 1, "", "shift"], [246, 1, 1, "", "shift_and_fill"], [247, 1, 1, "", "shrink_to_fit"], [248, 1, 1, "", "slice"], [249, 1, 1, "", "sort"], [250, 1, 1, "", "std"], [251, 1, 1, "", "sum"], [252, 1, 1, "", "sum_horizontal"], [253, 1, 1, "", "tail"], [254, 1, 1, "", "take_every"], [255, 1, 1, "", "to_arrow"], [256, 1, 1, "", "to_dict"], [257, 1, 1, "", "to_dicts"], [258, 1, 1, "", "to_dummies"], [259, 1, 1, "", "to_init_repr"], [260, 1, 1, "", "to_numpy"], [261, 1, 1, "", "to_pandas"], [262, 1, 1, "", "to_series"], [263, 1, 1, "", "to_struct"], [264, 1, 1, "", "top_k"], [265, 1, 1, "", "transpose"], [266, 1, 1, "", "unique"], [267, 1, 1, "", "unnest"], [268, 1, 1, "", "unstack"], [269, 1, 1, "", "update"], [270, 1, 1, "", "upsample"], [271, 1, 1, "", "var"], [272, 1, 1, "", "vstack"], [273, 2, 1, "", "width"], [274, 1, 1, "", "with_columns"], [275, 1, 1, "", "with_columns_seq"], [276, 1, 1, "", "with_row_count"], [277, 1, 1, "", "with_row_index"], [36, 1, 1, "", "write_avro"], [37, 1, 1, "", "write_csv"], [38, 1, 1, "", "write_database"], [39, 1, 1, "", "write_delta"], [40, 1, 1, "", "write_excel"], [41, 1, 1, "", "write_ipc"], [42, 1, 1, "", "write_ipc_stream"], [43, 1, 1, "", "write_json"], [44, 1, 1, "", "write_ndjson"], [45, 1, 1, "", "write_parquet"]], "polars.DataType": [[46, 1, 1, "", "__init__"]], "polars.Date": [[47, 1, 1, "", "__init__"]], "polars.Datetime": [[48, 1, 1, "", "__init__"]], "polars.Decimal": [[49, 1, 1, "", "__init__"]], "polars.Duration": [[50, 1, 1, "", "__init__"]], "polars.Enum": [[51, 1, 1, "", "__init__"]], "polars.Expr": [[307, 1, 1, "", "abs"], [308, 1, 1, "", "add"], [309, 1, 1, "", "agg_groups"], [310, 1, 1, "", "alias"], [311, 1, 1, "", "all"], [312, 1, 1, "", "and_"], [313, 1, 1, "", "any"], [314, 1, 1, "", "append"], [315, 1, 1, "", "apply"], [316, 1, 1, "", "approx_n_unique"], [317, 1, 1, "", "arccos"], [318, 1, 1, "", "arccosh"], [319, 1, 1, "", "arcsin"], [320, 1, 1, "", "arcsinh"], [321, 1, 1, "", "arctan"], [322, 1, 1, "", "arctanh"], [323, 1, 1, "", "arg_max"], [324, 1, 1, "", "arg_min"], [325, 1, 1, "", "arg_sort"], [326, 1, 1, "", "arg_true"], [327, 1, 1, "", "arg_unique"], [345, 1, 1, "", "backward_fill"], [351, 1, 1, "", "bottom_k"], [352, 1, 1, "", "cast"], [355, 1, 1, "", "cbrt"], [356, 1, 1, "", "ceil"], [357, 1, 1, "", "clip"], [358, 1, 1, "", "clip_max"], [359, 1, 1, "", "clip_min"], [360, 1, 1, "", "cos"], [361, 1, 1, "", "cosh"], [362, 1, 1, "", "cot"], [363, 1, 1, "", "count"], [364, 1, 1, "", "cum_count"], [365, 1, 1, "", "cum_max"], [366, 1, 1, "", "cum_min"], [367, 1, 1, "", "cum_prod"], [368, 1, 1, "", "cum_sum"], [369, 1, 1, "", "cumcount"], [370, 1, 1, "", "cummax"], [371, 1, 1, "", "cummin"], [372, 1, 1, "", "cumprod"], [373, 1, 1, "", "cumsum"], [374, 1, 1, "", "cumulative_eval"], [375, 1, 1, "", "cut"], [376, 1, 1, "", "degrees"], [377, 1, 1, "", "diff"], [378, 1, 1, "", "dot"], [379, 1, 1, "", "drop_nans"], [380, 1, 1, "", "drop_nulls"], [429, 1, 1, "", "entropy"], [430, 1, 1, "", "eq"], [431, 1, 1, "", "eq_missing"], [432, 1, 1, "", "ewm_mean"], [433, 1, 1, "", "ewm_std"], [434, 1, 1, "", "ewm_var"], [435, 1, 1, "", "exclude"], [436, 1, 1, "", "exp"], [437, 1, 1, "", "explode"], [438, 1, 1, "", "extend_constant"], [439, 1, 1, "", "fill_nan"], [440, 1, 1, "", "fill_null"], [441, 1, 1, "", "filter"], [442, 1, 1, "", "first"], [443, 1, 1, "", "flatten"], [444, 1, 1, "", "floor"], [445, 1, 1, "", "floordiv"], [446, 1, 1, "", "forward_fill"], [447, 1, 1, "", "from_json"], [448, 1, 1, "", "gather"], [449, 1, 1, "", "gather_every"], [450, 1, 1, "", "ge"], [451, 1, 1, "", "get"], [452, 1, 1, "", "gt"], [453, 1, 1, "", "hash"], [454, 1, 1, "", "head"], [455, 1, 1, "", "hist"], [456, 1, 1, "", "implode"], [457, 1, 1, "", "inspect"], [458, 1, 1, "", "interpolate"], [459, 1, 1, "", "is_between"], [460, 1, 1, "", "is_duplicated"], [461, 1, 1, "", "is_finite"], [462, 1, 1, "", "is_first"], [463, 1, 1, "", "is_first_distinct"], [464, 1, 1, "", "is_in"], [465, 1, 1, "", "is_infinite"], [466, 1, 1, "", "is_last"], [467, 1, 1, "", "is_last_distinct"], [468, 1, 1, "", "is_nan"], [469, 1, 1, "", "is_not"], [470, 1, 1, "", "is_not_nan"], [471, 1, 1, "", "is_not_null"], [472, 1, 1, "", "is_null"], [473, 1, 1, "", "is_unique"], [474, 1, 1, "", "keep_name"], [475, 1, 1, "", "kurtosis"], [476, 1, 1, "", "last"], [477, 1, 1, "", "le"], [478, 1, 1, "", "len"], [479, 1, 1, "", "limit"], [518, 1, 1, "", "log"], [519, 1, 1, "", "log10"], [520, 1, 1, "", "log1p"], [521, 1, 1, "", "lower_bound"], [522, 1, 1, "", "lt"], [523, 1, 1, "", "map"], [524, 1, 1, "", "map_alias"], [525, 1, 1, "", "map_batches"], [526, 1, 1, "", "map_dict"], [527, 1, 1, "", "map_elements"], [528, 1, 1, "", "max"], [529, 1, 1, "", "mean"], [530, 1, 1, "", "median"], [541, 1, 1, "", "min"], [542, 1, 1, "", "mod"], [543, 1, 1, "", "mode"], [544, 1, 1, "", "mul"], [545, 1, 1, "", "n_unique"], [552, 1, 1, "", "nan_max"], [553, 1, 1, "", "nan_min"], [554, 1, 1, "", "ne"], [555, 1, 1, "", "ne_missing"], [556, 1, 1, "", "not_"], [557, 1, 1, "", "null_count"], [558, 1, 1, "", "or_"], [559, 1, 1, "", "over"], [560, 1, 1, "", "pct_change"], [561, 1, 1, "", "peak_max"], [562, 1, 1, "", "peak_min"], [563, 1, 1, "", "pipe"], [564, 1, 1, "", "pow"], [565, 1, 1, "", "prefix"], [566, 1, 1, "", "product"], [567, 1, 1, "", "qcut"], [568, 1, 1, "", "quantile"], [569, 1, 1, "", "radians"], [570, 1, 1, "", "rank"], [571, 1, 1, "", "rechunk"], [572, 1, 1, "", "reinterpret"], [573, 1, 1, "", "repeat_by"], [574, 1, 1, "", "replace"], [575, 1, 1, "", "reshape"], [576, 1, 1, "", "reverse"], [577, 1, 1, "", "rle"], [578, 1, 1, "", "rle_id"], [579, 1, 1, "", "rolling"], [580, 1, 1, "", "rolling_apply"], [581, 1, 1, "", "rolling_map"], [582, 1, 1, "", "rolling_max"], [583, 1, 1, "", "rolling_mean"], [584, 1, 1, "", "rolling_median"], [585, 1, 1, "", "rolling_min"], [586, 1, 1, "", "rolling_quantile"], [587, 1, 1, "", "rolling_skew"], [588, 1, 1, "", "rolling_std"], [589, 1, 1, "", "rolling_sum"], [590, 1, 1, "", "rolling_var"], [591, 1, 1, "", "round"], [592, 1, 1, "", "round_sig_figs"], [593, 1, 1, "", "sample"], [594, 1, 1, "", "search_sorted"], [595, 1, 1, "", "set_sorted"], [596, 1, 1, "", "shift"], [597, 1, 1, "", "shift_and_fill"], [598, 1, 1, "", "shrink_dtype"], [599, 1, 1, "", "shuffle"], [600, 1, 1, "", "sign"], [601, 1, 1, "", "sin"], [602, 1, 1, "", "sinh"], [603, 1, 1, "", "skew"], [604, 1, 1, "", "slice"], [605, 1, 1, "", "sort"], [606, 1, 1, "", "sort_by"], [607, 1, 1, "", "sqrt"], [608, 1, 1, "", "std"], [664, 1, 1, "", "sub"], [665, 1, 1, "", "suffix"], [666, 1, 1, "", "sum"], [667, 1, 1, "", "tail"], [668, 1, 1, "", "take"], [669, 1, 1, "", "take_every"], [670, 1, 1, "", "tan"], [671, 1, 1, "", "tanh"], [672, 1, 1, "", "to_physical"], [673, 1, 1, "", "top_k"], [674, 1, 1, "", "truediv"], [675, 1, 1, "", "unique"], [676, 1, 1, "", "unique_counts"], [677, 1, 1, "", "upper_bound"], [678, 1, 1, "", "value_counts"], [679, 1, 1, "", "var"], [680, 1, 1, "", "where"], [681, 1, 1, "", "xor"]], "polars.Expr.arr": [[328, 1, 1, "", "all"], [329, 1, 1, "", "any"], [330, 1, 1, "", "arg_max"], [331, 1, 1, "", "arg_min"], [332, 1, 1, "", "contains"], [333, 1, 1, "", "count_matches"], [334, 1, 1, "", "first"], [335, 1, 1, "", "get"], [336, 1, 1, "", "join"], [337, 1, 1, "", "last"], [338, 1, 1, "", "max"], [339, 1, 1, "", "min"], [340, 1, 1, "", "reverse"], [341, 1, 1, "", "sort"], [342, 1, 1, "", "sum"], [343, 1, 1, "", "to_list"], [344, 1, 1, "", "unique"]], "polars.Expr.bin": [[346, 1, 1, "", "contains"], [347, 1, 1, "", "decode"], [348, 1, 1, "", "encode"], [349, 1, 1, "", "ends_with"], [350, 1, 1, "", "starts_with"]], "polars.Expr.cat": [[353, 1, 1, "", "get_categories"], [354, 1, 1, "", "set_ordering"]], "polars.Expr.dt": [[381, 1, 1, "", "base_utc_offset"], [382, 1, 1, "", "cast_time_unit"], [383, 1, 1, "", "combine"], [384, 1, 1, "", "convert_time_zone"], [385, 1, 1, "", "date"], [386, 1, 1, "", "datetime"], [387, 1, 1, "", "day"], [388, 1, 1, "", "days"], [389, 1, 1, "", "dst_offset"], [390, 1, 1, "", "epoch"], [391, 1, 1, "", "hour"], [392, 1, 1, "", "hours"], [393, 1, 1, "", "is_leap_year"], [394, 1, 1, "", "iso_year"], [395, 1, 1, "", "microsecond"], [396, 1, 1, "", "microseconds"], [397, 1, 1, "", "millisecond"], [398, 1, 1, "", "milliseconds"], [399, 1, 1, "", "minute"], [400, 1, 1, "", "minutes"], [401, 1, 1, "", "month"], [402, 1, 1, "", "month_end"], [403, 1, 1, "", "month_start"], [404, 1, 1, "", "nanosecond"], [405, 1, 1, "", "nanoseconds"], [406, 1, 1, "", "offset_by"], [407, 1, 1, "", "ordinal_day"], [408, 1, 1, "", "quarter"], [409, 1, 1, "", "replace_time_zone"], [410, 1, 1, "", "round"], [411, 1, 1, "", "second"], [412, 1, 1, "", "seconds"], [413, 1, 1, "", "strftime"], [414, 1, 1, "", "time"], [415, 1, 1, "", "timestamp"], [416, 1, 1, "", "to_string"], [417, 1, 1, "", "total_days"], [418, 1, 1, "", "total_hours"], [419, 1, 1, "", "total_microseconds"], [420, 1, 1, "", "total_milliseconds"], [421, 1, 1, "", "total_minutes"], [422, 1, 1, "", "total_nanoseconds"], [423, 1, 1, "", "total_seconds"], [424, 1, 1, "", "truncate"], [425, 1, 1, "", "week"], [426, 1, 1, "", "weekday"], [427, 1, 1, "", "with_time_unit"], [428, 1, 1, "", "year"]], "polars.Expr.list": [[480, 1, 1, "", "all"], [481, 1, 1, "", "any"], [482, 1, 1, "", "arg_max"], [483, 1, 1, "", "arg_min"], [484, 1, 1, "", "concat"], [485, 1, 1, "", "contains"], [486, 1, 1, "", "count_match"], [487, 1, 1, "", "count_matches"], [488, 1, 1, "", "diff"], [489, 1, 1, "", "drop_nulls"], [490, 1, 1, "", "eval"], [491, 1, 1, "", "explode"], [492, 1, 1, "", "first"], [493, 1, 1, "", "gather"], [494, 1, 1, "", "get"], [495, 1, 1, "", "head"], [496, 1, 1, "", "join"], [497, 1, 1, "", "last"], [498, 1, 1, "", "len"], [499, 1, 1, "", "lengths"], [500, 1, 1, "", "max"], [501, 1, 1, "", "mean"], [502, 1, 1, "", "min"], [503, 1, 1, "", "reverse"], [504, 1, 1, "", "sample"], [505, 1, 1, "", "set_difference"], [506, 1, 1, "", "set_intersection"], [507, 1, 1, "", "set_symmetric_difference"], [508, 1, 1, "", "set_union"], [509, 1, 1, "", "shift"], [510, 1, 1, "", "slice"], [511, 1, 1, "", "sort"], [512, 1, 1, "", "sum"], [513, 1, 1, "", "tail"], [514, 1, 1, "", "take"], [515, 1, 1, "", "to_array"], [516, 1, 1, "", "to_struct"], [517, 1, 1, "", "unique"]], "polars.Expr.meta": [[531, 1, 1, "", "eq"], [532, 1, 1, "", "has_multiple_outputs"], [533, 1, 1, "", "is_regex_projection"], [534, 1, 1, "", "ne"], [535, 1, 1, "", "output_name"], [536, 1, 1, "", "pop"], [537, 1, 1, "", "root_names"], [538, 1, 1, "", "tree_format"], [539, 1, 1, "", "undo_aliases"], [540, 1, 1, "", "write_json"]], "polars.Expr.name": [[546, 1, 1, "", "keep"], [547, 1, 1, "", "map"], [548, 1, 1, "", "prefix"], [549, 1, 1, "", "suffix"], [550, 1, 1, "", "to_lowercase"], [551, 1, 1, "", "to_uppercase"]], "polars.Expr.str": [[609, 1, 1, "", "concat"], [610, 1, 1, "", "contains"], [611, 1, 1, "", "contains_any"], [612, 1, 1, "", "count_match"], [613, 1, 1, "", "count_matches"], [614, 1, 1, "", "decode"], [615, 1, 1, "", "encode"], [616, 1, 1, "", "ends_with"], [617, 1, 1, "", "explode"], [618, 1, 1, "", "extract"], [619, 1, 1, "", "extract_all"], [620, 1, 1, "", "extract_groups"], [621, 1, 1, "", "find"], [622, 1, 1, "", "json_decode"], [623, 1, 1, "", "json_extract"], [624, 1, 1, "", "json_path_match"], [625, 1, 1, "", "len_bytes"], [626, 1, 1, "", "len_chars"], [627, 1, 1, "", "lengths"], [628, 1, 1, "", "ljust"], [629, 1, 1, "", "lstrip"], [630, 1, 1, "", "n_chars"], [631, 1, 1, "", "pad_end"], [632, 1, 1, "", "pad_start"], [633, 1, 1, "", "parse_int"], [634, 1, 1, "", "replace"], [635, 1, 1, "", "replace_all"], [636, 1, 1, "", "replace_many"], [637, 1, 1, "", "reverse"], [638, 1, 1, "", "rjust"], [639, 1, 1, "", "rstrip"], [640, 1, 1, "", "slice"], [641, 1, 1, "", "split"], [642, 1, 1, "", "split_exact"], [643, 1, 1, "", "splitn"], [644, 1, 1, "", "starts_with"], [645, 1, 1, "", "strip"], [646, 1, 1, "", "strip_chars"], [647, 1, 1, "", "strip_chars_end"], [648, 1, 1, "", "strip_chars_start"], [649, 1, 1, "", "strip_prefix"], [650, 1, 1, "", "strip_suffix"], [651, 1, 1, "", "strptime"], [652, 1, 1, "", "to_date"], [653, 1, 1, "", "to_datetime"], [654, 1, 1, "", "to_decimal"], [655, 1, 1, "", "to_integer"], [656, 1, 1, "", "to_lowercase"], [657, 1, 1, "", "to_time"], [658, 1, 1, "", "to_titlecase"], [659, 1, 1, "", "to_uppercase"], [660, 1, 1, "", "zfill"]], "polars.Expr.struct": [[661, 1, 1, "", "field"], [662, 1, 1, "", "json_encode"], [663, 1, 1, "", "rename_fields"]], "polars.Float32": [[52, 1, 1, "", "__init__"]], "polars.Float64": [[53, 1, 1, "", "__init__"]], "polars.Int16": [[54, 1, 1, "", "__init__"]], "polars.Int32": [[55, 1, 1, "", "__init__"]], "polars.Int64": [[56, 1, 1, "", "__init__"]], "polars.Int8": [[57, 1, 1, "", "__init__"]], "polars.LazyFrame": [[780, 1, 1, "", "approx_n_unique"], [781, 1, 1, "", "bottom_k"], [782, 1, 1, "", "cache"], [783, 1, 1, "", "cast"], [784, 1, 1, "", "clear"], [785, 1, 1, "", "clone"], [786, 1, 1, "", "collect"], [787, 1, 1, "", "collect_async"], [788, 2, 1, "", "columns"], [789, 1, 1, "", "count"], [790, 1, 1, "", "deserialize"], [791, 1, 1, "", "drop"], [792, 1, 1, "", "drop_nulls"], [793, 2, 1, "", "dtypes"], [794, 1, 1, "", "explain"], [795, 1, 1, "", "explode"], [796, 1, 1, "", "fetch"], [797, 1, 1, "", "fill_nan"], [798, 1, 1, "", "fill_null"], [799, 1, 1, "", "filter"], [800, 1, 1, "", "first"], [801, 1, 1, "", "gather_every"], [802, 1, 1, "", "group_by"], [803, 1, 1, "", "group_by_dynamic"], [804, 1, 1, "", "group_by_rolling"], [805, 1, 1, "", "groupby"], [806, 1, 1, "", "groupby_dynamic"], [807, 1, 1, "", "groupby_rolling"], [808, 1, 1, "", "head"], [809, 1, 1, "", "inspect"], [810, 1, 1, "", "interpolate"], [811, 1, 1, "", "join"], [812, 1, 1, "", "join_asof"], [813, 1, 1, "", "last"], [814, 1, 1, "", "lazy"], [815, 1, 1, "", "limit"], [816, 1, 1, "", "map"], [817, 1, 1, "", "map_batches"], [818, 1, 1, "", "max"], [819, 1, 1, "", "mean"], [820, 1, 1, "", "median"], [821, 1, 1, "", "melt"], [822, 1, 1, "", "merge_sorted"], [823, 1, 1, "", "min"], [824, 1, 1, "", "null_count"], [825, 1, 1, "", "pipe"], [826, 1, 1, "", "profile"], [827, 1, 1, "", "quantile"], [828, 1, 1, "", "rename"], [829, 1, 1, "", "reverse"], [830, 1, 1, "", "rolling"], [831, 2, 1, "", "schema"], [832, 1, 1, "", "select"], [833, 1, 1, "", "select_seq"], [834, 1, 1, "", "serialize"], [835, 1, 1, "", "set_sorted"], [836, 1, 1, "", "shift"], [837, 1, 1, "", "shift_and_fill"], [838, 1, 1, "", "show_graph"], [58, 1, 1, "", "sink_csv"], [59, 1, 1, "", "sink_ipc"], [60, 1, 1, "", "sink_ndjson"], [61, 1, 1, "", "sink_parquet"], [839, 1, 1, "", "slice"], [840, 1, 1, "", "sort"], [841, 1, 1, "", "std"], [842, 1, 1, "", "sum"], [843, 1, 1, "", "tail"], [844, 1, 1, "", "take_every"], [845, 1, 1, "", "top_k"], [846, 1, 1, "", "unique"], [847, 1, 1, "", "unnest"], [848, 1, 1, "", "update"], [849, 1, 1, "", "var"], [850, 2, 1, "", "width"], [851, 1, 1, "", "with_columns"], [852, 1, 1, "", "with_columns_seq"], [853, 1, 1, "", "with_context"], [854, 1, 1, "", "with_row_count"], [855, 1, 1, "", "with_row_index"]], "polars.List": [[62, 1, 1, "", "__init__"]], "polars.Null": [[63, 1, 1, "", "__init__"]], "polars.Object": [[64, 1, 1, "", "__init__"]], "polars.SQLContext": [[1258, 1, 1, "", "__enter__"], [1258, 1, 1, "", "__exit__"], [1258, 1, 1, "", "__init__"], [65, 1, 1, "", "execute"], [66, 1, 1, "", "register"], [67, 1, 1, "", "register_globals"], [68, 1, 1, "", "register_many"], [69, 1, 1, "", "tables"], [70, 1, 1, "", "unregister"]], "polars.Series": [[880, 1, 1, "", "abs"], [881, 1, 1, "", "alias"], [882, 1, 1, "", "all"], [883, 1, 1, "", "any"], [884, 1, 1, "", "append"], [885, 1, 1, "", "apply"], [886, 1, 1, "", "arccos"], [887, 1, 1, "", "arccosh"], [888, 1, 1, "", "arcsin"], [889, 1, 1, "", "arcsinh"], [890, 1, 1, "", "arctan"], [891, 1, 1, "", "arctanh"], [892, 1, 1, "", "arg_max"], [893, 1, 1, "", "arg_min"], [894, 1, 1, "", "arg_sort"], [895, 1, 1, "", "arg_true"], [896, 1, 1, "", "arg_unique"], [919, 1, 1, "", "bottom_k"], [920, 1, 1, "", "cast"], [926, 1, 1, "", "cbrt"], [927, 1, 1, "", "ceil"], [928, 1, 1, "", "chunk_lengths"], [929, 1, 1, "", "clear"], [930, 1, 1, "", "clip"], [931, 1, 1, "", "clip_max"], [932, 1, 1, "", "clip_min"], [933, 1, 1, "", "clone"], [934, 1, 1, "", "cos"], [935, 1, 1, "", "cosh"], [936, 1, 1, "", "cot"], [937, 1, 1, "", "cum_max"], [938, 1, 1, "", "cum_min"], [939, 1, 1, "", "cum_prod"], [940, 1, 1, "", "cum_sum"], [941, 1, 1, "", "cummax"], [942, 1, 1, "", "cummin"], [943, 1, 1, "", "cumprod"], [944, 1, 1, "", "cumsum"], [945, 1, 1, "", "cumulative_eval"], [946, 1, 1, "", "cut"], [947, 1, 1, "", "describe"], [948, 1, 1, "", "diff"], [949, 1, 1, "", "dot"], [950, 1, 1, "", "drop_nans"], [951, 1, 1, "", "drop_nulls"], [1004, 3, 1, "", "dtype"], [1005, 1, 1, "", "entropy"], [1006, 1, 1, "", "equals"], [1007, 1, 1, "", "estimated_size"], [1008, 1, 1, "", "ewm_mean"], [1009, 1, 1, "", "ewm_std"], [1010, 1, 1, "", "ewm_var"], [1011, 1, 1, "", "exp"], [1012, 1, 1, "", "explode"], [1013, 1, 1, "", "extend"], [1014, 1, 1, "", "extend_constant"], [1015, 1, 1, "", "fill_nan"], [1016, 1, 1, "", "fill_null"], [1017, 1, 1, "", "filter"], [1018, 3, 1, "", "flags"], [1019, 1, 1, "", "floor"], [1020, 1, 1, "", "gather"], [1021, 1, 1, "", "gather_every"], [1022, 1, 1, "", "get_chunks"], [1023, 1, 1, "", "has_validity"], [1024, 1, 1, "", "hash"], [1025, 1, 1, "", "head"], [1026, 1, 1, "", "hist"], [1027, 1, 1, "", "implode"], [1028, 3, 1, "", "inner_dtype"], [1029, 1, 1, "", "interpolate"], [1030, 1, 1, "", "is_between"], [1031, 1, 1, "", "is_boolean"], [1032, 1, 1, "", "is_duplicated"], [1033, 1, 1, "", "is_empty"], [1034, 1, 1, "", "is_finite"], [1035, 1, 1, "", "is_first"], [1036, 1, 1, "", "is_first_distinct"], [1037, 1, 1, "", "is_float"], [1038, 1, 1, "", "is_in"], [1039, 1, 1, "", "is_infinite"], [1040, 1, 1, "", "is_integer"], [1041, 1, 1, "", "is_last"], [1042, 1, 1, "", "is_last_distinct"], [1043, 1, 1, "", "is_nan"], [1044, 1, 1, "", "is_not_nan"], [1045, 1, 1, "", "is_not_null"], [1046, 1, 1, "", "is_null"], [1047, 1, 1, "", "is_numeric"], [1048, 1, 1, "", "is_sorted"], [1049, 1, 1, "", "is_temporal"], [1050, 1, 1, "", "is_unique"], [1051, 1, 1, "", "is_utf8"], [1052, 1, 1, "", "item"], [1053, 1, 1, "", "kurtosis"], [1054, 1, 1, "", "len"], [1055, 1, 1, "", "limit"], [1094, 1, 1, "", "log"], [1095, 1, 1, "", "log10"], [1096, 1, 1, "", "log1p"], [1097, 1, 1, "", "lower_bound"], [1098, 1, 1, "", "map_dict"], [1099, 1, 1, "", "map_elements"], [1100, 1, 1, "", "max"], [1101, 1, 1, "", "mean"], [1102, 1, 1, "", "median"], [1103, 1, 1, "", "min"], [1104, 1, 1, "", "mode"], [1105, 1, 1, "", "n_chunks"], [1106, 1, 1, "", "n_unique"], [1107, 3, 1, "", "name"], [1108, 1, 1, "", "nan_max"], [1109, 1, 1, "", "nan_min"], [1110, 1, 1, "", "new_from_index"], [1111, 1, 1, "", "not_"], [1112, 1, 1, "", "null_count"], [1113, 1, 1, "", "pct_change"], [1114, 1, 1, "", "peak_max"], [1115, 1, 1, "", "peak_min"], [1116, 1, 1, "", "product"], [1117, 1, 1, "", "qcut"], [1118, 1, 1, "", "quantile"], [1119, 1, 1, "", "rank"], [1120, 1, 1, "", "rechunk"], [1121, 1, 1, "", "reinterpret"], [1122, 1, 1, "", "rename"], [1123, 1, 1, "", "replace"], [1124, 1, 1, "", "reshape"], [1125, 1, 1, "", "reverse"], [1126, 1, 1, "", "rle"], [1127, 1, 1, "", "rle_id"], [1128, 1, 1, "", "rolling_apply"], [1129, 1, 1, "", "rolling_map"], [1130, 1, 1, "", "rolling_max"], [1131, 1, 1, "", "rolling_mean"], [1132, 1, 1, "", "rolling_median"], [1133, 1, 1, "", "rolling_min"], [1134, 1, 1, "", "rolling_quantile"], [1135, 1, 1, "", "rolling_skew"], [1136, 1, 1, "", "rolling_std"], [1137, 1, 1, "", "rolling_sum"], [1138, 1, 1, "", "rolling_var"], [1139, 1, 1, "", "round"], [1140, 1, 1, "", "round_sig_figs"], [1141, 1, 1, "", "sample"], [1142, 1, 1, "", "scatter"], [1143, 1, 1, "", "search_sorted"], [1144, 1, 1, "", "series_equal"], [1145, 1, 1, "", "set"], [1146, 1, 1, "", "set_at_idx"], [1147, 1, 1, "", "set_sorted"], [1148, 3, 1, "", "shape"], [1149, 1, 1, "", "shift"], [1150, 1, 1, "", "shift_and_fill"], [1151, 1, 1, "", "shrink_dtype"], [1152, 1, 1, "", "shrink_to_fit"], [1153, 1, 1, "", "shuffle"], [1154, 1, 1, "", "sign"], [1155, 1, 1, "", "sin"], [1156, 1, 1, "", "sinh"], [1157, 1, 1, "", "skew"], [1158, 1, 1, "", "slice"], [1159, 1, 1, "", "sort"], [1160, 1, 1, "", "sqrt"], [1161, 1, 1, "", "std"], [1220, 1, 1, "", "sum"], [1221, 1, 1, "", "tail"], [1222, 1, 1, "", "take"], [1223, 1, 1, "", "take_every"], [1224, 1, 1, "", "tan"], [1225, 1, 1, "", "tanh"], [1226, 1, 1, "", "to_arrow"], [1227, 1, 1, "", "to_dummies"], [1228, 1, 1, "", "to_frame"], [1229, 1, 1, "", "to_init_repr"], [1230, 1, 1, "", "to_list"], [1231, 1, 1, "", "to_numpy"], [1232, 1, 1, "", "to_pandas"], [1233, 1, 1, "", "to_physical"], [1234, 1, 1, "", "top_k"], [1235, 1, 1, "", "unique"], [1236, 1, 1, "", "unique_counts"], [1237, 1, 1, "", "upper_bound"], [1238, 1, 1, "", "value_counts"], [1239, 1, 1, "", "var"], [1240, 1, 1, "", "view"], [1241, 1, 1, "", "zip_with"]], "polars.Series.arr": [[897, 1, 1, "", "all"], [898, 1, 1, "", "any"], [899, 1, 1, "", "arg_max"], [900, 1, 1, "", "arg_min"], [901, 1, 1, "", "contains"], [902, 1, 1, "", "count_matches"], [903, 1, 1, "", "first"], [904, 1, 1, "", "get"], [905, 1, 1, "", "join"], [906, 1, 1, "", "last"], [907, 1, 1, "", "max"], [908, 1, 1, "", "min"], [909, 1, 1, "", "reverse"], [910, 1, 1, "", "sort"], [911, 1, 1, "", "sum"], [912, 1, 1, "", "to_list"], [913, 1, 1, "", "unique"]], "polars.Series.bin": [[914, 1, 1, "", "contains"], [915, 1, 1, "", "decode"], [916, 1, 1, "", "encode"], [917, 1, 1, "", "ends_with"], [918, 1, 1, "", "starts_with"]], "polars.Series.cat": [[921, 1, 1, "", "get_categories"], [922, 1, 1, "", "is_local"], [923, 1, 1, "", "set_ordering"], [924, 1, 1, "", "to_local"], [925, 1, 1, "", "uses_lexical_ordering"]], "polars.Series.dt": [[952, 1, 1, "", "base_utc_offset"], [953, 1, 1, "", "cast_time_unit"], [954, 1, 1, "", "combine"], [955, 1, 1, "", "convert_time_zone"], [956, 1, 1, "", "date"], [957, 1, 1, "", "datetime"], [958, 1, 1, "", "day"], [959, 1, 1, "", "days"], [960, 1, 1, "", "dst_offset"], [961, 1, 1, "", "epoch"], [962, 1, 1, "", "hour"], [963, 1, 1, "", "hours"], [964, 1, 1, "", "is_leap_year"], [965, 1, 1, "", "iso_year"], [966, 1, 1, "", "max"], [967, 1, 1, "", "mean"], [968, 1, 1, "", "median"], [969, 1, 1, "", "microsecond"], [970, 1, 1, "", "microseconds"], [971, 1, 1, "", "millisecond"], [972, 1, 1, "", "milliseconds"], [973, 1, 1, "", "min"], [974, 1, 1, "", "minute"], [975, 1, 1, "", "minutes"], [976, 1, 1, "", "month"], [977, 1, 1, "", "month_end"], [978, 1, 1, "", "month_start"], [979, 1, 1, "", "nanosecond"], [980, 1, 1, "", "nanoseconds"], [981, 1, 1, "", "offset_by"], [982, 1, 1, "", "ordinal_day"], [983, 1, 1, "", "quarter"], [984, 1, 1, "", "replace_time_zone"], [985, 1, 1, "", "round"], [986, 1, 1, "", "second"], [987, 1, 1, "", "seconds"], [988, 1, 1, "", "strftime"], [989, 1, 1, "", "time"], [990, 1, 1, "", "timestamp"], [991, 1, 1, "", "to_string"], [992, 1, 1, "", "total_days"], [993, 1, 1, "", "total_hours"], [994, 1, 1, "", "total_microseconds"], [995, 1, 1, "", "total_milliseconds"], [996, 1, 1, "", "total_minutes"], [997, 1, 1, "", "total_nanoseconds"], [998, 1, 1, "", "total_seconds"], [999, 1, 1, "", "truncate"], [1000, 1, 1, "", "week"], [1001, 1, 1, "", "weekday"], [1002, 1, 1, "", "with_time_unit"], [1003, 1, 1, "", "year"]], "polars.Series.list": [[1056, 1, 1, "", "all"], [1057, 1, 1, "", "any"], [1058, 1, 1, "", "arg_max"], [1059, 1, 1, "", "arg_min"], [1060, 1, 1, "", "concat"], [1061, 1, 1, "", "contains"], [1062, 1, 1, "", "count_match"], [1063, 1, 1, "", "count_matches"], [1064, 1, 1, "", "diff"], [1065, 1, 1, "", "drop_nulls"], [1066, 1, 1, "", "eval"], [1067, 1, 1, "", "explode"], [1068, 1, 1, "", "first"], [1069, 1, 1, "", "gather"], [1070, 1, 1, "", "get"], [1071, 1, 1, "", "head"], [1072, 1, 1, "", "join"], [1073, 1, 1, "", "last"], [1074, 1, 1, "", "len"], [1075, 1, 1, "", "lengths"], [1076, 1, 1, "", "max"], [1077, 1, 1, "", "mean"], [1078, 1, 1, "", "min"], [1079, 1, 1, "", "reverse"], [1080, 1, 1, "", "sample"], [1081, 1, 1, "", "set_difference"], [1082, 1, 1, "", "set_intersection"], [1083, 1, 1, "", "set_symmetric_difference"], [1084, 1, 1, "", "set_union"], [1085, 1, 1, "", "shift"], [1086, 1, 1, "", "slice"], [1087, 1, 1, "", "sort"], [1088, 1, 1, "", "sum"], [1089, 1, 1, "", "tail"], [1090, 1, 1, "", "take"], [1091, 1, 1, "", "to_array"], [1092, 1, 1, "", "to_struct"], [1093, 1, 1, "", "unique"]], "polars.Series.str": [[1162, 1, 1, "", "concat"], [1163, 1, 1, "", "contains"], [1164, 1, 1, "", "contains_any"], [1165, 1, 1, "", "count_match"], [1166, 1, 1, "", "count_matches"], [1167, 1, 1, "", "decode"], [1168, 1, 1, "", "encode"], [1169, 1, 1, "", "ends_with"], [1170, 1, 1, "", "explode"], [1171, 1, 1, "", "extract"], [1172, 1, 1, "", "extract_all"], [1173, 1, 1, "", "extract_groups"], [1174, 1, 1, "", "find"], [1175, 1, 1, "", "json_decode"], [1176, 1, 1, "", "json_extract"], [1177, 1, 1, "", "json_path_match"], [1178, 1, 1, "", "len_bytes"], [1179, 1, 1, "", "len_chars"], [1180, 1, 1, "", "lengths"], [1181, 1, 1, "", "ljust"], [1182, 1, 1, "", "lstrip"], [1183, 1, 1, "", "n_chars"], [1184, 1, 1, "", "pad_end"], [1185, 1, 1, "", "pad_start"], [1186, 1, 1, "", "parse_int"], [1187, 1, 1, "", "replace"], [1188, 1, 1, "", "replace_all"], [1189, 1, 1, "", "replace_many"], [1190, 1, 1, "", "reverse"], [1191, 1, 1, "", "rjust"], [1192, 1, 1, "", "rstrip"], [1193, 1, 1, "", "slice"], [1194, 1, 1, "", "split"], [1195, 1, 1, "", "split_exact"], [1196, 1, 1, "", "splitn"], [1197, 1, 1, "", "starts_with"], [1198, 1, 1, "", "strip"], [1199, 1, 1, "", "strip_chars"], [1200, 1, 1, "", "strip_chars_end"], [1201, 1, 1, "", "strip_chars_start"], [1202, 1, 1, "", "strip_prefix"], [1203, 1, 1, "", "strip_suffix"], [1204, 1, 1, "", "strptime"], [1205, 1, 1, "", "to_date"], [1206, 1, 1, "", "to_datetime"], [1207, 1, 1, "", "to_decimal"], [1208, 1, 1, "", "to_integer"], [1209, 1, 1, "", "to_lowercase"], [1210, 1, 1, "", "to_time"], [1211, 1, 1, "", "to_titlecase"], [1212, 1, 1, "", "to_uppercase"], [1213, 1, 1, "", "zfill"]], "polars.Series.struct": [[1214, 1, 1, "", "field"], [1215, 3, 1, "", "fields"], [1216, 1, 1, "", "json_encode"], [1217, 1, 1, "", "rename_fields"], [1218, 3, 1, "", "schema"], [1219, 1, 1, "", "unnest"]], "polars.String": [[71, 1, 1, "", "__init__"]], "polars.StringCache": [[72, 1, 1, "", "__init__"]], "polars.Struct": [[73, 1, 1, "", "__init__"]], "polars.Time": [[74, 1, 1, "", "__init__"]], "polars.UInt16": [[75, 1, 1, "", "__init__"]], "polars.UInt32": [[76, 1, 1, "", "__init__"]], "polars.UInt64": [[77, 1, 1, "", "__init__"]], "polars.UInt8": [[78, 1, 1, "", "__init__"]], "polars.Unknown": [[79, 1, 1, "", "__init__"]], "polars.api": [[82, 4, 1, "", "register_dataframe_namespace"], [83, 4, 1, "", "register_expr_namespace"], [84, 4, 1, "", "register_lazyframe_namespace"], [85, 4, 1, "", "register_series_namespace"]], "polars.dataframe.group_by.GroupBy": [[278, 1, 1, "", "__iter__"], [279, 1, 1, "", "agg"], [280, 1, 1, "", "all"], [281, 1, 1, "", "apply"], [282, 1, 1, "", "count"], [283, 1, 1, "", "first"], [284, 1, 1, "", "head"], [285, 1, 1, "", "last"], [286, 1, 1, "", "map_groups"], [287, 1, 1, "", "max"], [288, 1, 1, "", "mean"], [289, 1, 1, "", "median"], [290, 1, 1, "", "min"], [291, 1, 1, "", "n_unique"], [292, 1, 1, "", "quantile"], [293, 1, 1, "", "sum"], [294, 1, 1, "", "tail"]], "polars.exceptions": [[92, 5, 1, "", "ArrowError"], [93, 5, 1, "", "ColumnNotFoundError"], [94, 5, 1, "", "ComputeError"], [95, 5, 1, "", "DuplicateError"], [96, 5, 1, "", "InvalidOperationError"], [97, 5, 1, "", "NoDataError"], [98, 5, 1, "", "NoRowsReturnedError"], [99, 5, 1, "", "PolarsError"], [100, 5, 1, "", "PolarsPanicError"], [101, 5, 1, "", "RowsError"], [102, 5, 1, "", "SchemaError"], [103, 5, 1, "", "SchemaFieldNotFoundError"], [104, 5, 1, "", "ShapeError"], [105, 5, 1, "", "StructFieldNotFoundError"], [106, 5, 1, "", "TooManyRowsReturnedError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[116, 1, 1, "", "next_batches"]], "polars.lazyframe.group_by.LazyGroupBy": [[856, 1, 1, "", "agg"], [857, 1, 1, "", "all"], [858, 1, 1, "", "apply"], [859, 1, 1, "", "count"], [860, 1, 1, "", "first"], [861, 1, 1, "", "head"], [862, 1, 1, "", "last"], [863, 1, 1, "", "map_groups"], [864, 1, 1, "", "max"], [865, 1, 1, "", "mean"], [866, 1, 1, "", "median"], [867, 1, 1, "", "min"], [868, 1, 1, "", "n_unique"], [869, 1, 1, "", "quantile"], [870, 1, 1, "", "sum"], [871, 1, 1, "", "tail"]], "polars.selectors": [[878, 4, 1, "", "all"], [878, 4, 1, "", "by_dtype"], [878, 4, 1, "", "by_name"], [878, 4, 1, "", "categorical"], [878, 4, 1, "", "contains"], [878, 4, 1, "", "date"], [878, 4, 1, "", "datetime"], [878, 4, 1, "", "duration"], [878, 4, 1, "", "ends_with"], [878, 4, 1, "", "expand_selector"], [878, 4, 1, "", "first"], [878, 4, 1, "", "float"], [878, 4, 1, "", "integer"], [878, 4, 1, "", "is_selector"], [878, 4, 1, "", "last"], [878, 4, 1, "", "matches"], [878, 4, 1, "", "numeric"], [878, 4, 1, "", "starts_with"], [878, 4, 1, "", "string"], [878, 4, 1, "", "temporal"], [878, 4, 1, "", "time"]], "polars.testing": [[141, 4, 1, "", "assert_frame_equal"], [142, 4, 1, "", "assert_frame_not_equal"], [143, 4, 1, "", "assert_series_equal"], [144, 4, 1, "", "assert_series_not_equal"]], "polars.testing.parametric": [[145, 0, 1, "", "column"], [146, 4, 1, "", "columns"], [147, 4, 1, "", "create_list_strategy"], [148, 4, 1, "", "dataframes"], [149, 4, 1, "", "load_profile"], [150, 4, 1, "", "series"], [151, 4, 1, "", "set_profile"]], "polars.testing.parametric.column": [[145, 1, 1, "", "__init__"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:exception", "6": "py:module"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"], "6": ["py", "module", "Python module"]}, "titleterms": {"index": 0, "extend": [1, 174, 1013], "api": [1, 82, 83, 84, 85, 777], "provid": 1, "new": 1, "function": [1, 154, 764, 776, 878], "avail": 1, "registr": 1, "exampl": [1, 303, 878, 1254, 1259], "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 761, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1259], "arrai": [2, 757, 1242], "binari": [3, 758, 771, 1244], "boolean": [4, 759, 1245], "categor": 5, "config": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 154], "activate_decim": 6, "load": [7, 154], "load_from_fil": 8, "restore_default": 9, "save": [10, 154], "save_to_fil": 11, "set_ascii_t": 12, "set_auto_structifi": 13, "set_decimal_separ": 14, "set_float_precis": 15, "set_fmt_float": 16, "set_fmt_str_length": 17, "set_fmt_table_cell_list_len": 18, "set_streaming_chunk_s": 19, "set_tbl_cell_align": 20, "set_tbl_cell_numeric_align": 21, "set_tbl_col": 22, "set_tbl_column_data_type_inlin": 23, "set_tbl_dataframe_shape_below": 24, "set_tbl_format": 25, "set_tbl_hide_column_data_typ": 26, "set_tbl_hide_column_nam": 27, "set_tbl_hide_dataframe_shap": 28, "set_tbl_hide_dtype_separ": 29, "set_tbl_row": 30, "set_tbl_width_char": 31, "set_thousands_separ": 32, "set_trim_decimal_zero": 33, "set_verbos": 34, "state": [35, 154], "datafram": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 148, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 300], "write_avro": 36, "write_csv": 37, "write_databas": 38, "write_delta": 39, "write_excel": 40, "write_ipc": 41, "write_ipc_stream": 42, "write_json": [43, 540], "write_ndjson": 44, "write_parquet": 45, "datatyp": 46, "date": [47, 385, 708, 956], "datetim": [48, 386, 711, 957], "decim": 49, "durat": [50, 714], "enum": 51, "float32": 52, "float64": 53, "int16": 54, "int32": 55, "int64": 56, "int8": 57, "lazyfram": [58, 59, 60, 61, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 875], "sink_csv": 58, "sink_ipc": 59, "sink_ndjson": 60, "sink_parquet": 61, "list": [62, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 766, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1251], "null": 63, "object": 64, "sqlcontext": [65, 66, 67, 68, 69, 70], "execut": 65, "regist": 66, "register_glob": 67, "register_mani": 68, "tabl": 69, "unregist": 70, "string": [71, 772, 1255], "stringcach": [72, 776], "struct": [73, 661, 662, 663, 747, 773, 1214, 1215, 1216, 1217, 1218, 1219, 1256], "time": [74, 414, 751, 989], "uint16": 75, "uint32": 76, "uint64": 77, "uint8": 78, "unknown": 79, "utf8": 80, "align_fram": 81, "register_dataframe_namespac": 82, "register_expr_namespac": 83, "register_lazyframe_namespac": 84, "register_series_namespac": 85, "build_info": 86, "collect_al": 87, "collect_all_async": 88, "concat": [89, 484, 609, 1060, 1162], "disable_string_cach": 90, "enable_string_cach": 91, "except": [92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 305], "arrowerror": 92, "columnnotfounderror": 93, "computeerror": 94, "duplicateerror": 95, "invalidoperationerror": 96, "nodataerror": 97, "norowsreturnederror": 98, "polarserror": 99, "polarspanicerror": 100, "rowserror": 101, "schemaerror": 102, "schemafieldnotfounderror": 103, "shapeerror": 104, "structfieldnotfounderror": 105, "toomanyrowsreturnederror": 106, "from_arrow": 107, "from_datafram": 108, "from_dict": [109, 110], "from_numpi": 111, "from_panda": 112, "from_record": 113, "from_repr": 114, "get_index_typ": 115, "io": 116, "csv": [116, 778], "batched_read": 116, "batchedcsvread": [116, 778], "next_batch": 116, "read_avro": 117, "read_csv": 118, "read_csv_batch": 119, "read_databas": 120, "read_database_uri": 121, "read_delta": 122, "read_excel": 123, "read_ipc": 124, "read_ipc_schema": 125, "read_ipc_stream": 126, "read_json": 127, "read_ndjson": 128, "read_od": 129, "read_parquet": 130, "read_parquet_schema": 131, "scan_csv": 132, "scan_delta": 133, "scan_iceberg": 134, "scan_ipc": 135, "scan_ndjson": 136, "scan_parquet": 137, "scan_pyarrow_dataset": 138, "set_random_se": 139, "show_vers": 140, "test": [141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 1259], "assert_frame_equ": 141, "assert_frame_not_equ": 142, "assert_series_equ": 143, "assert_series_not_equ": 144, "parametr": [145, 146, 147, 148, 149, 150, 151, 1259], "column": [145, 146, 163, 762, 788], "create_list_strategi": 147, "load_profil": 149, "seri": [150, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1250], "set_profil": 151, "threadpool_s": 152, "using_string_cach": 153, "option": 154, "current": 154, "us": 154, "context": 154, "manag": 154, "decor": 154, "aggreg": [155, 306, 779, 879], "__dataframe__": 156, "appli": [157, 281, 315, 686, 858, 885], "approx_n_uniqu": [158, 316, 687, 780], "bottom_k": [159, 351, 781, 919], "cast": [160, 352, 783, 920], "clear": [161, 784, 929], "clone": [162, 785, 933], "corr": [164, 696], "count": [165, 282, 363, 697, 789, 859], "describ": [166, 947], "drop": [167, 791], "drop_in_plac": 168, "drop_nul": [169, 380, 489, 792, 951, 1065], "dtype": [170, 793, 1004], "equal": [171, 1006], "estimated_s": [172, 1007], "explod": [173, 437, 491, 617, 795, 1012, 1067, 1170], "fill_nan": [175, 439, 797, 1015], "fill_nul": [176, 440, 798, 1016], "filter": [177, 441, 799, 1017], "find_idx_by_nam": 178, "flag": [179, 1018], "fold": [180, 718], "frame_equ": 181, "gather_everi": [182, 449, 801, 1021], "get_column": [183, 185], "get_column_index": 184, "glimps": 186, "group_bi": [187, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 802, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871], "group_by_dynam": [188, 803], "group_by_rol": [189, 804], "groupbi": [190, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 299, 805, 874], "groupby_dynam": [191, 806], "groupby_rol": [192, 807], "hash_row": 193, "head": [194, 284, 454, 495, 722, 808, 861, 1025, 1071], "height": 195, "hstack": 196, "insert_at_idx": 197, "insert_column": 198, "interpol": [199, 458, 810, 1029], "is_dupl": [200, 460, 1032], "is_empti": [201, 1033], "is_uniqu": [202, 473, 1050], "item": [203, 1052], "iter_column": 204, "iter_row": 205, "iter_slic": 206, "join": [207, 336, 496, 811, 905, 1072], "join_asof": [208, 812], "lazi": [209, 814], "limit": [210, 479, 815, 1055], "map_row": 211, "max": [212, 287, 338, 500, 528, 731, 818, 864, 907, 966, 1076, 1100], "max_horizont": [213, 732], "mean": [214, 288, 501, 529, 733, 819, 865, 967, 1077, 1101], "mean_horizont": 215, "median": [216, 289, 530, 734, 820, 866, 968, 1102], "melt": [217, 821], "merge_sort": [218, 822], "min": [219, 290, 339, 502, 541, 735, 823, 867, 908, 973, 1078, 1103], "min_horizont": [220, 736], "n_chunk": [221, 1105], "n_uniqu": [222, 291, 545, 737, 868, 1106], "null_count": [223, 557, 824, 1112], "partition_bi": 224, "pipe": [225, 563, 825], "pivot": 226, "product": [227, 566, 1116], "quantil": [228, 292, 568, 739, 827, 869, 1118], "rechunk": [229, 571, 1120], "renam": [230, 828, 1122], "replac": [231, 574, 634, 1123, 1187], "replace_at_idx": 232, "replace_column": 233, "revers": [234, 340, 503, 576, 637, 829, 909, 1079, 1125, 1190], "roll": [235, 579, 830], "row": [236, 237], "rows_by_kei": 238, "sampl": [239, 504, 593, 1080, 1141], "schema": [240, 831, 1218], "select": [241, 302, 744, 769, 832, 877, 1253], "select_seq": [242, 833], "set_sort": [243, 595, 835, 1147], "shape": [244, 1148], "shift": [245, 509, 596, 836, 1085, 1149], "shift_and_fil": [246, 597, 837, 1150], "shrink_to_fit": [247, 1152], "slice": [248, 510, 604, 640, 839, 1086, 1158, 1193], "sort": [249, 341, 511, 605, 840, 910, 1087, 1159], "std": [250, 608, 746, 841, 1161], "sum": [251, 293, 342, 512, 666, 748, 842, 870, 911, 1088, 1220], "sum_horizont": [252, 749], "tail": [253, 294, 513, 667, 750, 843, 871, 1089, 1221], "take_everi": [254, 669, 844, 1223], "to_arrow": [255, 1226], "to_dict": [256, 257], "to_dummi": [258, 1227], "to_init_repr": [259, 1229], "to_numpi": [260, 1231], "to_panda": [261, 1232], "to_seri": 262, "to_struct": [263, 516, 1092], "top_k": [264, 673, 845, 1234], "transpos": 265, "uniqu": [266, 344, 517, 675, 846, 913, 1093, 1235], "unnest": [267, 847, 1219], "unstack": 268, "updat": [269, 848], "upsampl": 270, "var": [271, 679, 754, 849, 1239], "vstack": 272, "width": [273, 850], "with_column": [274, 851], "with_columns_seq": [275, 852], "with_row_count": [276, 854], "with_row_index": [277, 855], "__iter__": 278, "agg": [279, 856], "all": [280, 311, 328, 480, 682, 857, 882, 897, 1056], "first": [283, 334, 442, 492, 717, 800, 860, 903, 1068], "last": [285, 337, 476, 497, 726, 813, 862, 906, 1073], "map_group": [286, 730, 863], "attribut": [295, 872, 1243], "comput": [296, 763, 1247], "descript": [297, 873, 1248], "export": [298, 1249], "miscellan": [301, 768, 776, 876, 1252], "manipul": [302, 769, 877, 1253], "plot": [303, 1254], "data": 304, "type": 304, "numer": [304, 771], "tempor": [304, 774, 1257], "nest": 304, "other": 304, "expr": [307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681], "ab": [307, 880], "add": 308, "agg_group": 309, "alia": [310, 881], "and_": 312, "ani": [313, 329, 481, 684, 883, 898, 1057], "append": [314, 884], "arcco": [317, 886], "arccosh": [318, 887], "arcsin": [319, 888], "arcsinh": [320, 889], "arctan": [321, 890], "arctanh": [322, 891], "arg_max": [323, 330, 482, 892, 899, 1058], "arg_min": [324, 331, 483, 893, 900, 1059], "arg_sort": [325, 894], "arg_tru": [326, 895], "arg_uniqu": [327, 896], "arr": [328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913], "contain": [332, 346, 485, 610, 901, 914, 1061, 1163], "count_match": [333, 486, 487, 612, 613, 902, 1062, 1063, 1165, 1166], "get": [335, 451, 494, 904, 1070], "to_list": [343, 912, 1230], "backward_fil": 345, "bin": [346, 347, 348, 349, 350, 914, 915, 916, 917, 918], "decod": [347, 614, 915, 1167], "encod": [348, 615, 916, 1168], "ends_with": [349, 616, 917, 1169], "starts_with": [350, 644, 918, 1197], "cat": [353, 354, 921, 922, 923, 924, 925], "get_categori": [353, 921], "set_ord": [354, 923], "cbrt": [355, 926], "ceil": [356, 927], "clip": [357, 930], "clip_max": [358, 931], "clip_min": [359, 932], "co": [360, 934], "cosh": [361, 935], "cot": [362, 936], "cum_count": [364, 699], "cum_max": [365, 937], "cum_min": [366, 938], "cum_prod": [367, 939], "cum_sum": [368, 702, 940], "cumcount": 369, "cummax": [370, 941], "cummin": [371, 942], "cumprod": [372, 943], "cumsum": [373, 706, 944], "cumulative_ev": [374, 945], "cut": [375, 946], "degre": 376, "diff": [377, 488, 948, 1064], "dot": [378, 949], "drop_nan": [379, 950], "dt": [381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003], "base_utc_offset": [381, 952], "cast_time_unit": [382, 953], "combin": [383, 954], "convert_time_zon": [384, 955], "dai": [387, 388, 958, 959], "dst_offset": [389, 960], "epoch": [390, 961], "hour": [391, 392, 962, 963], "is_leap_year": [393, 964], "iso_year": [394, 965], "microsecond": [395, 396, 969, 970], "millisecond": [397, 398, 971, 972], "minut": [399, 400, 974, 975], "month": [401, 976], "month_end": [402, 977], "month_start": [403, 978], "nanosecond": [404, 405, 979, 980], "offset_bi": [406, 981], "ordinal_dai": [407, 982], "quarter": [408, 983], "replace_time_zon": [409, 984], "round": [410, 591, 985, 1139], "second": [411, 412, 986, 987], "strftime": [413, 988], "timestamp": [415, 990], "to_str": [416, 991], "total_dai": [417, 992], "total_hour": [418, 993], "total_microsecond": [419, 994], "total_millisecond": [420, 995], "total_minut": [421, 996], "total_nanosecond": [422, 997], "total_second": [423, 998], "truncat": [424, 999], "week": [425, 1000], "weekdai": [426, 1001], "with_time_unit": [427, 1002], "year": [428, 1003], "entropi": [429, 1005], "eq": [430, 531], "eq_miss": 431, "ewm_mean": [432, 1008], "ewm_std": [433, 1009], "ewm_var": [434, 1010], "exclud": [435, 716], "exp": [436, 1011], "extend_const": [438, 1014], "flatten": 443, "floor": [444, 1019], "floordiv": 445, "forward_fil": 446, "from_json": 447, "gather": [448, 493, 1020, 1069], "ge": 450, "gt": 452, "hash": [453, 1024], "hist": [455, 1026], "implod": [456, 723, 1027], "inspect": [457, 809], "is_between": [459, 1030], "is_finit": [461, 1034], "is_first": [462, 1035], "is_first_distinct": [463, 1036], "is_in": [464, 1038], "is_infinit": [465, 1039], "is_last": [466, 1041], "is_last_distinct": [467, 1042], "is_nan": [468, 1043], "is_not": 469, "is_not_nan": [470, 1044], "is_not_nul": [471, 1045], "is_nul": [472, 1046], "keep_nam": 474, "kurtosi": [475, 1053], "le": 477, "len": [478, 498, 1054, 1074], "eval": [490, 1066], "length": [499, 627, 1075, 1180], "set_differ": [505, 1081], "set_intersect": [506, 1082], "set_symmetric_differ": [507, 1083], "set_union": [508, 1084], "take": [514, 668, 1090, 1222], "to_arrai": [515, 1091], "log": [518, 1094], "log10": [519, 1095], "log1p": [520, 1096], "lower_bound": [521, 1097], "lt": 522, "map": [523, 547, 728, 816], "map_alia": 524, "map_batch": [525, 729, 817], "map_dict": [526, 1098], "map_el": [527, 1099], "meta": [531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 767], "has_multiple_output": 532, "is_regex_project": 533, "ne": [534, 554], "output_nam": 535, "pop": 536, "root_nam": 537, "tree_format": 538, "undo_alias": 539, "mod": 542, "mode": [543, 1104], "mul": 544, "name": [546, 547, 548, 549, 550, 551, 762, 770, 1107], "keep": 546, "prefix": [548, 565], "suffix": [549, 665], "to_lowercas": [550, 656, 1209], "to_uppercas": [551, 659, 1212], "nan_max": [552, 1108], "nan_min": [553, 1109], "ne_miss": 555, "not_": [556, 1111], "or_": 558, "over": 559, "pct_chang": [560, 1113], "peak_max": [561, 1114], "peak_min": [562, 1115], "pow": 564, "qcut": [567, 1117], "radian": 569, "rank": [570, 1119], "reinterpret": [572, 1121], "repeat_bi": 573, "reshap": [575, 1124], "rle": [577, 1126], "rle_id": [578, 1127], "rolling_appli": [580, 1128], "rolling_map": [581, 1129], "rolling_max": [582, 1130], "rolling_mean": [583, 1131], "rolling_median": [584, 1132], "rolling_min": [585, 1133], "rolling_quantil": [586, 1134], "rolling_skew": [587, 1135], "rolling_std": [588, 1136], "rolling_sum": [589, 1137], "rolling_var": [590, 1138], "round_sig_fig": [592, 1140], "search_sort": [594, 1143], "shrink_dtyp": [598, 1151], "shuffl": [599, 1153], "sign": [600, 1154], "sin": [601, 1155], "sinh": [602, 1156], "skew": [603, 1157], "sort_bi": 606, "sqrt": [607, 1160], "str": [609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213], "contains_ani": [611, 1164], "extract": [618, 1171], "extract_al": [619, 1172], "extract_group": [620, 1173], "find": [621, 1174], "json_decod": [622, 1175], "json_extract": [623, 1176], "json_path_match": [624, 1177], "len_byt": [625, 1178], "len_char": [626, 1179], "ljust": [628, 1181], "lstrip": [629, 1182], "n_char": [630, 1183], "pad_end": [631, 1184], "pad_start": [632, 1185], "parse_int": [633, 1186], "replace_al": [635, 1188], "replace_mani": [636, 1189], "rjust": [638, 1191], "rstrip": [639, 1192], "split": [641, 1194], "split_exact": [642, 1195], "splitn": [643, 1196], "strip": [645, 1198], "strip_char": [646, 1199], "strip_chars_end": [647, 1200], "strip_chars_start": [648, 1201], "strip_prefix": [649, 1202], "strip_suffix": [650, 1203], "strptime": [651, 1204], "to_dat": [652, 1205], "to_datetim": [653, 1206], "to_decim": [654, 1207], "to_integ": [655, 1208], "to_tim": [657, 1210], "to_titlecas": [658, 1211], "zfill": [660, 1213], "field": [661, 1214, 1215], "json_encod": [662, 1216], "rename_field": [663, 1217], "sub": 664, "tan": [670, 1224], "tanh": [671, 1225], "to_phys": [672, 1233], "truediv": 674, "unique_count": [676, 1236], "upper_bound": [677, 1237], "value_count": [678, 1238], "where": 680, "xor": 681, "all_horizont": 683, "any_horizont": 685, "arang": 688, "arctan2": 689, "arctan2d": 690, "arg_sort_bi": 691, "arg_wher": 692, "coalesc": 693, "concat_list": 694, "concat_str": 695, "cov": 698, "cum_fold": 700, "cum_reduc": 701, "cum_sum_horizont": 703, "cumfold": 704, "cumreduc": 705, "cumsum_horizont": 707, "date_rang": [709, 710], "datetime_rang": [712, 713], "element": 715, "format": 719, "from_epoch": 720, "group": 721, "int_rang": [724, 725], "lit": 727, "ones": 738, "reduc": 740, "repeat": 741, "rolling_corr": 742, "rolling_cov": 743, "sql_expr": 745, "time_rang": [752, 753], "when": 755, "zero": 756, "categori": [760, 1246], "col": 761, "express": 765, "oper": [771, 878], "conjunct": 771, "comparison": 771, "window": 775, "convers": 776, "parallel": 776, "random": 776, "refer": 777, "input": 778, "output": 778, "feather": 778, "ipc": 778, "parquet": 778, "databas": 778, "json": 778, "avro": 778, "spreadsheet": 778, "apach": 778, "iceberg": 778, "delta": 778, "lake": 778, "dataset": 778, "cach": 782, "collect": 786, "collect_async": 787, "deseri": 790, "explain": 794, "fetch": 796, "profil": [826, 1259], "serial": 834, "show_graph": 838, "with_context": 853, "lazygroupbi": [856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871], "read": 876, "write": 876, "logic": 876, "plan": 876, "selector": 878, "import": 878, "set": [878, 1145], "is_loc": 922, "to_loc": 924, "uses_lexical_ord": 925, "chunk_length": 928, "get_chunk": 1022, "has_valid": 1023, "inner_dtyp": 1028, "is_boolean": 1031, "is_float": 1037, "is_integ": 1040, "is_numer": 1047, "is_sort": 1048, "is_tempor": 1049, "is_utf8": 1051, "new_from_index": 1110, "scatter": 1142, "series_equ": 1144, "set_at_idx": 1146, "to_fram": 1228, "view": 1240, "zip_with": 1241, "sql": 1258, "method": 1258, "assert": 1259, "primit": 1259, "strategi": 1259, "helper": 1259, "util": 1260}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"polars.DataFrame.gather_every": [[182, "polars-dataframe-gather-every"]], "polars.DataFrame.insert_at_idx": [[197, "polars-dataframe-insert-at-idx"]], "polars.DataFrame.group_by": [[187, "polars-dataframe-group-by"]], "polars.DataFrame.dtypes": [[170, "polars-dataframe-dtypes"]], "polars.DataFrame.max_horizontal": [[213, "polars-dataframe-max-horizontal"]], "polars.DataFrame.explode": [[173, "polars-dataframe-explode"]], "polars.DataFrame.estimated_size": [[172, "polars-dataframe-estimated-size"]], "polars.DataFrame.insert_column": [[198, "polars-dataframe-insert-column"]], "polars.DataFrame.fold": [[180, "polars-dataframe-fold"]], "polars.DataFrame.flags": [[179, "polars-dataframe-flags"]], "polars.DataFrame.groupby_dynamic": [[191, "polars-dataframe-groupby-dynamic"]], "polars.DataFrame.merge_sorted": [[218, "polars-dataframe-merge-sorted"]], "polars.DataFrame.iter_slices": [[206, "polars-dataframe-iter-slices"]], "polars.DataFrame.median": [[216, "polars-dataframe-median"]], "polars.DataFrame.is_unique": [[202, "polars-dataframe-is-unique"]], "polars.DataFrame.join": [[207, "polars-dataframe-join"]], "polars.DataFrame.limit": [[210, "polars-dataframe-limit"]], "polars.DataFrame.map_rows": [[211, "polars-dataframe-map-rows"]], "polars.DataFrame.interpolate": [[199, "polars-dataframe-interpolate"]], "polars.DataFrame.iter_columns": [[204, "polars-dataframe-iter-columns"]], "polars.DataFrame.groupby_rolling": [[192, "polars-dataframe-groupby-rolling"]], "polars.DataFrame.item": [[203, "polars-dataframe-item"]], "polars.DataFrame.iter_rows": [[205, "polars-dataframe-iter-rows"]], "polars.DataFrame.n_chunks": [[221, "polars-dataframe-n-chunks"]], "polars.DataFrame.get_column_index": [[184, "polars-dataframe-get-column-index"]], "polars.DataFrame.is_empty": [[201, "polars-dataframe-is-empty"]], "polars.DataFrame.group_by_dynamic": [[188, "polars-dataframe-group-by-dynamic"]], "polars.DataFrame.hash_rows": [[193, "polars-dataframe-hash-rows"]], "polars.DataFrame.head": [[194, "polars-dataframe-head"]], "polars.DataFrame.is_duplicated": [[200, "polars-dataframe-is-duplicated"]], "polars.DataFrame.fill_null": [[176, "polars-dataframe-fill-null"]], "polars.DataFrame.group_by_rolling": [[189, "polars-dataframe-group-by-rolling"]], "polars.DataFrame.glimpse": [[186, "polars-dataframe-glimpse"]], "polars.DataFrame.null_count": [[223, "polars-dataframe-null-count"]], "polars.DataFrame.extend": [[174, "polars-dataframe-extend"]], "polars.DataFrame.equals": [[171, "polars-dataframe-equals"]], "polars.DataFrame.get_column": [[183, "polars-dataframe-get-column"]], "polars.DataFrame.get_columns": [[185, "polars-dataframe-get-columns"]], "polars.DataFrame.find_idx_by_name": [[178, "polars-dataframe-find-idx-by-name"]], "polars.DataFrame.join_asof": [[208, "polars-dataframe-join-asof"]], "polars.DataFrame.filter": [[177, "polars-dataframe-filter"]], "polars.DataFrame.n_unique": [[222, "polars-dataframe-n-unique"]], "polars.DataFrame.frame_equal": [[181, "polars-dataframe-frame-equal"]], "polars.DataFrame.min_horizontal": [[220, "polars-dataframe-min-horizontal"]], "polars.DataFrame.lazy": [[209, "polars-dataframe-lazy"]], "polars.DataFrame.fill_nan": [[175, "polars-dataframe-fill-nan"]], "polars.DataFrame.mean_horizontal": [[215, "polars-dataframe-mean-horizontal"]], "polars.DataFrame.groupby": [[190, "polars-dataframe-groupby"]], "polars.DataFrame.melt": [[217, "polars-dataframe-melt"]], "polars.DataFrame.mean": [[214, "polars-dataframe-mean"]], "polars.DataFrame.drop_in_place": [[168, "polars-dataframe-drop-in-place"]], "polars.DataFrame.min": [[219, "polars-dataframe-min"]], "polars.DataFrame.max": [[212, "polars-dataframe-max"]], "polars.DataFrame.hstack": [[196, "polars-dataframe-hstack"]], "polars.DataFrame.height": [[195, "polars-dataframe-height"]], "polars.DataFrame.drop_nulls": [[169, "polars-dataframe-drop-nulls"]], "polars.read_parquet": [[130, "polars-read-parquet"]], "polars.scan_ipc": [[135, "polars-scan-ipc"]], "polars.read_ndjson": [[128, "polars-read-ndjson"]], "polars.from_pandas": [[112, "polars-from-pandas"]], "polars.testing.assert_frame_equal": [[141, "polars-testing-assert-frame-equal"]], "polars.threadpool_size": [[152, "polars-threadpool-size"]], "polars.testing.assert_series_equal": [[143, "polars-testing-assert-series-equal"]], "polars.DataFrame.count": [[165, "polars-dataframe-count"]], "polars.read_ipc_stream": [[126, "polars-read-ipc-stream"]], "polars.testing.assert_frame_not_equal": [[142, "polars-testing-assert-frame-not-equal"]], "polars.read_avro": [[117, "polars-read-avro"]], "polars.read_ods": [[129, "polars-read-ods"]], "polars.set_random_seed": [[139, "polars-set-random-seed"]], "polars.testing.parametric.series": [[150, "polars-testing-parametric-series"]], "polars.DataFrame.clear": [[161, "polars-dataframe-clear"]], "polars.DataFrame.describe": [[166, "polars-dataframe-describe"]], "polars.DataFrame.drop": [[167, "polars-dataframe-drop"]], "polars.scan_delta": [[133, "polars-scan-delta"]], "polars.DataFrame.approx_n_unique": [[158, "polars-dataframe-approx-n-unique"]], "polars.scan_ndjson": [[136, "polars-scan-ndjson"]], "polars.testing.parametric.columns": [[146, "polars-testing-parametric-columns"]], "polars.testing.parametric.create_list_strategy": [[147, "polars-testing-parametric-create-list-strategy"]], "polars.testing.parametric.set_profile": [[151, "polars-testing-parametric-set-profile"]], "polars.read_excel": [[123, "polars-read-excel"]], "polars.show_versions": [[140, "polars-show-versions"]], "Aggregation": [[155, "aggregation"], [879, "aggregation"], [779, "aggregation"], [306, "aggregation"]], "polars.scan_parquet": [[137, "polars-scan-parquet"]], "polars.get_index_type": [[115, "polars-get-index-type"]], "polars.read_ipc": [[124, "polars-read-ipc"]], "polars.DataFrame.corr": [[164, "polars-dataframe-corr"]], "polars.DataFrame.bottom_k": [[159, "polars-dataframe-bottom-k"]], "polars.DataFrame.columns": [[163, "polars-dataframe-columns"]], "polars.testing.assert_series_not_equal": [[144, "polars-testing-assert-series-not-equal"]], "polars.from_repr": [[114, "polars-from-repr"]], "polars.read_ipc_schema": [[125, "polars-read-ipc-schema"]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[116, "polars-io-csv-batched-reader-batchedcsvreader-next-batches"]], "polars.testing.parametric.dataframes": [[148, "polars-testing-parametric-dataframes"]], "polars.DataFrame.__dataframe__": [[156, "polars-dataframe-dataframe"]], "polars.read_database_uri": [[121, "polars-read-database-uri"]], "polars.scan_pyarrow_dataset": [[138, "polars-scan-pyarrow-dataset"]], "polars.DataFrame.cast": [[160, "polars-dataframe-cast"]], "polars.read_database": [[120, "polars-read-database"]], "polars.scan_csv": [[132, "polars-scan-csv"]], "polars.read_json": [[127, "polars-read-json"]], "polars.using_string_cache": [[153, "polars-using-string-cache"]], "polars.read_parquet_schema": [[131, "polars-read-parquet-schema"]], "polars.from_records": [[113, "polars-from-records"]], "polars.read_delta": [[122, "polars-read-delta"]], "polars.DataFrame.clone": [[162, "polars-dataframe-clone"]], "polars.testing.parametric.column": [[145, "polars-testing-parametric-column"]], "polars.testing.parametric.load_profile": [[149, "polars-testing-parametric-load-profile"]], "polars.DataFrame.apply": [[157, "polars-dataframe-apply"]], "polars.scan_iceberg": [[134, "polars-scan-iceberg"]], "Config": [[154, "config"]], "Config options": [[154, "config-options"]], "Config load, save, and current state": [[154, "config-load-save-and-current-state"]], "Use as a context manager": [[154, "use-as-a-context-manager"]], "Use as a function decorator": [[154, "use-as-a-function-decorator"]], "polars.read_csv": [[118, "polars-read-csv"]], "polars.read_csv_batched": [[119, "polars-read-csv-batched"]], "polars.Time": [[74, "polars-time"]], "polars.SQLContext.tables": [[69, "polars-sqlcontext-tables"]], "polars.UInt8": [[78, "polars-uint8"]], "polars.exceptions.InvalidOperationError": [[96, "polars-exceptions-invalidoperationerror"]], "polars.exceptions.SchemaFieldNotFoundError": [[103, "polars-exceptions-schemafieldnotfounderror"]], "polars.exceptions.SchemaError": [[102, "polars-exceptions-schemaerror"]], "polars.api.register_series_namespace": [[85, "polars-api-register-series-namespace"]], "polars.Int64": [[56, "polars-int64"]], "polars.from_arrow": [[107, "polars-from-arrow"]], "polars.Int8": [[57, "polars-int8"]], "polars.exceptions.NoDataError": [[97, "polars-exceptions-nodataerror"]], "polars.SQLContext.register": [[66, "polars-sqlcontext-register"]], "polars.SQLContext.register_many": [[68, "polars-sqlcontext-register-many"]], "polars.SQLContext.unregister": [[70, "polars-sqlcontext-unregister"]], "polars.api.register_expr_namespace": [[83, "polars-api-register-expr-namespace"]], "polars.collect_all": [[87, "polars-collect-all"]], "polars.from_dataframe": [[108, "polars-from-dataframe"]], "polars.from_dict": [[109, "polars-from-dict"]], "polars.LazyFrame.sink_ndjson": [[60, "polars-lazyframe-sink-ndjson"]], "polars.UInt32": [[76, "polars-uint32"]], "polars.from_numpy": [[111, "polars-from-numpy"]], "polars.build_info": [[86, "polars-build-info"]], "polars.Null": [[63, "polars-null"]], "polars.LazyFrame.sink_parquet": [[61, "polars-lazyframe-sink-parquet"]], "polars.exceptions.NoRowsReturnedError": [[98, "polars-exceptions-norowsreturnederror"]], "polars.LazyFrame.sink_ipc": [[59, "polars-lazyframe-sink-ipc"]], "polars.StringCache": [[72, "polars-stringcache"]], "polars.exceptions.TooManyRowsReturnedError": [[106, "polars-exceptions-toomanyrowsreturnederror"]], "polars.align_frames": [[81, "polars-align-frames"]], "polars.from_dicts": [[110, "polars-from-dicts"]], "polars.api.register_lazyframe_namespace": [[84, "polars-api-register-lazyframe-namespace"]], "polars.exceptions.ComputeError": [[94, "polars-exceptions-computeerror"]], "polars.collect_all_async": [[88, "polars-collect-all-async"]], "polars.SQLContext.execute": [[65, "polars-sqlcontext-execute"]], "polars.SQLContext.register_globals": [[67, "polars-sqlcontext-register-globals"]], "polars.UInt64": [[77, "polars-uint64"]], "polars.UInt16": [[75, "polars-uint16"]], "polars.disable_string_cache": [[90, "polars-disable-string-cache"]], "polars.api.register_dataframe_namespace": [[82, "polars-api-register-dataframe-namespace"]], "polars.String": [[71, "polars-string"]], "polars.enable_string_cache": [[91, "polars-enable-string-cache"]], "polars.exceptions.ColumnNotFoundError": [[93, "polars-exceptions-columnnotfounderror"]], "polars.exceptions.StructFieldNotFoundError": [[105, "polars-exceptions-structfieldnotfounderror"]], "polars.Struct": [[73, "polars-struct"]], "polars.exceptions.RowsError": [[101, "polars-exceptions-rowserror"]], "polars.List": [[62, "polars-list"]], "polars.Utf8": [[80, "polars-utf8"]], "polars.concat": [[89, "polars-concat"]], "polars.Object": [[64, "polars-object"]], "polars.Unknown": [[79, "polars-unknown"]], "polars.exceptions.PolarsError": [[99, "polars-exceptions-polarserror"]], "polars.exceptions.PolarsPanicError": [[100, "polars-exceptions-polarspanicerror"]], "polars.exceptions.ShapeError": [[104, "polars-exceptions-shapeerror"]], "polars.LazyFrame.sink_csv": [[58, "polars-lazyframe-sink-csv"]], "polars.exceptions.DuplicateError": [[95, "polars-exceptions-duplicateerror"]], "polars.exceptions.ArrowError": [[92, "polars-exceptions-arrowerror"]], "polars.Series.str.strip_chars_end": [[1200, "polars-series-str-strip-chars-end"]], "polars.Series.str.pad_end": [[1184, "polars-series-str-pad-end"]], "polars.Series.str.zfill": [[1213, "polars-series-str-zfill"]], "polars.Series.str.rstrip": [[1192, "polars-series-str-rstrip"]], "polars.Series.str.ljust": [[1181, "polars-series-str-ljust"]], "polars.Series.to_list": [[1230, "polars-series-to-list"]], "polars.Series.tail": [[1221, "polars-series-tail"]], "polars.Series.str.splitn": [[1196, "polars-series-str-splitn"]], "polars.Series.str.to_titlecase": [[1211, "polars-series-str-to-titlecase"]], "polars.Series.str.len_chars": [[1179, "polars-series-str-len-chars"]], "polars.Series.tanh": [[1225, "polars-series-tanh"]], "polars.Series.str.pad_start": [[1185, "polars-series-str-pad-start"]], "polars.Series.struct.field": [[1214, "polars-series-struct-field"]], "polars.Series.str.lengths": [[1180, "polars-series-str-lengths"]], "polars.Series.str.strip_chars": [[1199, "polars-series-str-strip-chars"]], "polars.Series.struct.fields": [[1215, "polars-series-struct-fields"]], "polars.Series.str.rjust": [[1191, "polars-series-str-rjust"]], "polars.Series.struct.unnest": [[1219, "polars-series-struct-unnest"]], "polars.Series.str.replace": [[1187, "polars-series-str-replace"]], "polars.Series.str.lstrip": [[1182, "polars-series-str-lstrip"]], "polars.Series.tan": [[1224, "polars-series-tan"]], "polars.Series.str.n_chars": [[1183, "polars-series-str-n-chars"]], "polars.Series.str.to_date": [[1205, "polars-series-str-to-date"]], "polars.Series.str.to_decimal": [[1207, "polars-series-str-to-decimal"]], "polars.Series.str.json_extract": [[1176, "polars-series-str-json-extract"]], "polars.Series.str.strip_chars_start": [[1201, "polars-series-str-strip-chars-start"]], "polars.Series.str.to_time": [[1210, "polars-series-str-to-time"]], "polars.Series.str.reverse": [[1190, "polars-series-str-reverse"]], "polars.Series.str.slice": [[1193, "polars-series-str-slice"]], "polars.Series.str.strip_suffix": [[1203, "polars-series-str-strip-suffix"]], "polars.Series.str.split": [[1194, "polars-series-str-split"]], "polars.Series.str.to_integer": [[1208, "polars-series-str-to-integer"]], "polars.Series.struct.rename_fields": [[1217, "polars-series-struct-rename-fields"]], "polars.Series.str.strip": [[1198, "polars-series-str-strip"]], "polars.Series.str.to_uppercase": [[1212, "polars-series-str-to-uppercase"]], "polars.Series.to_frame": [[1228, "polars-series-to-frame"]], "polars.Series.str.starts_with": [[1197, "polars-series-str-starts-with"]], "polars.Series.take_every": [[1223, "polars-series-take-every"]], "polars.Series.take": [[1222, "polars-series-take"]], "polars.Series.to_arrow": [[1226, "polars-series-to-arrow"]], "polars.Series.struct.schema": [[1218, "polars-series-struct-schema"]], "polars.Series.sum": [[1220, "polars-series-sum"]], "polars.Series.str.to_datetime": [[1206, "polars-series-str-to-datetime"]], "polars.Series.to_dummies": [[1227, "polars-series-to-dummies"]], "polars.Series.str.replace_many": [[1189, "polars-series-str-replace-many"]], "polars.Series.str.split_exact": [[1195, "polars-series-str-split-exact"]], "polars.Series.str.to_lowercase": [[1209, "polars-series-str-to-lowercase"]], "polars.Series.to_init_repr": [[1229, "polars-series-to-init-repr"]], "polars.Series.str.strip_prefix": [[1202, "polars-series-str-strip-prefix"]], "polars.Series.str.len_bytes": [[1178, "polars-series-str-len-bytes"]], "polars.Series.str.parse_int": [[1186, "polars-series-str-parse-int"]], "polars.Series.str.strptime": [[1204, "polars-series-str-strptime"]], "polars.Series.to_numpy": [[1231, "polars-series-to-numpy"]], "polars.Series.str.replace_all": [[1188, "polars-series-str-replace-all"]], "polars.Series.str.json_path_match": [[1177, "polars-series-str-json-path-match"]], "polars.Series.struct.json_encode": [[1216, "polars-series-struct-json-encode"]], "polars.Config.set_tbl_cols": [[22, "polars-config-set-tbl-cols"]], "polars.Config.set_thousands_separator": [[32, "polars-config-set-thousands-separator"]], "polars.Float64": [[53, "polars-float64"]], "polars.Config.restore_defaults": [[9, "polars-config-restore-defaults"]], "polars.DataFrame.write_delta": [[39, "polars-dataframe-write-delta"]], "polars.Int16": [[54, "polars-int16"]], "polars.Config.state": [[35, "polars-config-state"]], "polars.Binary": [[3, "polars-binary"]], "polars.Config.set_tbl_hide_dtype_separator": [[29, "polars-config-set-tbl-hide-dtype-separator"]], "polars.DataFrame.write_json": [[43, "polars-dataframe-write-json"]], "polars.Boolean": [[4, "polars-boolean"]], "polars.Config.set_fmt_table_cell_list_len": [[18, "polars-config-set-fmt-table-cell-list-len"]], "polars.Config.set_tbl_rows": [[30, "polars-config-set-tbl-rows"]], "polars.DataFrame.write_csv": [[37, "polars-dataframe-write-csv"]], "polars.Config.activate_decimals": [[6, "polars-config-activate-decimals"]], "polars.Array": [[2, "polars-array"]], "polars.Config.set_tbl_width_chars": [[31, "polars-config-set-tbl-width-chars"]], "polars.Config.set_tbl_dataframe_shape_below": [[24, "polars-config-set-tbl-dataframe-shape-below"]], "polars.DataType": [[46, "polars-datatype"]], "polars.Int32": [[55, "polars-int32"]], "polars.Config.load_from_file": [[8, "polars-config-load-from-file"]], "polars.Decimal": [[49, "polars-decimal"]], "polars.Config.set_verbose": [[34, "polars-config-set-verbose"]], "polars.Config.save_to_file": [[11, "polars-config-save-to-file"]], "polars.DataFrame.write_avro": [[36, "polars-dataframe-write-avro"]], "polars.Config.set_tbl_column_data_type_inline": [[23, "polars-config-set-tbl-column-data-type-inline"]], "polars.Float32": [[52, "polars-float32"]], "polars.Config.set_tbl_cell_numeric_alignment": [[21, "polars-config-set-tbl-cell-numeric-alignment"]], "polars.DataFrame.write_database": [[38, "polars-dataframe-write-database"]], "Index": [[0, "index"]], "Extending the API": [[1, "extending-the-api"]], "Providing new functionality": [[1, "providing-new-functionality"]], "Available registrations": [[1, "available-registrations"]], "Examples": [[1, "examples"], [1259, "examples"], [1254, "examples"], [878, "examples"], [303, "examples"]], "polars.Config.set_ascii_tables": [[12, "polars-config-set-ascii-tables"]], "polars.Config.set_tbl_cell_alignment": [[20, "polars-config-set-tbl-cell-alignment"]], "polars.Duration": [[50, "polars-duration"]], "polars.Datetime": [[48, "polars-datetime"]], "polars.DataFrame.write_ipc_stream": [[42, "polars-dataframe-write-ipc-stream"]], "polars.DataFrame.write_ndjson": [[44, "polars-dataframe-write-ndjson"]], "polars.Config.set_fmt_str_lengths": [[17, "polars-config-set-fmt-str-lengths"]], "polars.Config.set_auto_structify": [[13, "polars-config-set-auto-structify"]], "polars.Enum": [[51, "polars-enum"]], "polars.DataFrame.write_parquet": [[45, "polars-dataframe-write-parquet"]], "polars.Config.set_float_precision": [[15, "polars-config-set-float-precision"]], "polars.Config.set_decimal_separator": [[14, "polars-config-set-decimal-separator"]], "polars.Categorical": [[5, "polars-categorical"]], "polars.Date": [[47, "polars-date"]], "polars.Config.set_tbl_formatting": [[25, "polars-config-set-tbl-formatting"]], "polars.Config.set_tbl_hide_dataframe_shape": [[28, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.DataFrame.write_ipc": [[41, "polars-dataframe-write-ipc"]], "polars.Config.set_fmt_float": [[16, "polars-config-set-fmt-float"]], "polars.Config.set_tbl_hide_column_names": [[27, "polars-config-set-tbl-hide-column-names"]], "polars.Config.set_streaming_chunk_size": [[19, "polars-config-set-streaming-chunk-size"]], "polars.Config.load": [[7, "polars-config-load"]], "polars.Config.set_trim_decimal_zeros": [[33, "polars-config-set-trim-decimal-zeros"]], "polars.DataFrame.write_excel": [[40, "polars-dataframe-write-excel"]], "polars.Config.set_tbl_hide_column_data_types": [[26, "polars-config-set-tbl-hide-column-data-types"]], "polars.Config.save": [[10, "polars-config-save"]], "polars.Series.rle": [[1126, "polars-series-rle"]], "polars.Series.rolling_skew": [[1135, "polars-series-rolling-skew"]], "polars.Series.shrink_to_fit": [[1152, "polars-series-shrink-to-fit"]], "polars.Series.std": [[1161, "polars-series-std"]], "polars.Series.str.contains_any": [[1164, "polars-series-str-contains-any"]], "polars.Series.rolling_apply": [[1128, "polars-series-rolling-apply"]], "polars.Series.rolling_min": [[1133, "polars-series-rolling-min"]], "polars.Series.search_sorted": [[1143, "polars-series-search-sorted"]], "polars.Series.str.concat": [[1162, "polars-series-str-concat"]], "polars.Series.str.extract": [[1171, "polars-series-str-extract"]], "polars.Series.rolling_max": [[1130, "polars-series-rolling-max"]], "polars.Series.str.encode": [[1168, "polars-series-str-encode"]], "polars.Series.str.json_decode": [[1175, "polars-series-str-json-decode"]], "polars.Series.round_sig_figs": [[1140, "polars-series-round-sig-figs"]], "polars.Series.replace": [[1123, "polars-series-replace"]], "polars.Series.slice": [[1158, "polars-series-slice"]], "polars.Series.rechunk": [[1120, "polars-series-rechunk"]], "polars.Series.round": [[1139, "polars-series-round"]], "polars.Series.series_equal": [[1144, "polars-series-series-equal"]], "polars.Series.shrink_dtype": [[1151, "polars-series-shrink-dtype"]], "polars.Series.skew": [[1157, "polars-series-skew"]], "polars.Series.str.count_match": [[1165, "polars-series-str-count-match"]], "polars.Series.rolling_var": [[1138, "polars-series-rolling-var"]], "polars.Series.rolling_quantile": [[1134, "polars-series-rolling-quantile"]], "polars.Series.sin": [[1155, "polars-series-sin"]], "polars.Series.str.decode": [[1167, "polars-series-str-decode"]], "polars.Series.sinh": [[1156, "polars-series-sinh"]], "polars.Series.str.contains": [[1163, "polars-series-str-contains"]], "polars.Series.rolling_median": [[1132, "polars-series-rolling-median"]], "polars.Series.shape": [[1148, "polars-series-shape"]], "polars.Series.sort": [[1159, "polars-series-sort"]], "polars.Series.rle_id": [[1127, "polars-series-rle-id"]], "polars.Series.set_sorted": [[1147, "polars-series-set-sorted"]], "polars.Series.reverse": [[1125, "polars-series-reverse"]], "polars.Series.rolling_std": [[1136, "polars-series-rolling-std"]], "polars.Series.shift": [[1149, "polars-series-shift"]], "polars.Series.sample": [[1141, "polars-series-sample"]], "polars.Series.set": [[1145, "polars-series-set"]], "polars.Series.shuffle": [[1153, "polars-series-shuffle"]], "polars.Series.set_at_idx": [[1146, "polars-series-set-at-idx"]], "polars.Series.rolling_map": [[1129, "polars-series-rolling-map"]], "polars.Series.rolling_sum": [[1137, "polars-series-rolling-sum"]], "polars.Series.str.ends_with": [[1169, "polars-series-str-ends-with"]], "polars.Series.str.extract_groups": [[1173, "polars-series-str-extract-groups"]], "polars.Series.sqrt": [[1160, "polars-series-sqrt"]], "polars.Series.sign": [[1154, "polars-series-sign"]], "polars.Series.shift_and_fill": [[1150, "polars-series-shift-and-fill"]], "polars.Series.rename": [[1122, "polars-series-rename"]], "polars.Series.str.find": [[1174, "polars-series-str-find"]], "polars.Series.rolling_mean": [[1131, "polars-series-rolling-mean"]], "polars.Series.str.extract_all": [[1172, "polars-series-str-extract-all"]], "polars.Series.reinterpret": [[1121, "polars-series-reinterpret"]], "polars.Series.scatter": [[1142, "polars-series-scatter"]], "polars.Series.str.count_matches": [[1166, "polars-series-str-count-matches"]], "polars.Series.str.explode": [[1170, "polars-series-str-explode"]], "polars.Series.reshape": [[1124, "polars-series-reshape"]], "polars.Series.product": [[1116, "polars-series-product"]], "polars.Series.list.eval": [[1066, "polars-series-list-eval"]], "polars.Series.list.max": [[1076, "polars-series-list-max"]], "polars.Series.lower_bound": [[1097, "polars-series-lower-bound"]], "polars.Series.peak_min": [[1115, "polars-series-peak-min"]], "polars.Series.name": [[1107, "polars-series-name"]], "polars.Series.list.tail": [[1089, "polars-series-list-tail"]], "polars.Series.list.set_union": [[1084, "polars-series-list-set-union"]], "polars.Series.log1p": [[1096, "polars-series-log1p"]], "polars.Series.list.to_array": [[1091, "polars-series-list-to-array"]], "polars.Series.list.to_struct": [[1092, "polars-series-list-to-struct"]], "polars.Series.new_from_index": [[1110, "polars-series-new-from-index"]], "polars.Series.list.set_intersection": [[1082, "polars-series-list-set-intersection"]], "polars.Series.list.min": [[1078, "polars-series-list-min"]], "polars.Series.list.sum": [[1088, "polars-series-list-sum"]], "polars.Series.list.gather": [[1069, "polars-series-list-gather"]], "polars.Series.list.head": [[1071, "polars-series-list-head"]], "polars.Series.list.reverse": [[1079, "polars-series-list-reverse"]], "polars.Series.list.drop_nulls": [[1065, "polars-series-list-drop-nulls"]], "polars.Series.list.lengths": [[1075, "polars-series-list-lengths"]], "polars.Series.list.get": [[1070, "polars-series-list-get"]], "polars.Series.rank": [[1119, "polars-series-rank"]], "polars.Series.list.join": [[1072, "polars-series-list-join"]], "polars.Series.list.last": [[1073, "polars-series-list-last"]], "polars.Series.n_chunks": [[1105, "polars-series-n-chunks"]], "polars.Series.null_count": [[1112, "polars-series-null-count"]], "polars.Series.list.len": [[1074, "polars-series-list-len"]], "polars.Series.nan_min": [[1109, "polars-series-nan-min"]], "polars.Series.list.first": [[1068, "polars-series-list-first"]], "polars.Series.log10": [[1095, "polars-series-log10"]], "polars.Series.list.diff": [[1064, "polars-series-list-diff"]], "polars.Series.max": [[1100, "polars-series-max"]], "polars.Series.list.set_symmetric_difference": [[1083, "polars-series-list-set-symmetric-difference"]], "polars.Series.peak_max": [[1114, "polars-series-peak-max"]], "polars.Series.nan_max": [[1108, "polars-series-nan-max"]], "polars.Series.list.explode": [[1067, "polars-series-list-explode"]], "polars.Series.quantile": [[1118, "polars-series-quantile"]], "polars.Series.list.take": [[1090, "polars-series-list-take"]], "polars.Series.qcut": [[1117, "polars-series-qcut"]], "polars.Series.map_elements": [[1099, "polars-series-map-elements"]], "polars.Series.list.mean": [[1077, "polars-series-list-mean"]], "polars.Series.list.shift": [[1085, "polars-series-list-shift"]], "polars.Series.list.unique": [[1093, "polars-series-list-unique"]], "polars.Series.list.sample": [[1080, "polars-series-list-sample"]], "polars.Series.log": [[1094, "polars-series-log"]], "polars.Series.mode": [[1104, "polars-series-mode"]], "polars.Series.list.sort": [[1087, "polars-series-list-sort"]], "polars.Series.list.set_difference": [[1081, "polars-series-list-set-difference"]], "polars.Series.min": [[1103, "polars-series-min"]], "polars.Series.mean": [[1101, "polars-series-mean"]], "polars.Series.pct_change": [[1113, "polars-series-pct-change"]], "polars.Series.n_unique": [[1106, "polars-series-n-unique"]], "polars.Series.not_": [[1111, "polars-series-not"]], "polars.Series.map_dict": [[1098, "polars-series-map-dict"]], "polars.Series.median": [[1102, "polars-series-median"]], "polars.Series.list.slice": [[1086, "polars-series-list-slice"]], "polars.Series.gather": [[1020, "polars-series-gather"]], "polars.Series.len": [[1054, "polars-series-len"]], "polars.Series.flags": [[1018, "polars-series-flags"]], "polars.Series.floor": [[1019, "polars-series-floor"]], "polars.Series.gather_every": [[1021, "polars-series-gather-every"]], "polars.Series.hist": [[1026, "polars-series-hist"]], "polars.Series.implode": [[1027, "polars-series-implode"]], "polars.Series.item": [[1052, "polars-series-item"]], "polars.Series.is_numeric": [[1047, "polars-series-is-numeric"]], "polars.Series.is_between": [[1030, "polars-series-is-between"]], "polars.Series.is_finite": [[1034, "polars-series-is-finite"]], "polars.Series.is_integer": [[1040, "polars-series-is-integer"]], "polars.Series.fill_null": [[1016, "polars-series-fill-null"]], "polars.Series.is_empty": [[1033, "polars-series-is-empty"]], "polars.Series.has_validity": [[1023, "polars-series-has-validity"]], "polars.Series.is_unique": [[1050, "polars-series-is-unique"]], "polars.Series.head": [[1025, "polars-series-head"]], "polars.Series.is_infinite": [[1039, "polars-series-is-infinite"]], "polars.Series.is_sorted": [[1048, "polars-series-is-sorted"]], "polars.Series.is_not_null": [[1045, "polars-series-is-not-null"]], "polars.Series.ewm_mean": [[1008, "polars-series-ewm-mean"]], "polars.Series.ewm_var": [[1010, "polars-series-ewm-var"]], "polars.Series.fill_nan": [[1015, "polars-series-fill-nan"]], "polars.Series.list.arg_min": [[1059, "polars-series-list-arg-min"]], "polars.Series.extend_constant": [[1014, "polars-series-extend-constant"]], "polars.Series.hash": [[1024, "polars-series-hash"]], "polars.Series.list.any": [[1057, "polars-series-list-any"]], "polars.Series.is_temporal": [[1049, "polars-series-is-temporal"]], "polars.Series.is_boolean": [[1031, "polars-series-is-boolean"]], "polars.Series.is_float": [[1037, "polars-series-is-float"]], "polars.Series.get_chunks": [[1022, "polars-series-get-chunks"]], "polars.Series.extend": [[1013, "polars-series-extend"]], "polars.Series.ewm_std": [[1009, "polars-series-ewm-std"]], "polars.Series.list.concat": [[1060, "polars-series-list-concat"]], "polars.Series.is_first": [[1035, "polars-series-is-first"]], "polars.Series.exp": [[1011, "polars-series-exp"]], "polars.Series.is_null": [[1046, "polars-series-is-null"]], "polars.Series.list.contains": [[1061, "polars-series-list-contains"]], "polars.Series.is_not_nan": [[1044, "polars-series-is-not-nan"]], "polars.Series.is_utf8": [[1051, "polars-series-is-utf8"]], "polars.Series.list.count_match": [[1062, "polars-series-list-count-match"]], "polars.Series.explode": [[1012, "polars-series-explode"]], "polars.Series.inner_dtype": [[1028, "polars-series-inner-dtype"]], "polars.Series.is_last_distinct": [[1042, "polars-series-is-last-distinct"]], "polars.Series.list.count_matches": [[1063, "polars-series-list-count-matches"]], "polars.Series.list.all": [[1056, "polars-series-list-all"]], "polars.Series.interpolate": [[1029, "polars-series-interpolate"]], "polars.Series.list.arg_max": [[1058, "polars-series-list-arg-max"]], "polars.Series.kurtosis": [[1053, "polars-series-kurtosis"]], "polars.Series.is_in": [[1038, "polars-series-is-in"]], "polars.Series.limit": [[1055, "polars-series-limit"]], "polars.Series.filter": [[1017, "polars-series-filter"]], "polars.Series.is_first_distinct": [[1036, "polars-series-is-first-distinct"]], "polars.Series.is_nan": [[1043, "polars-series-is-nan"]], "polars.Series.is_duplicated": [[1032, "polars-series-is-duplicated"]], "polars.Series.is_last": [[1041, "polars-series-is-last"]], "polars.Series.dt.with_time_unit": [[1002, "polars-series-dt-with-time-unit"]], "polars.Series.dt.min": [[973, "polars-series-dt-min"]], "polars.Series.dt.convert_time_zone": [[955, "polars-series-dt-convert-time-zone"]], "polars.Series.dt.is_leap_year": [[964, "polars-series-dt-is-leap-year"]], "polars.Series.dt.hour": [[962, "polars-series-dt-hour"]], "polars.Series.dt.second": [[986, "polars-series-dt-second"]], "polars.Series.dt.max": [[966, "polars-series-dt-max"]], "polars.Series.dt.month": [[976, "polars-series-dt-month"]], "polars.Series.dt.offset_by": [[981, "polars-series-dt-offset-by"]], "polars.Series.dt.nanosecond": [[979, "polars-series-dt-nanosecond"]], "polars.Series.dt.to_string": [[991, "polars-series-dt-to-string"]], "polars.Series.dt.epoch": [[961, "polars-series-dt-epoch"]], "polars.Series.dt.hours": [[963, "polars-series-dt-hours"]], "polars.Series.dt.date": [[956, "polars-series-dt-date"]], "polars.Series.dt.ordinal_day": [[982, "polars-series-dt-ordinal-day"]], "polars.Series.dt.year": [[1003, "polars-series-dt-year"]], "polars.Series.dt.month_start": [[978, "polars-series-dt-month-start"]], "polars.Series.dt.seconds": [[987, "polars-series-dt-seconds"]], "polars.Series.dt.week": [[1000, "polars-series-dt-week"]], "polars.Series.dt.microseconds": [[970, "polars-series-dt-microseconds"]], "polars.Series.dt.minute": [[974, "polars-series-dt-minute"]], "polars.Series.dt.days": [[959, "polars-series-dt-days"]], "polars.Series.dt.millisecond": [[971, "polars-series-dt-millisecond"]], "polars.Series.dt.weekday": [[1001, "polars-series-dt-weekday"]], "polars.Series.dt.microsecond": [[969, "polars-series-dt-microsecond"]], "polars.Series.dt.total_microseconds": [[994, "polars-series-dt-total-microseconds"]], "polars.Series.dt.time": [[989, "polars-series-dt-time"]], "polars.Series.dt.total_hours": [[993, "polars-series-dt-total-hours"]], "polars.Series.dt.total_nanoseconds": [[997, "polars-series-dt-total-nanoseconds"]], "polars.Series.dt.timestamp": [[990, "polars-series-dt-timestamp"]], "polars.Series.dt.total_days": [[992, "polars-series-dt-total-days"]], "polars.Series.dt.mean": [[967, "polars-series-dt-mean"]], "polars.Series.dtype": [[1004, "polars-series-dtype"]], "polars.Series.equals": [[1006, "polars-series-equals"]], "polars.Series.dt.day": [[958, "polars-series-dt-day"]], "polars.Series.dt.strftime": [[988, "polars-series-dt-strftime"]], "polars.Series.dt.total_milliseconds": [[995, "polars-series-dt-total-milliseconds"]], "polars.Series.estimated_size": [[1007, "polars-series-estimated-size"]], "polars.Series.dt.median": [[968, "polars-series-dt-median"]], "polars.Series.dt.quarter": [[983, "polars-series-dt-quarter"]], "polars.Series.dt.round": [[985, "polars-series-dt-round"]], "polars.Series.dt.base_utc_offset": [[952, "polars-series-dt-base-utc-offset"]], "polars.Series.dt.month_end": [[977, "polars-series-dt-month-end"]], "polars.Series.dt.nanoseconds": [[980, "polars-series-dt-nanoseconds"]], "polars.Series.dt.combine": [[954, "polars-series-dt-combine"]], "polars.Series.dt.minutes": [[975, "polars-series-dt-minutes"]], "polars.Series.dt.milliseconds": [[972, "polars-series-dt-milliseconds"]], "polars.Series.dt.total_seconds": [[998, "polars-series-dt-total-seconds"]], "polars.Series.dt.truncate": [[999, "polars-series-dt-truncate"]], "polars.Series.dt.total_minutes": [[996, "polars-series-dt-total-minutes"]], "polars.Series.dt.cast_time_unit": [[953, "polars-series-dt-cast-time-unit"]], "polars.Series.dt.dst_offset": [[960, "polars-series-dt-dst-offset"]], "polars.Series.entropy": [[1005, "polars-series-entropy"]], "polars.Series.dt.replace_time_zone": [[984, "polars-series-dt-replace-time-zone"]], "polars.Series.dt.iso_year": [[965, "polars-series-dt-iso-year"]], "polars.Series.dt.datetime": [[957, "polars-series-dt-datetime"]], "polars.Series.cummin": [[942, "polars-series-cummin"]], "polars.Series.cumprod": [[943, "polars-series-cumprod"]], "polars.Series.arr.any": [[898, "polars-series-arr-any"]], "polars.Series.arr.contains": [[901, "polars-series-arr-contains"]], "polars.Series.cum_min": [[938, "polars-series-cum-min"]], "polars.Series.arg_unique": [[896, "polars-series-arg-unique"]], "polars.Series.cut": [[946, "polars-series-cut"]], "polars.Series.clone": [[933, "polars-series-clone"]], "polars.Series.diff": [[948, "polars-series-diff"]], "polars.Series.ceil": [[927, "polars-series-ceil"]], "polars.Series.cosh": [[935, "polars-series-cosh"]], "polars.Series.cbrt": [[926, "polars-series-cbrt"]], "polars.Series.cat.to_local": [[924, "polars-series-cat-to-local"]], "polars.Series.arr.max": [[907, "polars-series-arr-max"]], "polars.Series.cast": [[920, "polars-series-cast"]], "polars.Series.drop_nans": [[950, "polars-series-drop-nans"]], "polars.Series.cumulative_eval": [[945, "polars-series-cumulative-eval"]], "polars.Series.arr.count_matches": [[902, "polars-series-arr-count-matches"]], "polars.Series.describe": [[947, "polars-series-describe"]], "polars.Series.cat.get_categories": [[921, "polars-series-cat-get-categories"]], "polars.Series.clip_max": [[931, "polars-series-clip-max"]], "polars.Series.arr.to_list": [[912, "polars-series-arr-to-list"]], "polars.Series.cos": [[934, "polars-series-cos"]], "polars.Series.cum_sum": [[940, "polars-series-cum-sum"]], "polars.Series.drop_nulls": [[951, "polars-series-drop-nulls"]], "polars.Series.arr.sort": [[910, "polars-series-arr-sort"]], "polars.Series.arr.arg_min": [[900, "polars-series-arr-arg-min"]], "polars.Series.arr.arg_max": [[899, "polars-series-arr-arg-max"]], "polars.Series.bottom_k": [[919, "polars-series-bottom-k"]], "polars.Series.bin.contains": [[914, "polars-series-bin-contains"]], "polars.Series.arr.get": [[904, "polars-series-arr-get"]], "polars.Series.arr.all": [[897, "polars-series-arr-all"]], "polars.Series.arr.join": [[905, "polars-series-arr-join"]], "polars.Series.bin.starts_with": [[918, "polars-series-bin-starts-with"]], "polars.Series.cum_prod": [[939, "polars-series-cum-prod"]], "polars.Series.cumsum": [[944, "polars-series-cumsum"]], "polars.Series.bin.ends_with": [[917, "polars-series-bin-ends-with"]], "polars.Series.arr.sum": [[911, "polars-series-arr-sum"]], "polars.Series.arr.unique": [[913, "polars-series-arr-unique"]], "polars.Series.clip_min": [[932, "polars-series-clip-min"]], "polars.Series.cum_max": [[937, "polars-series-cum-max"]], "polars.Series.bin.decode": [[915, "polars-series-bin-decode"]], "polars.Series.arr.reverse": [[909, "polars-series-arr-reverse"]], "polars.Series.arr.min": [[908, "polars-series-arr-min"]], "polars.Series.cat.set_ordering": [[923, "polars-series-cat-set-ordering"]], "polars.Series.cot": [[936, "polars-series-cot"]], "polars.Series.arr.first": [[903, "polars-series-arr-first"]], "polars.Series.bin.encode": [[916, "polars-series-bin-encode"]], "polars.Series.cat.is_local": [[922, "polars-series-cat-is-local"]], "polars.Series.chunk_lengths": [[928, "polars-series-chunk-lengths"]], "polars.Series.clear": [[929, "polars-series-clear"]], "polars.Series.cummax": [[941, "polars-series-cummax"]], "polars.Series.clip": [[930, "polars-series-clip"]], "polars.Series.cat.uses_lexical_ordering": [[925, "polars-series-cat-uses-lexical-ordering"]], "polars.Series.dot": [[949, "polars-series-dot"]], "polars.Series.arr.last": [[906, "polars-series-arr-last"]], "polars.LazyFrame.melt": [[821, "polars-lazyframe-melt"]], "polars.LazyFrame.limit": [[815, "polars-lazyframe-limit"]], "polars.LazyFrame.groupby_dynamic": [[806, "polars-lazyframe-groupby-dynamic"]], "polars.LazyFrame.shift": [[836, "polars-lazyframe-shift"]], "polars.LazyFrame.last": [[813, "polars-lazyframe-last"]], "polars.LazyFrame.show_graph": [[838, "polars-lazyframe-show-graph"]], "polars.LazyFrame.group_by_rolling": [[804, "polars-lazyframe-group-by-rolling"]], "polars.LazyFrame.select": [[832, "polars-lazyframe-select"]], "polars.LazyFrame.map_batches": [[817, "polars-lazyframe-map-batches"]], "polars.LazyFrame.groupby_rolling": [[807, "polars-lazyframe-groupby-rolling"]], "polars.LazyFrame.explode": [[795, "polars-lazyframe-explode"]], "polars.LazyFrame.map": [[816, "polars-lazyframe-map"]], "polars.LazyFrame.slice": [[839, "polars-lazyframe-slice"]], "polars.LazyFrame.first": [[800, "polars-lazyframe-first"]], "polars.LazyFrame.groupby": [[805, "polars-lazyframe-groupby"]], "polars.LazyFrame.inspect": [[809, "polars-lazyframe-inspect"]], "polars.LazyFrame.collect_async": [[787, "polars-lazyframe-collect-async"]], "polars.LazyFrame.reverse": [[829, "polars-lazyframe-reverse"]], "polars.LazyFrame.max": [[818, "polars-lazyframe-max"]], "polars.LazyFrame.interpolate": [[810, "polars-lazyframe-interpolate"]], "polars.LazyFrame.merge_sorted": [[822, "polars-lazyframe-merge-sorted"]], "polars.LazyFrame.filter": [[799, "polars-lazyframe-filter"]], "polars.LazyFrame.clone": [[785, "polars-lazyframe-clone"]], "polars.LazyFrame.fill_null": [[798, "polars-lazyframe-fill-null"]], "polars.LazyFrame.head": [[808, "polars-lazyframe-head"]], "polars.LazyFrame.quantile": [[827, "polars-lazyframe-quantile"]], "polars.LazyFrame.collect": [[786, "polars-lazyframe-collect"]], "polars.LazyFrame.pipe": [[825, "polars-lazyframe-pipe"]], "polars.LazyFrame.mean": [[819, "polars-lazyframe-mean"]], "polars.LazyFrame.min": [[823, "polars-lazyframe-min"]], "polars.LazyFrame.schema": [[831, "polars-lazyframe-schema"]], "polars.LazyFrame.select_seq": [[833, "polars-lazyframe-select-seq"]], "polars.LazyFrame.dtypes": [[793, "polars-lazyframe-dtypes"]], "polars.LazyFrame.gather_every": [[801, "polars-lazyframe-gather-every"]], "polars.LazyFrame.fetch": [[796, "polars-lazyframe-fetch"]], "polars.LazyFrame.set_sorted": [[835, "polars-lazyframe-set-sorted"]], "polars.LazyFrame.join_asof": [[812, "polars-lazyframe-join-asof"]], "polars.LazyFrame.group_by_dynamic": [[803, "polars-lazyframe-group-by-dynamic"]], "polars.LazyFrame.profile": [[826, "polars-lazyframe-profile"]], "polars.LazyFrame.shift_and_fill": [[837, "polars-lazyframe-shift-and-fill"]], "polars.LazyFrame.explain": [[794, "polars-lazyframe-explain"]], "polars.LazyFrame.null_count": [[824, "polars-lazyframe-null-count"]], "polars.LazyFrame.clear": [[784, "polars-lazyframe-clear"]], "polars.LazyFrame.deserialize": [[790, "polars-lazyframe-deserialize"]], "polars.LazyFrame.join": [[811, "polars-lazyframe-join"]], "polars.LazyFrame.group_by": [[802, "polars-lazyframe-group-by"]], "polars.LazyFrame.rename": [[828, "polars-lazyframe-rename"]], "polars.LazyFrame.rolling": [[830, "polars-lazyframe-rolling"]], "polars.LazyFrame.serialize": [[834, "polars-lazyframe-serialize"]], "polars.LazyFrame.lazy": [[814, "polars-lazyframe-lazy"]], "polars.LazyFrame.drop_nulls": [[792, "polars-lazyframe-drop-nulls"]], "polars.LazyFrame.fill_nan": [[797, "polars-lazyframe-fill-nan"]], "polars.LazyFrame.median": [[820, "polars-lazyframe-median"]], "polars.LazyFrame.columns": [[788, "polars-lazyframe-columns"]], "polars.LazyFrame.drop": [[791, "polars-lazyframe-drop"]], "polars.LazyFrame.count": [[789, "polars-lazyframe-count"]], "SQL": [[1258, "sql"]], "Methods": [[1258, "methods"]], "Series": [[1250, "series"]], "Testing": [[1259, "testing"]], "Asserts": [[1259, "asserts"]], "Parametric testing": [[1259, "parametric-testing"]], "Polars primitives": [[1259, "polars-primitives"]], "Strategy helpers": [[1259, "strategy-helpers"]], "Profiles": [[1259, "profiles"]], "Miscellaneous": [[1252, "miscellaneous"], [876, "miscellaneous"], [776, "miscellaneous"], [768, "miscellaneous"], [301, "miscellaneous"]], "polars.Series.value_counts": [[1238, "polars-series-value-counts"]], "Descriptive": [[1248, "descriptive"], [873, "descriptive"], [297, "descriptive"]], "Categories": [[1246, "categories"], [760, "categories"]], "Binary": [[1244, "binary"], [771, "binary"], [758, "binary"]], "Attributes": [[1243, "attributes"], [872, "attributes"], [295, "attributes"]], "polars.Series.upper_bound": [[1237, "polars-series-upper-bound"]], "polars.Series.to_physical": [[1233, "polars-series-to-physical"]], "List": [[1251, "list"], [766, "list"]], "Temporal": [[1257, "temporal"], [774, "temporal"], [304, "temporal"]], "Struct": [[1256, "struct"], [773, "struct"]], "String": [[1255, "string"], [772, "string"]], "polars.Series.unique_counts": [[1236, "polars-series-unique-counts"]], "polars.Series.unique": [[1235, "polars-series-unique"]], "polars.Series.view": [[1240, "polars-series-view"]], "Computation": [[1247, "computation"], [763, "computation"], [296, "computation"]], "Manipulation/selection": [[1253, "manipulation-selection"], [877, "manipulation-selection"], [769, "manipulation-selection"], [302, "manipulation-selection"]], "Boolean": [[1245, "boolean"], [759, "boolean"]], "Utils": [[1260, "utils"]], "polars.Series.top_k": [[1234, "polars-series-top-k"]], "polars.Series.zip_with": [[1241, "polars-series-zip-with"]], "polars.Series.to_pandas": [[1232, "polars-series-to-pandas"]], "Export": [[1249, "export"], [298, "export"]], "polars.Series.var": [[1239, "polars-series-var"]], "Plot": [[1254, "plot"], [303, "plot"]], "Array": [[1242, "array"], [757, "array"]], "polars.int_range": [[724, "polars-int-range"]], "polars.Expr.to_physical": [[672, "polars-expr-to-physical"]], "polars.all_horizontal": [[683, "polars-all-horizontal"]], "polars.cov": [[698, "polars-cov"]], "polars.duration": [[714, "polars-duration"]], "polars.exclude": [[716, "polars-exclude"]], "polars.fold": [[718, "polars-fold"]], "polars.cumsum": [[706, "polars-cumsum"]], "polars.cum_count": [[699, "polars-cum-count"]], "polars.cum_fold": [[700, "polars-cum-fold"]], "polars.all": [[682, "polars-all"]], "polars.element": [[715, "polars-element"]], "polars.arange": [[688, "polars-arange"]], "polars.any_horizontal": [[685, "polars-any-horizontal"]], "polars.arg_sort_by": [[691, "polars-arg-sort-by"]], "polars.date": [[708, "polars-date"]], "polars.any": [[684, "polars-any"]], "polars.Expr.where": [[680, "polars-expr-where"]], "polars.arctan2d": [[690, "polars-arctan2d"]], "polars.date_range": [[709, "polars-date-range"]], "polars.lit": [[727, "polars-lit"]], "polars.cum_sum": [[702, "polars-cum-sum"]], "polars.cumsum_horizontal": [[707, "polars-cumsum-horizontal"]], "polars.Expr.xor": [[681, "polars-expr-xor"]], "polars.format": [[719, "polars-format"]], "polars.count": [[697, "polars-count"]], "polars.date_ranges": [[710, "polars-date-ranges"]], "polars.Expr.unique_counts": [[676, "polars-expr-unique-counts"]], "polars.Expr.unique": [[675, "polars-expr-unique"]], "polars.datetime": [[711, "polars-datetime"]], "polars.Expr.value_counts": [[678, "polars-expr-value-counts"]], "polars.corr": [[696, "polars-corr"]], "polars.cum_sum_horizontal": [[703, "polars-cum-sum-horizontal"]], "polars.datetime_range": [[712, "polars-datetime-range"]], "polars.head": [[722, "polars-head"]], "polars.groups": [[721, "polars-groups"]], "polars.arg_where": [[692, "polars-arg-where"]], "polars.from_epoch": [[720, "polars-from-epoch"]], "polars.Expr.var": [[679, "polars-expr-var"]], "polars.concat_list": [[694, "polars-concat-list"]], "polars.Expr.truediv": [[674, "polars-expr-truediv"]], "polars.Expr.top_k": [[673, "polars-expr-top-k"]], "polars.concat_str": [[695, "polars-concat-str"]], "polars.last": [[726, "polars-last"]], "polars.cumfold": [[704, "polars-cumfold"]], "polars.int_ranges": [[725, "polars-int-ranges"]], "polars.apply": [[686, "polars-apply"]], "polars.coalesce": [[693, "polars-coalesce"]], "polars.datetime_ranges": [[713, "polars-datetime-ranges"]], "polars.cum_reduce": [[701, "polars-cum-reduce"]], "polars.first": [[717, "polars-first"]], "polars.implode": [[723, "polars-implode"]], "polars.Expr.upper_bound": [[677, "polars-expr-upper-bound"]], "polars.cumreduce": [[705, "polars-cumreduce"]], "polars.arctan2": [[689, "polars-arctan2"]], "polars.approx_n_unique": [[687, "polars-approx-n-unique"]], "polars.Series.alias": [[881, "polars-series-alias"]], "polars.LazyFrame.unique": [[846, "polars-lazyframe-unique"]], "polars.lazyframe.group_by.LazyGroupBy.max": [[864, "polars-lazyframe-group-by-lazygroupby-max"]], "polars.Series.arg_true": [[895, "polars-series-arg-true"]], "polars.LazyFrame.update": [[848, "polars-lazyframe-update"]], "polars.Series.append": [[884, "polars-series-append"]], "polars.lazyframe.group_by.LazyGroupBy.all": [[857, "polars-lazyframe-group-by-lazygroupby-all"]], "polars.LazyFrame.with_row_count": [[854, "polars-lazyframe-with-row-count"]], "polars.Series.any": [[883, "polars-series-any"]], "polars.Series.arccosh": [[887, "polars-series-arccosh"]], "polars.Series.arcsin": [[888, "polars-series-arcsin"]], "polars.LazyFrame.top_k": [[845, "polars-lazyframe-top-k"]], "polars.LazyFrame.std": [[841, "polars-lazyframe-std"]], "polars.Series.arctan": [[890, "polars-series-arctan"]], "GroupBy": [[874, "groupby"], [299, "groupby"]], "polars.LazyFrame.with_columns_seq": [[852, "polars-lazyframe-with-columns-seq"]], "polars.Series.abs": [[880, "polars-series-abs"]], "polars.lazyframe.group_by.LazyGroupBy.median": [[866, "polars-lazyframe-group-by-lazygroupby-median"]], "polars.lazyframe.group_by.LazyGroupBy.n_unique": [[868, "polars-lazyframe-group-by-lazygroupby-n-unique"]], "polars.Series.arcsinh": [[889, "polars-series-arcsinh"]], "polars.Series.arctanh": [[891, "polars-series-arctanh"]], "polars.LazyFrame.with_columns": [[851, "polars-lazyframe-with-columns"]], "Read/write logical plan": [[876, "read-write-logical-plan"]], "polars.Series.arg_min": [[893, "polars-series-arg-min"]], "polars.lazyframe.group_by.LazyGroupBy.head": [[861, "polars-lazyframe-group-by-lazygroupby-head"]], "polars.lazyframe.group_by.LazyGroupBy.min": [[867, "polars-lazyframe-group-by-lazygroupby-min"]], "polars.LazyFrame.sum": [[842, "polars-lazyframe-sum"]], "polars.lazyframe.group_by.LazyGroupBy.first": [[860, "polars-lazyframe-group-by-lazygroupby-first"]], "polars.lazyframe.group_by.LazyGroupBy.tail": [[871, "polars-lazyframe-group-by-lazygroupby-tail"]], "polars.Series.apply": [[885, "polars-series-apply"]], "polars.lazyframe.group_by.LazyGroupBy.sum": [[870, "polars-lazyframe-group-by-lazygroupby-sum"]], "polars.LazyFrame.tail": [[843, "polars-lazyframe-tail"]], "LazyFrame": [[875, "lazyframe"]], "polars.lazyframe.group_by.LazyGroupBy.agg": [[856, "polars-lazyframe-group-by-lazygroupby-agg"]], "polars.lazyframe.group_by.LazyGroupBy.apply": [[858, "polars-lazyframe-group-by-lazygroupby-apply"]], "polars.lazyframe.group_by.LazyGroupBy.quantile": [[869, "polars-lazyframe-group-by-lazygroupby-quantile"]], "Selectors": [[878, "selectors"]], "Importing": [[878, "importing"]], "Set operations": [[878, "set-operations"]], "Functions": [[878, "functions"], [776, "functions"], [764, "functions"]], "polars.lazyframe.group_by.LazyGroupBy.mean": [[865, "polars-lazyframe-group-by-lazygroupby-mean"]], "polars.Series.arccos": [[886, "polars-series-arccos"]], "polars.Series.all": [[882, "polars-series-all"]], "polars.LazyFrame.with_context": [[853, "polars-lazyframe-with-context"]], "polars.LazyFrame.unnest": [[847, "polars-lazyframe-unnest"]], "polars.LazyFrame.width": [[850, "polars-lazyframe-width"]], "polars.LazyFrame.sort": [[840, "polars-lazyframe-sort"]], "polars.LazyFrame.take_every": [[844, "polars-lazyframe-take-every"]], "polars.LazyFrame.with_row_index": [[855, "polars-lazyframe-with-row-index"]], "polars.Series.arg_sort": [[894, "polars-series-arg-sort"]], "polars.LazyFrame.var": [[849, "polars-lazyframe-var"]], "polars.lazyframe.group_by.LazyGroupBy.map_groups": [[863, "polars-lazyframe-group-by-lazygroupby-map-groups"]], "polars.lazyframe.group_by.LazyGroupBy.last": [[862, "polars-lazyframe-group-by-lazygroupby-last"]], "polars.Series.arg_max": [[892, "polars-series-arg-max"]], "polars.lazyframe.group_by.LazyGroupBy.count": [[859, "polars-lazyframe-group-by-lazygroupby-count"]], "polars.Expr.str.len_chars": [[626, "polars-expr-str-len-chars"]], "polars.Expr.str.strip_suffix": [[650, "polars-expr-str-strip-suffix"]], "polars.Expr.str.to_integer": [[655, "polars-expr-str-to-integer"]], "polars.Expr.str.reverse": [[637, "polars-expr-str-reverse"]], "polars.Expr.str.to_decimal": [[654, "polars-expr-str-to-decimal"]], "polars.Expr.str.to_time": [[657, "polars-expr-str-to-time"]], "polars.Expr.str.strip_chars": [[646, "polars-expr-str-strip-chars"]], "polars.Expr.str.strptime": [[651, "polars-expr-str-strptime"]], "polars.Expr.str.len_bytes": [[625, "polars-expr-str-len-bytes"]], "polars.Expr.str.rjust": [[638, "polars-expr-str-rjust"]], "polars.Expr.str.split_exact": [[642, "polars-expr-str-split-exact"]], "polars.Expr.str.explode": [[617, "polars-expr-str-explode"]], "polars.Expr.str.zfill": [[660, "polars-expr-str-zfill"]], "polars.Expr.str.n_chars": [[630, "polars-expr-str-n-chars"]], "polars.Expr.str.strip_chars_start": [[648, "polars-expr-str-strip-chars-start"]], "polars.Expr.str.to_lowercase": [[656, "polars-expr-str-to-lowercase"]], "polars.Expr.str.extract_all": [[619, "polars-expr-str-extract-all"]], "polars.Expr.take": [[668, "polars-expr-take"]], "polars.Expr.str.strip_prefix": [[649, "polars-expr-str-strip-prefix"]], "polars.Expr.str.to_datetime": [[653, "polars-expr-str-to-datetime"]], "polars.Expr.str.slice": [[640, "polars-expr-str-slice"]], "polars.Expr.str.to_titlecase": [[658, "polars-expr-str-to-titlecase"]], "polars.Expr.tan": [[670, "polars-expr-tan"]], "polars.Expr.str.find": [[621, "polars-expr-str-find"]], "polars.Expr.sum": [[666, "polars-expr-sum"]], "polars.Expr.str.json_path_match": [[624, "polars-expr-str-json-path-match"]], "polars.Expr.struct.rename_fields": [[663, "polars-expr-struct-rename-fields"]], "polars.Expr.str.lstrip": [[629, "polars-expr-str-lstrip"]], "polars.Expr.suffix": [[665, "polars-expr-suffix"]], "polars.Expr.str.split": [[641, "polars-expr-str-split"]], "polars.Expr.str.replace": [[634, "polars-expr-str-replace"]], "polars.Expr.str.rstrip": [[639, "polars-expr-str-rstrip"]], "polars.Expr.str.replace_many": [[636, "polars-expr-str-replace-many"]], "polars.Expr.str.extract_groups": [[620, "polars-expr-str-extract-groups"]], "polars.Expr.str.pad_start": [[632, "polars-expr-str-pad-start"]], "polars.Expr.str.to_date": [[652, "polars-expr-str-to-date"]], "polars.Expr.take_every": [[669, "polars-expr-take-every"]], "polars.Expr.struct.field": [[661, "polars-expr-struct-field"]], "polars.Expr.str.json_decode": [[622, "polars-expr-str-json-decode"]], "polars.Expr.str.pad_end": [[631, "polars-expr-str-pad-end"]], "polars.Expr.str.ends_with": [[616, "polars-expr-str-ends-with"]], "polars.Expr.str.to_uppercase": [[659, "polars-expr-str-to-uppercase"]], "polars.Expr.str.json_extract": [[623, "polars-expr-str-json-extract"]], "polars.Expr.str.ljust": [[628, "polars-expr-str-ljust"]], "polars.Expr.sub": [[664, "polars-expr-sub"]], "polars.Expr.str.splitn": [[643, "polars-expr-str-splitn"]], "polars.Expr.str.starts_with": [[644, "polars-expr-str-starts-with"]], "polars.Expr.tail": [[667, "polars-expr-tail"]], "polars.Expr.str.parse_int": [[633, "polars-expr-str-parse-int"]], "polars.Expr.str.extract": [[618, "polars-expr-str-extract"]], "polars.Expr.tanh": [[671, "polars-expr-tanh"]], "polars.Expr.str.lengths": [[627, "polars-expr-str-lengths"]], "polars.Expr.str.strip_chars_end": [[647, "polars-expr-str-strip-chars-end"]], "polars.Expr.str.replace_all": [[635, "polars-expr-str-replace-all"]], "polars.Expr.str.strip": [[645, "polars-expr-str-strip"]], "polars.Expr.struct.json_encode": [[662, "polars-expr-struct-json-encode"]], "polars.Expr.sqrt": [[607, "polars-expr-sqrt"]], "polars.Expr.sin": [[601, "polars-expr-sin"]], "polars.Expr.str.count_matches": [[613, "polars-expr-str-count-matches"]], "polars.Expr.round_sig_figs": [[592, "polars-expr-round-sig-figs"]], "polars.Expr.rolling_apply": [[580, "polars-expr-rolling-apply"]], "polars.Expr.pipe": [[563, "polars-expr-pipe"]], "polars.Expr.rle": [[577, "polars-expr-rle"]], "polars.Expr.set_sorted": [[595, "polars-expr-set-sorted"]], "polars.Expr.quantile": [[568, "polars-expr-quantile"]], "polars.Expr.shrink_dtype": [[598, "polars-expr-shrink-dtype"]], "polars.Expr.reverse": [[576, "polars-expr-reverse"]], "polars.Expr.shift": [[596, "polars-expr-shift"]], "polars.Expr.rechunk": [[571, "polars-expr-rechunk"]], "polars.Expr.sinh": [[602, "polars-expr-sinh"]], "polars.Expr.str.concat": [[609, "polars-expr-str-concat"]], "polars.Expr.rolling_quantile": [[586, "polars-expr-rolling-quantile"]], "polars.Expr.rolling_map": [[581, "polars-expr-rolling-map"]], "polars.Expr.radians": [[569, "polars-expr-radians"]], "polars.Expr.sign": [[600, "polars-expr-sign"]], "polars.Expr.rolling_skew": [[587, "polars-expr-rolling-skew"]], "polars.Expr.str.encode": [[615, "polars-expr-str-encode"]], "polars.Expr.rank": [[570, "polars-expr-rank"]], "polars.Expr.str.contains_any": [[611, "polars-expr-str-contains-any"]], "polars.Expr.reinterpret": [[572, "polars-expr-reinterpret"]], "polars.Expr.rolling_mean": [[583, "polars-expr-rolling-mean"]], "polars.Expr.rolling_sum": [[589, "polars-expr-rolling-sum"]], "polars.Expr.round": [[591, "polars-expr-round"]], "polars.Expr.sample": [[593, "polars-expr-sample"]], "polars.Expr.shift_and_fill": [[597, "polars-expr-shift-and-fill"]], "polars.Expr.peak_min": [[562, "polars-expr-peak-min"]], "polars.Expr.rle_id": [[578, "polars-expr-rle-id"]], "polars.Expr.str.contains": [[610, "polars-expr-str-contains"]], "polars.Expr.slice": [[604, "polars-expr-slice"]], "polars.Expr.product": [[566, "polars-expr-product"]], "polars.Expr.rolling_min": [[585, "polars-expr-rolling-min"]], "polars.Expr.shuffle": [[599, "polars-expr-shuffle"]], "polars.Expr.repeat_by": [[573, "polars-expr-repeat-by"]], "polars.Expr.pct_change": [[560, "polars-expr-pct-change"]], "polars.Expr.prefix": [[565, "polars-expr-prefix"]], "polars.Expr.sort_by": [[606, "polars-expr-sort-by"]], "polars.Expr.rolling_var": [[590, "polars-expr-rolling-var"]], "polars.Expr.rolling_std": [[588, "polars-expr-rolling-std"]], "polars.Expr.search_sorted": [[594, "polars-expr-search-sorted"]], "polars.Expr.str.count_match": [[612, "polars-expr-str-count-match"]], "polars.Expr.sort": [[605, "polars-expr-sort"]], "polars.Expr.rolling": [[579, "polars-expr-rolling"]], "polars.Expr.skew": [[603, "polars-expr-skew"]], "polars.Expr.rolling_median": [[584, "polars-expr-rolling-median"]], "polars.Expr.pow": [[564, "polars-expr-pow"]], "polars.Expr.std": [[608, "polars-expr-std"]], "polars.Expr.reshape": [[575, "polars-expr-reshape"]], "polars.Expr.str.decode": [[614, "polars-expr-str-decode"]], "polars.Expr.rolling_max": [[582, "polars-expr-rolling-max"]], "polars.Expr.replace": [[574, "polars-expr-replace"]], "polars.Expr.peak_max": [[561, "polars-expr-peak-max"]], "polars.Expr.qcut": [[567, "polars-expr-qcut"]], "polars.Expr.median": [[530, "polars-expr-median"]], "polars.Expr.list.set_difference": [[505, "polars-expr-list-set-difference"]], "polars.Expr.meta.output_name": [[535, "polars-expr-meta-output-name"]], "polars.Expr.nan_max": [[552, "polars-expr-nan-max"]], "polars.Expr.meta.is_regex_projection": [[533, "polars-expr-meta-is-regex-projection"]], "polars.Expr.lower_bound": [[521, "polars-expr-lower-bound"]], "polars.Expr.mean": [[529, "polars-expr-mean"]], "polars.Expr.map": [[523, "polars-expr-map"]], "polars.Expr.list.to_struct": [[516, "polars-expr-list-to-struct"]], "polars.Expr.name.prefix": [[548, "polars-expr-name-prefix"]], "polars.Expr.name.suffix": [[549, "polars-expr-name-suffix"]], "polars.Expr.list.set_union": [[508, "polars-expr-list-set-union"]], "polars.Expr.log10": [[519, "polars-expr-log10"]], "polars.Expr.list.sum": [[512, "polars-expr-list-sum"]], "polars.Expr.lt": [[522, "polars-expr-lt"]], "polars.Expr.list.set_symmetric_difference": [[507, "polars-expr-list-set-symmetric-difference"]], "polars.Expr.meta.ne": [[534, "polars-expr-meta-ne"]], "polars.Expr.name.map": [[547, "polars-expr-name-map"]], "polars.Expr.min": [[541, "polars-expr-min"]], "polars.Expr.not_": [[556, "polars-expr-not"]], "polars.Expr.n_unique": [[545, "polars-expr-n-unique"]], "polars.Expr.name.to_lowercase": [[550, "polars-expr-name-to-lowercase"]], "polars.Expr.list.set_intersection": [[506, "polars-expr-list-set-intersection"]], "polars.Expr.meta.write_json": [[540, "polars-expr-meta-write-json"]], "polars.Expr.mode": [[543, "polars-expr-mode"]], "polars.Expr.list.unique": [[517, "polars-expr-list-unique"]], "polars.Expr.over": [[559, "polars-expr-over"]], "polars.Expr.list.tail": [[513, "polars-expr-list-tail"]], "polars.Expr.meta.eq": [[531, "polars-expr-meta-eq"]], "polars.Expr.meta.has_multiple_outputs": [[532, "polars-expr-meta-has-multiple-outputs"]], "polars.Expr.log": [[518, "polars-expr-log"]], "polars.Expr.nan_min": [[553, "polars-expr-nan-min"]], "polars.Expr.list.sort": [[511, "polars-expr-list-sort"]], "polars.Expr.list.sample": [[504, "polars-expr-list-sample"]], "polars.Expr.log1p": [[520, "polars-expr-log1p"]], "polars.Expr.map_dict": [[526, "polars-expr-map-dict"]], "polars.Expr.map_elements": [[527, "polars-expr-map-elements"]], "polars.Expr.meta.tree_format": [[538, "polars-expr-meta-tree-format"]], "polars.Expr.mod": [[542, "polars-expr-mod"]], "polars.Expr.list.shift": [[509, "polars-expr-list-shift"]], "polars.Expr.name.keep": [[546, "polars-expr-name-keep"]], "polars.Expr.max": [[528, "polars-expr-max"]], "polars.Expr.mul": [[544, "polars-expr-mul"]], "polars.Expr.name.to_uppercase": [[551, "polars-expr-name-to-uppercase"]], "polars.Expr.list.take": [[514, "polars-expr-list-take"]], "polars.Expr.list.to_array": [[515, "polars-expr-list-to-array"]], "polars.Expr.ne_missing": [[555, "polars-expr-ne-missing"]], "polars.Expr.map_alias": [[524, "polars-expr-map-alias"]], "polars.Expr.map_batches": [[525, "polars-expr-map-batches"]], "polars.Expr.meta.undo_aliases": [[539, "polars-expr-meta-undo-aliases"]], "polars.Expr.null_count": [[557, "polars-expr-null-count"]], "polars.Expr.meta.root_names": [[537, "polars-expr-meta-root-names"]], "polars.Expr.meta.pop": [[536, "polars-expr-meta-pop"]], "polars.Expr.ne": [[554, "polars-expr-ne"]], "polars.Expr.list.slice": [[510, "polars-expr-list-slice"]], "polars.Expr.or_": [[558, "polars-expr-or"]], "polars.Expr.hist": [[455, "polars-expr-hist"]], "polars.Expr.is_last": [[466, "polars-expr-is-last"]], "polars.Expr.list.diff": [[488, "polars-expr-list-diff"]], "polars.Expr.head": [[454, "polars-expr-head"]], "polars.Expr.inspect": [[457, "polars-expr-inspect"]], "polars.Expr.list.get": [[494, "polars-expr-list-get"]], "polars.Expr.ge": [[450, "polars-expr-ge"]], "polars.Expr.hash": [[453, "polars-expr-hash"]], "polars.Expr.list.lengths": [[499, "polars-expr-list-lengths"]], "polars.Expr.is_unique": [[473, "polars-expr-is-unique"]], "polars.Expr.is_not_null": [[471, "polars-expr-is-not-null"]], "polars.Expr.is_first": [[462, "polars-expr-is-first"]], "polars.Expr.list.all": [[480, "polars-expr-list-all"]], "polars.Expr.kurtosis": [[475, "polars-expr-kurtosis"]], "polars.Expr.list.eval": [[490, "polars-expr-list-eval"]], "polars.Expr.get": [[451, "polars-expr-get"]], "polars.Expr.gather": [[448, "polars-expr-gather"]], "polars.Expr.is_last_distinct": [[467, "polars-expr-is-last-distinct"]], "polars.Expr.is_in": [[464, "polars-expr-is-in"]], "polars.Expr.list.concat": [[484, "polars-expr-list-concat"]], "polars.Expr.last": [[476, "polars-expr-last"]], "polars.Expr.list.contains": [[485, "polars-expr-list-contains"]], "polars.Expr.list.drop_nulls": [[489, "polars-expr-list-drop-nulls"]], "polars.Expr.list.join": [[496, "polars-expr-list-join"]], "polars.Expr.keep_name": [[474, "polars-expr-keep-name"]], "polars.Expr.list.last": [[497, "polars-expr-list-last"]], "polars.Expr.list.any": [[481, "polars-expr-list-any"]], "polars.Expr.interpolate": [[458, "polars-expr-interpolate"]], "polars.Expr.is_nan": [[468, "polars-expr-is-nan"]], "polars.Expr.le": [[477, "polars-expr-le"]], "polars.Expr.is_not_nan": [[470, "polars-expr-is-not-nan"]], "polars.Expr.limit": [[479, "polars-expr-limit"]], "polars.Expr.list.first": [[492, "polars-expr-list-first"]], "polars.Expr.is_not": [[469, "polars-expr-is-not"]], "polars.Expr.list.count_matches": [[487, "polars-expr-list-count-matches"]], "polars.Expr.is_finite": [[461, "polars-expr-is-finite"]], "polars.Expr.list.explode": [[491, "polars-expr-list-explode"]], "polars.Expr.list.head": [[495, "polars-expr-list-head"]], "polars.Expr.list.arg_min": [[483, "polars-expr-list-arg-min"]], "polars.Expr.implode": [[456, "polars-expr-implode"]], "polars.Expr.list.len": [[498, "polars-expr-list-len"]], "polars.Expr.is_infinite": [[465, "polars-expr-is-infinite"]], "polars.Expr.list.max": [[500, "polars-expr-list-max"]], "polars.Expr.list.reverse": [[503, "polars-expr-list-reverse"]], "polars.Expr.is_duplicated": [[460, "polars-expr-is-duplicated"]], "polars.Expr.list.count_match": [[486, "polars-expr-list-count-match"]], "polars.Expr.list.mean": [[501, "polars-expr-list-mean"]], "polars.Expr.list.min": [[502, "polars-expr-list-min"]], "polars.Expr.is_between": [[459, "polars-expr-is-between"]], "polars.Expr.gt": [[452, "polars-expr-gt"]], "polars.Expr.len": [[478, "polars-expr-len"]], "polars.Expr.list.arg_max": [[482, "polars-expr-list-arg-max"]], "polars.Expr.is_null": [[472, "polars-expr-is-null"]], "polars.Expr.gather_every": [[449, "polars-expr-gather-every"]], "polars.Expr.list.gather": [[493, "polars-expr-list-gather"]], "polars.Expr.is_first_distinct": [[463, "polars-expr-is-first-distinct"]], "polars.Expr.dt.microsecond": [[395, "polars-expr-dt-microsecond"]], "polars.Expr.dt.strftime": [[413, "polars-expr-dt-strftime"]], "polars.Expr.dt.to_string": [[416, "polars-expr-dt-to-string"]], "polars.Expr.first": [[442, "polars-expr-first"]], "polars.Expr.dt.nanoseconds": [[405, "polars-expr-dt-nanoseconds"]], "polars.Expr.dt.offset_by": [[406, "polars-expr-dt-offset-by"]], "polars.Expr.dt.week": [[425, "polars-expr-dt-week"]], "polars.Expr.dt.weekday": [[426, "polars-expr-dt-weekday"]], "polars.Expr.dt.timestamp": [[415, "polars-expr-dt-timestamp"]], "polars.Expr.dt.iso_year": [[394, "polars-expr-dt-iso-year"]], "polars.Expr.dt.seconds": [[412, "polars-expr-dt-seconds"]], "polars.Expr.dt.total_nanoseconds": [[422, "polars-expr-dt-total-nanoseconds"]], "polars.Expr.ewm_mean": [[432, "polars-expr-ewm-mean"]], "polars.Expr.dt.replace_time_zone": [[409, "polars-expr-dt-replace-time-zone"]], "polars.Expr.dt.round": [[410, "polars-expr-dt-round"]], "polars.Expr.eq_missing": [[431, "polars-expr-eq-missing"]], "polars.Expr.fill_nan": [[439, "polars-expr-fill-nan"]], "polars.Expr.dt.minute": [[399, "polars-expr-dt-minute"]], "polars.Expr.dt.nanosecond": [[404, "polars-expr-dt-nanosecond"]], "polars.Expr.dt.quarter": [[408, "polars-expr-dt-quarter"]], "polars.Expr.dt.total_minutes": [[421, "polars-expr-dt-total-minutes"]], "polars.Expr.exp": [[436, "polars-expr-exp"]], "polars.Expr.floor": [[444, "polars-expr-floor"]], "polars.Expr.dt.microseconds": [[396, "polars-expr-dt-microseconds"]], "polars.Expr.dt.with_time_unit": [[427, "polars-expr-dt-with-time-unit"]], "polars.Expr.extend_constant": [[438, "polars-expr-extend-constant"]], "polars.Expr.dt.hours": [[392, "polars-expr-dt-hours"]], "polars.Expr.from_json": [[447, "polars-expr-from-json"]], "polars.Expr.dt.time": [[414, "polars-expr-dt-time"]], "polars.Expr.exclude": [[435, "polars-expr-exclude"]], "polars.Expr.dt.is_leap_year": [[393, "polars-expr-dt-is-leap-year"]], "polars.Expr.dt.month_start": [[403, "polars-expr-dt-month-start"]], "polars.Expr.dt.second": [[411, "polars-expr-dt-second"]], "polars.Expr.dt.milliseconds": [[398, "polars-expr-dt-milliseconds"]], "polars.Expr.dt.month_end": [[402, "polars-expr-dt-month-end"]], "polars.Expr.explode": [[437, "polars-expr-explode"]], "polars.Expr.forward_fill": [[446, "polars-expr-forward-fill"]], "polars.Expr.dt.ordinal_day": [[407, "polars-expr-dt-ordinal-day"]], "polars.Expr.dt.month": [[401, "polars-expr-dt-month"]], "polars.Expr.dt.total_seconds": [[423, "polars-expr-dt-total-seconds"]], "polars.Expr.fill_null": [[440, "polars-expr-fill-null"]], "polars.Expr.ewm_std": [[433, "polars-expr-ewm-std"]], "polars.Expr.dt.minutes": [[400, "polars-expr-dt-minutes"]], "polars.Expr.ewm_var": [[434, "polars-expr-ewm-var"]], "polars.Expr.filter": [[441, "polars-expr-filter"]], "polars.Expr.dt.total_hours": [[418, "polars-expr-dt-total-hours"]], "polars.Expr.dt.total_microseconds": [[419, "polars-expr-dt-total-microseconds"]], "polars.Expr.dt.total_days": [[417, "polars-expr-dt-total-days"]], "polars.Expr.floordiv": [[445, "polars-expr-floordiv"]], "polars.Expr.dt.millisecond": [[397, "polars-expr-dt-millisecond"]], "polars.Expr.dt.truncate": [[424, "polars-expr-dt-truncate"]], "polars.Expr.dt.year": [[428, "polars-expr-dt-year"]], "polars.Expr.entropy": [[429, "polars-expr-entropy"]], "polars.Expr.eq": [[430, "polars-expr-eq"]], "polars.Expr.flatten": [[443, "polars-expr-flatten"]], "polars.Expr.dt.total_milliseconds": [[420, "polars-expr-dt-total-milliseconds"]], "polars.Expr.cumcount": [[369, "polars-expr-cumcount"]], "polars.Expr.dt.datetime": [[386, "polars-expr-dt-datetime"]], "polars.Expr.cot": [[362, "polars-expr-cot"]], "polars.Expr.cat.get_categories": [[353, "polars-expr-cat-get-categories"]], "polars.Expr.diff": [[377, "polars-expr-diff"]], "polars.Expr.bin.ends_with": [[349, "polars-expr-bin-ends-with"]], "polars.Expr.dt.epoch": [[390, "polars-expr-dt-epoch"]], "polars.Expr.cut": [[375, "polars-expr-cut"]], "polars.Expr.dot": [[378, "polars-expr-dot"]], "polars.Expr.bin.decode": [[347, "polars-expr-bin-decode"]], "polars.Expr.dt.days": [[388, "polars-expr-dt-days"]], "polars.Expr.clip_min": [[359, "polars-expr-clip-min"]], "polars.Expr.cum_max": [[365, "polars-expr-cum-max"]], "polars.Expr.cum_sum": [[368, "polars-expr-cum-sum"]], "polars.Expr.dt.cast_time_unit": [[382, "polars-expr-dt-cast-time-unit"]], "polars.Expr.cumprod": [[372, "polars-expr-cumprod"]], "polars.Expr.cast": [[352, "polars-expr-cast"]], "polars.Expr.arr.sort": [[341, "polars-expr-arr-sort"]], "polars.Expr.ceil": [[356, "polars-expr-ceil"]], "polars.Expr.cummax": [[370, "polars-expr-cummax"]], "polars.Expr.bottom_k": [[351, "polars-expr-bottom-k"]], "polars.Expr.dt.convert_time_zone": [[384, "polars-expr-dt-convert-time-zone"]], "polars.Expr.cbrt": [[355, "polars-expr-cbrt"]], "polars.Expr.dt.hour": [[391, "polars-expr-dt-hour"]], "polars.Expr.arr.max": [[338, "polars-expr-arr-max"]], "polars.Expr.degrees": [[376, "polars-expr-degrees"]], "polars.Expr.backward_fill": [[345, "polars-expr-backward-fill"]], "polars.Expr.dt.date": [[385, "polars-expr-dt-date"]], "polars.Expr.arr.min": [[339, "polars-expr-arr-min"]], "polars.Expr.arr.reverse": [[340, "polars-expr-arr-reverse"]], "polars.Expr.arr.unique": [[344, "polars-expr-arr-unique"]], "polars.Expr.cosh": [[361, "polars-expr-cosh"]], "polars.Expr.cummin": [[371, "polars-expr-cummin"]], "polars.Expr.cumsum": [[373, "polars-expr-cumsum"]], "polars.Expr.dt.day": [[387, "polars-expr-dt-day"]], "polars.Expr.dt.dst_offset": [[389, "polars-expr-dt-dst-offset"]], "polars.Expr.dt.base_utc_offset": [[381, "polars-expr-dt-base-utc-offset"]], "polars.Expr.arr.sum": [[342, "polars-expr-arr-sum"]], "polars.Expr.dt.combine": [[383, "polars-expr-dt-combine"]], "polars.Expr.cum_prod": [[367, "polars-expr-cum-prod"]], "polars.Expr.cat.set_ordering": [[354, "polars-expr-cat-set-ordering"]], "polars.Expr.clip": [[357, "polars-expr-clip"]], "polars.Expr.clip_max": [[358, "polars-expr-clip-max"]], "polars.Expr.cum_count": [[364, "polars-expr-cum-count"]], "polars.Expr.cos": [[360, "polars-expr-cos"]], "polars.Expr.arr.to_list": [[343, "polars-expr-arr-to-list"]], "polars.Expr.bin.starts_with": [[350, "polars-expr-bin-starts-with"]], "polars.Expr.cumulative_eval": [[374, "polars-expr-cumulative-eval"]], "polars.Expr.drop_nans": [[379, "polars-expr-drop-nans"]], "polars.Expr.count": [[363, "polars-expr-count"]], "polars.Expr.bin.contains": [[346, "polars-expr-bin-contains"]], "polars.Expr.bin.encode": [[348, "polars-expr-bin-encode"]], "polars.Expr.cum_min": [[366, "polars-expr-cum-min"]], "polars.Expr.drop_nulls": [[380, "polars-expr-drop-nulls"]], "polars.Expr.arr.join": [[336, "polars-expr-arr-join"]], "polars.Expr.arr.last": [[337, "polars-expr-arr-last"]], "polars.DataFrame.to_dummies": [[258, "polars-dataframe-to-dummies"]], "polars.DataFrame.rows_by_key": [[238, "polars-dataframe-rows-by-key"]], "polars.DataFrame.row": [[236, "polars-dataframe-row"]], "polars.DataFrame.upsample": [[270, "polars-dataframe-upsample"]], "polars.dataframe.group_by.GroupBy.agg": [[279, "polars-dataframe-group-by-groupby-agg"]], "polars.DataFrame.to_struct": [[263, "polars-dataframe-to-struct"]], "polars.DataFrame.unstack": [[268, "polars-dataframe-unstack"]], "polars.DataFrame.with_columns_seq": [[275, "polars-dataframe-with-columns-seq"]], "polars.DataFrame.with_columns": [[274, "polars-dataframe-with-columns"]], "polars.DataFrame.unique": [[266, "polars-dataframe-unique"]], "polars.DataFrame.unnest": [[267, "polars-dataframe-unnest"]], "polars.DataFrame.update": [[269, "polars-dataframe-update"]], "polars.DataFrame.to_series": [[262, "polars-dataframe-to-series"]], "polars.DataFrame.to_arrow": [[255, "polars-dataframe-to-arrow"]], "polars.DataFrame.sort": [[249, "polars-dataframe-sort"]], "polars.DataFrame.shift_and_fill": [[246, "polars-dataframe-shift-and-fill"]], "polars.DataFrame.slice": [[248, "polars-dataframe-slice"]], "polars.DataFrame.select_seq": [[242, "polars-dataframe-select-seq"]], "polars.DataFrame.pivot": [[226, "polars-dataframe-pivot"]], "polars.DataFrame.top_k": [[264, "polars-dataframe-top-k"]], "polars.DataFrame.select": [[241, "polars-dataframe-select"]], "polars.DataFrame.to_dict": [[256, "polars-dataframe-to-dict"]], "polars.DataFrame.vstack": [[272, "polars-dataframe-vstack"]], "polars.DataFrame.partition_by": [[224, "polars-dataframe-partition-by"]], "polars.DataFrame.to_pandas": [[261, "polars-dataframe-to-pandas"]], "polars.DataFrame.rechunk": [[229, "polars-dataframe-rechunk"]], "polars.DataFrame.with_row_index": [[277, "polars-dataframe-with-row-index"]], "polars.DataFrame.shape": [[244, "polars-dataframe-shape"]], "polars.DataFrame.rename": [[230, "polars-dataframe-rename"]], "polars.DataFrame.replace_at_idx": [[232, "polars-dataframe-replace-at-idx"]], "polars.DataFrame.rows": [[237, "polars-dataframe-rows"]], "polars.DataFrame.width": [[273, "polars-dataframe-width"]], "polars.DataFrame.std": [[250, "polars-dataframe-std"]], "polars.dataframe.group_by.GroupBy.__iter__": [[278, "polars-dataframe-group-by-groupby-iter"]], "polars.DataFrame.tail": [[253, "polars-dataframe-tail"]], "polars.DataFrame.sum_horizontal": [[252, "polars-dataframe-sum-horizontal"]], "polars.DataFrame.shift": [[245, "polars-dataframe-shift"]], "polars.DataFrame.to_numpy": [[260, "polars-dataframe-to-numpy"]], "polars.DataFrame.product": [[227, "polars-dataframe-product"]], "polars.DataFrame.to_dicts": [[257, "polars-dataframe-to-dicts"]], "polars.DataFrame.schema": [[240, "polars-dataframe-schema"]], "polars.DataFrame.rolling": [[235, "polars-dataframe-rolling"]], "polars.DataFrame.var": [[271, "polars-dataframe-var"]], "polars.DataFrame.quantile": [[228, "polars-dataframe-quantile"]], "polars.DataFrame.pipe": [[225, "polars-dataframe-pipe"]], "polars.DataFrame.replace_column": [[233, "polars-dataframe-replace-column"]], "polars.DataFrame.shrink_to_fit": [[247, "polars-dataframe-shrink-to-fit"]], "polars.DataFrame.take_every": [[254, "polars-dataframe-take-every"]], "polars.DataFrame.transpose": [[265, "polars-dataframe-transpose"]], "polars.DataFrame.reverse": [[234, "polars-dataframe-reverse"]], "polars.DataFrame.set_sorted": [[243, "polars-dataframe-set-sorted"]], "polars.DataFrame.sample": [[239, "polars-dataframe-sample"]], "polars.DataFrame.sum": [[251, "polars-dataframe-sum"]], "polars.DataFrame.to_init_repr": [[259, "polars-dataframe-to-init-repr"]], "polars.DataFrame.with_row_count": [[276, "polars-dataframe-with-row-count"]], "polars.DataFrame.replace": [[231, "polars-dataframe-replace"]], "polars.max": [[731, "polars-max"]], "polars.median": [[734, "polars-median"]], "Meta": [[767, "meta"]], "polars.map_batches": [[729, "polars-map-batches"]], "polars.tail": [[750, "polars-tail"]], "polars.mean": [[733, "polars-mean"]], "polars.quantile": [[739, "polars-quantile"]], "Expressions": [[765, "expressions"]], "polars.repeat": [[741, "polars-repeat"]], "polars.reduce": [[740, "polars-reduce"]], "polars.zeros": [[756, "polars-zeros"]], "polars.LazyFrame.cast": [[783, "polars-lazyframe-cast"]], "Operators": [[771, "operators"]], "Conjunction": [[771, "conjunction"]], "Comparison": [[771, "comparison"]], "Numeric": [[771, "numeric"], [304, "numeric"]], "polars.min_horizontal": [[736, "polars-min-horizontal"]], "polars.map_groups": [[730, "polars-map-groups"]], "Conversion": [[776, "conversion"]], "Parallelization": [[776, "parallelization"]], "Random": [[776, "random"]], "StringCache": [[776, "stringcache"]], "polars.sql_expr": [[745, "polars-sql-expr"]], "polars.ones": [[738, "polars-ones"]], "polars.select": [[744, "polars-select"]], "API reference": [[777, "api-reference"]], "polars.LazyFrame.cache": [[782, "polars-lazyframe-cache"]], "polars.time_range": [[752, "polars-time-range"]], "polars.time": [[751, "polars-time"]], "Name": [[770, "name"]], "Input/output": [[778, "input-output"]], "CSV": [[778, "csv"]], "Feather/ IPC": [[778, "feather-ipc"]], "Parquet": [[778, "parquet"]], "Database": [[778, "database"]], "JSON": [[778, "json"]], "AVRO": [[778, "avro"]], "Spreadsheet": [[778, "spreadsheet"]], "Apache Iceberg": [[778, "apache-iceberg"]], "Delta Lake": [[778, "delta-lake"]], "Datasets": [[778, "datasets"]], "BatchedCsvReader": [[778, "batchedcsvreader"]], "polars.map": [[728, "polars-map"]], "polars.sum": [[748, "polars-sum"]], "polars.struct": [[747, "polars-struct"]], "polars.max_horizontal": [[732, "polars-max-horizontal"]], "polars.var": [[754, "polars-var"]], "polars.LazyFrame.bottom_k": [[781, "polars-lazyframe-bottom-k"]], "Window": [[775, "window"]], "polars.min": [[735, "polars-min"]], "polars.time_ranges": [[753, "polars-time-ranges"]], "polars.std": [[746, "polars-std"]], "polars.col": [[761, "polars-col"]], "Columns / names": [[762, "columns-names"]], "polars.rolling_cov": [[743, "polars-rolling-cov"]], "polars.LazyFrame.approx_n_unique": [[780, "polars-lazyframe-approx-n-unique"]], "polars.when": [[755, "polars-when"]], "polars.n_unique": [[737, "polars-n-unique"]], "polars.sum_horizontal": [[749, "polars-sum-horizontal"]], "polars.rolling_corr": [[742, "polars-rolling-corr"]], "polars.dataframe.group_by.GroupBy.quantile": [[292, "polars-dataframe-group-by-groupby-quantile"]], "polars.Expr.approx_n_unique": [[316, "polars-expr-approx-n-unique"]], "polars.dataframe.group_by.GroupBy.count": [[282, "polars-dataframe-group-by-groupby-count"]], "polars.Expr.arr.arg_min": [[331, "polars-expr-arr-arg-min"]], "polars.Expr.arr.first": [[334, "polars-expr-arr-first"]], "polars.Expr.arg_max": [[323, "polars-expr-arg-max"]], "polars.dataframe.group_by.GroupBy.mean": [[288, "polars-dataframe-group-by-groupby-mean"]], "polars.Expr.append": [[314, "polars-expr-append"]], "polars.Expr.arr.all": [[328, "polars-expr-arr-all"]], "polars.Expr.add": [[308, "polars-expr-add"]], "polars.Expr.arg_sort": [[325, "polars-expr-arg-sort"]], "polars.dataframe.group_by.GroupBy.map_groups": [[286, "polars-dataframe-group-by-groupby-map-groups"]], "polars.Expr.alias": [[310, "polars-expr-alias"]], "polars.Expr.arctan": [[321, "polars-expr-arctan"]], "polars.dataframe.group_by.GroupBy.median": [[289, "polars-dataframe-group-by-groupby-median"]], "polars.Expr.arr.contains": [[332, "polars-expr-arr-contains"]], "polars.Expr.arccos": [[317, "polars-expr-arccos"]], "polars.dataframe.group_by.GroupBy.max": [[287, "polars-dataframe-group-by-groupby-max"]], "polars.dataframe.group_by.GroupBy.head": [[284, "polars-dataframe-group-by-groupby-head"]], "polars.Expr.arg_unique": [[327, "polars-expr-arg-unique"]], "polars.dataframe.group_by.GroupBy.sum": [[293, "polars-dataframe-group-by-groupby-sum"]], "polars.dataframe.group_by.GroupBy.n_unique": [[291, "polars-dataframe-group-by-groupby-n-unique"]], "polars.dataframe.group_by.GroupBy.last": [[285, "polars-dataframe-group-by-groupby-last"]], "polars.Expr.any": [[313, "polars-expr-any"]], "polars.Expr.arr.arg_max": [[330, "polars-expr-arr-arg-max"]], "DataFrame": [[300, "dataframe"]], "polars.dataframe.group_by.GroupBy.tail": [[294, "polars-dataframe-group-by-groupby-tail"]], "polars.Expr.arccosh": [[318, "polars-expr-arccosh"]], "polars.dataframe.group_by.GroupBy.apply": [[281, "polars-dataframe-group-by-groupby-apply"]], "polars.dataframe.group_by.GroupBy.all": [[280, "polars-dataframe-group-by-groupby-all"]], "polars.Expr.arg_min": [[324, "polars-expr-arg-min"]], "Data types": [[304, "data-types"]], "Nested": [[304, "nested"]], "Other": [[304, "other"]], "polars.dataframe.group_by.GroupBy.first": [[283, "polars-dataframe-group-by-groupby-first"]], "polars.Expr.abs": [[307, "polars-expr-abs"]], "polars.Expr.all": [[311, "polars-expr-all"]], "polars.Expr.apply": [[315, "polars-expr-apply"]], "polars.Expr.and_": [[312, "polars-expr-and"]], "polars.dataframe.group_by.GroupBy.min": [[290, "polars-dataframe-group-by-groupby-min"]], "polars.Expr.agg_groups": [[309, "polars-expr-agg-groups"]], "polars.Expr.arg_true": [[326, "polars-expr-arg-true"]], "polars.Expr.arctanh": [[322, "polars-expr-arctanh"]], "polars.Expr.arr.any": [[329, "polars-expr-arr-any"]], "polars.Expr.arr.get": [[335, "polars-expr-arr-get"]], "polars.Expr.arcsinh": [[320, "polars-expr-arcsinh"]], "Exceptions": [[305, "exceptions"]], "polars.Expr.arr.count_matches": [[333, "polars-expr-arr-count-matches"]], "polars.Expr.arcsin": [[319, "polars-expr-arcsin"]]}, "indexentries": {"array (class in polars)": [[2, "polars.Array"]], "__init__() (polars.array method)": [[2, "polars.Array.__init__"]], "binary (class in polars)": [[3, "polars.Binary"]], "__init__() (polars.binary method)": [[3, "polars.Binary.__init__"]], "boolean (class in polars)": [[4, "polars.Boolean"]], "__init__() (polars.boolean method)": [[4, "polars.Boolean.__init__"]], "categorical (class in polars)": [[5, "polars.Categorical"]], "__init__() (polars.categorical method)": [[5, "polars.Categorical.__init__"]], "activate_decimals() (polars.config class method)": [[6, "polars.Config.activate_decimals"]], "load() (polars.config class method)": [[7, "polars.Config.load"]], "load_from_file() (polars.config class method)": [[8, "polars.Config.load_from_file"]], "restore_defaults() (polars.config class method)": [[9, "polars.Config.restore_defaults"]], "save() (polars.config class method)": [[10, "polars.Config.save"]], "save_to_file() (polars.config class method)": [[11, "polars.Config.save_to_file"]], "set_ascii_tables() (polars.config class method)": [[12, "polars.Config.set_ascii_tables"]], "set_auto_structify() (polars.config class method)": [[13, "polars.Config.set_auto_structify"]], "set_decimal_separator() (polars.config class method)": [[14, "polars.Config.set_decimal_separator"]], "set_float_precision() (polars.config class method)": [[15, "polars.Config.set_float_precision"]], "set_fmt_float() (polars.config class method)": [[16, "polars.Config.set_fmt_float"]], "set_fmt_str_lengths() (polars.config class method)": [[17, "polars.Config.set_fmt_str_lengths"]], "set_fmt_table_cell_list_len() (polars.config class method)": [[18, "polars.Config.set_fmt_table_cell_list_len"]], "set_streaming_chunk_size() (polars.config class method)": [[19, "polars.Config.set_streaming_chunk_size"]], "set_tbl_cell_alignment() (polars.config class method)": [[20, "polars.Config.set_tbl_cell_alignment"]], "set_tbl_cell_numeric_alignment() (polars.config class method)": [[21, "polars.Config.set_tbl_cell_numeric_alignment"]], "set_tbl_cols() (polars.config class method)": [[22, "polars.Config.set_tbl_cols"]], "set_tbl_column_data_type_inline() (polars.config class method)": [[23, "polars.Config.set_tbl_column_data_type_inline"]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[24, "polars.Config.set_tbl_dataframe_shape_below"]], "set_tbl_formatting() (polars.config class method)": [[25, "polars.Config.set_tbl_formatting"]], "set_tbl_hide_column_data_types() (polars.config class method)": [[26, "polars.Config.set_tbl_hide_column_data_types"]], "set_tbl_hide_column_names() (polars.config class method)": [[27, "polars.Config.set_tbl_hide_column_names"]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[28, "polars.Config.set_tbl_hide_dataframe_shape"]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[29, "polars.Config.set_tbl_hide_dtype_separator"]], "set_tbl_rows() (polars.config class method)": [[30, "polars.Config.set_tbl_rows"]], "set_tbl_width_chars() (polars.config class method)": [[31, "polars.Config.set_tbl_width_chars"]], "set_thousands_separator() (polars.config class method)": [[32, "polars.Config.set_thousands_separator"]], "set_trim_decimal_zeros() (polars.config class method)": [[33, "polars.Config.set_trim_decimal_zeros"]], "set_verbose() (polars.config class method)": [[34, "polars.Config.set_verbose"]], "state() (polars.config class method)": [[35, "polars.Config.state"]], "write_avro() (polars.dataframe method)": [[36, "polars.DataFrame.write_avro"]], "write_csv() (polars.dataframe method)": [[37, "polars.DataFrame.write_csv"]], "write_database() (polars.dataframe method)": [[38, "polars.DataFrame.write_database"]], "write_delta() (polars.dataframe method)": [[39, "polars.DataFrame.write_delta"]], "write_excel() (polars.dataframe method)": [[40, "polars.DataFrame.write_excel"]], "write_ipc() (polars.dataframe method)": [[41, "polars.DataFrame.write_ipc"]], "write_ipc_stream() (polars.dataframe method)": [[42, "polars.DataFrame.write_ipc_stream"]], "write_json() (polars.dataframe method)": [[43, "polars.DataFrame.write_json"]], "write_ndjson() (polars.dataframe method)": [[44, "polars.DataFrame.write_ndjson"]], "write_parquet() (polars.dataframe method)": [[45, "polars.DataFrame.write_parquet"]], "datatype (class in polars)": [[46, "polars.DataType"]], "__init__() (polars.datatype method)": [[46, "polars.DataType.__init__"]], "date (class in polars)": [[47, "polars.Date"]], "__init__() (polars.date method)": [[47, "polars.Date.__init__"]], "datetime (class in polars)": [[48, "polars.Datetime"]], "__init__() (polars.datetime method)": [[48, "polars.Datetime.__init__"]], "decimal (class in polars)": [[49, "polars.Decimal"]], "__init__() (polars.decimal method)": [[49, "polars.Decimal.__init__"]], "duration (class in polars)": [[50, "polars.Duration"]], "__init__() (polars.duration method)": [[50, "polars.Duration.__init__"]], "enum (class in polars)": [[51, "polars.Enum"]], "__init__() (polars.enum method)": [[51, "polars.Enum.__init__"]], "float32 (class in polars)": [[52, "polars.Float32"]], "__init__() (polars.float32 method)": [[52, "polars.Float32.__init__"]], "float64 (class in polars)": [[53, "polars.Float64"]], "__init__() (polars.float64 method)": [[53, "polars.Float64.__init__"]], "int16 (class in polars)": [[54, "polars.Int16"]], "__init__() (polars.int16 method)": [[54, "polars.Int16.__init__"]], "int32 (class in polars)": [[55, "polars.Int32"]], "__init__() (polars.int32 method)": [[55, "polars.Int32.__init__"]], "int64 (class in polars)": [[56, "polars.Int64"]], "__init__() (polars.int64 method)": [[56, "polars.Int64.__init__"]], "int8 (class in polars)": [[57, "polars.Int8"]], "__init__() (polars.int8 method)": [[57, "polars.Int8.__init__"]], "sink_csv() (polars.lazyframe method)": [[58, "polars.LazyFrame.sink_csv"]], "sink_ipc() (polars.lazyframe method)": [[59, "polars.LazyFrame.sink_ipc"]], "sink_ndjson() (polars.lazyframe method)": [[60, "polars.LazyFrame.sink_ndjson"]], "sink_parquet() (polars.lazyframe method)": [[61, "polars.LazyFrame.sink_parquet"]], "list (class in polars)": [[62, "polars.List"]], "__init__() (polars.list method)": [[62, "polars.List.__init__"]], "null (class in polars)": [[63, "polars.Null"]], "__init__() (polars.null method)": [[63, "polars.Null.__init__"]], "object (class in polars)": [[64, "polars.Object"]], "__init__() (polars.object method)": [[64, "polars.Object.__init__"]], "execute() (polars.sqlcontext method)": [[65, "polars.SQLContext.execute"]], "register() (polars.sqlcontext method)": [[66, "polars.SQLContext.register"]], "register_globals() (polars.sqlcontext method)": [[67, "polars.SQLContext.register_globals"]], "register_many() (polars.sqlcontext method)": [[68, "polars.SQLContext.register_many"]], "tables() (polars.sqlcontext method)": [[69, "polars.SQLContext.tables"]], "unregister() (polars.sqlcontext method)": [[70, "polars.SQLContext.unregister"]], "string (class in polars)": [[71, "polars.String"]], "__init__() (polars.string method)": [[71, "polars.String.__init__"]], "stringcache (class in polars)": [[72, "polars.StringCache"]], "__init__() (polars.stringcache method)": [[72, "polars.StringCache.__init__"]], "struct (class in polars)": [[73, "polars.Struct"]], "__init__() (polars.struct method)": [[73, "polars.Struct.__init__"]], "time (class in polars)": [[74, "polars.Time"]], "__init__() (polars.time method)": [[74, "polars.Time.__init__"]], "uint16 (class in polars)": [[75, "polars.UInt16"]], "__init__() (polars.uint16 method)": [[75, "polars.UInt16.__init__"]], "uint32 (class in polars)": [[76, "polars.UInt32"]], "__init__() (polars.uint32 method)": [[76, "polars.UInt32.__init__"]], "uint64 (class in polars)": [[77, "polars.UInt64"]], "__init__() (polars.uint64 method)": [[77, "polars.UInt64.__init__"]], "uint8 (class in polars)": [[78, "polars.UInt8"]], "__init__() (polars.uint8 method)": [[78, "polars.UInt8.__init__"]], "unknown (class in polars)": [[79, "polars.Unknown"]], "__init__() (polars.unknown method)": [[79, "polars.Unknown.__init__"]], "utf8 (in module polars)": [[80, "polars.Utf8"]], "align_frames() (in module polars)": [[81, "polars.align_frames"]], "register_dataframe_namespace() (in module polars.api)": [[82, "polars.api.register_dataframe_namespace"]], "register_expr_namespace() (in module polars.api)": [[83, "polars.api.register_expr_namespace"]], "register_lazyframe_namespace() (in module polars.api)": [[84, "polars.api.register_lazyframe_namespace"]], "register_series_namespace() (in module polars.api)": [[85, "polars.api.register_series_namespace"]], "build_info() (in module polars)": [[86, "polars.build_info"]], "collect_all() (in module polars)": [[87, "polars.collect_all"]], "collect_all_async() (in module polars)": [[88, "polars.collect_all_async"]], "concat() (in module polars)": [[89, "polars.concat"]], "disable_string_cache() (in module polars)": [[90, "polars.disable_string_cache"]], "enable_string_cache() (in module polars)": [[91, "polars.enable_string_cache"]], "arrowerror": [[92, "polars.exceptions.ArrowError"]], "columnnotfounderror": [[93, "polars.exceptions.ColumnNotFoundError"]], "computeerror": [[94, "polars.exceptions.ComputeError"]], "duplicateerror": [[95, "polars.exceptions.DuplicateError"]], "invalidoperationerror": [[96, "polars.exceptions.InvalidOperationError"]], "nodataerror": [[97, "polars.exceptions.NoDataError"]], "norowsreturnederror": [[98, "polars.exceptions.NoRowsReturnedError"]], "polarserror": [[99, "polars.exceptions.PolarsError"]], "polarspanicerror": [[100, "polars.exceptions.PolarsPanicError"]], "rowserror": [[101, "polars.exceptions.RowsError"]], "schemaerror": [[102, "polars.exceptions.SchemaError"]], "schemafieldnotfounderror": [[103, "polars.exceptions.SchemaFieldNotFoundError"]], "shapeerror": [[104, "polars.exceptions.ShapeError"]], "structfieldnotfounderror": [[105, "polars.exceptions.StructFieldNotFoundError"]], "toomanyrowsreturnederror": [[106, "polars.exceptions.TooManyRowsReturnedError"]], "from_arrow() (in module polars)": [[107, "polars.from_arrow"]], "from_dataframe() (in module polars)": [[108, "polars.from_dataframe"]], "from_dict() (in module polars)": [[109, "polars.from_dict"]], "from_dicts() (in module polars)": [[110, "polars.from_dicts"]], "from_numpy() (in module polars)": [[111, "polars.from_numpy"]], "from_pandas() (in module polars)": [[112, "polars.from_pandas"]], "from_records() (in module polars)": [[113, "polars.from_records"]], "from_repr() (in module polars)": [[114, "polars.from_repr"]], "get_index_type() (in module polars)": [[115, "polars.get_index_type"]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[116, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches"]], "read_avro() (in module polars)": [[117, "polars.read_avro"]], "read_csv() (in module polars)": [[118, "polars.read_csv"]], "read_csv_batched() (in module polars)": [[119, "polars.read_csv_batched"]], "read_database() (in module polars)": [[120, "polars.read_database"]], "read_database_uri() (in module polars)": [[121, "polars.read_database_uri"]], "read_delta() (in module polars)": [[122, "polars.read_delta"]], "read_excel() (in module polars)": [[123, "polars.read_excel"]], "read_ipc() (in module polars)": [[124, "polars.read_ipc"]], "read_ipc_schema() (in module polars)": [[125, "polars.read_ipc_schema"]], "read_ipc_stream() (in module polars)": [[126, "polars.read_ipc_stream"]], "read_json() (in module polars)": [[127, "polars.read_json"]], "read_ndjson() (in module polars)": [[128, "polars.read_ndjson"]], "read_ods() (in module polars)": [[129, "polars.read_ods"]], "read_parquet() (in module polars)": [[130, "polars.read_parquet"]], "read_parquet_schema() (in module polars)": [[131, "polars.read_parquet_schema"]], "scan_csv() (in module polars)": [[132, "polars.scan_csv"]], "scan_delta() (in module polars)": [[133, "polars.scan_delta"]], "scan_iceberg() (in module polars)": [[134, "polars.scan_iceberg"]], "scan_ipc() (in module polars)": [[135, "polars.scan_ipc"]], "scan_ndjson() (in module polars)": [[136, "polars.scan_ndjson"]], "scan_parquet() (in module polars)": [[137, "polars.scan_parquet"]], "scan_pyarrow_dataset() (in module polars)": [[138, "polars.scan_pyarrow_dataset"]], "set_random_seed() (in module polars)": [[139, "polars.set_random_seed"]], "show_versions() (in module polars)": [[140, "polars.show_versions"]], "assert_frame_equal() (in module polars.testing)": [[141, "polars.testing.assert_frame_equal"]], "assert_frame_not_equal() (in module polars.testing)": [[142, "polars.testing.assert_frame_not_equal"]], "assert_series_equal() (in module polars.testing)": [[143, "polars.testing.assert_series_equal"]], "assert_series_not_equal() (in module polars.testing)": [[144, "polars.testing.assert_series_not_equal"]], "__init__() (polars.testing.parametric.column method)": [[145, "polars.testing.parametric.column.__init__"]], "column (class in polars.testing.parametric)": [[145, "polars.testing.parametric.column"]], "columns() (in module polars.testing.parametric)": [[146, "polars.testing.parametric.columns"]], "create_list_strategy() (in module polars.testing.parametric)": [[147, "polars.testing.parametric.create_list_strategy"]], "dataframes() (in module polars.testing.parametric)": [[148, "polars.testing.parametric.dataframes"]], "load_profile() (in module polars.testing.parametric)": [[149, "polars.testing.parametric.load_profile"]], "series() (in module polars.testing.parametric)": [[150, "polars.testing.parametric.series"]], "set_profile() (in module polars.testing.parametric)": [[151, "polars.testing.parametric.set_profile"]], "threadpool_size() (in module polars)": [[152, "polars.threadpool_size"]], "using_string_cache() (in module polars)": [[153, "polars.using_string_cache"]], "__dataframe__() (polars.dataframe method)": [[156, "polars.DataFrame.__dataframe__"]], "apply() (polars.dataframe method)": [[157, "polars.DataFrame.apply"]], "approx_n_unique() (polars.dataframe method)": [[158, "polars.DataFrame.approx_n_unique"]], "bottom_k() (polars.dataframe method)": [[159, "polars.DataFrame.bottom_k"]], "cast() (polars.dataframe method)": [[160, "polars.DataFrame.cast"]], "clear() (polars.dataframe method)": [[161, "polars.DataFrame.clear"]], "clone() (polars.dataframe method)": [[162, "polars.DataFrame.clone"]], "columns (polars.dataframe property)": [[163, "polars.DataFrame.columns"]], "corr() (polars.dataframe method)": [[164, "polars.DataFrame.corr"]], "count() (polars.dataframe method)": [[165, "polars.DataFrame.count"]], "describe() (polars.dataframe method)": [[166, "polars.DataFrame.describe"]], "drop() (polars.dataframe method)": [[167, "polars.DataFrame.drop"]], "drop_in_place() (polars.dataframe method)": [[168, "polars.DataFrame.drop_in_place"]], "drop_nulls() (polars.dataframe method)": [[169, "polars.DataFrame.drop_nulls"]], "dtypes (polars.dataframe property)": [[170, "polars.DataFrame.dtypes"]], "equals() (polars.dataframe method)": [[171, "polars.DataFrame.equals"]], "estimated_size() (polars.dataframe method)": [[172, "polars.DataFrame.estimated_size"]], "explode() (polars.dataframe method)": [[173, "polars.DataFrame.explode"]], "extend() (polars.dataframe method)": [[174, "polars.DataFrame.extend"]], "fill_nan() (polars.dataframe method)": [[175, "polars.DataFrame.fill_nan"]], "fill_null() (polars.dataframe method)": [[176, "polars.DataFrame.fill_null"]], "filter() (polars.dataframe method)": [[177, "polars.DataFrame.filter"]], "find_idx_by_name() (polars.dataframe method)": [[178, "polars.DataFrame.find_idx_by_name"]], "flags (polars.dataframe property)": [[179, "polars.DataFrame.flags"]], "fold() (polars.dataframe method)": [[180, "polars.DataFrame.fold"]], "frame_equal() (polars.dataframe method)": [[181, "polars.DataFrame.frame_equal"]], "gather_every() (polars.dataframe method)": [[182, "polars.DataFrame.gather_every"]], "get_column() (polars.dataframe method)": [[183, "polars.DataFrame.get_column"]], "get_column_index() (polars.dataframe method)": [[184, "polars.DataFrame.get_column_index"]], "get_columns() (polars.dataframe method)": [[185, "polars.DataFrame.get_columns"]], "glimpse() (polars.dataframe method)": [[186, "polars.DataFrame.glimpse"]], "group_by() (polars.dataframe method)": [[187, "polars.DataFrame.group_by"]], "group_by_dynamic() (polars.dataframe method)": [[188, "polars.DataFrame.group_by_dynamic"]], "group_by_rolling() (polars.dataframe method)": [[189, "polars.DataFrame.group_by_rolling"]], "groupby() (polars.dataframe method)": [[190, "polars.DataFrame.groupby"]], "groupby_dynamic() (polars.dataframe method)": [[191, "polars.DataFrame.groupby_dynamic"]], "groupby_rolling() (polars.dataframe method)": [[192, "polars.DataFrame.groupby_rolling"]], "hash_rows() (polars.dataframe method)": [[193, "polars.DataFrame.hash_rows"]], "head() (polars.dataframe method)": [[194, "polars.DataFrame.head"]], "height (polars.dataframe property)": [[195, "polars.DataFrame.height"]], "hstack() (polars.dataframe method)": [[196, "polars.DataFrame.hstack"]], "insert_at_idx() (polars.dataframe method)": [[197, "polars.DataFrame.insert_at_idx"]], "insert_column() (polars.dataframe method)": [[198, "polars.DataFrame.insert_column"]], "interpolate() (polars.dataframe method)": [[199, "polars.DataFrame.interpolate"]], "is_duplicated() (polars.dataframe method)": [[200, "polars.DataFrame.is_duplicated"]], "is_empty() (polars.dataframe method)": [[201, "polars.DataFrame.is_empty"]], "is_unique() (polars.dataframe method)": [[202, "polars.DataFrame.is_unique"]], "item() (polars.dataframe method)": [[203, "polars.DataFrame.item"]], "iter_columns() (polars.dataframe method)": [[204, "polars.DataFrame.iter_columns"]], "iter_rows() (polars.dataframe method)": [[205, "polars.DataFrame.iter_rows"]], "iter_slices() (polars.dataframe method)": [[206, "polars.DataFrame.iter_slices"]], "join() (polars.dataframe method)": [[207, "polars.DataFrame.join"]], "join_asof() (polars.dataframe method)": [[208, "polars.DataFrame.join_asof"]], "lazy() (polars.dataframe method)": [[209, "polars.DataFrame.lazy"]], "limit() (polars.dataframe method)": [[210, "polars.DataFrame.limit"]], "map_rows() (polars.dataframe method)": [[211, "polars.DataFrame.map_rows"]], "max() (polars.dataframe method)": [[212, "polars.DataFrame.max"]], "max_horizontal() (polars.dataframe method)": [[213, "polars.DataFrame.max_horizontal"]], "mean() (polars.dataframe method)": [[214, "polars.DataFrame.mean"]], "mean_horizontal() (polars.dataframe method)": [[215, "polars.DataFrame.mean_horizontal"]], "median() (polars.dataframe method)": [[216, "polars.DataFrame.median"]], "melt() (polars.dataframe method)": [[217, "polars.DataFrame.melt"]], "merge_sorted() (polars.dataframe method)": [[218, "polars.DataFrame.merge_sorted"]], "min() (polars.dataframe method)": [[219, "polars.DataFrame.min"]], "min_horizontal() (polars.dataframe method)": [[220, "polars.DataFrame.min_horizontal"]], "n_chunks() (polars.dataframe method)": [[221, "polars.DataFrame.n_chunks"]], "n_unique() (polars.dataframe method)": [[222, "polars.DataFrame.n_unique"]], "null_count() (polars.dataframe method)": [[223, "polars.DataFrame.null_count"]], "partition_by() (polars.dataframe method)": [[224, "polars.DataFrame.partition_by"]], "pipe() (polars.dataframe method)": [[225, "polars.DataFrame.pipe"]], "pivot() (polars.dataframe method)": [[226, "polars.DataFrame.pivot"]], "product() (polars.dataframe method)": [[227, "polars.DataFrame.product"]], "quantile() (polars.dataframe method)": [[228, "polars.DataFrame.quantile"]], "rechunk() (polars.dataframe method)": [[229, "polars.DataFrame.rechunk"]], "rename() (polars.dataframe method)": [[230, "polars.DataFrame.rename"]], "replace() (polars.dataframe method)": [[231, "polars.DataFrame.replace"]], "replace_at_idx() (polars.dataframe method)": [[232, "polars.DataFrame.replace_at_idx"]], "replace_column() (polars.dataframe method)": [[233, "polars.DataFrame.replace_column"]], "reverse() (polars.dataframe method)": [[234, "polars.DataFrame.reverse"]], "rolling() (polars.dataframe method)": [[235, "polars.DataFrame.rolling"]], "row() (polars.dataframe method)": [[236, "polars.DataFrame.row"]], "rows() (polars.dataframe method)": [[237, "polars.DataFrame.rows"]], "rows_by_key() (polars.dataframe method)": [[238, "polars.DataFrame.rows_by_key"]], "sample() (polars.dataframe method)": [[239, "polars.DataFrame.sample"]], "schema (polars.dataframe property)": [[240, "polars.DataFrame.schema"]], "select() (polars.dataframe method)": [[241, "polars.DataFrame.select"]], "select_seq() (polars.dataframe method)": [[242, "polars.DataFrame.select_seq"]], "set_sorted() (polars.dataframe method)": [[243, "polars.DataFrame.set_sorted"]], "shape (polars.dataframe property)": [[244, "polars.DataFrame.shape"]], "shift() (polars.dataframe method)": [[245, "polars.DataFrame.shift"]], "shift_and_fill() (polars.dataframe method)": [[246, "polars.DataFrame.shift_and_fill"]], "shrink_to_fit() (polars.dataframe method)": [[247, "polars.DataFrame.shrink_to_fit"]], "slice() (polars.dataframe method)": [[248, "polars.DataFrame.slice"]], "sort() (polars.dataframe method)": [[249, "polars.DataFrame.sort"]], "std() (polars.dataframe method)": [[250, "polars.DataFrame.std"]], "sum() (polars.dataframe method)": [[251, "polars.DataFrame.sum"]], "sum_horizontal() (polars.dataframe method)": [[252, "polars.DataFrame.sum_horizontal"]], "tail() (polars.dataframe method)": [[253, "polars.DataFrame.tail"]], "take_every() (polars.dataframe method)": [[254, "polars.DataFrame.take_every"]], "to_arrow() (polars.dataframe method)": [[255, "polars.DataFrame.to_arrow"]], "to_dict() (polars.dataframe method)": [[256, "polars.DataFrame.to_dict"]], "to_dicts() (polars.dataframe method)": [[257, "polars.DataFrame.to_dicts"]], "to_dummies() (polars.dataframe method)": [[258, "polars.DataFrame.to_dummies"]], "to_init_repr() (polars.dataframe method)": [[259, "polars.DataFrame.to_init_repr"]], "to_numpy() (polars.dataframe method)": [[260, "polars.DataFrame.to_numpy"]], "to_pandas() (polars.dataframe method)": [[261, "polars.DataFrame.to_pandas"]], "to_series() (polars.dataframe method)": [[262, "polars.DataFrame.to_series"]], "to_struct() (polars.dataframe method)": [[263, "polars.DataFrame.to_struct"]], "top_k() (polars.dataframe method)": [[264, "polars.DataFrame.top_k"]], "transpose() (polars.dataframe method)": [[265, "polars.DataFrame.transpose"]], "unique() (polars.dataframe method)": [[266, "polars.DataFrame.unique"]], "unnest() (polars.dataframe method)": [[267, "polars.DataFrame.unnest"]], "unstack() (polars.dataframe method)": [[268, "polars.DataFrame.unstack"]], "update() (polars.dataframe method)": [[269, "polars.DataFrame.update"]], "upsample() (polars.dataframe method)": [[270, "polars.DataFrame.upsample"]], "var() (polars.dataframe method)": [[271, "polars.DataFrame.var"]], "vstack() (polars.dataframe method)": [[272, "polars.DataFrame.vstack"]], "width (polars.dataframe property)": [[273, "polars.DataFrame.width"]], "with_columns() (polars.dataframe method)": [[274, "polars.DataFrame.with_columns"]], "with_columns_seq() (polars.dataframe method)": [[275, "polars.DataFrame.with_columns_seq"]], "with_row_count() (polars.dataframe method)": [[276, "polars.DataFrame.with_row_count"]], "with_row_index() (polars.dataframe method)": [[277, "polars.DataFrame.with_row_index"]], "__iter__() (polars.dataframe.group_by.groupby method)": [[278, "polars.dataframe.group_by.GroupBy.__iter__"]], "agg() (polars.dataframe.group_by.groupby method)": [[279, "polars.dataframe.group_by.GroupBy.agg"]], "all() (polars.dataframe.group_by.groupby method)": [[280, "polars.dataframe.group_by.GroupBy.all"]], "apply() (polars.dataframe.group_by.groupby method)": [[281, "polars.dataframe.group_by.GroupBy.apply"]], "count() (polars.dataframe.group_by.groupby method)": [[282, "polars.dataframe.group_by.GroupBy.count"]], "first() (polars.dataframe.group_by.groupby method)": [[283, "polars.dataframe.group_by.GroupBy.first"]], "head() (polars.dataframe.group_by.groupby method)": [[284, "polars.dataframe.group_by.GroupBy.head"]], "last() (polars.dataframe.group_by.groupby method)": [[285, "polars.dataframe.group_by.GroupBy.last"]], "map_groups() (polars.dataframe.group_by.groupby method)": [[286, "polars.dataframe.group_by.GroupBy.map_groups"]], "max() (polars.dataframe.group_by.groupby method)": [[287, "polars.dataframe.group_by.GroupBy.max"]], "mean() (polars.dataframe.group_by.groupby method)": [[288, "polars.dataframe.group_by.GroupBy.mean"]], "median() (polars.dataframe.group_by.groupby method)": [[289, "polars.dataframe.group_by.GroupBy.median"]], "min() (polars.dataframe.group_by.groupby method)": [[290, "polars.dataframe.group_by.GroupBy.min"]], "n_unique() (polars.dataframe.group_by.groupby method)": [[291, "polars.dataframe.group_by.GroupBy.n_unique"]], "quantile() (polars.dataframe.group_by.groupby method)": [[292, "polars.dataframe.group_by.GroupBy.quantile"]], "sum() (polars.dataframe.group_by.groupby method)": [[293, "polars.dataframe.group_by.GroupBy.sum"]], "tail() (polars.dataframe.group_by.groupby method)": [[294, "polars.dataframe.group_by.GroupBy.tail"]], "abs() (polars.expr method)": [[307, "polars.Expr.abs"]], "add() (polars.expr method)": [[308, "polars.Expr.add"]], "agg_groups() (polars.expr method)": [[309, "polars.Expr.agg_groups"]], "alias() (polars.expr method)": [[310, "polars.Expr.alias"]], "all() (polars.expr method)": [[311, "polars.Expr.all"]], "and_() (polars.expr method)": [[312, "polars.Expr.and_"]], "any() (polars.expr method)": [[313, "polars.Expr.any"]], "append() (polars.expr method)": [[314, "polars.Expr.append"]], "apply() (polars.expr method)": [[315, "polars.Expr.apply"]], "approx_n_unique() (polars.expr method)": [[316, "polars.Expr.approx_n_unique"]], "arccos() (polars.expr method)": [[317, "polars.Expr.arccos"]], "arccosh() (polars.expr method)": [[318, "polars.Expr.arccosh"]], "arcsin() (polars.expr method)": [[319, "polars.Expr.arcsin"]], "arcsinh() (polars.expr method)": [[320, "polars.Expr.arcsinh"]], "arctan() (polars.expr method)": [[321, "polars.Expr.arctan"]], "arctanh() (polars.expr method)": [[322, "polars.Expr.arctanh"]], "arg_max() (polars.expr method)": [[323, "polars.Expr.arg_max"]], "arg_min() (polars.expr method)": [[324, "polars.Expr.arg_min"]], "arg_sort() (polars.expr method)": [[325, "polars.Expr.arg_sort"]], "arg_true() (polars.expr method)": [[326, "polars.Expr.arg_true"]], "arg_unique() (polars.expr method)": [[327, "polars.Expr.arg_unique"]], "all() (polars.expr.arr method)": [[328, "polars.Expr.arr.all"]], "any() (polars.expr.arr method)": [[329, "polars.Expr.arr.any"]], "arg_max() (polars.expr.arr method)": [[330, "polars.Expr.arr.arg_max"]], "arg_min() (polars.expr.arr method)": [[331, "polars.Expr.arr.arg_min"]], "contains() (polars.expr.arr method)": [[332, "polars.Expr.arr.contains"]], "count_matches() (polars.expr.arr method)": [[333, "polars.Expr.arr.count_matches"]], "first() (polars.expr.arr method)": [[334, "polars.Expr.arr.first"]], "get() (polars.expr.arr method)": [[335, "polars.Expr.arr.get"]], "join() (polars.expr.arr method)": [[336, "polars.Expr.arr.join"]], "last() (polars.expr.arr method)": [[337, "polars.Expr.arr.last"]], "max() (polars.expr.arr method)": [[338, "polars.Expr.arr.max"]], "min() (polars.expr.arr method)": [[339, "polars.Expr.arr.min"]], "reverse() (polars.expr.arr method)": [[340, "polars.Expr.arr.reverse"]], "sort() (polars.expr.arr method)": [[341, "polars.Expr.arr.sort"]], "sum() (polars.expr.arr method)": [[342, "polars.Expr.arr.sum"]], "to_list() (polars.expr.arr method)": [[343, "polars.Expr.arr.to_list"]], "unique() (polars.expr.arr method)": [[344, "polars.Expr.arr.unique"]], "backward_fill() (polars.expr method)": [[345, "polars.Expr.backward_fill"]], "contains() (polars.expr.bin method)": [[346, "polars.Expr.bin.contains"]], "decode() (polars.expr.bin method)": [[347, "polars.Expr.bin.decode"]], "encode() (polars.expr.bin method)": [[348, "polars.Expr.bin.encode"]], "ends_with() (polars.expr.bin method)": [[349, "polars.Expr.bin.ends_with"]], "starts_with() (polars.expr.bin method)": [[350, "polars.Expr.bin.starts_with"]], "bottom_k() (polars.expr method)": [[351, "polars.Expr.bottom_k"]], "cast() (polars.expr method)": [[352, "polars.Expr.cast"]], "get_categories() (polars.expr.cat method)": [[353, "polars.Expr.cat.get_categories"]], "set_ordering() (polars.expr.cat method)": [[354, "polars.Expr.cat.set_ordering"]], "cbrt() (polars.expr method)": [[355, "polars.Expr.cbrt"]], "ceil() (polars.expr method)": [[356, "polars.Expr.ceil"]], "clip() (polars.expr method)": [[357, "polars.Expr.clip"]], "clip_max() (polars.expr method)": [[358, "polars.Expr.clip_max"]], "clip_min() (polars.expr method)": [[359, "polars.Expr.clip_min"]], "cos() (polars.expr method)": [[360, "polars.Expr.cos"]], "cosh() (polars.expr method)": [[361, "polars.Expr.cosh"]], "cot() (polars.expr method)": [[362, "polars.Expr.cot"]], "count() (polars.expr method)": [[363, "polars.Expr.count"]], "cum_count() (polars.expr method)": [[364, "polars.Expr.cum_count"]], "cum_max() (polars.expr method)": [[365, "polars.Expr.cum_max"]], "cum_min() (polars.expr method)": [[366, "polars.Expr.cum_min"]], "cum_prod() (polars.expr method)": [[367, "polars.Expr.cum_prod"]], "cum_sum() (polars.expr method)": [[368, "polars.Expr.cum_sum"]], "cumcount() (polars.expr method)": [[369, "polars.Expr.cumcount"]], "cummax() (polars.expr method)": [[370, "polars.Expr.cummax"]], "cummin() (polars.expr method)": [[371, "polars.Expr.cummin"]], "cumprod() (polars.expr method)": [[372, "polars.Expr.cumprod"]], "cumsum() (polars.expr method)": [[373, "polars.Expr.cumsum"]], "cumulative_eval() (polars.expr method)": [[374, "polars.Expr.cumulative_eval"]], "cut() (polars.expr method)": [[375, "polars.Expr.cut"]], "degrees() (polars.expr method)": [[376, "polars.Expr.degrees"]], "diff() (polars.expr method)": [[377, "polars.Expr.diff"]], "dot() (polars.expr method)": [[378, "polars.Expr.dot"]], "drop_nans() (polars.expr method)": [[379, "polars.Expr.drop_nans"]], "drop_nulls() (polars.expr method)": [[380, "polars.Expr.drop_nulls"]], "base_utc_offset() (polars.expr.dt method)": [[381, "polars.Expr.dt.base_utc_offset"]], "cast_time_unit() (polars.expr.dt method)": [[382, "polars.Expr.dt.cast_time_unit"]], "combine() (polars.expr.dt method)": [[383, "polars.Expr.dt.combine"]], "convert_time_zone() (polars.expr.dt method)": [[384, "polars.Expr.dt.convert_time_zone"]], "date() (polars.expr.dt method)": [[385, "polars.Expr.dt.date"]], "datetime() (polars.expr.dt method)": [[386, "polars.Expr.dt.datetime"]], "day() (polars.expr.dt method)": [[387, "polars.Expr.dt.day"]], "days() (polars.expr.dt method)": [[388, "polars.Expr.dt.days"]], "dst_offset() (polars.expr.dt method)": [[389, "polars.Expr.dt.dst_offset"]], "epoch() (polars.expr.dt method)": [[390, "polars.Expr.dt.epoch"]], "hour() (polars.expr.dt method)": [[391, "polars.Expr.dt.hour"]], "hours() (polars.expr.dt method)": [[392, "polars.Expr.dt.hours"]], "is_leap_year() (polars.expr.dt method)": [[393, "polars.Expr.dt.is_leap_year"]], "iso_year() (polars.expr.dt method)": [[394, "polars.Expr.dt.iso_year"]], "microsecond() (polars.expr.dt method)": [[395, "polars.Expr.dt.microsecond"]], "microseconds() (polars.expr.dt method)": [[396, "polars.Expr.dt.microseconds"]], "millisecond() (polars.expr.dt method)": [[397, "polars.Expr.dt.millisecond"]], "milliseconds() (polars.expr.dt method)": [[398, "polars.Expr.dt.milliseconds"]], "minute() (polars.expr.dt method)": [[399, "polars.Expr.dt.minute"]], "minutes() (polars.expr.dt method)": [[400, "polars.Expr.dt.minutes"]], "month() (polars.expr.dt method)": [[401, "polars.Expr.dt.month"]], "month_end() (polars.expr.dt method)": [[402, "polars.Expr.dt.month_end"]], "month_start() (polars.expr.dt method)": [[403, "polars.Expr.dt.month_start"]], "nanosecond() (polars.expr.dt method)": [[404, "polars.Expr.dt.nanosecond"]], "nanoseconds() (polars.expr.dt method)": [[405, "polars.Expr.dt.nanoseconds"]], "offset_by() (polars.expr.dt method)": [[406, "polars.Expr.dt.offset_by"]], "ordinal_day() (polars.expr.dt method)": [[407, "polars.Expr.dt.ordinal_day"]], "quarter() (polars.expr.dt method)": [[408, "polars.Expr.dt.quarter"]], "replace_time_zone() (polars.expr.dt method)": [[409, "polars.Expr.dt.replace_time_zone"]], "round() (polars.expr.dt method)": [[410, "polars.Expr.dt.round"]], "second() (polars.expr.dt method)": [[411, "polars.Expr.dt.second"]], "seconds() (polars.expr.dt method)": [[412, "polars.Expr.dt.seconds"]], "strftime() (polars.expr.dt method)": [[413, "polars.Expr.dt.strftime"]], "time() (polars.expr.dt method)": [[414, "polars.Expr.dt.time"]], "timestamp() (polars.expr.dt method)": [[415, "polars.Expr.dt.timestamp"]], "to_string() (polars.expr.dt method)": [[416, "polars.Expr.dt.to_string"]], "total_days() (polars.expr.dt method)": [[417, "polars.Expr.dt.total_days"]], "total_hours() (polars.expr.dt method)": [[418, "polars.Expr.dt.total_hours"]], "total_microseconds() (polars.expr.dt method)": [[419, "polars.Expr.dt.total_microseconds"]], "total_milliseconds() (polars.expr.dt method)": [[420, "polars.Expr.dt.total_milliseconds"]], "total_minutes() (polars.expr.dt method)": [[421, "polars.Expr.dt.total_minutes"]], "total_nanoseconds() (polars.expr.dt method)": [[422, "polars.Expr.dt.total_nanoseconds"]], "total_seconds() (polars.expr.dt method)": [[423, "polars.Expr.dt.total_seconds"]], "truncate() (polars.expr.dt method)": [[424, "polars.Expr.dt.truncate"]], "week() (polars.expr.dt method)": [[425, "polars.Expr.dt.week"]], "weekday() (polars.expr.dt method)": [[426, "polars.Expr.dt.weekday"]], "with_time_unit() (polars.expr.dt method)": [[427, "polars.Expr.dt.with_time_unit"]], "year() (polars.expr.dt method)": [[428, "polars.Expr.dt.year"]], "entropy() (polars.expr method)": [[429, "polars.Expr.entropy"]], "eq() (polars.expr method)": [[430, "polars.Expr.eq"]], "eq_missing() (polars.expr method)": [[431, "polars.Expr.eq_missing"]], "ewm_mean() (polars.expr method)": [[432, "polars.Expr.ewm_mean"]], "ewm_std() (polars.expr method)": [[433, "polars.Expr.ewm_std"]], "ewm_var() (polars.expr method)": [[434, "polars.Expr.ewm_var"]], "exclude() (polars.expr method)": [[435, "polars.Expr.exclude"]], "exp() (polars.expr method)": [[436, "polars.Expr.exp"]], "explode() (polars.expr method)": [[437, "polars.Expr.explode"]], "extend_constant() (polars.expr method)": [[438, "polars.Expr.extend_constant"]], "fill_nan() (polars.expr method)": [[439, "polars.Expr.fill_nan"]], "fill_null() (polars.expr method)": [[440, "polars.Expr.fill_null"]], "filter() (polars.expr method)": [[441, "polars.Expr.filter"]], "first() (polars.expr method)": [[442, "polars.Expr.first"]], "flatten() (polars.expr method)": [[443, "polars.Expr.flatten"]], "floor() (polars.expr method)": [[444, "polars.Expr.floor"]], "floordiv() (polars.expr method)": [[445, "polars.Expr.floordiv"]], "forward_fill() (polars.expr method)": [[446, "polars.Expr.forward_fill"]], "from_json() (polars.expr class method)": [[447, "polars.Expr.from_json"]], "gather() (polars.expr method)": [[448, "polars.Expr.gather"]], "gather_every() (polars.expr method)": [[449, "polars.Expr.gather_every"]], "ge() (polars.expr method)": [[450, "polars.Expr.ge"]], "get() (polars.expr method)": [[451, "polars.Expr.get"]], "gt() (polars.expr method)": [[452, "polars.Expr.gt"]], "hash() (polars.expr method)": [[453, "polars.Expr.hash"]], "head() (polars.expr method)": [[454, "polars.Expr.head"]], "hist() (polars.expr method)": [[455, "polars.Expr.hist"]], "implode() (polars.expr method)": [[456, "polars.Expr.implode"]], "inspect() (polars.expr method)": [[457, "polars.Expr.inspect"]], "interpolate() (polars.expr method)": [[458, "polars.Expr.interpolate"]], "is_between() (polars.expr method)": [[459, "polars.Expr.is_between"]], "is_duplicated() (polars.expr method)": [[460, "polars.Expr.is_duplicated"]], "is_finite() (polars.expr method)": [[461, "polars.Expr.is_finite"]], "is_first() (polars.expr method)": [[462, "polars.Expr.is_first"]], "is_first_distinct() (polars.expr method)": [[463, "polars.Expr.is_first_distinct"]], "is_in() (polars.expr method)": [[464, "polars.Expr.is_in"]], "is_infinite() (polars.expr method)": [[465, "polars.Expr.is_infinite"]], "is_last() (polars.expr method)": [[466, "polars.Expr.is_last"]], "is_last_distinct() (polars.expr method)": [[467, "polars.Expr.is_last_distinct"]], "is_nan() (polars.expr method)": [[468, "polars.Expr.is_nan"]], "is_not() (polars.expr method)": [[469, "polars.Expr.is_not"]], "is_not_nan() (polars.expr method)": [[470, "polars.Expr.is_not_nan"]], "is_not_null() (polars.expr method)": [[471, "polars.Expr.is_not_null"]], "is_null() (polars.expr method)": [[472, "polars.Expr.is_null"]], "is_unique() (polars.expr method)": [[473, "polars.Expr.is_unique"]], "keep_name() (polars.expr method)": [[474, "polars.Expr.keep_name"]], "kurtosis() (polars.expr method)": [[475, "polars.Expr.kurtosis"]], "last() (polars.expr method)": [[476, "polars.Expr.last"]], "le() (polars.expr method)": [[477, "polars.Expr.le"]], "len() (polars.expr method)": [[478, "polars.Expr.len"]], "limit() (polars.expr method)": [[479, "polars.Expr.limit"]], "all() (polars.expr.list method)": [[480, "polars.Expr.list.all"]], "any() (polars.expr.list method)": [[481, "polars.Expr.list.any"]], "arg_max() (polars.expr.list method)": [[482, "polars.Expr.list.arg_max"]], "arg_min() (polars.expr.list method)": [[483, "polars.Expr.list.arg_min"]], "concat() (polars.expr.list method)": [[484, "polars.Expr.list.concat"]], "contains() (polars.expr.list method)": [[485, "polars.Expr.list.contains"]], "count_match() (polars.expr.list method)": [[486, "polars.Expr.list.count_match"]], "count_matches() (polars.expr.list method)": [[487, "polars.Expr.list.count_matches"]], "diff() (polars.expr.list method)": [[488, "polars.Expr.list.diff"]], "drop_nulls() (polars.expr.list method)": [[489, "polars.Expr.list.drop_nulls"]], "eval() (polars.expr.list method)": [[490, "polars.Expr.list.eval"]], "explode() (polars.expr.list method)": [[491, "polars.Expr.list.explode"]], "first() (polars.expr.list method)": [[492, "polars.Expr.list.first"]], "gather() (polars.expr.list method)": [[493, "polars.Expr.list.gather"]], "get() (polars.expr.list method)": [[494, "polars.Expr.list.get"]], "head() (polars.expr.list method)": [[495, "polars.Expr.list.head"]], "join() (polars.expr.list method)": [[496, "polars.Expr.list.join"]], "last() (polars.expr.list method)": [[497, "polars.Expr.list.last"]], "len() (polars.expr.list method)": [[498, "polars.Expr.list.len"]], "lengths() (polars.expr.list method)": [[499, "polars.Expr.list.lengths"]], "max() (polars.expr.list method)": [[500, "polars.Expr.list.max"]], "mean() (polars.expr.list method)": [[501, "polars.Expr.list.mean"]], "min() (polars.expr.list method)": [[502, "polars.Expr.list.min"]], "reverse() (polars.expr.list method)": [[503, "polars.Expr.list.reverse"]], "sample() (polars.expr.list method)": [[504, "polars.Expr.list.sample"]], "set_difference() (polars.expr.list method)": [[505, "polars.Expr.list.set_difference"]], "set_intersection() (polars.expr.list method)": [[506, "polars.Expr.list.set_intersection"]], "set_symmetric_difference() (polars.expr.list method)": [[507, "polars.Expr.list.set_symmetric_difference"]], "set_union() (polars.expr.list method)": [[508, "polars.Expr.list.set_union"]], "shift() (polars.expr.list method)": [[509, "polars.Expr.list.shift"]], "slice() (polars.expr.list method)": [[510, "polars.Expr.list.slice"]], "sort() (polars.expr.list method)": [[511, "polars.Expr.list.sort"]], "sum() (polars.expr.list method)": [[512, "polars.Expr.list.sum"]], "tail() (polars.expr.list method)": [[513, "polars.Expr.list.tail"]], "take() (polars.expr.list method)": [[514, "polars.Expr.list.take"]], "to_array() (polars.expr.list method)": [[515, "polars.Expr.list.to_array"]], "to_struct() (polars.expr.list method)": [[516, "polars.Expr.list.to_struct"]], "unique() (polars.expr.list method)": [[517, "polars.Expr.list.unique"]], "log() (polars.expr method)": [[518, "polars.Expr.log"]], "log10() (polars.expr method)": [[519, "polars.Expr.log10"]], "log1p() (polars.expr method)": [[520, "polars.Expr.log1p"]], "lower_bound() (polars.expr method)": [[521, "polars.Expr.lower_bound"]], "lt() (polars.expr method)": [[522, "polars.Expr.lt"]], "map() (polars.expr method)": [[523, "polars.Expr.map"]], "map_alias() (polars.expr method)": [[524, "polars.Expr.map_alias"]], "map_batches() (polars.expr method)": [[525, "polars.Expr.map_batches"]], "map_dict() (polars.expr method)": [[526, "polars.Expr.map_dict"]], "map_elements() (polars.expr method)": [[527, "polars.Expr.map_elements"]], "max() (polars.expr method)": [[528, "polars.Expr.max"]], "mean() (polars.expr method)": [[529, "polars.Expr.mean"]], "median() (polars.expr method)": [[530, "polars.Expr.median"]], "eq() (polars.expr.meta method)": [[531, "polars.Expr.meta.eq"]], "has_multiple_outputs() (polars.expr.meta method)": [[532, "polars.Expr.meta.has_multiple_outputs"]], "is_regex_projection() (polars.expr.meta method)": [[533, "polars.Expr.meta.is_regex_projection"]], "ne() (polars.expr.meta method)": [[534, "polars.Expr.meta.ne"]], "output_name() (polars.expr.meta method)": [[535, "polars.Expr.meta.output_name"]], "pop() (polars.expr.meta method)": [[536, "polars.Expr.meta.pop"]], "root_names() (polars.expr.meta method)": [[537, "polars.Expr.meta.root_names"]], "tree_format() (polars.expr.meta method)": [[538, "polars.Expr.meta.tree_format"]], "undo_aliases() (polars.expr.meta method)": [[539, "polars.Expr.meta.undo_aliases"]], "write_json() (polars.expr.meta method)": [[540, "polars.Expr.meta.write_json"]], "min() (polars.expr method)": [[541, "polars.Expr.min"]], "mod() (polars.expr method)": [[542, "polars.Expr.mod"]], "mode() (polars.expr method)": [[543, "polars.Expr.mode"]], "mul() (polars.expr method)": [[544, "polars.Expr.mul"]], "n_unique() (polars.expr method)": [[545, "polars.Expr.n_unique"]], "keep() (polars.expr.name method)": [[546, "polars.Expr.name.keep"]], "map() (polars.expr.name method)": [[547, "polars.Expr.name.map"]], "prefix() (polars.expr.name method)": [[548, "polars.Expr.name.prefix"]], "suffix() (polars.expr.name method)": [[549, "polars.Expr.name.suffix"]], "to_lowercase() (polars.expr.name method)": [[550, "polars.Expr.name.to_lowercase"]], "to_uppercase() (polars.expr.name method)": [[551, "polars.Expr.name.to_uppercase"]], "nan_max() (polars.expr method)": [[552, "polars.Expr.nan_max"]], "nan_min() (polars.expr method)": [[553, "polars.Expr.nan_min"]], "ne() (polars.expr method)": [[554, "polars.Expr.ne"]], "ne_missing() (polars.expr method)": [[555, "polars.Expr.ne_missing"]], "not_() (polars.expr method)": [[556, "polars.Expr.not_"]], "null_count() (polars.expr method)": [[557, "polars.Expr.null_count"]], "or_() (polars.expr method)": [[558, "polars.Expr.or_"]], "over() (polars.expr method)": [[559, "polars.Expr.over"]], "pct_change() (polars.expr method)": [[560, "polars.Expr.pct_change"]], "peak_max() (polars.expr method)": [[561, "polars.Expr.peak_max"]], "peak_min() (polars.expr method)": [[562, "polars.Expr.peak_min"]], "pipe() (polars.expr method)": [[563, "polars.Expr.pipe"]], "pow() (polars.expr method)": [[564, "polars.Expr.pow"]], "prefix() (polars.expr method)": [[565, "polars.Expr.prefix"]], "product() (polars.expr method)": [[566, "polars.Expr.product"]], "qcut() (polars.expr method)": [[567, "polars.Expr.qcut"]], "quantile() (polars.expr method)": [[568, "polars.Expr.quantile"]], "radians() (polars.expr method)": [[569, "polars.Expr.radians"]], "rank() (polars.expr method)": [[570, "polars.Expr.rank"]], "rechunk() (polars.expr method)": [[571, "polars.Expr.rechunk"]], "reinterpret() (polars.expr method)": [[572, "polars.Expr.reinterpret"]], "repeat_by() (polars.expr method)": [[573, "polars.Expr.repeat_by"]], "replace() (polars.expr method)": [[574, "polars.Expr.replace"]], "reshape() (polars.expr method)": [[575, "polars.Expr.reshape"]], "reverse() (polars.expr method)": [[576, "polars.Expr.reverse"]], "rle() (polars.expr method)": [[577, "polars.Expr.rle"]], "rle_id() (polars.expr method)": [[578, "polars.Expr.rle_id"]], "rolling() (polars.expr method)": [[579, "polars.Expr.rolling"]], "rolling_apply() (polars.expr method)": [[580, "polars.Expr.rolling_apply"]], "rolling_map() (polars.expr method)": [[581, "polars.Expr.rolling_map"]], "rolling_max() (polars.expr method)": [[582, "polars.Expr.rolling_max"]], "rolling_mean() (polars.expr method)": [[583, "polars.Expr.rolling_mean"]], "rolling_median() (polars.expr method)": [[584, "polars.Expr.rolling_median"]], "rolling_min() (polars.expr method)": [[585, "polars.Expr.rolling_min"]], "rolling_quantile() (polars.expr method)": [[586, "polars.Expr.rolling_quantile"]], "rolling_skew() (polars.expr method)": [[587, "polars.Expr.rolling_skew"]], "rolling_std() (polars.expr method)": [[588, "polars.Expr.rolling_std"]], "rolling_sum() (polars.expr method)": [[589, "polars.Expr.rolling_sum"]], "rolling_var() (polars.expr method)": [[590, "polars.Expr.rolling_var"]], "round() (polars.expr method)": [[591, "polars.Expr.round"]], "round_sig_figs() (polars.expr method)": [[592, "polars.Expr.round_sig_figs"]], "sample() (polars.expr method)": [[593, "polars.Expr.sample"]], "search_sorted() (polars.expr method)": [[594, "polars.Expr.search_sorted"]], "set_sorted() (polars.expr method)": [[595, "polars.Expr.set_sorted"]], "shift() (polars.expr method)": [[596, "polars.Expr.shift"]], "shift_and_fill() (polars.expr method)": [[597, "polars.Expr.shift_and_fill"]], "shrink_dtype() (polars.expr method)": [[598, "polars.Expr.shrink_dtype"]], "shuffle() (polars.expr method)": [[599, "polars.Expr.shuffle"]], "sign() (polars.expr method)": [[600, "polars.Expr.sign"]], "sin() (polars.expr method)": [[601, "polars.Expr.sin"]], "sinh() (polars.expr method)": [[602, "polars.Expr.sinh"]], "skew() (polars.expr method)": [[603, "polars.Expr.skew"]], "slice() (polars.expr method)": [[604, "polars.Expr.slice"]], "sort() (polars.expr method)": [[605, "polars.Expr.sort"]], "sort_by() (polars.expr method)": [[606, "polars.Expr.sort_by"]], "sqrt() (polars.expr method)": [[607, "polars.Expr.sqrt"]], "std() (polars.expr method)": [[608, "polars.Expr.std"]], "concat() (polars.expr.str method)": [[609, "polars.Expr.str.concat"]], "contains() (polars.expr.str method)": [[610, "polars.Expr.str.contains"]], "contains_any() (polars.expr.str method)": [[611, "polars.Expr.str.contains_any"]], "count_match() (polars.expr.str method)": [[612, "polars.Expr.str.count_match"]], "count_matches() (polars.expr.str method)": [[613, "polars.Expr.str.count_matches"]], "decode() (polars.expr.str method)": [[614, "polars.Expr.str.decode"]], "encode() (polars.expr.str method)": [[615, "polars.Expr.str.encode"]], "ends_with() (polars.expr.str method)": [[616, "polars.Expr.str.ends_with"]], "explode() (polars.expr.str method)": [[617, "polars.Expr.str.explode"]], "extract() (polars.expr.str method)": [[618, "polars.Expr.str.extract"]], "extract_all() (polars.expr.str method)": [[619, "polars.Expr.str.extract_all"]], "extract_groups() (polars.expr.str method)": [[620, "polars.Expr.str.extract_groups"]], "find() (polars.expr.str method)": [[621, "polars.Expr.str.find"]], "json_decode() (polars.expr.str method)": [[622, "polars.Expr.str.json_decode"]], "json_extract() (polars.expr.str method)": [[623, "polars.Expr.str.json_extract"]], "json_path_match() (polars.expr.str method)": [[624, "polars.Expr.str.json_path_match"]], "len_bytes() (polars.expr.str method)": [[625, "polars.Expr.str.len_bytes"]], "len_chars() (polars.expr.str method)": [[626, "polars.Expr.str.len_chars"]], "lengths() (polars.expr.str method)": [[627, "polars.Expr.str.lengths"]], "ljust() (polars.expr.str method)": [[628, "polars.Expr.str.ljust"]], "lstrip() (polars.expr.str method)": [[629, "polars.Expr.str.lstrip"]], "n_chars() (polars.expr.str method)": [[630, "polars.Expr.str.n_chars"]], "pad_end() (polars.expr.str method)": [[631, "polars.Expr.str.pad_end"]], "pad_start() (polars.expr.str method)": [[632, "polars.Expr.str.pad_start"]], "parse_int() (polars.expr.str method)": [[633, "polars.Expr.str.parse_int"]], "replace() (polars.expr.str method)": [[634, "polars.Expr.str.replace"]], "replace_all() (polars.expr.str method)": [[635, "polars.Expr.str.replace_all"]], "replace_many() (polars.expr.str method)": [[636, "polars.Expr.str.replace_many"]], "reverse() (polars.expr.str method)": [[637, "polars.Expr.str.reverse"]], "rjust() (polars.expr.str method)": [[638, "polars.Expr.str.rjust"]], "rstrip() (polars.expr.str method)": [[639, "polars.Expr.str.rstrip"]], "slice() (polars.expr.str method)": [[640, "polars.Expr.str.slice"]], "split() (polars.expr.str method)": [[641, "polars.Expr.str.split"]], "split_exact() (polars.expr.str method)": [[642, "polars.Expr.str.split_exact"]], "splitn() (polars.expr.str method)": [[643, "polars.Expr.str.splitn"]], "starts_with() (polars.expr.str method)": [[644, "polars.Expr.str.starts_with"]], "strip() (polars.expr.str method)": [[645, "polars.Expr.str.strip"]], "strip_chars() (polars.expr.str method)": [[646, "polars.Expr.str.strip_chars"]], "strip_chars_end() (polars.expr.str method)": [[647, "polars.Expr.str.strip_chars_end"]], "strip_chars_start() (polars.expr.str method)": [[648, "polars.Expr.str.strip_chars_start"]], "strip_prefix() (polars.expr.str method)": [[649, "polars.Expr.str.strip_prefix"]], "strip_suffix() (polars.expr.str method)": [[650, "polars.Expr.str.strip_suffix"]], "strptime() (polars.expr.str method)": [[651, "polars.Expr.str.strptime"]], "to_date() (polars.expr.str method)": [[652, "polars.Expr.str.to_date"]], "to_datetime() (polars.expr.str method)": [[653, "polars.Expr.str.to_datetime"]], "to_decimal() (polars.expr.str method)": [[654, "polars.Expr.str.to_decimal"]], "to_integer() (polars.expr.str method)": [[655, "polars.Expr.str.to_integer"]], "to_lowercase() (polars.expr.str method)": [[656, "polars.Expr.str.to_lowercase"]], "to_time() (polars.expr.str method)": [[657, "polars.Expr.str.to_time"]], "to_titlecase() (polars.expr.str method)": [[658, "polars.Expr.str.to_titlecase"]], "to_uppercase() (polars.expr.str method)": [[659, "polars.Expr.str.to_uppercase"]], "zfill() (polars.expr.str method)": [[660, "polars.Expr.str.zfill"]], "field() (polars.expr.struct method)": [[661, "polars.Expr.struct.field"]], "json_encode() (polars.expr.struct method)": [[662, "polars.Expr.struct.json_encode"]], "rename_fields() (polars.expr.struct method)": [[663, "polars.Expr.struct.rename_fields"]], "sub() (polars.expr method)": [[664, "polars.Expr.sub"]], "suffix() (polars.expr method)": [[665, "polars.Expr.suffix"]], "sum() (polars.expr method)": [[666, "polars.Expr.sum"]], "tail() (polars.expr method)": [[667, "polars.Expr.tail"]], "take() (polars.expr method)": [[668, "polars.Expr.take"]], "take_every() (polars.expr method)": [[669, "polars.Expr.take_every"]], "tan() (polars.expr method)": [[670, "polars.Expr.tan"]], "tanh() (polars.expr method)": [[671, "polars.Expr.tanh"]], "to_physical() (polars.expr method)": [[672, "polars.Expr.to_physical"]], "top_k() (polars.expr method)": [[673, "polars.Expr.top_k"]], "truediv() (polars.expr method)": [[674, "polars.Expr.truediv"]], "unique() (polars.expr method)": [[675, "polars.Expr.unique"]], "unique_counts() (polars.expr method)": [[676, "polars.Expr.unique_counts"]], "upper_bound() (polars.expr method)": [[677, "polars.Expr.upper_bound"]], "value_counts() (polars.expr method)": [[678, "polars.Expr.value_counts"]], "var() (polars.expr method)": [[679, "polars.Expr.var"]], "where() (polars.expr method)": [[680, "polars.Expr.where"]], "xor() (polars.expr method)": [[681, "polars.Expr.xor"]], "all() (in module polars)": [[682, "polars.all"]], "all_horizontal() (in module polars)": [[683, "polars.all_horizontal"]], "any() (in module polars)": [[684, "polars.any"]], "any_horizontal() (in module polars)": [[685, "polars.any_horizontal"]], "apply() (in module polars)": [[686, "polars.apply"]], "approx_n_unique() (in module polars)": [[687, "polars.approx_n_unique"]], "arange() (in module polars)": [[688, "polars.arange"]], "arctan2() (in module polars)": [[689, "polars.arctan2"]], "arctan2d() (in module polars)": [[690, "polars.arctan2d"]], "arg_sort_by() (in module polars)": [[691, "polars.arg_sort_by"]], "arg_where() (in module polars)": [[692, "polars.arg_where"]], "coalesce() (in module polars)": [[693, "polars.coalesce"]], "concat_list() (in module polars)": [[694, "polars.concat_list"]], "concat_str() (in module polars)": [[695, "polars.concat_str"]], "corr() (in module polars)": [[696, "polars.corr"]], "count() (in module polars)": [[697, "polars.count"]], "cov() (in module polars)": [[698, "polars.cov"]], "cum_count() (in module polars)": [[699, "polars.cum_count"]], "cum_fold() (in module polars)": [[700, "polars.cum_fold"]], "cum_reduce() (in module polars)": [[701, "polars.cum_reduce"]], "cum_sum() (in module polars)": [[702, "polars.cum_sum"]], "cum_sum_horizontal() (in module polars)": [[703, "polars.cum_sum_horizontal"]], "cumfold() (in module polars)": [[704, "polars.cumfold"]], "cumreduce() (in module polars)": [[705, "polars.cumreduce"]], "cumsum() (in module polars)": [[706, "polars.cumsum"]], "cumsum_horizontal() (in module polars)": [[707, "polars.cumsum_horizontal"]], "date() (in module polars)": [[708, "polars.date"]], "date_range() (in module polars)": [[709, "polars.date_range"]], "date_ranges() (in module polars)": [[710, "polars.date_ranges"]], "datetime() (in module polars)": [[711, "polars.datetime"]], "datetime_range() (in module polars)": [[712, "polars.datetime_range"]], "datetime_ranges() (in module polars)": [[713, "polars.datetime_ranges"]], "duration() (in module polars)": [[714, "polars.duration"]], "element() (in module polars)": [[715, "polars.element"]], "exclude() (in module polars)": [[716, "polars.exclude"]], "first() (in module polars)": [[717, "polars.first"]], "fold() (in module polars)": [[718, "polars.fold"]], "format() (in module polars)": [[719, "polars.format"]], "from_epoch() (in module polars)": [[720, "polars.from_epoch"]], "groups() (in module polars)": [[721, "polars.groups"]], "head() (in module polars)": [[722, "polars.head"]], "implode() (in module polars)": [[723, "polars.implode"]], "int_range() (in module polars)": [[724, "polars.int_range"]], "int_ranges() (in module polars)": [[725, "polars.int_ranges"]], "last() (in module polars)": [[726, "polars.last"]], "lit() (in module polars)": [[727, "polars.lit"]], "map() (in module polars)": [[728, "polars.map"]], "map_batches() (in module polars)": [[729, "polars.map_batches"]], "map_groups() (in module polars)": [[730, "polars.map_groups"]], "max() (in module polars)": [[731, "polars.max"]], "max_horizontal() (in module polars)": [[732, "polars.max_horizontal"]], "mean() (in module polars)": [[733, "polars.mean"]], "median() (in module polars)": [[734, "polars.median"]], "min() (in module polars)": [[735, "polars.min"]], "min_horizontal() (in module polars)": [[736, "polars.min_horizontal"]], "n_unique() (in module polars)": [[737, "polars.n_unique"]], "ones() (in module polars)": [[738, "polars.ones"]], "quantile() (in module polars)": [[739, "polars.quantile"]], "reduce() (in module polars)": [[740, "polars.reduce"]], "repeat() (in module polars)": [[741, "polars.repeat"]], "rolling_corr() (in module polars)": [[742, "polars.rolling_corr"]], "rolling_cov() (in module polars)": [[743, "polars.rolling_cov"]], "select() (in module polars)": [[744, "polars.select"]], "sql_expr() (in module polars)": [[745, "polars.sql_expr"]], "std() (in module polars)": [[746, "polars.std"]], "struct() (in module polars)": [[747, "polars.struct"]], "sum() (in module polars)": [[748, "polars.sum"]], "sum_horizontal() (in module polars)": [[749, "polars.sum_horizontal"]], "tail() (in module polars)": [[750, "polars.tail"]], "time() (in module polars)": [[751, "polars.time"]], "time_range() (in module polars)": [[752, "polars.time_range"]], "time_ranges() (in module polars)": [[753, "polars.time_ranges"]], "var() (in module polars)": [[754, "polars.var"]], "when() (in module polars)": [[755, "polars.when"]], "zeros() (in module polars)": [[756, "polars.zeros"]], "approx_n_unique() (polars.lazyframe method)": [[780, "polars.LazyFrame.approx_n_unique"]], "bottom_k() (polars.lazyframe method)": [[781, "polars.LazyFrame.bottom_k"]], "cache() (polars.lazyframe method)": [[782, "polars.LazyFrame.cache"]], "cast() (polars.lazyframe method)": [[783, "polars.LazyFrame.cast"]], "clear() (polars.lazyframe method)": [[784, "polars.LazyFrame.clear"]], "clone() (polars.lazyframe method)": [[785, "polars.LazyFrame.clone"]], "collect() (polars.lazyframe method)": [[786, "polars.LazyFrame.collect"]], "collect_async() (polars.lazyframe method)": [[787, "polars.LazyFrame.collect_async"]], "columns (polars.lazyframe property)": [[788, "polars.LazyFrame.columns"]], "count() (polars.lazyframe method)": [[789, "polars.LazyFrame.count"]], "deserialize() (polars.lazyframe class method)": [[790, "polars.LazyFrame.deserialize"]], "drop() (polars.lazyframe method)": [[791, "polars.LazyFrame.drop"]], "drop_nulls() (polars.lazyframe method)": [[792, "polars.LazyFrame.drop_nulls"]], "dtypes (polars.lazyframe property)": [[793, "polars.LazyFrame.dtypes"]], "explain() (polars.lazyframe method)": [[794, "polars.LazyFrame.explain"]], "explode() (polars.lazyframe method)": [[795, "polars.LazyFrame.explode"]], "fetch() (polars.lazyframe method)": [[796, "polars.LazyFrame.fetch"]], "fill_nan() (polars.lazyframe method)": [[797, "polars.LazyFrame.fill_nan"]], "fill_null() (polars.lazyframe method)": [[798, "polars.LazyFrame.fill_null"]], "filter() (polars.lazyframe method)": [[799, "polars.LazyFrame.filter"]], "first() (polars.lazyframe method)": [[800, "polars.LazyFrame.first"]], "gather_every() (polars.lazyframe method)": [[801, "polars.LazyFrame.gather_every"]], "group_by() (polars.lazyframe method)": [[802, "polars.LazyFrame.group_by"]], "group_by_dynamic() (polars.lazyframe method)": [[803, "polars.LazyFrame.group_by_dynamic"]], "group_by_rolling() (polars.lazyframe method)": [[804, "polars.LazyFrame.group_by_rolling"]], "groupby() (polars.lazyframe method)": [[805, "polars.LazyFrame.groupby"]], "groupby_dynamic() (polars.lazyframe method)": [[806, "polars.LazyFrame.groupby_dynamic"]], "groupby_rolling() (polars.lazyframe method)": [[807, "polars.LazyFrame.groupby_rolling"]], "head() (polars.lazyframe method)": [[808, "polars.LazyFrame.head"]], "inspect() (polars.lazyframe method)": [[809, "polars.LazyFrame.inspect"]], "interpolate() (polars.lazyframe method)": [[810, "polars.LazyFrame.interpolate"]], "join() (polars.lazyframe method)": [[811, "polars.LazyFrame.join"]], "join_asof() (polars.lazyframe method)": [[812, "polars.LazyFrame.join_asof"]], "last() (polars.lazyframe method)": [[813, "polars.LazyFrame.last"]], "lazy() (polars.lazyframe method)": [[814, "polars.LazyFrame.lazy"]], "limit() (polars.lazyframe method)": [[815, "polars.LazyFrame.limit"]], "map() (polars.lazyframe method)": [[816, "polars.LazyFrame.map"]], "map_batches() (polars.lazyframe method)": [[817, "polars.LazyFrame.map_batches"]], "max() (polars.lazyframe method)": [[818, "polars.LazyFrame.max"]], "mean() (polars.lazyframe method)": [[819, "polars.LazyFrame.mean"]], "median() (polars.lazyframe method)": [[820, "polars.LazyFrame.median"]], "melt() (polars.lazyframe method)": [[821, "polars.LazyFrame.melt"]], "merge_sorted() (polars.lazyframe method)": [[822, "polars.LazyFrame.merge_sorted"]], "min() (polars.lazyframe method)": [[823, "polars.LazyFrame.min"]], "null_count() (polars.lazyframe method)": [[824, "polars.LazyFrame.null_count"]], "pipe() (polars.lazyframe method)": [[825, "polars.LazyFrame.pipe"]], "profile() (polars.lazyframe method)": [[826, "polars.LazyFrame.profile"]], "quantile() (polars.lazyframe method)": [[827, "polars.LazyFrame.quantile"]], "rename() (polars.lazyframe method)": [[828, "polars.LazyFrame.rename"]], "reverse() (polars.lazyframe method)": [[829, "polars.LazyFrame.reverse"]], "rolling() (polars.lazyframe method)": [[830, "polars.LazyFrame.rolling"]], "schema (polars.lazyframe property)": [[831, "polars.LazyFrame.schema"]], "select() (polars.lazyframe method)": [[832, "polars.LazyFrame.select"]], "select_seq() (polars.lazyframe method)": [[833, "polars.LazyFrame.select_seq"]], "serialize() (polars.lazyframe method)": [[834, "polars.LazyFrame.serialize"]], "set_sorted() (polars.lazyframe method)": [[835, "polars.LazyFrame.set_sorted"]], "shift() (polars.lazyframe method)": [[836, "polars.LazyFrame.shift"]], "shift_and_fill() (polars.lazyframe method)": [[837, "polars.LazyFrame.shift_and_fill"]], "show_graph() (polars.lazyframe method)": [[838, "polars.LazyFrame.show_graph"]], "slice() (polars.lazyframe method)": [[839, "polars.LazyFrame.slice"]], "sort() (polars.lazyframe method)": [[840, "polars.LazyFrame.sort"]], "std() (polars.lazyframe method)": [[841, "polars.LazyFrame.std"]], "sum() (polars.lazyframe method)": [[842, "polars.LazyFrame.sum"]], "tail() (polars.lazyframe method)": [[843, "polars.LazyFrame.tail"]], "take_every() (polars.lazyframe method)": [[844, "polars.LazyFrame.take_every"]], "top_k() (polars.lazyframe method)": [[845, "polars.LazyFrame.top_k"]], "unique() (polars.lazyframe method)": [[846, "polars.LazyFrame.unique"]], "unnest() (polars.lazyframe method)": [[847, "polars.LazyFrame.unnest"]], "update() (polars.lazyframe method)": [[848, "polars.LazyFrame.update"]], "var() (polars.lazyframe method)": [[849, "polars.LazyFrame.var"]], "width (polars.lazyframe property)": [[850, "polars.LazyFrame.width"]], "with_columns() (polars.lazyframe method)": [[851, "polars.LazyFrame.with_columns"]], "with_columns_seq() (polars.lazyframe method)": [[852, "polars.LazyFrame.with_columns_seq"]], "with_context() (polars.lazyframe method)": [[853, "polars.LazyFrame.with_context"]], "with_row_count() (polars.lazyframe method)": [[854, "polars.LazyFrame.with_row_count"]], "with_row_index() (polars.lazyframe method)": [[855, "polars.LazyFrame.with_row_index"]], "agg() (polars.lazyframe.group_by.lazygroupby method)": [[856, "polars.lazyframe.group_by.LazyGroupBy.agg"]], "all() (polars.lazyframe.group_by.lazygroupby method)": [[857, "polars.lazyframe.group_by.LazyGroupBy.all"]], "apply() (polars.lazyframe.group_by.lazygroupby method)": [[858, "polars.lazyframe.group_by.LazyGroupBy.apply"]], "count() (polars.lazyframe.group_by.lazygroupby method)": [[859, "polars.lazyframe.group_by.LazyGroupBy.count"]], "first() (polars.lazyframe.group_by.lazygroupby method)": [[860, "polars.lazyframe.group_by.LazyGroupBy.first"]], "head() (polars.lazyframe.group_by.lazygroupby method)": [[861, "polars.lazyframe.group_by.LazyGroupBy.head"]], "last() (polars.lazyframe.group_by.lazygroupby method)": [[862, "polars.lazyframe.group_by.LazyGroupBy.last"]], "map_groups() (polars.lazyframe.group_by.lazygroupby method)": [[863, "polars.lazyframe.group_by.LazyGroupBy.map_groups"]], "max() (polars.lazyframe.group_by.lazygroupby method)": [[864, "polars.lazyframe.group_by.LazyGroupBy.max"]], "mean() (polars.lazyframe.group_by.lazygroupby method)": [[865, "polars.lazyframe.group_by.LazyGroupBy.mean"]], "median() (polars.lazyframe.group_by.lazygroupby method)": [[866, "polars.lazyframe.group_by.LazyGroupBy.median"]], "min() (polars.lazyframe.group_by.lazygroupby method)": [[867, "polars.lazyframe.group_by.LazyGroupBy.min"]], "n_unique() (polars.lazyframe.group_by.lazygroupby method)": [[868, "polars.lazyframe.group_by.LazyGroupBy.n_unique"]], "quantile() (polars.lazyframe.group_by.lazygroupby method)": [[869, "polars.lazyframe.group_by.LazyGroupBy.quantile"]], "sum() (polars.lazyframe.group_by.lazygroupby method)": [[870, "polars.lazyframe.group_by.LazyGroupBy.sum"]], "tail() (polars.lazyframe.group_by.lazygroupby method)": [[871, "polars.lazyframe.group_by.LazyGroupBy.tail"]], "all() (in module polars.selectors)": [[878, "polars.selectors.all"]], "by_dtype() (in module polars.selectors)": [[878, "polars.selectors.by_dtype"]], "by_name() (in module polars.selectors)": [[878, "polars.selectors.by_name"]], "categorical() (in module polars.selectors)": [[878, "polars.selectors.categorical"]], "contains() (in module polars.selectors)": [[878, "polars.selectors.contains"]], "date() (in module polars.selectors)": [[878, "polars.selectors.date"]], "datetime() (in module polars.selectors)": [[878, "polars.selectors.datetime"]], "duration() (in module polars.selectors)": [[878, "polars.selectors.duration"]], "ends_with() (in module polars.selectors)": [[878, "polars.selectors.ends_with"]], "expand_selector() (in module polars.selectors)": [[878, "polars.selectors.expand_selector"]], "first() (in module polars.selectors)": [[878, "polars.selectors.first"]], "float() (in module polars.selectors)": [[878, "polars.selectors.float"]], "integer() (in module polars.selectors)": [[878, "polars.selectors.integer"]], "is_selector() (in module polars.selectors)": [[878, "polars.selectors.is_selector"]], "last() (in module polars.selectors)": [[878, "polars.selectors.last"]], "matches() (in module polars.selectors)": [[878, "polars.selectors.matches"]], "module": [[878, "module-polars.selectors"]], "numeric() (in module polars.selectors)": [[878, "polars.selectors.numeric"]], "polars.selectors": [[878, "module-polars.selectors"]], "starts_with() (in module polars.selectors)": [[878, "polars.selectors.starts_with"]], "string() (in module polars.selectors)": [[878, "polars.selectors.string"]], "temporal() (in module polars.selectors)": [[878, "polars.selectors.temporal"]], "time() (in module polars.selectors)": [[878, "polars.selectors.time"]], "abs() (polars.series method)": [[880, "polars.Series.abs"]], "alias() (polars.series method)": [[881, "polars.Series.alias"]], "all() (polars.series method)": [[882, "polars.Series.all"]], "any() (polars.series method)": [[883, "polars.Series.any"]], "append() (polars.series method)": [[884, "polars.Series.append"]], "apply() (polars.series method)": [[885, "polars.Series.apply"]], "arccos() (polars.series method)": [[886, "polars.Series.arccos"]], "arccosh() (polars.series method)": [[887, "polars.Series.arccosh"]], "arcsin() (polars.series method)": [[888, "polars.Series.arcsin"]], "arcsinh() (polars.series method)": [[889, "polars.Series.arcsinh"]], "arctan() (polars.series method)": [[890, "polars.Series.arctan"]], "arctanh() (polars.series method)": [[891, "polars.Series.arctanh"]], "arg_max() (polars.series method)": [[892, "polars.Series.arg_max"]], "arg_min() (polars.series method)": [[893, "polars.Series.arg_min"]], "arg_sort() (polars.series method)": [[894, "polars.Series.arg_sort"]], "arg_true() (polars.series method)": [[895, "polars.Series.arg_true"]], "arg_unique() (polars.series method)": [[896, "polars.Series.arg_unique"]], "all() (polars.series.arr method)": [[897, "polars.Series.arr.all"]], "any() (polars.series.arr method)": [[898, "polars.Series.arr.any"]], "arg_max() (polars.series.arr method)": [[899, "polars.Series.arr.arg_max"]], "arg_min() (polars.series.arr method)": [[900, "polars.Series.arr.arg_min"]], "contains() (polars.series.arr method)": [[901, "polars.Series.arr.contains"]], "count_matches() (polars.series.arr method)": [[902, "polars.Series.arr.count_matches"]], "first() (polars.series.arr method)": [[903, "polars.Series.arr.first"]], "get() (polars.series.arr method)": [[904, "polars.Series.arr.get"]], "join() (polars.series.arr method)": [[905, "polars.Series.arr.join"]], "last() (polars.series.arr method)": [[906, "polars.Series.arr.last"]], "max() (polars.series.arr method)": [[907, "polars.Series.arr.max"]], "min() (polars.series.arr method)": [[908, "polars.Series.arr.min"]], "reverse() (polars.series.arr method)": [[909, "polars.Series.arr.reverse"]], "sort() (polars.series.arr method)": [[910, "polars.Series.arr.sort"]], "sum() (polars.series.arr method)": [[911, "polars.Series.arr.sum"]], "to_list() (polars.series.arr method)": [[912, "polars.Series.arr.to_list"]], "unique() (polars.series.arr method)": [[913, "polars.Series.arr.unique"]], "contains() (polars.series.bin method)": [[914, "polars.Series.bin.contains"]], "decode() (polars.series.bin method)": [[915, "polars.Series.bin.decode"]], "encode() (polars.series.bin method)": [[916, "polars.Series.bin.encode"]], "ends_with() (polars.series.bin method)": [[917, "polars.Series.bin.ends_with"]], "starts_with() (polars.series.bin method)": [[918, "polars.Series.bin.starts_with"]], "bottom_k() (polars.series method)": [[919, "polars.Series.bottom_k"]], "cast() (polars.series method)": [[920, "polars.Series.cast"]], "get_categories() (polars.series.cat method)": [[921, "polars.Series.cat.get_categories"]], "is_local() (polars.series.cat method)": [[922, "polars.Series.cat.is_local"]], "set_ordering() (polars.series.cat method)": [[923, "polars.Series.cat.set_ordering"]], "to_local() (polars.series.cat method)": [[924, "polars.Series.cat.to_local"]], "uses_lexical_ordering() (polars.series.cat method)": [[925, "polars.Series.cat.uses_lexical_ordering"]], "cbrt() (polars.series method)": [[926, "polars.Series.cbrt"]], "ceil() (polars.series method)": [[927, "polars.Series.ceil"]], "chunk_lengths() (polars.series method)": [[928, "polars.Series.chunk_lengths"]], "clear() (polars.series method)": [[929, "polars.Series.clear"]], "clip() (polars.series method)": [[930, "polars.Series.clip"]], "clip_max() (polars.series method)": [[931, "polars.Series.clip_max"]], "clip_min() (polars.series method)": [[932, "polars.Series.clip_min"]], "clone() (polars.series method)": [[933, "polars.Series.clone"]], "cos() (polars.series method)": [[934, "polars.Series.cos"]], "cosh() (polars.series method)": [[935, "polars.Series.cosh"]], "cot() (polars.series method)": [[936, "polars.Series.cot"]], "cum_max() (polars.series method)": [[937, "polars.Series.cum_max"]], "cum_min() (polars.series method)": [[938, "polars.Series.cum_min"]], "cum_prod() (polars.series method)": [[939, "polars.Series.cum_prod"]], "cum_sum() (polars.series method)": [[940, "polars.Series.cum_sum"]], "cummax() (polars.series method)": [[941, "polars.Series.cummax"]], "cummin() (polars.series method)": [[942, "polars.Series.cummin"]], "cumprod() (polars.series method)": [[943, "polars.Series.cumprod"]], "cumsum() (polars.series method)": [[944, "polars.Series.cumsum"]], "cumulative_eval() (polars.series method)": [[945, "polars.Series.cumulative_eval"]], "cut() (polars.series method)": [[946, "polars.Series.cut"]], "describe() (polars.series method)": [[947, "polars.Series.describe"]], "diff() (polars.series method)": [[948, "polars.Series.diff"]], "dot() (polars.series method)": [[949, "polars.Series.dot"]], "drop_nans() (polars.series method)": [[950, "polars.Series.drop_nans"]], "drop_nulls() (polars.series method)": [[951, "polars.Series.drop_nulls"]], "base_utc_offset() (polars.series.dt method)": [[952, "polars.Series.dt.base_utc_offset"]], "cast_time_unit() (polars.series.dt method)": [[953, "polars.Series.dt.cast_time_unit"]], "combine() (polars.series.dt method)": [[954, "polars.Series.dt.combine"]], "convert_time_zone() (polars.series.dt method)": [[955, "polars.Series.dt.convert_time_zone"]], "date() (polars.series.dt method)": [[956, "polars.Series.dt.date"]], "datetime() (polars.series.dt method)": [[957, "polars.Series.dt.datetime"]], "day() (polars.series.dt method)": [[958, "polars.Series.dt.day"]], "days() (polars.series.dt method)": [[959, "polars.Series.dt.days"]], "dst_offset() (polars.series.dt method)": [[960, "polars.Series.dt.dst_offset"]], "epoch() (polars.series.dt method)": [[961, "polars.Series.dt.epoch"]], "hour() (polars.series.dt method)": [[962, "polars.Series.dt.hour"]], "hours() (polars.series.dt method)": [[963, "polars.Series.dt.hours"]], "is_leap_year() (polars.series.dt method)": [[964, "polars.Series.dt.is_leap_year"]], "iso_year() (polars.series.dt method)": [[965, "polars.Series.dt.iso_year"]], "max() (polars.series.dt method)": [[966, "polars.Series.dt.max"]], "mean() (polars.series.dt method)": [[967, "polars.Series.dt.mean"]], "median() (polars.series.dt method)": [[968, "polars.Series.dt.median"]], "microsecond() (polars.series.dt method)": [[969, "polars.Series.dt.microsecond"]], "microseconds() (polars.series.dt method)": [[970, "polars.Series.dt.microseconds"]], "millisecond() (polars.series.dt method)": [[971, "polars.Series.dt.millisecond"]], "milliseconds() (polars.series.dt method)": [[972, "polars.Series.dt.milliseconds"]], "min() (polars.series.dt method)": [[973, "polars.Series.dt.min"]], "minute() (polars.series.dt method)": [[974, "polars.Series.dt.minute"]], "minutes() (polars.series.dt method)": [[975, "polars.Series.dt.minutes"]], "month() (polars.series.dt method)": [[976, "polars.Series.dt.month"]], "month_end() (polars.series.dt method)": [[977, "polars.Series.dt.month_end"]], "month_start() (polars.series.dt method)": [[978, "polars.Series.dt.month_start"]], "nanosecond() (polars.series.dt method)": [[979, "polars.Series.dt.nanosecond"]], "nanoseconds() (polars.series.dt method)": [[980, "polars.Series.dt.nanoseconds"]], "offset_by() (polars.series.dt method)": [[981, "polars.Series.dt.offset_by"]], "ordinal_day() (polars.series.dt method)": [[982, "polars.Series.dt.ordinal_day"]], "quarter() (polars.series.dt method)": [[983, "polars.Series.dt.quarter"]], "replace_time_zone() (polars.series.dt method)": [[984, "polars.Series.dt.replace_time_zone"]], "round() (polars.series.dt method)": [[985, "polars.Series.dt.round"]], "second() (polars.series.dt method)": [[986, "polars.Series.dt.second"]], "seconds() (polars.series.dt method)": [[987, "polars.Series.dt.seconds"]], "strftime() (polars.series.dt method)": [[988, "polars.Series.dt.strftime"]], "time() (polars.series.dt method)": [[989, "polars.Series.dt.time"]], "timestamp() (polars.series.dt method)": [[990, "polars.Series.dt.timestamp"]], "to_string() (polars.series.dt method)": [[991, "polars.Series.dt.to_string"]], "total_days() (polars.series.dt method)": [[992, "polars.Series.dt.total_days"]], "total_hours() (polars.series.dt method)": [[993, "polars.Series.dt.total_hours"]], "total_microseconds() (polars.series.dt method)": [[994, "polars.Series.dt.total_microseconds"]], "total_milliseconds() (polars.series.dt method)": [[995, "polars.Series.dt.total_milliseconds"]], "total_minutes() (polars.series.dt method)": [[996, "polars.Series.dt.total_minutes"]], "total_nanoseconds() (polars.series.dt method)": [[997, "polars.Series.dt.total_nanoseconds"]], "total_seconds() (polars.series.dt method)": [[998, "polars.Series.dt.total_seconds"]], "truncate() (polars.series.dt method)": [[999, "polars.Series.dt.truncate"]], "week() (polars.series.dt method)": [[1000, "polars.Series.dt.week"]], "weekday() (polars.series.dt method)": [[1001, "polars.Series.dt.weekday"]], "with_time_unit() (polars.series.dt method)": [[1002, "polars.Series.dt.with_time_unit"]], "year() (polars.series.dt method)": [[1003, "polars.Series.dt.year"]], "dtype (polars.series attribute)": [[1004, "polars.Series.dtype"]], "entropy() (polars.series method)": [[1005, "polars.Series.entropy"]], "equals() (polars.series method)": [[1006, "polars.Series.equals"]], "estimated_size() (polars.series method)": [[1007, "polars.Series.estimated_size"]], "ewm_mean() (polars.series method)": [[1008, "polars.Series.ewm_mean"]], "ewm_std() (polars.series method)": [[1009, "polars.Series.ewm_std"]], "ewm_var() (polars.series method)": [[1010, "polars.Series.ewm_var"]], "exp() (polars.series method)": [[1011, "polars.Series.exp"]], "explode() (polars.series method)": [[1012, "polars.Series.explode"]], "extend() (polars.series method)": [[1013, "polars.Series.extend"]], "extend_constant() (polars.series method)": [[1014, "polars.Series.extend_constant"]], "fill_nan() (polars.series method)": [[1015, "polars.Series.fill_nan"]], "fill_null() (polars.series method)": [[1016, "polars.Series.fill_null"]], "filter() (polars.series method)": [[1017, "polars.Series.filter"]], "flags (polars.series attribute)": [[1018, "polars.Series.flags"]], "floor() (polars.series method)": [[1019, "polars.Series.floor"]], "gather() (polars.series method)": [[1020, "polars.Series.gather"]], "gather_every() (polars.series method)": [[1021, "polars.Series.gather_every"]], "get_chunks() (polars.series method)": [[1022, "polars.Series.get_chunks"]], "has_validity() (polars.series method)": [[1023, "polars.Series.has_validity"]], "hash() (polars.series method)": [[1024, "polars.Series.hash"]], "head() (polars.series method)": [[1025, "polars.Series.head"]], "hist() (polars.series method)": [[1026, "polars.Series.hist"]], "implode() (polars.series method)": [[1027, "polars.Series.implode"]], "inner_dtype (polars.series attribute)": [[1028, "polars.Series.inner_dtype"]], "interpolate() (polars.series method)": [[1029, "polars.Series.interpolate"]], "is_between() (polars.series method)": [[1030, "polars.Series.is_between"]], "is_boolean() (polars.series method)": [[1031, "polars.Series.is_boolean"]], "is_duplicated() (polars.series method)": [[1032, "polars.Series.is_duplicated"]], "is_empty() (polars.series method)": [[1033, "polars.Series.is_empty"]], "is_finite() (polars.series method)": [[1034, "polars.Series.is_finite"]], "is_first() (polars.series method)": [[1035, "polars.Series.is_first"]], "is_first_distinct() (polars.series method)": [[1036, "polars.Series.is_first_distinct"]], "is_float() (polars.series method)": [[1037, "polars.Series.is_float"]], "is_in() (polars.series method)": [[1038, "polars.Series.is_in"]], "is_infinite() (polars.series method)": [[1039, "polars.Series.is_infinite"]], "is_integer() (polars.series method)": [[1040, "polars.Series.is_integer"]], "is_last() (polars.series method)": [[1041, "polars.Series.is_last"]], "is_last_distinct() (polars.series method)": [[1042, "polars.Series.is_last_distinct"]], "is_nan() (polars.series method)": [[1043, "polars.Series.is_nan"]], "is_not_nan() (polars.series method)": [[1044, "polars.Series.is_not_nan"]], "is_not_null() (polars.series method)": [[1045, "polars.Series.is_not_null"]], "is_null() (polars.series method)": [[1046, "polars.Series.is_null"]], "is_numeric() (polars.series method)": [[1047, "polars.Series.is_numeric"]], "is_sorted() (polars.series method)": [[1048, "polars.Series.is_sorted"]], "is_temporal() (polars.series method)": [[1049, "polars.Series.is_temporal"]], "is_unique() (polars.series method)": [[1050, "polars.Series.is_unique"]], "is_utf8() (polars.series method)": [[1051, "polars.Series.is_utf8"]], "item() (polars.series method)": [[1052, "polars.Series.item"]], "kurtosis() (polars.series method)": [[1053, "polars.Series.kurtosis"]], "len() (polars.series method)": [[1054, "polars.Series.len"]], "limit() (polars.series method)": [[1055, "polars.Series.limit"]], "all() (polars.series.list method)": [[1056, "polars.Series.list.all"]], "any() (polars.series.list method)": [[1057, "polars.Series.list.any"]], "arg_max() (polars.series.list method)": [[1058, "polars.Series.list.arg_max"]], "arg_min() (polars.series.list method)": [[1059, "polars.Series.list.arg_min"]], "concat() (polars.series.list method)": [[1060, "polars.Series.list.concat"]], "contains() (polars.series.list method)": [[1061, "polars.Series.list.contains"]], "count_match() (polars.series.list method)": [[1062, "polars.Series.list.count_match"]], "count_matches() (polars.series.list method)": [[1063, "polars.Series.list.count_matches"]], "diff() (polars.series.list method)": [[1064, "polars.Series.list.diff"]], "drop_nulls() (polars.series.list method)": [[1065, "polars.Series.list.drop_nulls"]], "eval() (polars.series.list method)": [[1066, "polars.Series.list.eval"]], "explode() (polars.series.list method)": [[1067, "polars.Series.list.explode"]], "first() (polars.series.list method)": [[1068, "polars.Series.list.first"]], "gather() (polars.series.list method)": [[1069, "polars.Series.list.gather"]], "get() (polars.series.list method)": [[1070, "polars.Series.list.get"]], "head() (polars.series.list method)": [[1071, "polars.Series.list.head"]], "join() (polars.series.list method)": [[1072, "polars.Series.list.join"]], "last() (polars.series.list method)": [[1073, "polars.Series.list.last"]], "len() (polars.series.list method)": [[1074, "polars.Series.list.len"]], "lengths() (polars.series.list method)": [[1075, "polars.Series.list.lengths"]], "max() (polars.series.list method)": [[1076, "polars.Series.list.max"]], "mean() (polars.series.list method)": [[1077, "polars.Series.list.mean"]], "min() (polars.series.list method)": [[1078, "polars.Series.list.min"]], "reverse() (polars.series.list method)": [[1079, "polars.Series.list.reverse"]], "sample() (polars.series.list method)": [[1080, "polars.Series.list.sample"]], "set_difference() (polars.series.list method)": [[1081, "polars.Series.list.set_difference"]], "set_intersection() (polars.series.list method)": [[1082, "polars.Series.list.set_intersection"]], "set_symmetric_difference() (polars.series.list method)": [[1083, "polars.Series.list.set_symmetric_difference"]], "set_union() (polars.series.list method)": [[1084, "polars.Series.list.set_union"]], "shift() (polars.series.list method)": [[1085, "polars.Series.list.shift"]], "slice() (polars.series.list method)": [[1086, "polars.Series.list.slice"]], "sort() (polars.series.list method)": [[1087, "polars.Series.list.sort"]], "sum() (polars.series.list method)": [[1088, "polars.Series.list.sum"]], "tail() (polars.series.list method)": [[1089, "polars.Series.list.tail"]], "take() (polars.series.list method)": [[1090, "polars.Series.list.take"]], "to_array() (polars.series.list method)": [[1091, "polars.Series.list.to_array"]], "to_struct() (polars.series.list method)": [[1092, "polars.Series.list.to_struct"]], "unique() (polars.series.list method)": [[1093, "polars.Series.list.unique"]], "log() (polars.series method)": [[1094, "polars.Series.log"]], "log10() (polars.series method)": [[1095, "polars.Series.log10"]], "log1p() (polars.series method)": [[1096, "polars.Series.log1p"]], "lower_bound() (polars.series method)": [[1097, "polars.Series.lower_bound"]], "map_dict() (polars.series method)": [[1098, "polars.Series.map_dict"]], "map_elements() (polars.series method)": [[1099, "polars.Series.map_elements"]], "max() (polars.series method)": [[1100, "polars.Series.max"]], "mean() (polars.series method)": [[1101, "polars.Series.mean"]], "median() (polars.series method)": [[1102, "polars.Series.median"]], "min() (polars.series method)": [[1103, "polars.Series.min"]], "mode() (polars.series method)": [[1104, "polars.Series.mode"]], "n_chunks() (polars.series method)": [[1105, "polars.Series.n_chunks"]], "n_unique() (polars.series method)": [[1106, "polars.Series.n_unique"]], "name (polars.series attribute)": [[1107, "polars.Series.name"]], "nan_max() (polars.series method)": [[1108, "polars.Series.nan_max"]], "nan_min() (polars.series method)": [[1109, "polars.Series.nan_min"]], "new_from_index() (polars.series method)": [[1110, "polars.Series.new_from_index"]], "not_() (polars.series method)": [[1111, "polars.Series.not_"]], "null_count() (polars.series method)": [[1112, "polars.Series.null_count"]], "pct_change() (polars.series method)": [[1113, "polars.Series.pct_change"]], "peak_max() (polars.series method)": [[1114, "polars.Series.peak_max"]], "peak_min() (polars.series method)": [[1115, "polars.Series.peak_min"]], "product() (polars.series method)": [[1116, "polars.Series.product"]], "qcut() (polars.series method)": [[1117, "polars.Series.qcut"]], "quantile() (polars.series method)": [[1118, "polars.Series.quantile"]], "rank() (polars.series method)": [[1119, "polars.Series.rank"]], "rechunk() (polars.series method)": [[1120, "polars.Series.rechunk"]], "reinterpret() (polars.series method)": [[1121, "polars.Series.reinterpret"]], "rename() (polars.series method)": [[1122, "polars.Series.rename"]], "replace() (polars.series method)": [[1123, "polars.Series.replace"]], "reshape() (polars.series method)": [[1124, "polars.Series.reshape"]], "reverse() (polars.series method)": [[1125, "polars.Series.reverse"]], "rle() (polars.series method)": [[1126, "polars.Series.rle"]], "rle_id() (polars.series method)": [[1127, "polars.Series.rle_id"]], "rolling_apply() (polars.series method)": [[1128, "polars.Series.rolling_apply"]], "rolling_map() (polars.series method)": [[1129, "polars.Series.rolling_map"]], "rolling_max() (polars.series method)": [[1130, "polars.Series.rolling_max"]], "rolling_mean() (polars.series method)": [[1131, "polars.Series.rolling_mean"]], "rolling_median() (polars.series method)": [[1132, "polars.Series.rolling_median"]], "rolling_min() (polars.series method)": [[1133, "polars.Series.rolling_min"]], "rolling_quantile() (polars.series method)": [[1134, "polars.Series.rolling_quantile"]], "rolling_skew() (polars.series method)": [[1135, "polars.Series.rolling_skew"]], "rolling_std() (polars.series method)": [[1136, "polars.Series.rolling_std"]], "rolling_sum() (polars.series method)": [[1137, "polars.Series.rolling_sum"]], "rolling_var() (polars.series method)": [[1138, "polars.Series.rolling_var"]], "round() (polars.series method)": [[1139, "polars.Series.round"]], "round_sig_figs() (polars.series method)": [[1140, "polars.Series.round_sig_figs"]], "sample() (polars.series method)": [[1141, "polars.Series.sample"]], "scatter() (polars.series method)": [[1142, "polars.Series.scatter"]], "search_sorted() (polars.series method)": [[1143, "polars.Series.search_sorted"]], "series_equal() (polars.series method)": [[1144, "polars.Series.series_equal"]], "set() (polars.series method)": [[1145, "polars.Series.set"]], "set_at_idx() (polars.series method)": [[1146, "polars.Series.set_at_idx"]], "set_sorted() (polars.series method)": [[1147, "polars.Series.set_sorted"]], "shape (polars.series attribute)": [[1148, "polars.Series.shape"]], "shift() (polars.series method)": [[1149, "polars.Series.shift"]], "shift_and_fill() (polars.series method)": [[1150, "polars.Series.shift_and_fill"]], "shrink_dtype() (polars.series method)": [[1151, "polars.Series.shrink_dtype"]], "shrink_to_fit() (polars.series method)": [[1152, "polars.Series.shrink_to_fit"]], "shuffle() (polars.series method)": [[1153, "polars.Series.shuffle"]], "sign() (polars.series method)": [[1154, "polars.Series.sign"]], "sin() (polars.series method)": [[1155, "polars.Series.sin"]], "sinh() (polars.series method)": [[1156, "polars.Series.sinh"]], "skew() (polars.series method)": [[1157, "polars.Series.skew"]], "slice() (polars.series method)": [[1158, "polars.Series.slice"]], "sort() (polars.series method)": [[1159, "polars.Series.sort"]], "sqrt() (polars.series method)": [[1160, "polars.Series.sqrt"]], "std() (polars.series method)": [[1161, "polars.Series.std"]], "concat() (polars.series.str method)": [[1162, "polars.Series.str.concat"]], "contains() (polars.series.str method)": [[1163, "polars.Series.str.contains"]], "contains_any() (polars.series.str method)": [[1164, "polars.Series.str.contains_any"]], "count_match() (polars.series.str method)": [[1165, "polars.Series.str.count_match"]], "count_matches() (polars.series.str method)": [[1166, "polars.Series.str.count_matches"]], "decode() (polars.series.str method)": [[1167, "polars.Series.str.decode"]], "encode() (polars.series.str method)": [[1168, "polars.Series.str.encode"]], "ends_with() (polars.series.str method)": [[1169, "polars.Series.str.ends_with"]], "explode() (polars.series.str method)": [[1170, "polars.Series.str.explode"]], "extract() (polars.series.str method)": [[1171, "polars.Series.str.extract"]], "extract_all() (polars.series.str method)": [[1172, "polars.Series.str.extract_all"]], "extract_groups() (polars.series.str method)": [[1173, "polars.Series.str.extract_groups"]], "find() (polars.series.str method)": [[1174, "polars.Series.str.find"]], "json_decode() (polars.series.str method)": [[1175, "polars.Series.str.json_decode"]], "json_extract() (polars.series.str method)": [[1176, "polars.Series.str.json_extract"]], "json_path_match() (polars.series.str method)": [[1177, "polars.Series.str.json_path_match"]], "len_bytes() (polars.series.str method)": [[1178, "polars.Series.str.len_bytes"]], "len_chars() (polars.series.str method)": [[1179, "polars.Series.str.len_chars"]], "lengths() (polars.series.str method)": [[1180, "polars.Series.str.lengths"]], "ljust() (polars.series.str method)": [[1181, "polars.Series.str.ljust"]], "lstrip() (polars.series.str method)": [[1182, "polars.Series.str.lstrip"]], "n_chars() (polars.series.str method)": [[1183, "polars.Series.str.n_chars"]], "pad_end() (polars.series.str method)": [[1184, "polars.Series.str.pad_end"]], "pad_start() (polars.series.str method)": [[1185, "polars.Series.str.pad_start"]], "parse_int() (polars.series.str method)": [[1186, "polars.Series.str.parse_int"]], "replace() (polars.series.str method)": [[1187, "polars.Series.str.replace"]], "replace_all() (polars.series.str method)": [[1188, "polars.Series.str.replace_all"]], "replace_many() (polars.series.str method)": [[1189, "polars.Series.str.replace_many"]], "reverse() (polars.series.str method)": [[1190, "polars.Series.str.reverse"]], "rjust() (polars.series.str method)": [[1191, "polars.Series.str.rjust"]], "rstrip() (polars.series.str method)": [[1192, "polars.Series.str.rstrip"]], "slice() (polars.series.str method)": [[1193, "polars.Series.str.slice"]], "split() (polars.series.str method)": [[1194, "polars.Series.str.split"]], "split_exact() (polars.series.str method)": [[1195, "polars.Series.str.split_exact"]], "splitn() (polars.series.str method)": [[1196, "polars.Series.str.splitn"]], "starts_with() (polars.series.str method)": [[1197, "polars.Series.str.starts_with"]], "strip() (polars.series.str method)": [[1198, "polars.Series.str.strip"]], "strip_chars() (polars.series.str method)": [[1199, "polars.Series.str.strip_chars"]], "strip_chars_end() (polars.series.str method)": [[1200, "polars.Series.str.strip_chars_end"]], "strip_chars_start() (polars.series.str method)": [[1201, "polars.Series.str.strip_chars_start"]], "strip_prefix() (polars.series.str method)": [[1202, "polars.Series.str.strip_prefix"]], "strip_suffix() (polars.series.str method)": [[1203, "polars.Series.str.strip_suffix"]], "strptime() (polars.series.str method)": [[1204, "polars.Series.str.strptime"]], "to_date() (polars.series.str method)": [[1205, "polars.Series.str.to_date"]], "to_datetime() (polars.series.str method)": [[1206, "polars.Series.str.to_datetime"]], "to_decimal() (polars.series.str method)": [[1207, "polars.Series.str.to_decimal"]], "to_integer() (polars.series.str method)": [[1208, "polars.Series.str.to_integer"]], "to_lowercase() (polars.series.str method)": [[1209, "polars.Series.str.to_lowercase"]], "to_time() (polars.series.str method)": [[1210, "polars.Series.str.to_time"]], "to_titlecase() (polars.series.str method)": [[1211, "polars.Series.str.to_titlecase"]], "to_uppercase() (polars.series.str method)": [[1212, "polars.Series.str.to_uppercase"]], "zfill() (polars.series.str method)": [[1213, "polars.Series.str.zfill"]], "field() (polars.series.struct method)": [[1214, "polars.Series.struct.field"]], "fields (polars.series.struct attribute)": [[1215, "polars.Series.struct.fields"]], "json_encode() (polars.series.struct method)": [[1216, "polars.Series.struct.json_encode"]], "rename_fields() (polars.series.struct method)": [[1217, "polars.Series.struct.rename_fields"]], "schema (polars.series.struct attribute)": [[1218, "polars.Series.struct.schema"]], "unnest() (polars.series.struct method)": [[1219, "polars.Series.struct.unnest"]], "sum() (polars.series method)": [[1220, "polars.Series.sum"]], "tail() (polars.series method)": [[1221, "polars.Series.tail"]], "take() (polars.series method)": [[1222, "polars.Series.take"]], "take_every() (polars.series method)": [[1223, "polars.Series.take_every"]], "tan() (polars.series method)": [[1224, "polars.Series.tan"]], "tanh() (polars.series method)": [[1225, "polars.Series.tanh"]], "to_arrow() (polars.series method)": [[1226, "polars.Series.to_arrow"]], "to_dummies() (polars.series method)": [[1227, "polars.Series.to_dummies"]], "to_frame() (polars.series method)": [[1228, "polars.Series.to_frame"]], "to_init_repr() (polars.series method)": [[1229, "polars.Series.to_init_repr"]], "to_list() (polars.series method)": [[1230, "polars.Series.to_list"]], "to_numpy() (polars.series method)": [[1231, "polars.Series.to_numpy"]], "to_pandas() (polars.series method)": [[1232, "polars.Series.to_pandas"]], "to_physical() (polars.series method)": [[1233, "polars.Series.to_physical"]], "top_k() (polars.series method)": [[1234, "polars.Series.top_k"]], "unique() (polars.series method)": [[1235, "polars.Series.unique"]], "unique_counts() (polars.series method)": [[1236, "polars.Series.unique_counts"]], "upper_bound() (polars.series method)": [[1237, "polars.Series.upper_bound"]], "value_counts() (polars.series method)": [[1238, "polars.Series.value_counts"]], "var() (polars.series method)": [[1239, "polars.Series.var"]], "view() (polars.series method)": [[1240, "polars.Series.view"]], "zip_with() (polars.series method)": [[1241, "polars.Series.zip_with"]], "sqlcontext (class in polars)": [[1258, "polars.SQLContext"]], "__enter__() (polars.sqlcontext method)": [[1258, "polars.SQLContext.__enter__"]], "__exit__() (polars.sqlcontext method)": [[1258, "polars.SQLContext.__exit__"]], "__init__() (polars.sqlcontext method)": [[1258, "polars.SQLContext.__init__"]]}})